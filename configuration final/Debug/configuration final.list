
configuration final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fb8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000784  0800a0c8  0800a0c8  0000b0c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a84c  0800a84c  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a84c  0800a84c  0000b84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a854  0800a854  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a854  0800a854  0000b854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a858  0800a858  0000b858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a85c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  200001d8  0800aa34  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  0800aa34  0000c84c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8d5  00000000  00000000  0000c201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265c  00000000  00000000  00018ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0001b138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000885  00000000  00000000  0001bc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019643  00000000  00000000  0001c505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f009  00000000  00000000  00035b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af0d  00000000  00000000  00044b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfa5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b4  00000000  00000000  000cfaa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d4058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a0b0 	.word	0x0800a0b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800a0b0 	.word	0x0800a0b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	2200      	movs	r2, #0
 8001160:	2300      	movs	r3, #0
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f7ff fc29 	bl	80009bc <__aeabi_dcmplt>
 800116a:	b928      	cbnz	r0, 8001178 <__aeabi_d2lz+0x1c>
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001174:	f000 b80a 	b.w	800118c <__aeabi_d2ulz>
 8001178:	4620      	mov	r0, r4
 800117a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800117e:	f000 f805 	bl	800118c <__aeabi_d2ulz>
 8001182:	4240      	negs	r0, r0
 8001184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop

0800118c <__aeabi_d2ulz>:
 800118c:	b5d0      	push	{r4, r6, r7, lr}
 800118e:	2200      	movs	r2, #0
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__aeabi_d2ulz+0x34>)
 8001192:	4606      	mov	r6, r0
 8001194:	460f      	mov	r7, r1
 8001196:	f7ff f99f 	bl	80004d8 <__aeabi_dmul>
 800119a:	f7ff fc75 	bl	8000a88 <__aeabi_d2uiz>
 800119e:	4604      	mov	r4, r0
 80011a0:	f7ff f920 	bl	80003e4 <__aeabi_ui2d>
 80011a4:	2200      	movs	r2, #0
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <__aeabi_d2ulz+0x38>)
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4630      	mov	r0, r6
 80011b2:	4639      	mov	r1, r7
 80011b4:	f7fe ffd8 	bl	8000168 <__aeabi_dsub>
 80011b8:	f7ff fc66 	bl	8000a88 <__aeabi_d2uiz>
 80011bc:	4621      	mov	r1, r4
 80011be:	bdd0      	pop	{r4, r6, r7, pc}
 80011c0:	3df00000 	.word	0x3df00000
 80011c4:	41f00000 	.word	0x41f00000

080011c8 <lireTensionBatterie>:
char buffer1[400];
uint16_t raw_batterie;
uint16_t raw_tension_stable;
int pourcentageBatterie;
// Fonction pour lire la valeur de la batterie
int lireTensionBatterie() {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	@ 0x28
 80011cc:	af02      	add	r7, sp, #8
    GPIO_InitTypeDef GPIO_InitStruct;

    // Activer l'horloge pour le port GPIO de la batterie
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b60      	ldr	r3, [pc, #384]	@ (8001350 <lireTensionBatterie+0x188>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001350 <lireTensionBatterie+0x188>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	6193      	str	r3, [r2, #24]
 80011da:	4b5d      	ldr	r3, [pc, #372]	@ (8001350 <lireTensionBatterie+0x188>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

    // Configurer le pin GPIO de la batterie pour une entrée analogique
    GPIO_InitStruct.Pin = BATTERIE_PIN;
 80011e6:	2301      	movs	r3, #1
 80011e8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ea:	2303      	movs	r3, #3
 80011ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BATTERIE_PORT, &GPIO_InitStruct);
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4619      	mov	r1, r3
 80011f8:	4856      	ldr	r0, [pc, #344]	@ (8001354 <lireTensionBatterie+0x18c>)
 80011fa:	f002 f8f3 	bl	80033e4 <HAL_GPIO_Init>

    // Attendre un court instant pour que le GPIO se stabilise
    HAL_Delay(10);
 80011fe:	200a      	movs	r0, #10
 8001200:	f001 fbbc 	bl	800297c <HAL_Delay>

    // Lecture de la valeur analogique
    HAL_ADC_Start(&hadc1);
 8001204:	4854      	ldr	r0, [pc, #336]	@ (8001358 <lireTensionBatterie+0x190>)
 8001206:	f001 fcb5 	bl	8002b74 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800120a:	f04f 31ff 	mov.w	r1, #4294967295
 800120e:	4852      	ldr	r0, [pc, #328]	@ (8001358 <lireTensionBatterie+0x190>)
 8001210:	f001 fd5e 	bl	8002cd0 <HAL_ADC_PollForConversion>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d17b      	bne.n	8001312 <lireTensionBatterie+0x14a>
        HAL_ADC_PollForConversion(&hadc1, 300);
 800121a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800121e:	484e      	ldr	r0, [pc, #312]	@ (8001358 <lireTensionBatterie+0x190>)
 8001220:	f001 fd56 	bl	8002cd0 <HAL_ADC_PollForConversion>
        raw_batterie = HAL_ADC_GetValue(&hadc1);
 8001224:	484c      	ldr	r0, [pc, #304]	@ (8001358 <lireTensionBatterie+0x190>)
 8001226:	f001 fe59 	bl	8002edc <HAL_ADC_GetValue>
 800122a:	4603      	mov	r3, r0
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b4b      	ldr	r3, [pc, #300]	@ (800135c <lireTensionBatterie+0x194>)
 8001230:	801a      	strh	r2, [r3, #0]
        float tensionBatterie = raw_batterie * (3.3 / 4096) * 1.054;
 8001232:	4b4a      	ldr	r3, [pc, #296]	@ (800135c <lireTensionBatterie+0x194>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f8e4 	bl	8000404 <__aeabi_i2d>
 800123c:	a340      	add	r3, pc, #256	@ (adr r3, 8001340 <lireTensionBatterie+0x178>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f949 	bl	80004d8 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	a33e      	add	r3, pc, #248	@ (adr r3, 8001348 <lireTensionBatterie+0x180>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff f940 	bl	80004d8 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc32 	bl	8000ac8 <__aeabi_d2f>
 8001264:	4603      	mov	r3, r0
 8001266:	61bb      	str	r3, [r7, #24]
        tensionBatterie = (tensionBatterie * 37500) / 7500;
 8001268:	493d      	ldr	r1, [pc, #244]	@ (8001360 <lireTensionBatterie+0x198>)
 800126a:	69b8      	ldr	r0, [r7, #24]
 800126c:	f7ff fd8a 	bl	8000d84 <__aeabi_fmul>
 8001270:	4603      	mov	r3, r0
 8001272:	493c      	ldr	r1, [pc, #240]	@ (8001364 <lireTensionBatterie+0x19c>)
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fe39 	bl	8000eec <__aeabi_fdiv>
 800127a:	4603      	mov	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]

        // Calcul du pourcentage de charge de la batterie
        int pourcentageBatterie;
        if (tensionBatterie > 13) {
 800127e:	493a      	ldr	r1, [pc, #232]	@ (8001368 <lireTensionBatterie+0x1a0>)
 8001280:	69b8      	ldr	r0, [r7, #24]
 8001282:	f7ff ff3b 	bl	80010fc <__aeabi_fcmpgt>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <lireTensionBatterie+0xca>
            pourcentageBatterie = 90;
 800128c:	235a      	movs	r3, #90	@ 0x5a
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	e024      	b.n	80012dc <lireTensionBatterie+0x114>
        } else if (tensionBatterie > 10 && tensionBatterie <= 13) {
 8001292:	4936      	ldr	r1, [pc, #216]	@ (800136c <lireTensionBatterie+0x1a4>)
 8001294:	69b8      	ldr	r0, [r7, #24]
 8001296:	f7ff ff31 	bl	80010fc <__aeabi_fcmpgt>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d01b      	beq.n	80012d8 <lireTensionBatterie+0x110>
 80012a0:	4931      	ldr	r1, [pc, #196]	@ (8001368 <lireTensionBatterie+0x1a0>)
 80012a2:	69b8      	ldr	r0, [r7, #24]
 80012a4:	f7ff ff16 	bl	80010d4 <__aeabi_fcmple>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d014      	beq.n	80012d8 <lireTensionBatterie+0x110>
            pourcentageBatterie = ((tensionBatterie - 10) / (13 - 10)) * 100;
 80012ae:	492f      	ldr	r1, [pc, #188]	@ (800136c <lireTensionBatterie+0x1a4>)
 80012b0:	69b8      	ldr	r0, [r7, #24]
 80012b2:	f7ff fc5d 	bl	8000b70 <__aeabi_fsub>
 80012b6:	4603      	mov	r3, r0
 80012b8:	492d      	ldr	r1, [pc, #180]	@ (8001370 <lireTensionBatterie+0x1a8>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fe16 	bl	8000eec <__aeabi_fdiv>
 80012c0:	4603      	mov	r3, r0
 80012c2:	492c      	ldr	r1, [pc, #176]	@ (8001374 <lireTensionBatterie+0x1ac>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fd5d 	bl	8000d84 <__aeabi_fmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff1f 	bl	8001110 <__aeabi_f2iz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	e001      	b.n	80012dc <lireTensionBatterie+0x114>
        } else {
            pourcentageBatterie = 5;
 80012d8:	2305      	movs	r3, #5
 80012da:	61fb      	str	r3, [r7, #28]
        }

        // Affichage de la tension de la batterie via UART
        snprintf(buffer1, sizeof(buffer1), "\nLe pourcentage de la batterie en pourcentage : %d \nLa tension du batterie %.2f", pourcentageBatterie, tensionBatterie);
 80012dc:	69b8      	ldr	r0, [r7, #24]
 80012de:	f7ff f8a3 	bl	8000428 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	e9cd 2300 	strd	r2, r3, [sp]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	4a22      	ldr	r2, [pc, #136]	@ (8001378 <lireTensionBatterie+0x1b0>)
 80012ee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80012f2:	4822      	ldr	r0, [pc, #136]	@ (800137c <lireTensionBatterie+0x1b4>)
 80012f4:	f004 fe32 	bl	8005f5c <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, strlen(buffer1), HAL_MAX_DELAY);
 80012f8:	4820      	ldr	r0, [pc, #128]	@ (800137c <lireTensionBatterie+0x1b4>)
 80012fa:	f7fe ff29 	bl	8000150 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	491d      	ldr	r1, [pc, #116]	@ (800137c <lireTensionBatterie+0x1b4>)
 8001308:	481d      	ldr	r0, [pc, #116]	@ (8001380 <lireTensionBatterie+0x1b8>)
 800130a:	f003 fd67 	bl	8004ddc <HAL_UART_Transmit>

        return pourcentageBatterie;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	e012      	b.n	8001338 <lireTensionBatterie+0x170>
    } else {
        // Gestion de l'échec de la conversion ADC
        snprintf(buffer1, sizeof(buffer1), "\nÉchec de la conversion ADC pour la batterie");
 8001312:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <lireTensionBatterie+0x1bc>)
 8001314:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001318:	4818      	ldr	r0, [pc, #96]	@ (800137c <lireTensionBatterie+0x1b4>)
 800131a:	f004 fe1f 	bl	8005f5c <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, strlen(buffer1), HAL_MAX_DELAY);
 800131e:	4817      	ldr	r0, [pc, #92]	@ (800137c <lireTensionBatterie+0x1b4>)
 8001320:	f7fe ff16 	bl	8000150 <strlen>
 8001324:	4603      	mov	r3, r0
 8001326:	b29a      	uxth	r2, r3
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	4913      	ldr	r1, [pc, #76]	@ (800137c <lireTensionBatterie+0x1b4>)
 800132e:	4814      	ldr	r0, [pc, #80]	@ (8001380 <lireTensionBatterie+0x1b8>)
 8001330:	f003 fd54 	bl	8004ddc <HAL_UART_Transmit>

        return -1.0f; // Valeur d'erreur
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001338:	4618      	mov	r0, r3
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	66666666 	.word	0x66666666
 8001344:	3f4a6666 	.word	0x3f4a6666
 8001348:	1a9fbe77 	.word	0x1a9fbe77
 800134c:	3ff0dd2f 	.word	0x3ff0dd2f
 8001350:	40021000 	.word	0x40021000
 8001354:	40010c00 	.word	0x40010c00
 8001358:	20000388 	.word	0x20000388
 800135c:	20000384 	.word	0x20000384
 8001360:	47127c00 	.word	0x47127c00
 8001364:	45ea6000 	.word	0x45ea6000
 8001368:	41500000 	.word	0x41500000
 800136c:	41200000 	.word	0x41200000
 8001370:	40400000 	.word	0x40400000
 8001374:	42c80000 	.word	0x42c80000
 8001378:	0800a0c8 	.word	0x0800a0c8
 800137c:	200001f4 	.word	0x200001f4
 8001380:	2000066c 	.word	0x2000066c
 8001384:	0800a118 	.word	0x0800a118

08001388 <lireTensionStable>:


// Fonction pour lire la tension stable
int lireTensionStable() {
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    int VoltageState;
    // Activer l'horloge pour le port GPIO de la tension stable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b4a      	ldr	r3, [pc, #296]	@ (80014b8 <lireTensionStable+0x130>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	4a49      	ldr	r2, [pc, #292]	@ (80014b8 <lireTensionStable+0x130>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6193      	str	r3, [r2, #24]
 800139a:	4b47      	ldr	r3, [pc, #284]	@ (80014b8 <lireTensionStable+0x130>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

    // Configurer le pin GPIO de la tension stable pour une entrée analogique
    GPIO_InitStruct.Pin = TENSION_STABLE_PIN;
 80013a6:	2380      	movs	r3, #128	@ 0x80
 80013a8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013aa:	2303      	movs	r3, #3
 80013ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(TENSION_STABLE_PORT, &GPIO_InitStruct);
 80013b2:	f107 0308 	add.w	r3, r7, #8
 80013b6:	4619      	mov	r1, r3
 80013b8:	4840      	ldr	r0, [pc, #256]	@ (80014bc <lireTensionStable+0x134>)
 80013ba:	f002 f813 	bl	80033e4 <HAL_GPIO_Init>

    // Attendre un court instant pour que le GPIO se stabilise
    HAL_Delay(10);
 80013be:	200a      	movs	r0, #10
 80013c0:	f001 fadc 	bl	800297c <HAL_Delay>

    // Lecture de la valeur analogique de la tension stable
    HAL_ADC_Start(&hadc2); // Assurez-vous que hadc2 est correctement configuré pour votre tension stable
 80013c4:	483e      	ldr	r0, [pc, #248]	@ (80014c0 <lireTensionStable+0x138>)
 80013c6:	f001 fbd5 	bl	8002b74 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK) {
 80013ca:	f04f 31ff 	mov.w	r1, #4294967295
 80013ce:	483c      	ldr	r0, [pc, #240]	@ (80014c0 <lireTensionStable+0x138>)
 80013d0:	f001 fc7e 	bl	8002cd0 <HAL_ADC_PollForConversion>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d151      	bne.n	800147e <lireTensionStable+0xf6>
        HAL_ADC_PollForConversion(&hadc2, 300);
 80013da:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80013de:	4838      	ldr	r0, [pc, #224]	@ (80014c0 <lireTensionStable+0x138>)
 80013e0:	f001 fc76 	bl	8002cd0 <HAL_ADC_PollForConversion>
        raw_tension_stable = HAL_ADC_GetValue(&hadc2);
 80013e4:	4836      	ldr	r0, [pc, #216]	@ (80014c0 <lireTensionStable+0x138>)
 80013e6:	f001 fd79 	bl	8002edc <HAL_ADC_GetValue>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	4b35      	ldr	r3, [pc, #212]	@ (80014c4 <lireTensionStable+0x13c>)
 80013f0:	801a      	strh	r2, [r3, #0]
        float tensionStable = raw_tension_stable * (3.3 / 4096);
 80013f2:	4b34      	ldr	r3, [pc, #208]	@ (80014c4 <lireTensionStable+0x13c>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f804 	bl	8000404 <__aeabi_i2d>
 80013fc:	a32c      	add	r3, pc, #176	@ (adr r3, 80014b0 <lireTensionStable+0x128>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7ff f869 	bl	80004d8 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff fb5b 	bl	8000ac8 <__aeabi_d2f>
 8001412:	4603      	mov	r3, r0
 8001414:	61bb      	str	r3, [r7, #24]
        tensionStable = (tensionStable * 37500) / 7500;
 8001416:	492c      	ldr	r1, [pc, #176]	@ (80014c8 <lireTensionStable+0x140>)
 8001418:	69b8      	ldr	r0, [r7, #24]
 800141a:	f7ff fcb3 	bl	8000d84 <__aeabi_fmul>
 800141e:	4603      	mov	r3, r0
 8001420:	492a      	ldr	r1, [pc, #168]	@ (80014cc <lireTensionStable+0x144>)
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fd62 	bl	8000eec <__aeabi_fdiv>
 8001428:	4603      	mov	r3, r0
 800142a:	61bb      	str	r3, [r7, #24]
        // Affichage de la tension stable via UART
        if (tensionStable > 1)
 800142c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001430:	69b8      	ldr	r0, [r7, #24]
 8001432:	f7ff fe63 	bl	80010fc <__aeabi_fcmpgt>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <lireTensionStable+0xba>
        {
        	VoltageState = 1;
 800143c:	2301      	movs	r3, #1
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	e009      	b.n	8001456 <lireTensionStable+0xce>
        }
        else if (tensionStable < 1)
 8001442:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001446:	69b8      	ldr	r0, [r7, #24]
 8001448:	f7ff fe3a 	bl	80010c0 <__aeabi_fcmplt>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <lireTensionStable+0xce>
        {
        	VoltageState = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
        }
        snprintf(buffer1, sizeof(buffer1), "\nLa tension stable est : %d", VoltageState);
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <lireTensionStable+0x148>)
 800145a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800145e:	481d      	ldr	r0, [pc, #116]	@ (80014d4 <lireTensionStable+0x14c>)
 8001460:	f004 fd7c 	bl	8005f5c <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, strlen(buffer1), HAL_MAX_DELAY);
 8001464:	481b      	ldr	r0, [pc, #108]	@ (80014d4 <lireTensionStable+0x14c>)
 8001466:	f7fe fe73 	bl	8000150 <strlen>
 800146a:	4603      	mov	r3, r0
 800146c:	b29a      	uxth	r2, r3
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	4918      	ldr	r1, [pc, #96]	@ (80014d4 <lireTensionStable+0x14c>)
 8001474:	4818      	ldr	r0, [pc, #96]	@ (80014d8 <lireTensionStable+0x150>)
 8001476:	f003 fcb1 	bl	8004ddc <HAL_UART_Transmit>


        return VoltageState;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	e012      	b.n	80014a4 <lireTensionStable+0x11c>
    } else {
        // Gestion de l'échec de la conversion ADC
        snprintf(buffer1, sizeof(buffer1), "\nÉchec de la conversion ADC pour la tension stable");
 800147e:	4a17      	ldr	r2, [pc, #92]	@ (80014dc <lireTensionStable+0x154>)
 8001480:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001484:	4813      	ldr	r0, [pc, #76]	@ (80014d4 <lireTensionStable+0x14c>)
 8001486:	f004 fd69 	bl	8005f5c <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, strlen(buffer1), HAL_MAX_DELAY);
 800148a:	4812      	ldr	r0, [pc, #72]	@ (80014d4 <lireTensionStable+0x14c>)
 800148c:	f7fe fe60 	bl	8000150 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	490e      	ldr	r1, [pc, #56]	@ (80014d4 <lireTensionStable+0x14c>)
 800149a:	480f      	ldr	r0, [pc, #60]	@ (80014d8 <lireTensionStable+0x150>)
 800149c:	f003 fc9e 	bl	8004ddc <HAL_UART_Transmit>

        return -1.0f; // Valeur d'erreur
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	f3af 8000 	nop.w
 80014b0:	66666666 	.word	0x66666666
 80014b4:	3f4a6666 	.word	0x3f4a6666
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010800 	.word	0x40010800
 80014c0:	200003b8 	.word	0x200003b8
 80014c4:	20000386 	.word	0x20000386
 80014c8:	47127c00 	.word	0x47127c00
 80014cc:	45ea6000 	.word	0x45ea6000
 80014d0:	0800a148 	.word	0x0800a148
 80014d4:	200001f4 	.word	0x200001f4
 80014d8:	2000066c 	.word	0x2000066c
 80014dc:	0800a164 	.word	0x0800a164

080014e0 <newLoRa>:
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */


LoRa newLoRa(){
 80014e0:	b4b0      	push	{r4, r5, r7}
 80014e2:	b08f      	sub	sp, #60	@ 0x3c
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 868       ;
 80014e8:	f44f 7359 	mov.w	r3, #868	@ 0x364
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_9      ;
 80014ee:	2309      	movs	r3, #9
 80014f0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_250KHz ;
 80014f4:	2308      	movs	r3, #8
 80014f6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_8    ;
 80014fa:	2304      	movs	r3, #4
 80014fc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_17db;
 8001500:	23fc      	movs	r3, #252	@ 0xfc
 8001502:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 130       ;
 8001506:	2382      	movs	r3, #130	@ 0x82
 8001508:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 800150c:	2308      	movs	r3, #8
 800150e:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	461d      	mov	r5, r3
 8001514:	f107 040c 	add.w	r4, r7, #12
 8001518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001520:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001524:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	373c      	adds	r7, #60	@ 0x3c
 800152c:	46bd      	mov	sp, r7
 800152e:	bcb0      	pop	{r4, r5, r7}
 8001530:	4770      	bx	lr

08001532 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 800153c:	2101      	movs	r1, #1
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f9ff 	bl	8001942 <LoRa_read>
 8001544:	4603      	mov	r3, r0
 8001546:	73bb      	strb	r3, [r7, #14]
	data = read;
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d107      	bne.n	8001562 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001552:	7bbb      	ldrb	r3, [r7, #14]
 8001554:	f023 0307 	bic.w	r3, r3, #7
 8001558:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
 8001560:	e03e      	b.n	80015e0 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d10c      	bne.n	8001582 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800156c:	f023 0307 	bic.w	r3, r3, #7
 8001570:	b25b      	sxtb	r3, r3
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	b25b      	sxtb	r3, r3
 8001578:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	61da      	str	r2, [r3, #28]
 8001580:	e02e      	b.n	80015e0 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d10c      	bne.n	80015a2 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8001588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800158c:	f023 0307 	bic.w	r3, r3, #7
 8001590:	b25b      	sxtb	r3, r3
 8001592:	f043 0303 	orr.w	r3, r3, #3
 8001596:	b25b      	sxtb	r3, r3
 8001598:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2203      	movs	r2, #3
 800159e:	61da      	str	r2, [r3, #28]
 80015a0:	e01e      	b.n	80015e0 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d10c      	bne.n	80015c2 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80015a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015ac:	f023 0307 	bic.w	r3, r3, #7
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	f043 0305 	orr.w	r3, r3, #5
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2205      	movs	r2, #5
 80015be:	61da      	str	r2, [r3, #28]
 80015c0:	e00e      	b.n	80015e0 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	2b06      	cmp	r3, #6
 80015c6:	d10b      	bne.n	80015e0 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80015c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015cc:	f023 0307 	bic.w	r3, r3, #7
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	f043 0306 	orr.w	r3, r3, #6
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2206      	movs	r2, #6
 80015de:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	461a      	mov	r2, r3
 80015e4:	2101      	movs	r1, #1
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f9c5 	bl	8001976 <LoRa_write>
	//HAL_Delay(10);
}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	4613      	mov	r3, r2
 8001602:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	889b      	ldrh	r3, [r3, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	4619      	mov	r1, r3
 8001610:	f002 f86c 	bl	80036ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6998      	ldr	r0, [r3, #24]
 8001618:	88fa      	ldrh	r2, [r7, #6]
 800161a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	f002 fe7c 	bl	800431c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001624:	bf00      	nop
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4618      	mov	r0, r3
 800162c:	f003 fa81 	bl	8004b32 <HAL_SPI_GetState>
 8001630:	4603      	mov	r3, r0
 8001632:	2b01      	cmp	r3, #1
 8001634:	d1f7      	bne.n	8001626 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6998      	ldr	r0, [r3, #24]
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001640:	6839      	ldr	r1, [r7, #0]
 8001642:	f002 ffae 	bl	80045a2 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001646:	bf00      	nop
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4618      	mov	r0, r3
 800164e:	f003 fa70 	bl	8004b32 <HAL_SPI_GetState>
 8001652:	4603      	mov	r3, r0
 8001654:	2b01      	cmp	r3, #1
 8001656:	d1f7      	bne.n	8001648 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	889b      	ldrh	r3, [r3, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	4619      	mov	r1, r3
 8001664:	f002 f842 	bl	80036ec <HAL_GPIO_WritePin>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	4613      	mov	r3, r2
 800167e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	889b      	ldrh	r3, [r3, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	f002 f82e 	bl	80036ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6998      	ldr	r0, [r3, #24]
 8001694:	88fa      	ldrh	r2, [r7, #6]
 8001696:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	f002 fe3e 	bl	800431c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80016a0:	bf00      	nop
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 fa43 	bl	8004b32 <HAL_SPI_GetState>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d1f7      	bne.n	80016a2 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6998      	ldr	r0, [r3, #24]
 80016b6:	8b3a      	ldrh	r2, [r7, #24]
 80016b8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016bc:	6839      	ldr	r1, [r7, #0]
 80016be:	f002 fe2d 	bl	800431c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80016c2:	bf00      	nop
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fa32 	bl	8004b32 <HAL_SPI_GetState>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d1f7      	bne.n	80016c4 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	889b      	ldrh	r3, [r3, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	4619      	mov	r1, r3
 80016e0:	f002 f804 	bl	80036ec <HAL_GPIO_WritePin>
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 80016f8:	2126      	movs	r1, #38	@ 0x26
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f921 	bl	8001942 <LoRa_read>
 8001700:	4603      	mov	r3, r0
 8001702:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d004      	beq.n	8001714 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e003      	b.n	800171c <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001714:	7bbb      	ldrb	r3, [r7, #14]
 8001716:	f023 0308 	bic.w	r3, r3, #8
 800171a:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	461a      	mov	r2, r3
 8001720:	2126      	movs	r1, #38	@ 0x26
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f927 	bl	8001976 <LoRa_write>
	HAL_Delay(10);
 8001728:	200a      	movs	r0, #10
 800172a:	f001 f927 	bl	800297c <HAL_Delay>
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8001738:	b580      	push	{r7, lr}
 800173a:	b096      	sub	sp, #88	@ 0x58
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001740:	4a17      	ldr	r2, [pc, #92]	@ (80017a0 <LoRa_setAutoLDO+0x68>)
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	4611      	mov	r1, r2
 8001748:	2250      	movs	r2, #80	@ 0x50
 800174a:	4618      	mov	r0, r3
 800174c:	f004 fd77 	bl	800623e <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001756:	461a      	mov	r2, r3
 8001758:	2301      	movs	r3, #1
 800175a:	4093      	lsls	r3, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fe51 	bl	8000404 <__aeabi_i2d>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	3358      	adds	r3, #88	@ 0x58
 800176c:	443b      	add	r3, r7
 800176e:	3b50      	subs	r3, #80	@ 0x50
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7fe ffda 	bl	800072c <__aeabi_ddiv>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f7ff f95a 	bl	8000a38 <__aeabi_d2iz>
 8001784:	4603      	mov	r3, r0
 8001786:	2b10      	cmp	r3, #16
 8001788:	bfcc      	ite	gt
 800178a:	2301      	movgt	r3, #1
 800178c:	2300      	movle	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4619      	mov	r1, r3
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ffaa 	bl	80016ec <LoRa_setLowDaraRateOptimization>
}
 8001798:	bf00      	nop
 800179a:	3758      	adds	r7, #88	@ 0x58
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	0800a198 	.word	0x0800a198

080017a4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	04db      	lsls	r3, r3, #19
 80017b2:	115b      	asrs	r3, r3, #5
 80017b4:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	0c1b      	lsrs	r3, r3, #16
 80017ba:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80017bc:	7afb      	ldrb	r3, [r7, #11]
 80017be:	461a      	mov	r2, r3
 80017c0:	2106      	movs	r1, #6
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f8d7 	bl	8001976 <LoRa_write>
	HAL_Delay(5);
 80017c8:	2005      	movs	r0, #5
 80017ca:	f001 f8d7 	bl	800297c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80017d4:	7afb      	ldrb	r3, [r7, #11]
 80017d6:	461a      	mov	r2, r3
 80017d8:	2107      	movs	r1, #7
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f8cb 	bl	8001976 <LoRa_write>
	HAL_Delay(5);
 80017e0:	2005      	movs	r0, #5
 80017e2:	f001 f8cb 	bl	800297c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	461a      	mov	r2, r3
 80017ee:	2108      	movs	r1, #8
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f8c0 	bl	8001976 <LoRa_write>
	HAL_Delay(5);
 80017f6:	2005      	movs	r0, #5
 80017f8:	f001 f8c0 	bl	800297c <HAL_Delay>
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b0c      	cmp	r3, #12
 8001812:	dd01      	ble.n	8001818 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001814:	230c      	movs	r3, #12
 8001816:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2b06      	cmp	r3, #6
 800181c:	dc01      	bgt.n	8001822 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800181e:	2307      	movs	r3, #7
 8001820:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001822:	211e      	movs	r1, #30
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f88c 	bl	8001942 <LoRa_read>
 800182a:	4603      	mov	r3, r0
 800182c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800182e:	200a      	movs	r0, #10
 8001830:	f001 f8a4 	bl	800297c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	b2da      	uxtb	r2, r3
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	b2db      	uxtb	r3, r3
 8001844:	4413      	add	r3, r2
 8001846:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001848:	7bbb      	ldrb	r3, [r7, #14]
 800184a:	461a      	mov	r2, r3
 800184c:	211e      	movs	r1, #30
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f891 	bl	8001976 <LoRa_write>
	HAL_Delay(10);
 8001854:	200a      	movs	r0, #10
 8001856:	f001 f891 	bl	800297c <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ff6c 	bl	8001738 <LoRa_setAutoLDO>
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	461a      	mov	r2, r3
 8001878:	2109      	movs	r1, #9
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f87b 	bl	8001976 <LoRa_write>
	HAL_Delay(10);
 8001880:	200a      	movs	r0, #10
 8001882:	f001 f87b 	bl	800297c <HAL_Delay>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	2b2c      	cmp	r3, #44	@ 0x2c
 80018a4:	d801      	bhi.n	80018aa <LoRa_setOCP+0x1a>
		current = 45;
 80018a6:	232d      	movs	r3, #45	@ 0x2d
 80018a8:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	2bf0      	cmp	r3, #240	@ 0xf0
 80018ae:	d901      	bls.n	80018b4 <LoRa_setOCP+0x24>
		current = 240;
 80018b0:	23f0      	movs	r3, #240	@ 0xf0
 80018b2:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	2b78      	cmp	r3, #120	@ 0x78
 80018b8:	d809      	bhi.n	80018ce <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	3b2d      	subs	r3, #45	@ 0x2d
 80018be:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <LoRa_setOCP+0x78>)
 80018c0:	fb82 1203 	smull	r1, r2, r2, r3
 80018c4:	1052      	asrs	r2, r2, #1
 80018c6:	17db      	asrs	r3, r3, #31
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e00b      	b.n	80018e6 <LoRa_setOCP+0x56>
	else if(current <= 240)
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	2bf0      	cmp	r3, #240	@ 0xf0
 80018d2:	d808      	bhi.n	80018e6 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	331e      	adds	r3, #30
 80018d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001908 <LoRa_setOCP+0x78>)
 80018da:	fb82 1203 	smull	r1, r2, r2, r3
 80018de:	1092      	asrs	r2, r2, #2
 80018e0:	17db      	asrs	r3, r3, #31
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	3320      	adds	r3, #32
 80018ea:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	461a      	mov	r2, r3
 80018f0:	210b      	movs	r1, #11
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f83f 	bl	8001976 <LoRa_write>
	HAL_Delay(10);
 80018f8:	200a      	movs	r0, #10
 80018fa:	f001 f83f 	bl	800297c <HAL_Delay>
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	66666667 	.word	0x66666667

0800190c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001914:	211e      	movs	r1, #30
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f813 	bl	8001942 <LoRa_read>
 800191c:	4603      	mov	r3, r0
 800191e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	f043 0307 	orr.w	r3, r3, #7
 8001926:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	461a      	mov	r2, r3
 800192c:	211e      	movs	r1, #30
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f821 	bl	8001976 <LoRa_write>
	HAL_Delay(10);
 8001934:	200a      	movs	r0, #10
 8001936:	f001 f821 	bl	800297c <HAL_Delay>
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af02      	add	r7, sp, #8
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001954:	b2db      	uxtb	r3, r3
 8001956:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001958:	f107 030f 	add.w	r3, r7, #15
 800195c:	f107 010e 	add.w	r1, r7, #14
 8001960:	2201      	movs	r2, #1
 8001962:	9200      	str	r2, [sp, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fe44 	bl	80015f4 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af02      	add	r7, sp, #8
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	70fb      	strb	r3, [r7, #3]
 8001982:	4613      	mov	r3, r2
 8001984:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800198c:	b2db      	uxtb	r3, r3
 800198e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001990:	78bb      	ldrb	r3, [r7, #2]
 8001992:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001994:	f107 030f 	add.w	r3, r7, #15
 8001998:	f107 010e 	add.w	r1, r7, #14
 800199c:	2201      	movs	r2, #1
 800199e:	9200      	str	r2, [sp, #0]
 80019a0:	2201      	movs	r2, #1
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fe64 	bl	8001670 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

	return 1;
 80019b8:	2301      	movs	r3, #1
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b089      	sub	sp, #36	@ 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	4613      	mov	r3, r2
 80019d0:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	e007      	b.n	80019ec <LoRa_receive+0x28>
		data[i]=0;
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	4413      	add	r3, r2
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	3301      	adds	r3, #1
 80019ea:	61bb      	str	r3, [r7, #24]
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dbf3      	blt.n	80019dc <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80019f4:	2101      	movs	r1, #1
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fd9b 	bl	8001532 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80019fc:	2112      	movs	r1, #18
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f7ff ff9f 	bl	8001942 <LoRa_read>
 8001a04:	4603      	mov	r3, r0
 8001a06:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001a08:	7cfb      	ldrb	r3, [r7, #19]
 8001a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d02f      	beq.n	8001a72 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001a12:	22ff      	movs	r2, #255	@ 0xff
 8001a14:	2112      	movs	r1, #18
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f7ff ffad 	bl	8001976 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001a1c:	2113      	movs	r1, #19
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f7ff ff8f 	bl	8001942 <LoRa_read>
 8001a24:	4603      	mov	r3, r0
 8001a26:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001a28:	2110      	movs	r1, #16
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff ff89 	bl	8001942 <LoRa_read>
 8001a30:	4603      	mov	r3, r0
 8001a32:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001a34:	7cfb      	ldrb	r3, [r7, #19]
 8001a36:	461a      	mov	r2, r3
 8001a38:	210d      	movs	r1, #13
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff ff9b 	bl	8001976 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001a40:	7cba      	ldrb	r2, [r7, #18]
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	4293      	cmp	r3, r2
 8001a46:	bf28      	it	cs
 8001a48:	4613      	movcs	r3, r2
 8001a4a:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e00b      	b.n	8001a6a <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	18d4      	adds	r4, r2, r3
 8001a58:	2100      	movs	r1, #0
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff ff71 	bl	8001942 <LoRa_read>
 8001a60:	4603      	mov	r3, r0
 8001a62:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	7ffb      	ldrb	r3, [r7, #31]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	dbef      	blt.n	8001a52 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001a72:	2105      	movs	r1, #5
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fd5c 	bl	8001532 <LoRa_gotoMode>
    return min;
 8001a7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3724      	adds	r7, #36	@ 0x24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd90      	pop	{r4, r7, pc}

08001a84 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff8f 	bl	80019b0 <LoRa_isvalid>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8096 	beq.w	8001bc6 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fd48 	bl	8001532 <LoRa_gotoMode>
			HAL_Delay(10);
 8001aa2:	200a      	movs	r0, #10
 8001aa4:	f000 ff6a 	bl	800297c <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ff49 	bl	8001942 <LoRa_read>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001ab4:	200a      	movs	r0, #10
 8001ab6:	f000 ff61 	bl	800297c <HAL_Delay>
			data = read | 0x80;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ac0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001ac2:	7bbb      	ldrb	r3, [r7, #14]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff54 	bl	8001976 <LoRa_write>
			HAL_Delay(100);
 8001ace:	2064      	movs	r0, #100	@ 0x64
 8001ad0:	f000 ff54 	bl	800297c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fe62 	bl	80017a4 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff febd 	bl	8001868 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001af4:	4619      	mov	r1, r3
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff feca 	bl	8001890 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001afc:	2223      	movs	r2, #35	@ 0x23
 8001afe:	210c      	movs	r1, #12
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff38 	bl	8001976 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ff00 	bl	800190c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b12:	4619      	mov	r1, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff fe75 	bl	8001804 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001b1a:	22ff      	movs	r2, #255	@ 0xff
 8001b1c:	211f      	movs	r1, #31
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff29 	bl	8001976 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	461a      	mov	r2, r3
 8001b44:	211d      	movs	r1, #29
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff15 	bl	8001976 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fdf3 	bl	8001738 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2120      	movs	r1, #32
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff08 	bl	8001976 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2121      	movs	r1, #33	@ 0x21
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff00 	bl	8001976 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001b76:	2140      	movs	r1, #64	@ 0x40
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff fee2 	bl	8001942 <LoRa_read>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001b88:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001b8a:	7bbb      	ldrb	r3, [r7, #14]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2140      	movs	r1, #64	@ 0x40
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fef0 	bl	8001976 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001b96:	2101      	movs	r1, #1
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff fcca 	bl	8001532 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001ba4:	200a      	movs	r0, #10
 8001ba6:	f000 fee9 	bl	800297c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001baa:	2142      	movs	r1, #66	@ 0x42
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff fec8 	bl	8001942 <LoRa_read>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	2b12      	cmp	r3, #18
 8001bba:	d101      	bne.n	8001bc0 <LoRa_init+0x13c>
				return LORA_OK;
 8001bbc:	23c8      	movs	r3, #200	@ 0xc8
 8001bbe:	e004      	b.n	8001bca <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001bc0:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001bc4:	e001      	b.n	8001bca <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001bc6:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <separateData>:
/////////////////////////ADDED BY LAFDIL SOUFIANE////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

void separateData(uint8_t *dataReceived, float *dataArray, int size) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b094      	sub	sp, #80	@ 0x50
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
    char *ptr;
    int i = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    char tempBuffer[50]; // Augmentez la taille du tampon temporaire si nécessaire

    // Copie des données reçues dans un tampon temporaire pour éviter de les modifier
    strncpy(tempBuffer, dataReceived, sizeof(tempBuffer) - 1);
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	2231      	movs	r2, #49	@ 0x31
 8001bea:	68f9      	ldr	r1, [r7, #12]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f004 fa8d 	bl	800610c <strncpy>
    tempBuffer[sizeof(tempBuffer) - 1] = '\0'; // Assurer la terminaison du tampon temporaire
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

    // Utiliser sscanf pour extraire les valeurs flottantes
    while ((sscanf(tempBuffer, "%f,", &dataArray[i])) == 1 && i < size) {
 8001bf8:	e019      	b.n	8001c2e <separateData+0x5a>
        // Rechercher la virgule suivante dans la chaîne
        ptr = strchr(tempBuffer, ',');
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	212c      	movs	r1, #44	@ 0x2c
 8001c00:	4618      	mov	r0, r3
 8001c02:	f004 fa76 	bl	80060f2 <strchr>
 8001c06:	6478      	str	r0, [r7, #68]	@ 0x44
        if (ptr != NULL) {
 8001c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d021      	beq.n	8001c52 <separateData+0x7e>
            // Avancer le pointeur pour sauter la virgule
            ptr++;
 8001c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c10:	3301      	adds	r3, #1
 8001c12:	647b      	str	r3, [r7, #68]	@ 0x44
            // Mettre à jour le tampon temporaire pour contenir le reste de la chaîne
            strncpy(tempBuffer, ptr, sizeof(tempBuffer) - 1);
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	2231      	movs	r2, #49	@ 0x31
 8001c1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f004 fa75 	bl	800610c <strncpy>
            tempBuffer[sizeof(tempBuffer) - 1] = '\0'; // Assurer la terminaison du tampon temporaire
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
        } else {
            // Si aucune virgule n'est trouvée, sortir de la boucle
            break;
        }
        i++;
 8001c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while ((sscanf(tempBuffer, "%f,", &dataArray[i])) == 1 && i < size) {
 8001c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	441a      	add	r2, r3
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	4917      	ldr	r1, [pc, #92]	@ (8001c98 <separateData+0xc4>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f004 f9e1 	bl	8006004 <siscanf>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d105      	bne.n	8001c54 <separateData+0x80>
 8001c48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbd4      	blt.n	8001bfa <separateData+0x26>
 8001c50:	e000      	b.n	8001c54 <separateData+0x80>
            break;
 8001c52:	bf00      	nop
    }

    // Débogage : imprimer les valeurs intermédiaires et les tokens extraits
    printf("Nombre de valeurs trouvées : %d\n", i);
 8001c54:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001c56:	4811      	ldr	r0, [pc, #68]	@ (8001c9c <separateData+0xc8>)
 8001c58:	f004 f96e 	bl	8005f38 <iprintf>
    for (int j = 0; j < i; j++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c60:	e010      	b.n	8001c84 <separateData+0xb0>
        printf("Valeur %d : %f\n", j, dataArray[j]);
 8001c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	4413      	add	r3, r2
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fbdb 	bl	8000428 <__aeabi_f2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001c78:	4809      	ldr	r0, [pc, #36]	@ (8001ca0 <separateData+0xcc>)
 8001c7a:	f004 f95d 	bl	8005f38 <iprintf>
    for (int j = 0; j < i; j++) {
 8001c7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c80:	3301      	adds	r3, #1
 8001c82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbea      	blt.n	8001c62 <separateData+0x8e>
    }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3750      	adds	r7, #80	@ 0x50
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	0800a1e8 	.word	0x0800a1e8
 8001c9c:	0800a1ec 	.word	0x0800a1ec
 8001ca0:	0800a210 	.word	0x0800a210

08001ca4 <receiveAndProcessLoRaFrame>:

void receiveAndProcessLoRaFrame(int bytes_received, uint8_t *read_data, uint32_t *RxData, float *DataArray, int size) {
 8001ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca8:	b0c8      	sub	sp, #288	@ 0x120
 8001caa:	af0a      	add	r7, sp, #40	@ 0x28
 8001cac:	6178      	str	r0, [r7, #20]
 8001cae:	6139      	str	r1, [r7, #16]
 8001cb0:	60fa      	str	r2, [r7, #12]
 8001cb2:	60bb      	str	r3, [r7, #8]

    char buffer[200];
    if (bytes_received > 0) {
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f340 8087 	ble.w	8001dca <receiveAndProcessLoRaFrame+0x126>
        read_data[bytes_received] = '\0'; // Assurez-vous que la chaîne est terminée par un caractère nul
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]

        snprintf(buffer, sizeof(buffer), "Counter value: %lu\r\nData received: %s\r\n", *RxData, read_data);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	f107 001c 	add.w	r0, r7, #28
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	4a43      	ldr	r2, [pc, #268]	@ (8001de4 <receiveAndProcessLoRaFrame+0x140>)
 8001cd6:	21c8      	movs	r1, #200	@ 0xc8
 8001cd8:	f004 f940 	bl	8005f5c <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001cdc:	f107 031c 	add.w	r3, r7, #28
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fa35 	bl	8000150 <strlen>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	f107 011c 	add.w	r1, r7, #28
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf2:	483d      	ldr	r0, [pc, #244]	@ (8001de8 <receiveAndProcessLoRaFrame+0x144>)
 8001cf4:	f003 f872 	bl	8004ddc <HAL_UART_Transmit>

        separateData(read_data, DataArray, size);
 8001cf8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	6938      	ldr	r0, [r7, #16]
 8001d00:	f7ff ff68 	bl	8001bd4 <separateData>

        float Temperature = DataArray[0] / 100;
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4938      	ldr	r1, [pc, #224]	@ (8001dec <receiveAndProcessLoRaFrame+0x148>)
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f8ee 	bl	8000eec <__aeabi_fdiv>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        float Conductivity = DataArray[1];
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        float Salinity = DataArray[2];
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        float TDS = DataArray[3];
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        float PH = DataArray[4]/100;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	3310      	adds	r3, #16
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	492d      	ldr	r1, [pc, #180]	@ (8001dec <receiveAndProcessLoRaFrame+0x148>)
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f8d8 	bl	8000eec <__aeabi_fdiv>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

        snprintf(buffer, sizeof(buffer), "\nTemperature : %.2f °C\nConductivity : %.2f us/cm\nSalinity: %.2f mg/L\nTDS: %.2f mg/L\nPH: %.2f ph \r\n", Temperature, Conductivity, Salinity, TDS, PH);
 8001d42:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8001d46:	f7fe fb6f 	bl	8000428 <__aeabi_f2d>
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	460d      	mov	r5, r1
 8001d4e:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8001d52:	f7fe fb69 	bl	8000428 <__aeabi_f2d>
 8001d56:	4680      	mov	r8, r0
 8001d58:	4689      	mov	r9, r1
 8001d5a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001d5e:	f7fe fb63 	bl	8000428 <__aeabi_f2d>
 8001d62:	4682      	mov	sl, r0
 8001d64:	468b      	mov	fp, r1
 8001d66:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8001d6a:	f7fe fb5d 	bl	8000428 <__aeabi_f2d>
 8001d6e:	e9c7 0100 	strd	r0, r1, [r7]
 8001d72:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8001d76:	f7fe fb57 	bl	8000428 <__aeabi_f2d>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	f107 001c 	add.w	r0, r7, #28
 8001d82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001d8e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001d92:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d96:	e9cd 4500 	strd	r4, r5, [sp]
 8001d9a:	4a15      	ldr	r2, [pc, #84]	@ (8001df0 <receiveAndProcessLoRaFrame+0x14c>)
 8001d9c:	21c8      	movs	r1, #200	@ 0xc8
 8001d9e:	f004 f8dd 	bl	8005f5c <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001da2:	f107 031c 	add.w	r3, r7, #28
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe f9d2 	bl	8000150 <strlen>
 8001dac:	4603      	mov	r3, r0
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	f107 011c 	add.w	r1, r7, #28
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	480b      	ldr	r0, [pc, #44]	@ (8001de8 <receiveAndProcessLoRaFrame+0x144>)
 8001dba:	f003 f80f 	bl	8004ddc <HAL_UART_Transmit>

        (*RxData)++;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	601a      	str	r2, [r3, #0]
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t *)"\nAucune donnée reçue", strlen("Aucune donnée reçue\n"), HAL_MAX_DELAY);
    }
}
 8001dc8:	e006      	b.n	8001dd8 <receiveAndProcessLoRaFrame+0x134>
        HAL_UART_Transmit(&huart2, (uint8_t *)"\nAucune donnée reçue", strlen("Aucune donnée reçue\n"), HAL_MAX_DELAY);
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	2216      	movs	r2, #22
 8001dd0:	4908      	ldr	r1, [pc, #32]	@ (8001df4 <receiveAndProcessLoRaFrame+0x150>)
 8001dd2:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <receiveAndProcessLoRaFrame+0x144>)
 8001dd4:	f003 f802 	bl	8004ddc <HAL_UART_Transmit>
}
 8001dd8:	bf00      	nop
 8001dda:	37f8      	adds	r7, #248	@ 0xf8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001de2:	bf00      	nop
 8001de4:	0800a220 	.word	0x0800a220
 8001de8:	2000066c 	.word	0x2000066c
 8001dec:	42c80000 	.word	0x42c80000
 8001df0:	0800a248 	.word	0x0800a248
 8001df4:	0800a2ac 	.word	0x0800a2ac

08001df8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e08:	4b18      	ldr	r3, [pc, #96]	@ (8001e6c <MX_ADC1_Init+0x74>)
 8001e0a:	4a19      	ldr	r2, [pc, #100]	@ (8001e70 <MX_ADC1_Init+0x78>)
 8001e0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e0e:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <MX_ADC1_Init+0x74>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e14:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <MX_ADC1_Init+0x74>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e1a:	4b14      	ldr	r3, [pc, #80]	@ (8001e6c <MX_ADC1_Init+0x74>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e20:	4b12      	ldr	r3, [pc, #72]	@ (8001e6c <MX_ADC1_Init+0x74>)
 8001e22:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001e26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e28:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <MX_ADC1_Init+0x74>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e6c <MX_ADC1_Init+0x74>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e34:	480d      	ldr	r0, [pc, #52]	@ (8001e6c <MX_ADC1_Init+0x74>)
 8001e36:	f000 fdc5 	bl	80029c4 <HAL_ADC_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001e40:	f000 fa7d 	bl	800233e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e44:	2308      	movs	r3, #8
 8001e46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	4619      	mov	r1, r3
 8001e54:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <MX_ADC1_Init+0x74>)
 8001e56:	f001 f84d 	bl	8002ef4 <HAL_ADC_ConfigChannel>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001e60:	f000 fa6d 	bl	800233e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000388 	.word	0x20000388
 8001e70:	40012400 	.word	0x40012400

08001e74 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001e84:	4b18      	ldr	r3, [pc, #96]	@ (8001ee8 <MX_ADC2_Init+0x74>)
 8001e86:	4a19      	ldr	r2, [pc, #100]	@ (8001eec <MX_ADC2_Init+0x78>)
 8001e88:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <MX_ADC2_Init+0x74>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001e90:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <MX_ADC2_Init+0x74>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e96:	4b14      	ldr	r3, [pc, #80]	@ (8001ee8 <MX_ADC2_Init+0x74>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ee8 <MX_ADC2_Init+0x74>)
 8001e9e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001ea2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ea4:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <MX_ADC2_Init+0x74>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <MX_ADC2_Init+0x74>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001eb0:	480d      	ldr	r0, [pc, #52]	@ (8001ee8 <MX_ADC2_Init+0x74>)
 8001eb2:	f000 fd87 	bl	80029c4 <HAL_ADC_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001ebc:	f000 fa3f 	bl	800233e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ec0:	2307      	movs	r3, #7
 8001ec2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	@ (8001ee8 <MX_ADC2_Init+0x74>)
 8001ed2:	f001 f80f 	bl	8002ef4 <HAL_ADC_ConfigChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001edc:	f000 fa2f 	bl	800233e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200003b8 	.word	0x200003b8
 8001eec:	40012800 	.word	0x40012800

08001ef0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	@ 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0318 	add.w	r3, r7, #24
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a28      	ldr	r2, [pc, #160]	@ (8001fac <HAL_ADC_MspInit+0xbc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d122      	bne.n	8001f56 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f10:	4b27      	ldr	r3, [pc, #156]	@ (8001fb0 <HAL_ADC_MspInit+0xc0>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a26      	ldr	r2, [pc, #152]	@ (8001fb0 <HAL_ADC_MspInit+0xc0>)
 8001f16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b24      	ldr	r3, [pc, #144]	@ (8001fb0 <HAL_ADC_MspInit+0xc0>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f28:	4b21      	ldr	r3, [pc, #132]	@ (8001fb0 <HAL_ADC_MspInit+0xc0>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a20      	ldr	r2, [pc, #128]	@ (8001fb0 <HAL_ADC_MspInit+0xc0>)
 8001f2e:	f043 0308 	orr.w	r3, r3, #8
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb0 <HAL_ADC_MspInit+0xc0>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f40:	2301      	movs	r3, #1
 8001f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f44:	2303      	movs	r3, #3
 8001f46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f48:	f107 0318 	add.w	r3, r7, #24
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4819      	ldr	r0, [pc, #100]	@ (8001fb4 <HAL_ADC_MspInit+0xc4>)
 8001f50:	f001 fa48 	bl	80033e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001f54:	e026      	b.n	8001fa4 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a17      	ldr	r2, [pc, #92]	@ (8001fb8 <HAL_ADC_MspInit+0xc8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d121      	bne.n	8001fa4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f60:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <HAL_ADC_MspInit+0xc0>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <HAL_ADC_MspInit+0xc0>)
 8001f66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f6a:	6193      	str	r3, [r2, #24]
 8001f6c:	4b10      	ldr	r3, [pc, #64]	@ (8001fb0 <HAL_ADC_MspInit+0xc0>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f78:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb0 <HAL_ADC_MspInit+0xc0>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb0 <HAL_ADC_MspInit+0xc0>)
 8001f7e:	f043 0304 	orr.w	r3, r3, #4
 8001f82:	6193      	str	r3, [r2, #24]
 8001f84:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb0 <HAL_ADC_MspInit+0xc0>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f90:	2380      	movs	r3, #128	@ 0x80
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f94:	2303      	movs	r3, #3
 8001f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 0318 	add.w	r3, r7, #24
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4807      	ldr	r0, [pc, #28]	@ (8001fbc <HAL_ADC_MspInit+0xcc>)
 8001fa0:	f001 fa20 	bl	80033e4 <HAL_GPIO_Init>
}
 8001fa4:	bf00      	nop
 8001fa6:	3728      	adds	r7, #40	@ 0x28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40012400 	.word	0x40012400
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40010c00 	.word	0x40010c00
 8001fb8:	40012800 	.word	0x40012800
 8001fbc:	40010800 	.word	0x40010800

08001fc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc6:	f107 0310 	add.w	r3, r7, #16
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd4:	4b27      	ldr	r3, [pc, #156]	@ (8002074 <MX_GPIO_Init+0xb4>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a26      	ldr	r2, [pc, #152]	@ (8002074 <MX_GPIO_Init+0xb4>)
 8001fda:	f043 0310 	orr.w	r3, r3, #16
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b24      	ldr	r3, [pc, #144]	@ (8002074 <MX_GPIO_Init+0xb4>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0310 	and.w	r3, r3, #16
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	4b21      	ldr	r3, [pc, #132]	@ (8002074 <MX_GPIO_Init+0xb4>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a20      	ldr	r2, [pc, #128]	@ (8002074 <MX_GPIO_Init+0xb4>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8002074 <MX_GPIO_Init+0xb4>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002004:	4b1b      	ldr	r3, [pc, #108]	@ (8002074 <MX_GPIO_Init+0xb4>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a1a      	ldr	r2, [pc, #104]	@ (8002074 <MX_GPIO_Init+0xb4>)
 800200a:	f043 0308 	orr.w	r3, r3, #8
 800200e:	6193      	str	r3, [r2, #24]
 8002010:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <MX_GPIO_Init+0xb4>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RLY_3_Pin|RLY_2_Pin|RLY_1_Pin, GPIO_PIN_RESET);
 800201c:	2200      	movs	r2, #0
 800201e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002022:	4815      	ldr	r0, [pc, #84]	@ (8002078 <MX_GPIO_Init+0xb8>)
 8002024:	f001 fb62 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8002028:	2200      	movs	r2, #0
 800202a:	2140      	movs	r1, #64	@ 0x40
 800202c:	4813      	ldr	r0, [pc, #76]	@ (800207c <MX_GPIO_Init+0xbc>)
 800202e:	f001 fb5d 	bl	80036ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RLY_3_Pin|RLY_2_Pin|RLY_1_Pin;
 8002032:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002036:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002038:	2301      	movs	r3, #1
 800203a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002040:	2302      	movs	r3, #2
 8002042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	4619      	mov	r1, r3
 800204a:	480b      	ldr	r0, [pc, #44]	@ (8002078 <MX_GPIO_Init+0xb8>)
 800204c:	f001 f9ca 	bl	80033e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002050:	2340      	movs	r3, #64	@ 0x40
 8002052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002054:	2301      	movs	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2302      	movs	r3, #2
 800205e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	4619      	mov	r1, r3
 8002066:	4805      	ldr	r0, [pc, #20]	@ (800207c <MX_GPIO_Init+0xbc>)
 8002068:	f001 f9bc 	bl	80033e4 <HAL_GPIO_Init>

}
 800206c:	bf00      	nop
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	40011000 	.word	0x40011000
 800207c:	40010c00 	.word	0x40010c00

08002080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002084:	b0a4      	sub	sp, #144	@ 0x90
 8002086:	af0a      	add	r7, sp, #40	@ 0x28

  /* USER CODE BEGIN 1 */
	memset(LoRa_Data, 0, sizeof(LoRa_Data)); // Initialise tous les éléments avec des zéros
 8002088:	2228      	movs	r2, #40	@ 0x28
 800208a:	2100      	movs	r1, #0
 800208c:	486b      	ldr	r0, [pc, #428]	@ (800223c <main+0x1bc>)
 800208e:	f004 f828 	bl	80060e2 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002092:	f000 fc11 	bl	80028b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002096:	f000 f8fb 	bl	8002290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800209a:	f7ff ff91 	bl	8001fc0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800209e:	f7ff feab 	bl	8001df8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80020a2:	f7ff fee7 	bl	8001e74 <MX_ADC2_Init>
  MX_SPI1_Init();
 80020a6:	f000 f951 	bl	800234c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80020aa:	f000 fb05 	bl	80026b8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80020ae:	f000 fb2d 	bl	800270c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  myLoRa = newLoRa();
 80020b2:	4c63      	ldr	r4, [pc, #396]	@ (8002240 <main+0x1c0>)
 80020b4:	f107 0308 	add.w	r3, r7, #8
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fa11 	bl	80014e0 <newLoRa>
 80020be:	4625      	mov	r5, r4
 80020c0:	f107 0408 	add.w	r4, r7, #8
 80020c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020cc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  LoRa new_LoRa;
  myLoRa.CS_port         = GPIOB;
 80020d4:	4b5a      	ldr	r3, [pc, #360]	@ (8002240 <main+0x1c0>)
 80020d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002244 <main+0x1c4>)
 80020d8:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = GPIO_PIN_6;
 80020da:	4b59      	ldr	r3, [pc, #356]	@ (8002240 <main+0x1c0>)
 80020dc:	2240      	movs	r2, #64	@ 0x40
 80020de:	809a      	strh	r2, [r3, #4]
  myLoRa.hSPIx           = &hspi1;
 80020e0:	4b57      	ldr	r3, [pc, #348]	@ (8002240 <main+0x1c0>)
 80020e2:	4a59      	ldr	r2, [pc, #356]	@ (8002248 <main+0x1c8>)
 80020e4:	619a      	str	r2, [r3, #24]

  if(LoRa_init(&myLoRa)==LORA_OK){
 80020e6:	4856      	ldr	r0, [pc, #344]	@ (8002240 <main+0x1c0>)
 80020e8:	f7ff fccc 	bl	8001a84 <LoRa_init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80020f0:	d103      	bne.n	80020fa <main+0x7a>
	  LoRa_stat = 1;
 80020f2:	4b56      	ldr	r3, [pc, #344]	@ (800224c <main+0x1cc>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	e002      	b.n	8002100 <main+0x80>
  }else {
      LoRa_stat = 0; // Échec de l'initialisation
 80020fa:	4b54      	ldr	r3, [pc, #336]	@ (800224c <main+0x1cc>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002100:	4853      	ldr	r0, [pc, #332]	@ (8002250 <main+0x1d0>)
 8002102:	f7fe f825 	bl	8000150 <strlen>
 8002106:	4603      	mov	r3, r0
 8002108:	b29a      	uxth	r2, r3
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
 800210e:	4950      	ldr	r1, [pc, #320]	@ (8002250 <main+0x1d0>)
 8002110:	4850      	ldr	r0, [pc, #320]	@ (8002254 <main+0x1d4>)
 8002112:	f002 fe63 	bl	8004ddc <HAL_UART_Transmit>
 	  int bytes_received = LoRa_receive(&myLoRa, read_data, sizeof(read_data));
 8002116:	2228      	movs	r2, #40	@ 0x28
 8002118:	494f      	ldr	r1, [pc, #316]	@ (8002258 <main+0x1d8>)
 800211a:	4849      	ldr	r0, [pc, #292]	@ (8002240 <main+0x1c0>)
 800211c:	f7ff fc52 	bl	80019c4 <LoRa_receive>
 8002120:	4603      	mov	r3, r0
 8002122:	667b      	str	r3, [r7, #100]	@ 0x64
 	  if (LoRa_stat == 1) {
 8002124:	4b49      	ldr	r3, [pc, #292]	@ (800224c <main+0x1cc>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d129      	bne.n	8002180 <main+0x100>
 	              receiveAndProcessLoRaFrame(bytes_received, read_data, &RxData, DataArray, size);
 800212c:	4b4b      	ldr	r3, [pc, #300]	@ (800225c <main+0x1dc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	4b4b      	ldr	r3, [pc, #300]	@ (8002260 <main+0x1e0>)
 8002134:	4a4b      	ldr	r2, [pc, #300]	@ (8002264 <main+0x1e4>)
 8002136:	4948      	ldr	r1, [pc, #288]	@ (8002258 <main+0x1d8>)
 8002138:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800213a:	f7ff fdb3 	bl	8001ca4 <receiveAndProcessLoRaFrame>
 	              Previous_Temperature = DataArray[0] / 100;
 800213e:	4b48      	ldr	r3, [pc, #288]	@ (8002260 <main+0x1e0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4949      	ldr	r1, [pc, #292]	@ (8002268 <main+0x1e8>)
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fed1 	bl	8000eec <__aeabi_fdiv>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	4b47      	ldr	r3, [pc, #284]	@ (800226c <main+0x1ec>)
 8002150:	601a      	str	r2, [r3, #0]
 	              Previous_Conductivity = DataArray[1];
 8002152:	4b43      	ldr	r3, [pc, #268]	@ (8002260 <main+0x1e0>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4a46      	ldr	r2, [pc, #280]	@ (8002270 <main+0x1f0>)
 8002158:	6013      	str	r3, [r2, #0]
 	              Previous_Salinity = DataArray[2];
 800215a:	4b41      	ldr	r3, [pc, #260]	@ (8002260 <main+0x1e0>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	4a45      	ldr	r2, [pc, #276]	@ (8002274 <main+0x1f4>)
 8002160:	6013      	str	r3, [r2, #0]
 	              Previous_TDS = DataArray[3];
 8002162:	4b3f      	ldr	r3, [pc, #252]	@ (8002260 <main+0x1e0>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	4a44      	ldr	r2, [pc, #272]	@ (8002278 <main+0x1f8>)
 8002168:	6013      	str	r3, [r2, #0]
 	              Previous_PH = DataArray[4]/100;
 800216a:	4b3d      	ldr	r3, [pc, #244]	@ (8002260 <main+0x1e0>)
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	493e      	ldr	r1, [pc, #248]	@ (8002268 <main+0x1e8>)
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe febb 	bl	8000eec <__aeabi_fdiv>
 8002176:	4603      	mov	r3, r0
 8002178:	461a      	mov	r2, r3
 800217a:	4b40      	ldr	r3, [pc, #256]	@ (800227c <main+0x1fc>)
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	e006      	b.n	800218e <main+0x10e>
          } else {
	              HAL_UART_Transmit(&huart2, (uint8_t *)"LoRa n'est pas initialisé\n", strlen("LoRa n'est pas initialisé\n"), HAL_MAX_DELAY);
 8002180:	f04f 33ff 	mov.w	r3, #4294967295
 8002184:	221b      	movs	r2, #27
 8002186:	493e      	ldr	r1, [pc, #248]	@ (8002280 <main+0x200>)
 8002188:	4832      	ldr	r0, [pc, #200]	@ (8002254 <main+0x1d4>)
 800218a:	f002 fe27 	bl	8004ddc <HAL_UART_Transmit>
          }

       HAL_UART_Transmit(&huart2, (uint8_t *)"______________________ Les valeurs stocké ________________________\n", strlen("______________________ Les valeurs stocké ________________________\n"), HAL_MAX_DELAY);
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	2244      	movs	r2, #68	@ 0x44
 8002194:	493b      	ldr	r1, [pc, #236]	@ (8002284 <main+0x204>)
 8002196:	482f      	ldr	r0, [pc, #188]	@ (8002254 <main+0x1d4>)
 8002198:	f002 fe20 	bl	8004ddc <HAL_UART_Transmit>
       snprintf(buffer, sizeof(buffer), "\nTemperature : %.2f °C\nConductivity : %.2f us/cm\nSalinity: %.2f mg/L\nTDS: %.2f mg/L\nPH: %.2f ph \r\n", Previous_Temperature, Previous_Conductivity, Previous_Salinity, Previous_TDS, Previous_PH);
 800219c:	4b33      	ldr	r3, [pc, #204]	@ (800226c <main+0x1ec>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe f941 	bl	8000428 <__aeabi_f2d>
 80021a6:	4604      	mov	r4, r0
 80021a8:	460d      	mov	r5, r1
 80021aa:	4b31      	ldr	r3, [pc, #196]	@ (8002270 <main+0x1f0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f93a 	bl	8000428 <__aeabi_f2d>
 80021b4:	4680      	mov	r8, r0
 80021b6:	4689      	mov	r9, r1
 80021b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002274 <main+0x1f4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f933 	bl	8000428 <__aeabi_f2d>
 80021c2:	4682      	mov	sl, r0
 80021c4:	468b      	mov	fp, r1
 80021c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <main+0x1f8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f92c 	bl	8000428 <__aeabi_f2d>
 80021d0:	e9c7 0100 	strd	r0, r1, [r7]
 80021d4:	4b29      	ldr	r3, [pc, #164]	@ (800227c <main+0x1fc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f925 	bl	8000428 <__aeabi_f2d>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80021e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80021ee:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80021f2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80021f6:	e9cd 4500 	strd	r4, r5, [sp]
 80021fa:	4a23      	ldr	r2, [pc, #140]	@ (8002288 <main+0x208>)
 80021fc:	21c8      	movs	r1, #200	@ 0xc8
 80021fe:	4814      	ldr	r0, [pc, #80]	@ (8002250 <main+0x1d0>)
 8002200:	f003 feac 	bl	8005f5c <sniprintf>
       HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8002204:	4812      	ldr	r0, [pc, #72]	@ (8002250 <main+0x1d0>)
 8002206:	f7fd ffa3 	bl	8000150 <strlen>
 800220a:	4603      	mov	r3, r0
 800220c:	b29a      	uxth	r2, r3
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
 8002212:	490f      	ldr	r1, [pc, #60]	@ (8002250 <main+0x1d0>)
 8002214:	480f      	ldr	r0, [pc, #60]	@ (8002254 <main+0x1d4>)
 8002216:	f002 fde1 	bl	8004ddc <HAL_UART_Transmit>
       HAL_UART_Transmit(&huart2, (uint8_t *)"______________________________________________\n", strlen("______________________________________________\n"), HAL_MAX_DELAY);
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	222f      	movs	r2, #47	@ 0x2f
 8002220:	491a      	ldr	r1, [pc, #104]	@ (800228c <main+0x20c>)
 8002222:	480c      	ldr	r0, [pc, #48]	@ (8002254 <main+0x1d4>)
 8002224:	f002 fdda 	bl	8004ddc <HAL_UART_Transmit>

 	 lireTensionBatterie();
 8002228:	f7fe ffce 	bl	80011c8 <lireTensionBatterie>
 	 lireTensionStable();
 800222c:	f7ff f8ac 	bl	8001388 <lireTensionStable>

 	  HAL_Delay(1000);
 8002230:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002234:	f000 fba2 	bl	800297c <HAL_Delay>
  {
 8002238:	e762      	b.n	8002100 <main+0x80>
 800223a:	bf00      	nop
 800223c:	2000043c 	.word	0x2000043c
 8002240:	200003e8 	.word	0x200003e8
 8002244:	40010c00 	.word	0x40010c00
 8002248:	20000610 	.word	0x20000610
 800224c:	20000464 	.word	0x20000464
 8002250:	20000468 	.word	0x20000468
 8002254:	2000066c 	.word	0x2000066c
 8002258:	20000414 	.word	0x20000414
 800225c:	20000000 	.word	0x20000000
 8002260:	20000534 	.word	0x20000534
 8002264:	20000530 	.word	0x20000530
 8002268:	42c80000 	.word	0x42c80000
 800226c:	200005fc 	.word	0x200005fc
 8002270:	20000600 	.word	0x20000600
 8002274:	20000604 	.word	0x20000604
 8002278:	20000608 	.word	0x20000608
 800227c:	2000060c 	.word	0x2000060c
 8002280:	0800a2c4 	.word	0x0800a2c4
 8002284:	0800a2e0 	.word	0x0800a2e0
 8002288:	0800a328 	.word	0x0800a328
 800228c:	0800a38c 	.word	0x0800a38c

08002290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b094      	sub	sp, #80	@ 0x50
 8002294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002296:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800229a:	2228      	movs	r2, #40	@ 0x28
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 ff1f 	bl	80060e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c0:	2302      	movs	r3, #2
 80022c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022c4:	2301      	movs	r3, #1
 80022c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022c8:	2310      	movs	r3, #16
 80022ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022cc:	2302      	movs	r3, #2
 80022ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80022d0:	2300      	movs	r3, #0
 80022d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80022d4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80022d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022de:	4618      	mov	r0, r3
 80022e0:	f001 fa1c 	bl	800371c <HAL_RCC_OscConfig>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80022ea:	f000 f828 	bl	800233e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ee:	230f      	movs	r3, #15
 80022f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022f2:	2302      	movs	r3, #2
 80022f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	2102      	movs	r1, #2
 800230a:	4618      	mov	r0, r3
 800230c:	f001 fc88 	bl	8003c20 <HAL_RCC_ClockConfig>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002316:	f000 f812 	bl	800233e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800231a:	2302      	movs	r3, #2
 800231c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800231e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002322:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	4618      	mov	r0, r3
 8002328:	f001 fe08 	bl	8003f3c <HAL_RCCEx_PeriphCLKConfig>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002332:	f000 f804 	bl	800233e <Error_Handler>
  }
}
 8002336:	bf00      	nop
 8002338:	3750      	adds	r7, #80	@ 0x50
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002342:	b672      	cpsid	i
}
 8002344:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002346:	bf00      	nop
 8002348:	e7fd      	b.n	8002346 <Error_Handler+0x8>
	...

0800234c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002350:	4b17      	ldr	r3, [pc, #92]	@ (80023b0 <MX_SPI1_Init+0x64>)
 8002352:	4a18      	ldr	r2, [pc, #96]	@ (80023b4 <MX_SPI1_Init+0x68>)
 8002354:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002356:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <MX_SPI1_Init+0x64>)
 8002358:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800235c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800235e:	4b14      	ldr	r3, [pc, #80]	@ (80023b0 <MX_SPI1_Init+0x64>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002364:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <MX_SPI1_Init+0x64>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800236a:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <MX_SPI1_Init+0x64>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002370:	4b0f      	ldr	r3, [pc, #60]	@ (80023b0 <MX_SPI1_Init+0x64>)
 8002372:	2200      	movs	r2, #0
 8002374:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002376:	4b0e      	ldr	r3, [pc, #56]	@ (80023b0 <MX_SPI1_Init+0x64>)
 8002378:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800237c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800237e:	4b0c      	ldr	r3, [pc, #48]	@ (80023b0 <MX_SPI1_Init+0x64>)
 8002380:	2228      	movs	r2, #40	@ 0x28
 8002382:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002384:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <MX_SPI1_Init+0x64>)
 8002386:	2200      	movs	r2, #0
 8002388:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800238a:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <MX_SPI1_Init+0x64>)
 800238c:	2200      	movs	r2, #0
 800238e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002390:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <MX_SPI1_Init+0x64>)
 8002392:	2200      	movs	r2, #0
 8002394:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002396:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <MX_SPI1_Init+0x64>)
 8002398:	220a      	movs	r2, #10
 800239a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800239c:	4804      	ldr	r0, [pc, #16]	@ (80023b0 <MX_SPI1_Init+0x64>)
 800239e:	f001 ff39 	bl	8004214 <HAL_SPI_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023a8:	f7ff ffc9 	bl	800233e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023ac:	bf00      	nop
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000610 	.word	0x20000610
 80023b4:	40013000 	.word	0x40013000

080023b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	@ 0x28
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a22      	ldr	r2, [pc, #136]	@ (800245c <HAL_SPI_MspInit+0xa4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d13d      	bne.n	8002454 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023d8:	4b21      	ldr	r3, [pc, #132]	@ (8002460 <HAL_SPI_MspInit+0xa8>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a20      	ldr	r2, [pc, #128]	@ (8002460 <HAL_SPI_MspInit+0xa8>)
 80023de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023e2:	6193      	str	r3, [r2, #24]
 80023e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002460 <HAL_SPI_MspInit+0xa8>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002460 <HAL_SPI_MspInit+0xa8>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002460 <HAL_SPI_MspInit+0xa8>)
 80023f6:	f043 0308 	orr.w	r3, r3, #8
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b18      	ldr	r3, [pc, #96]	@ (8002460 <HAL_SPI_MspInit+0xa8>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002408:	2328      	movs	r3, #40	@ 0x28
 800240a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4619      	mov	r1, r3
 800241a:	4812      	ldr	r0, [pc, #72]	@ (8002464 <HAL_SPI_MspInit+0xac>)
 800241c:	f000 ffe2 	bl	80033e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002420:	2310      	movs	r3, #16
 8002422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	480c      	ldr	r0, [pc, #48]	@ (8002464 <HAL_SPI_MspInit+0xac>)
 8002434:	f000 ffd6 	bl	80033e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002438:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HAL_SPI_MspInit+0xb0>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002440:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
 800244e:	4a06      	ldr	r2, [pc, #24]	@ (8002468 <HAL_SPI_MspInit+0xb0>)
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002454:	bf00      	nop
 8002456:	3728      	adds	r7, #40	@ 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40013000 	.word	0x40013000
 8002460:	40021000 	.word	0x40021000
 8002464:	40010c00 	.word	0x40010c00
 8002468:	40010000 	.word	0x40010000

0800246c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002472:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <HAL_MspInit+0x5c>)
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	4a14      	ldr	r2, [pc, #80]	@ (80024c8 <HAL_MspInit+0x5c>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6193      	str	r3, [r2, #24]
 800247e:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <HAL_MspInit+0x5c>)
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800248a:	4b0f      	ldr	r3, [pc, #60]	@ (80024c8 <HAL_MspInit+0x5c>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	4a0e      	ldr	r2, [pc, #56]	@ (80024c8 <HAL_MspInit+0x5c>)
 8002490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002494:	61d3      	str	r3, [r2, #28]
 8002496:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <HAL_MspInit+0x5c>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249e:	607b      	str	r3, [r7, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024a2:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <HAL_MspInit+0x60>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	4a04      	ldr	r2, [pc, #16]	@ (80024cc <HAL_MspInit+0x60>)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024be:	bf00      	nop
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40010000 	.word	0x40010000

080024d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <NMI_Handler+0x4>

080024d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <HardFault_Handler+0x4>

080024e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <MemManage_Handler+0x4>

080024e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <BusFault_Handler+0x4>

080024f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <UsageFault_Handler+0x4>

080024f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002520:	f000 fa10 	bl	8002944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}

08002528 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <_kill>:

int _kill(int pid, int sig)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002540:	f003 fe42 	bl	80061c8 <__errno>
 8002544:	4603      	mov	r3, r0
 8002546:	2216      	movs	r2, #22
 8002548:	601a      	str	r2, [r3, #0]
  return -1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_exit>:

void _exit (int status)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800255e:	f04f 31ff 	mov.w	r1, #4294967295
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffe7 	bl	8002536 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <_exit+0x12>

0800256c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	e00a      	b.n	8002594 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800257e:	f3af 8000 	nop.w
 8002582:	4601      	mov	r1, r0
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	60ba      	str	r2, [r7, #8]
 800258a:	b2ca      	uxtb	r2, r1
 800258c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	3301      	adds	r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	dbf0      	blt.n	800257e <_read+0x12>
  }

  return len;
 800259c:	687b      	ldr	r3, [r7, #4]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	e009      	b.n	80025cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	60ba      	str	r2, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3301      	adds	r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	dbf1      	blt.n	80025b8 <_write+0x12>
  }
  return len;
 80025d4:	687b      	ldr	r3, [r7, #4]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <_close>:

int _close(int file)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002604:	605a      	str	r2, [r3, #4]
  return 0;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <_isatty>:

int _isatty(int file)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800261a:	2301      	movs	r3, #1
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
	...

08002640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002648:	4a14      	ldr	r2, [pc, #80]	@ (800269c <_sbrk+0x5c>)
 800264a:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <_sbrk+0x60>)
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002654:	4b13      	ldr	r3, [pc, #76]	@ (80026a4 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800265c:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <_sbrk+0x64>)
 800265e:	4a12      	ldr	r2, [pc, #72]	@ (80026a8 <_sbrk+0x68>)
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002662:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <_sbrk+0x64>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	429a      	cmp	r2, r3
 800266e:	d207      	bcs.n	8002680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002670:	f003 fdaa 	bl	80061c8 <__errno>
 8002674:	4603      	mov	r3, r0
 8002676:	220c      	movs	r2, #12
 8002678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	e009      	b.n	8002694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002680:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002686:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <_sbrk+0x64>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	4a05      	ldr	r2, [pc, #20]	@ (80026a4 <_sbrk+0x64>)
 8002690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002692:	68fb      	ldr	r3, [r7, #12]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20005000 	.word	0x20005000
 80026a0:	00000400 	.word	0x00000400
 80026a4:	20000668 	.word	0x20000668
 80026a8:	20000850 	.word	0x20000850

080026ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026bc:	4b11      	ldr	r3, [pc, #68]	@ (8002704 <MX_USART2_UART_Init+0x4c>)
 80026be:	4a12      	ldr	r2, [pc, #72]	@ (8002708 <MX_USART2_UART_Init+0x50>)
 80026c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026c2:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <MX_USART2_UART_Init+0x4c>)
 80026c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <MX_USART2_UART_Init+0x4c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002704 <MX_USART2_UART_Init+0x4c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002704 <MX_USART2_UART_Init+0x4c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026dc:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <MX_USART2_UART_Init+0x4c>)
 80026de:	220c      	movs	r2, #12
 80026e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026e2:	4b08      	ldr	r3, [pc, #32]	@ (8002704 <MX_USART2_UART_Init+0x4c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e8:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <MX_USART2_UART_Init+0x4c>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ee:	4805      	ldr	r0, [pc, #20]	@ (8002704 <MX_USART2_UART_Init+0x4c>)
 80026f0:	f002 fb24 	bl	8004d3c <HAL_UART_Init>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026fa:	f7ff fe20 	bl	800233e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	2000066c 	.word	0x2000066c
 8002708:	40004400 	.word	0x40004400

0800270c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002710:	4b11      	ldr	r3, [pc, #68]	@ (8002758 <MX_USART3_UART_Init+0x4c>)
 8002712:	4a12      	ldr	r2, [pc, #72]	@ (800275c <MX_USART3_UART_Init+0x50>)
 8002714:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002716:	4b10      	ldr	r3, [pc, #64]	@ (8002758 <MX_USART3_UART_Init+0x4c>)
 8002718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800271c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800271e:	4b0e      	ldr	r3, [pc, #56]	@ (8002758 <MX_USART3_UART_Init+0x4c>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002724:	4b0c      	ldr	r3, [pc, #48]	@ (8002758 <MX_USART3_UART_Init+0x4c>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800272a:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <MX_USART3_UART_Init+0x4c>)
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002730:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <MX_USART3_UART_Init+0x4c>)
 8002732:	220c      	movs	r2, #12
 8002734:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002736:	4b08      	ldr	r3, [pc, #32]	@ (8002758 <MX_USART3_UART_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800273c:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <MX_USART3_UART_Init+0x4c>)
 800273e:	2200      	movs	r2, #0
 8002740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002742:	4805      	ldr	r0, [pc, #20]	@ (8002758 <MX_USART3_UART_Init+0x4c>)
 8002744:	f002 fafa 	bl	8004d3c <HAL_UART_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800274e:	f7ff fdf6 	bl	800233e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200006b4 	.word	0x200006b4
 800275c:	40004800 	.word	0x40004800

08002760 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	@ 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 0318 	add.w	r3, r7, #24
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a37      	ldr	r2, [pc, #220]	@ (8002858 <HAL_UART_MspInit+0xf8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d130      	bne.n	80027e2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002780:	4b36      	ldr	r3, [pc, #216]	@ (800285c <HAL_UART_MspInit+0xfc>)
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	4a35      	ldr	r2, [pc, #212]	@ (800285c <HAL_UART_MspInit+0xfc>)
 8002786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800278a:	61d3      	str	r3, [r2, #28]
 800278c:	4b33      	ldr	r3, [pc, #204]	@ (800285c <HAL_UART_MspInit+0xfc>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002798:	4b30      	ldr	r3, [pc, #192]	@ (800285c <HAL_UART_MspInit+0xfc>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	4a2f      	ldr	r2, [pc, #188]	@ (800285c <HAL_UART_MspInit+0xfc>)
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	6193      	str	r3, [r2, #24]
 80027a4:	4b2d      	ldr	r3, [pc, #180]	@ (800285c <HAL_UART_MspInit+0xfc>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027b0:	2304      	movs	r3, #4
 80027b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b4:	2302      	movs	r3, #2
 80027b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027b8:	2303      	movs	r3, #3
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027bc:	f107 0318 	add.w	r3, r7, #24
 80027c0:	4619      	mov	r1, r3
 80027c2:	4827      	ldr	r0, [pc, #156]	@ (8002860 <HAL_UART_MspInit+0x100>)
 80027c4:	f000 fe0e 	bl	80033e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027c8:	2308      	movs	r3, #8
 80027ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d4:	f107 0318 	add.w	r3, r7, #24
 80027d8:	4619      	mov	r1, r3
 80027da:	4821      	ldr	r0, [pc, #132]	@ (8002860 <HAL_UART_MspInit+0x100>)
 80027dc:	f000 fe02 	bl	80033e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80027e0:	e036      	b.n	8002850 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002864 <HAL_UART_MspInit+0x104>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d131      	bne.n	8002850 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <HAL_UART_MspInit+0xfc>)
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	4a1a      	ldr	r2, [pc, #104]	@ (800285c <HAL_UART_MspInit+0xfc>)
 80027f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f6:	61d3      	str	r3, [r2, #28]
 80027f8:	4b18      	ldr	r3, [pc, #96]	@ (800285c <HAL_UART_MspInit+0xfc>)
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002804:	4b15      	ldr	r3, [pc, #84]	@ (800285c <HAL_UART_MspInit+0xfc>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	4a14      	ldr	r2, [pc, #80]	@ (800285c <HAL_UART_MspInit+0xfc>)
 800280a:	f043 0308 	orr.w	r3, r3, #8
 800280e:	6193      	str	r3, [r2, #24]
 8002810:	4b12      	ldr	r3, [pc, #72]	@ (800285c <HAL_UART_MspInit+0xfc>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800281c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282a:	f107 0318 	add.w	r3, r7, #24
 800282e:	4619      	mov	r1, r3
 8002830:	480d      	ldr	r0, [pc, #52]	@ (8002868 <HAL_UART_MspInit+0x108>)
 8002832:	f000 fdd7 	bl	80033e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002836:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002844:	f107 0318 	add.w	r3, r7, #24
 8002848:	4619      	mov	r1, r3
 800284a:	4807      	ldr	r0, [pc, #28]	@ (8002868 <HAL_UART_MspInit+0x108>)
 800284c:	f000 fdca 	bl	80033e4 <HAL_GPIO_Init>
}
 8002850:	bf00      	nop
 8002852:	3728      	adds	r7, #40	@ 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40004400 	.word	0x40004400
 800285c:	40021000 	.word	0x40021000
 8002860:	40010800 	.word	0x40010800
 8002864:	40004800 	.word	0x40004800
 8002868:	40010c00 	.word	0x40010c00

0800286c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800286c:	f7ff ff1e 	bl	80026ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002870:	480b      	ldr	r0, [pc, #44]	@ (80028a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002872:	490c      	ldr	r1, [pc, #48]	@ (80028a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002874:	4a0c      	ldr	r2, [pc, #48]	@ (80028a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002878:	e002      	b.n	8002880 <LoopCopyDataInit>

0800287a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800287a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800287c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800287e:	3304      	adds	r3, #4

08002880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002884:	d3f9      	bcc.n	800287a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002886:	4a09      	ldr	r2, [pc, #36]	@ (80028ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002888:	4c09      	ldr	r4, [pc, #36]	@ (80028b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800288a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800288c:	e001      	b.n	8002892 <LoopFillZerobss>

0800288e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800288e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002890:	3204      	adds	r2, #4

08002892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002894:	d3fb      	bcc.n	800288e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002896:	f003 fc9d 	bl	80061d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800289a:	f7ff fbf1 	bl	8002080 <main>
  bx lr
 800289e:	4770      	bx	lr
  ldr r0, =_sdata
 80028a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028a4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80028a8:	0800a85c 	.word	0x0800a85c
  ldr r2, =_sbss
 80028ac:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80028b0:	2000084c 	.word	0x2000084c

080028b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028b4:	e7fe      	b.n	80028b4 <ADC1_2_IRQHandler>
	...

080028b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028bc:	4b08      	ldr	r3, [pc, #32]	@ (80028e0 <HAL_Init+0x28>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a07      	ldr	r2, [pc, #28]	@ (80028e0 <HAL_Init+0x28>)
 80028c2:	f043 0310 	orr.w	r3, r3, #16
 80028c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c8:	2003      	movs	r0, #3
 80028ca:	f000 fd57 	bl	800337c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ce:	200f      	movs	r0, #15
 80028d0:	f000 f808 	bl	80028e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028d4:	f7ff fdca 	bl	800246c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40022000 	.word	0x40022000

080028e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ec:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <HAL_InitTick+0x54>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b12      	ldr	r3, [pc, #72]	@ (800293c <HAL_InitTick+0x58>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fd61 	bl	80033ca <HAL_SYSTICK_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e00e      	b.n	8002930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d80a      	bhi.n	800292e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002918:	2200      	movs	r2, #0
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	f04f 30ff 	mov.w	r0, #4294967295
 8002920:	f000 fd37 	bl	8003392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002924:	4a06      	ldr	r2, [pc, #24]	@ (8002940 <HAL_InitTick+0x5c>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000004 	.word	0x20000004
 800293c:	2000000c 	.word	0x2000000c
 8002940:	20000008 	.word	0x20000008

08002944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002948:	4b05      	ldr	r3, [pc, #20]	@ (8002960 <HAL_IncTick+0x1c>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <HAL_IncTick+0x20>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4413      	add	r3, r2
 8002954:	4a03      	ldr	r2, [pc, #12]	@ (8002964 <HAL_IncTick+0x20>)
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	2000000c 	.word	0x2000000c
 8002964:	200006fc 	.word	0x200006fc

08002968 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return uwTick;
 800296c:	4b02      	ldr	r3, [pc, #8]	@ (8002978 <HAL_GetTick+0x10>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	200006fc 	.word	0x200006fc

0800297c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002984:	f7ff fff0 	bl	8002968 <HAL_GetTick>
 8002988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d005      	beq.n	80029a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002996:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <HAL_Delay+0x44>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4413      	add	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029a2:	bf00      	nop
 80029a4:	f7ff ffe0 	bl	8002968 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d8f7      	bhi.n	80029a4 <HAL_Delay+0x28>
  {
  }
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	2000000c 	.word	0x2000000c

080029c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e0be      	b.n	8002b64 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff fa74 	bl	8001ef0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 fbc5 	bl	8003198 <ADC_ConversionStop_Disable>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 8099 	bne.w	8002b52 <HAL_ADC_Init+0x18e>
 8002a20:	7dfb      	ldrb	r3, [r7, #23]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f040 8095 	bne.w	8002b52 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a30:	f023 0302 	bic.w	r3, r3, #2
 8002a34:	f043 0202 	orr.w	r2, r3, #2
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a44:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7b1b      	ldrb	r3, [r3, #12]
 8002a4a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a4c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a5c:	d003      	beq.n	8002a66 <HAL_ADC_Init+0xa2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d102      	bne.n	8002a6c <HAL_ADC_Init+0xa8>
 8002a66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a6a:	e000      	b.n	8002a6e <HAL_ADC_Init+0xaa>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7d1b      	ldrb	r3, [r3, #20]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d119      	bne.n	8002ab0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	7b1b      	ldrb	r3, [r3, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	035a      	lsls	r2, r3, #13
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	e00b      	b.n	8002ab0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa8:	f043 0201 	orr.w	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	4b28      	ldr	r3, [pc, #160]	@ (8002b6c <HAL_ADC_Init+0x1a8>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ae0:	d003      	beq.n	8002aea <HAL_ADC_Init+0x126>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d104      	bne.n	8002af4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	4b18      	ldr	r3, [pc, #96]	@ (8002b70 <HAL_ADC_Init+0x1ac>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d10b      	bne.n	8002b30 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b2e:	e018      	b.n	8002b62 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	f023 0312 	bic.w	r3, r3, #18
 8002b38:	f043 0210 	orr.w	r2, r3, #16
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	f043 0201 	orr.w	r2, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b50:	e007      	b.n	8002b62 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b56:	f043 0210 	orr.w	r2, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	ffe1f7fd 	.word	0xffe1f7fd
 8002b70:	ff1f0efe 	.word	0xff1f0efe

08002b74 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_ADC_Start+0x1a>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e098      	b.n	8002cc0 <HAL_ADC_Start+0x14c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 faa4 	bl	80030e4 <ADC_Enable>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 8087 	bne.w	8002cb6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a41      	ldr	r2, [pc, #260]	@ (8002cc8 <HAL_ADC_Start+0x154>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d105      	bne.n	8002bd2 <HAL_ADC_Start+0x5e>
 8002bc6:	4b41      	ldr	r3, [pc, #260]	@ (8002ccc <HAL_ADC_Start+0x158>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d115      	bne.n	8002bfe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d026      	beq.n	8002c3a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bf4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bfc:	e01d      	b.n	8002c3a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c02:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a2f      	ldr	r2, [pc, #188]	@ (8002ccc <HAL_ADC_Start+0x158>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d004      	beq.n	8002c1e <HAL_ADC_Start+0xaa>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a2b      	ldr	r2, [pc, #172]	@ (8002cc8 <HAL_ADC_Start+0x154>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d10d      	bne.n	8002c3a <HAL_ADC_Start+0xc6>
 8002c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002ccc <HAL_ADC_Start+0x158>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c32:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	f023 0206 	bic.w	r2, r3, #6
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c52:	e002      	b.n	8002c5a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f06f 0202 	mvn.w	r2, #2
 8002c6a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002c76:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002c7a:	d113      	bne.n	8002ca4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c80:	4a11      	ldr	r2, [pc, #68]	@ (8002cc8 <HAL_ADC_Start+0x154>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d105      	bne.n	8002c92 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c86:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <HAL_ADC_Start+0x158>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d108      	bne.n	8002ca4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002ca0:	609a      	str	r2, [r3, #8]
 8002ca2:	e00c      	b.n	8002cbe <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	e003      	b.n	8002cbe <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40012800 	.word	0x40012800
 8002ccc:	40012400 	.word	0x40012400

08002cd0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002ce6:	f7ff fe3f 	bl	8002968 <HAL_GetTick>
 8002cea:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfe:	f043 0220 	orr.w	r2, r3, #32
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e0d3      	b.n	8002eba <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d131      	bne.n	8002d84 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d26:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d12a      	bne.n	8002d84 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d2e:	e021      	b.n	8002d74 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d36:	d01d      	beq.n	8002d74 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <HAL_ADC_PollForConversion+0x7e>
 8002d3e:	f7ff fe13 	bl	8002968 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d212      	bcs.n	8002d74 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	f043 0204 	orr.w	r2, r3, #4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e0a2      	b.n	8002eba <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0d6      	beq.n	8002d30 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002d82:	e070      	b.n	8002e66 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002d84:	4b4f      	ldr	r3, [pc, #316]	@ (8002ec4 <HAL_ADC_PollForConversion+0x1f4>)
 8002d86:	681c      	ldr	r4, [r3, #0]
 8002d88:	2002      	movs	r0, #2
 8002d8a:	f001 f98d 	bl	80040a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6919      	ldr	r1, [r3, #16]
 8002d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8002ec8 <HAL_ADC_PollForConversion+0x1f8>)
 8002d9c:	400b      	ands	r3, r1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d118      	bne.n	8002dd4 <HAL_ADC_PollForConversion+0x104>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68d9      	ldr	r1, [r3, #12]
 8002da8:	4b48      	ldr	r3, [pc, #288]	@ (8002ecc <HAL_ADC_PollForConversion+0x1fc>)
 8002daa:	400b      	ands	r3, r1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d111      	bne.n	8002dd4 <HAL_ADC_PollForConversion+0x104>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6919      	ldr	r1, [r3, #16]
 8002db6:	4b46      	ldr	r3, [pc, #280]	@ (8002ed0 <HAL_ADC_PollForConversion+0x200>)
 8002db8:	400b      	ands	r3, r1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d108      	bne.n	8002dd0 <HAL_ADC_PollForConversion+0x100>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68d9      	ldr	r1, [r3, #12]
 8002dc4:	4b43      	ldr	r3, [pc, #268]	@ (8002ed4 <HAL_ADC_PollForConversion+0x204>)
 8002dc6:	400b      	ands	r3, r1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_ADC_PollForConversion+0x100>
 8002dcc:	2314      	movs	r3, #20
 8002dce:	e020      	b.n	8002e12 <HAL_ADC_PollForConversion+0x142>
 8002dd0:	2329      	movs	r3, #41	@ 0x29
 8002dd2:	e01e      	b.n	8002e12 <HAL_ADC_PollForConversion+0x142>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6919      	ldr	r1, [r3, #16]
 8002dda:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed0 <HAL_ADC_PollForConversion+0x200>)
 8002ddc:	400b      	ands	r3, r1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_ADC_PollForConversion+0x120>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68d9      	ldr	r1, [r3, #12]
 8002de8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ed4 <HAL_ADC_PollForConversion+0x204>)
 8002dea:	400b      	ands	r3, r1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00d      	beq.n	8002e0c <HAL_ADC_PollForConversion+0x13c>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6919      	ldr	r1, [r3, #16]
 8002df6:	4b38      	ldr	r3, [pc, #224]	@ (8002ed8 <HAL_ADC_PollForConversion+0x208>)
 8002df8:	400b      	ands	r3, r1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d108      	bne.n	8002e10 <HAL_ADC_PollForConversion+0x140>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68d9      	ldr	r1, [r3, #12]
 8002e04:	4b34      	ldr	r3, [pc, #208]	@ (8002ed8 <HAL_ADC_PollForConversion+0x208>)
 8002e06:	400b      	ands	r3, r1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_PollForConversion+0x140>
 8002e0c:	2354      	movs	r3, #84	@ 0x54
 8002e0e:	e000      	b.n	8002e12 <HAL_ADC_PollForConversion+0x142>
 8002e10:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002e12:	fb02 f303 	mul.w	r3, r2, r3
 8002e16:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002e18:	e021      	b.n	8002e5e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d01a      	beq.n	8002e58 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d007      	beq.n	8002e38 <HAL_ADC_PollForConversion+0x168>
 8002e28:	f7ff fd9e 	bl	8002968 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d20f      	bcs.n	8002e58 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d90b      	bls.n	8002e58 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e44:	f043 0204 	orr.w	r2, r3, #4
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e030      	b.n	8002eba <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d8d9      	bhi.n	8002e1a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f06f 0212 	mvn.w	r2, #18
 8002e6e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002e86:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002e8a:	d115      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d111      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb0:	f043 0201 	orr.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	371c      	adds	r7, #28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd90      	pop	{r4, r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000004 	.word	0x20000004
 8002ec8:	24924924 	.word	0x24924924
 8002ecc:	00924924 	.word	0x00924924
 8002ed0:	12492492 	.word	0x12492492
 8002ed4:	00492492 	.word	0x00492492
 8002ed8:	00249249 	.word	0x00249249

08002edc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x20>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e0dc      	b.n	80030ce <HAL_ADC_ConfigChannel+0x1da>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b06      	cmp	r3, #6
 8002f22:	d81c      	bhi.n	8002f5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	3b05      	subs	r3, #5
 8002f36:	221f      	movs	r2, #31
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	4019      	ands	r1, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3b05      	subs	r3, #5
 8002f50:	fa00 f203 	lsl.w	r2, r0, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f5c:	e03c      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d81c      	bhi.n	8002fa0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	3b23      	subs	r3, #35	@ 0x23
 8002f78:	221f      	movs	r2, #31
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	4019      	ands	r1, r3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	3b23      	subs	r3, #35	@ 0x23
 8002f92:	fa00 f203 	lsl.w	r2, r0, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f9e:	e01b      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	3b41      	subs	r3, #65	@ 0x41
 8002fb2:	221f      	movs	r2, #31
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	4019      	ands	r1, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	3b41      	subs	r3, #65	@ 0x41
 8002fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b09      	cmp	r3, #9
 8002fde:	d91c      	bls.n	800301a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68d9      	ldr	r1, [r3, #12]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	3b1e      	subs	r3, #30
 8002ff2:	2207      	movs	r2, #7
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	4019      	ands	r1, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	6898      	ldr	r0, [r3, #8]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	3b1e      	subs	r3, #30
 800300c:	fa00 f203 	lsl.w	r2, r0, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	60da      	str	r2, [r3, #12]
 8003018:	e019      	b.n	800304e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6919      	ldr	r1, [r3, #16]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	2207      	movs	r2, #7
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	4019      	ands	r1, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	6898      	ldr	r0, [r3, #8]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	fa00 f203 	lsl.w	r2, r0, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b10      	cmp	r3, #16
 8003054:	d003      	beq.n	800305e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800305a:	2b11      	cmp	r3, #17
 800305c:	d132      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1d      	ldr	r2, [pc, #116]	@ (80030d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d125      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d126      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003084:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b10      	cmp	r3, #16
 800308c:	d11a      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800308e:	4b13      	ldr	r3, [pc, #76]	@ (80030dc <HAL_ADC_ConfigChannel+0x1e8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a13      	ldr	r2, [pc, #76]	@ (80030e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	0c9a      	lsrs	r2, r3, #18
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030a4:	e002      	b.n	80030ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f9      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x1b2>
 80030b2:	e007      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr
 80030d8:	40012400 	.word	0x40012400
 80030dc:	20000004 	.word	0x20000004
 80030e0:	431bde83 	.word	0x431bde83

080030e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d040      	beq.n	8003184 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0201 	orr.w	r2, r2, #1
 8003110:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003112:	4b1f      	ldr	r3, [pc, #124]	@ (8003190 <ADC_Enable+0xac>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1f      	ldr	r2, [pc, #124]	@ (8003194 <ADC_Enable+0xb0>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	0c9b      	lsrs	r3, r3, #18
 800311e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003120:	e002      	b.n	8003128 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	3b01      	subs	r3, #1
 8003126:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f9      	bne.n	8003122 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800312e:	f7ff fc1b 	bl	8002968 <HAL_GetTick>
 8003132:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003134:	e01f      	b.n	8003176 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003136:	f7ff fc17 	bl	8002968 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d918      	bls.n	8003176 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b01      	cmp	r3, #1
 8003150:	d011      	beq.n	8003176 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003156:	f043 0210 	orr.w	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003162:	f043 0201 	orr.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e007      	b.n	8003186 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b01      	cmp	r3, #1
 8003182:	d1d8      	bne.n	8003136 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000004 	.word	0x20000004
 8003194:	431bde83 	.word	0x431bde83

08003198 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d12e      	bne.n	8003210 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031c2:	f7ff fbd1 	bl	8002968 <HAL_GetTick>
 80031c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80031c8:	e01b      	b.n	8003202 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031ca:	f7ff fbcd 	bl	8002968 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d914      	bls.n	8003202 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10d      	bne.n	8003202 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ea:	f043 0210 	orr.w	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f6:	f043 0201 	orr.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e007      	b.n	8003212 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d0dc      	beq.n	80031ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800322c:	4b0c      	ldr	r3, [pc, #48]	@ (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003238:	4013      	ands	r3, r2
 800323a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003244:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800324c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324e:	4a04      	ldr	r2, [pc, #16]	@ (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	60d3      	str	r3, [r2, #12]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003268:	4b04      	ldr	r3, [pc, #16]	@ (800327c <__NVIC_GetPriorityGrouping+0x18>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	f003 0307 	and.w	r3, r3, #7
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	6039      	str	r1, [r7, #0]
 800328a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003290:	2b00      	cmp	r3, #0
 8003292:	db0a      	blt.n	80032aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2da      	uxtb	r2, r3
 8003298:	490c      	ldr	r1, [pc, #48]	@ (80032cc <__NVIC_SetPriority+0x4c>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	440b      	add	r3, r1
 80032a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a8:	e00a      	b.n	80032c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4908      	ldr	r1, [pc, #32]	@ (80032d0 <__NVIC_SetPriority+0x50>)
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	3b04      	subs	r3, #4
 80032b8:	0112      	lsls	r2, r2, #4
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	440b      	add	r3, r1
 80032be:	761a      	strb	r2, [r3, #24]
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	e000e100 	.word	0xe000e100
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b089      	sub	sp, #36	@ 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f1c3 0307 	rsb	r3, r3, #7
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	bf28      	it	cs
 80032f2:	2304      	movcs	r3, #4
 80032f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3304      	adds	r3, #4
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d902      	bls.n	8003304 <NVIC_EncodePriority+0x30>
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3b03      	subs	r3, #3
 8003302:	e000      	b.n	8003306 <NVIC_EncodePriority+0x32>
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003308:	f04f 32ff 	mov.w	r2, #4294967295
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	401a      	ands	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800331c:	f04f 31ff 	mov.w	r1, #4294967295
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	43d9      	mvns	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	4313      	orrs	r3, r2
         );
}
 800332e:	4618      	mov	r0, r3
 8003330:	3724      	adds	r7, #36	@ 0x24
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003348:	d301      	bcc.n	800334e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800334a:	2301      	movs	r3, #1
 800334c:	e00f      	b.n	800336e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800334e:	4a0a      	ldr	r2, [pc, #40]	@ (8003378 <SysTick_Config+0x40>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3b01      	subs	r3, #1
 8003354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003356:	210f      	movs	r1, #15
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	f7ff ff90 	bl	8003280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003360:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <SysTick_Config+0x40>)
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003366:	4b04      	ldr	r3, [pc, #16]	@ (8003378 <SysTick_Config+0x40>)
 8003368:	2207      	movs	r2, #7
 800336a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	e000e010 	.word	0xe000e010

0800337c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff49 	bl	800321c <__NVIC_SetPriorityGrouping>
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003392:	b580      	push	{r7, lr}
 8003394:	b086      	sub	sp, #24
 8003396:	af00      	add	r7, sp, #0
 8003398:	4603      	mov	r3, r0
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033a4:	f7ff ff5e 	bl	8003264 <__NVIC_GetPriorityGrouping>
 80033a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	6978      	ldr	r0, [r7, #20]
 80033b0:	f7ff ff90 	bl	80032d4 <NVIC_EncodePriority>
 80033b4:	4602      	mov	r2, r0
 80033b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff5f 	bl	8003280 <__NVIC_SetPriority>
}
 80033c2:	bf00      	nop
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff ffb0 	bl	8003338 <SysTick_Config>
 80033d8:	4603      	mov	r3, r0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b08b      	sub	sp, #44	@ 0x2c
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ee:	2300      	movs	r3, #0
 80033f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033f2:	2300      	movs	r3, #0
 80033f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f6:	e169      	b.n	80036cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033f8:	2201      	movs	r2, #1
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	429a      	cmp	r2, r3
 8003412:	f040 8158 	bne.w	80036c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4a9a      	ldr	r2, [pc, #616]	@ (8003684 <HAL_GPIO_Init+0x2a0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d05e      	beq.n	80034de <HAL_GPIO_Init+0xfa>
 8003420:	4a98      	ldr	r2, [pc, #608]	@ (8003684 <HAL_GPIO_Init+0x2a0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d875      	bhi.n	8003512 <HAL_GPIO_Init+0x12e>
 8003426:	4a98      	ldr	r2, [pc, #608]	@ (8003688 <HAL_GPIO_Init+0x2a4>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d058      	beq.n	80034de <HAL_GPIO_Init+0xfa>
 800342c:	4a96      	ldr	r2, [pc, #600]	@ (8003688 <HAL_GPIO_Init+0x2a4>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d86f      	bhi.n	8003512 <HAL_GPIO_Init+0x12e>
 8003432:	4a96      	ldr	r2, [pc, #600]	@ (800368c <HAL_GPIO_Init+0x2a8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d052      	beq.n	80034de <HAL_GPIO_Init+0xfa>
 8003438:	4a94      	ldr	r2, [pc, #592]	@ (800368c <HAL_GPIO_Init+0x2a8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d869      	bhi.n	8003512 <HAL_GPIO_Init+0x12e>
 800343e:	4a94      	ldr	r2, [pc, #592]	@ (8003690 <HAL_GPIO_Init+0x2ac>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d04c      	beq.n	80034de <HAL_GPIO_Init+0xfa>
 8003444:	4a92      	ldr	r2, [pc, #584]	@ (8003690 <HAL_GPIO_Init+0x2ac>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d863      	bhi.n	8003512 <HAL_GPIO_Init+0x12e>
 800344a:	4a92      	ldr	r2, [pc, #584]	@ (8003694 <HAL_GPIO_Init+0x2b0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d046      	beq.n	80034de <HAL_GPIO_Init+0xfa>
 8003450:	4a90      	ldr	r2, [pc, #576]	@ (8003694 <HAL_GPIO_Init+0x2b0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d85d      	bhi.n	8003512 <HAL_GPIO_Init+0x12e>
 8003456:	2b12      	cmp	r3, #18
 8003458:	d82a      	bhi.n	80034b0 <HAL_GPIO_Init+0xcc>
 800345a:	2b12      	cmp	r3, #18
 800345c:	d859      	bhi.n	8003512 <HAL_GPIO_Init+0x12e>
 800345e:	a201      	add	r2, pc, #4	@ (adr r2, 8003464 <HAL_GPIO_Init+0x80>)
 8003460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003464:	080034df 	.word	0x080034df
 8003468:	080034b9 	.word	0x080034b9
 800346c:	080034cb 	.word	0x080034cb
 8003470:	0800350d 	.word	0x0800350d
 8003474:	08003513 	.word	0x08003513
 8003478:	08003513 	.word	0x08003513
 800347c:	08003513 	.word	0x08003513
 8003480:	08003513 	.word	0x08003513
 8003484:	08003513 	.word	0x08003513
 8003488:	08003513 	.word	0x08003513
 800348c:	08003513 	.word	0x08003513
 8003490:	08003513 	.word	0x08003513
 8003494:	08003513 	.word	0x08003513
 8003498:	08003513 	.word	0x08003513
 800349c:	08003513 	.word	0x08003513
 80034a0:	08003513 	.word	0x08003513
 80034a4:	08003513 	.word	0x08003513
 80034a8:	080034c1 	.word	0x080034c1
 80034ac:	080034d5 	.word	0x080034d5
 80034b0:	4a79      	ldr	r2, [pc, #484]	@ (8003698 <HAL_GPIO_Init+0x2b4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034b6:	e02c      	b.n	8003512 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	623b      	str	r3, [r7, #32]
          break;
 80034be:	e029      	b.n	8003514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	3304      	adds	r3, #4
 80034c6:	623b      	str	r3, [r7, #32]
          break;
 80034c8:	e024      	b.n	8003514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	3308      	adds	r3, #8
 80034d0:	623b      	str	r3, [r7, #32]
          break;
 80034d2:	e01f      	b.n	8003514 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	330c      	adds	r3, #12
 80034da:	623b      	str	r3, [r7, #32]
          break;
 80034dc:	e01a      	b.n	8003514 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d102      	bne.n	80034ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034e6:	2304      	movs	r3, #4
 80034e8:	623b      	str	r3, [r7, #32]
          break;
 80034ea:	e013      	b.n	8003514 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d105      	bne.n	8003500 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034f4:	2308      	movs	r3, #8
 80034f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	611a      	str	r2, [r3, #16]
          break;
 80034fe:	e009      	b.n	8003514 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003500:	2308      	movs	r3, #8
 8003502:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	615a      	str	r2, [r3, #20]
          break;
 800350a:	e003      	b.n	8003514 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800350c:	2300      	movs	r3, #0
 800350e:	623b      	str	r3, [r7, #32]
          break;
 8003510:	e000      	b.n	8003514 <HAL_GPIO_Init+0x130>
          break;
 8003512:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2bff      	cmp	r3, #255	@ 0xff
 8003518:	d801      	bhi.n	800351e <HAL_GPIO_Init+0x13a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	e001      	b.n	8003522 <HAL_GPIO_Init+0x13e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3304      	adds	r3, #4
 8003522:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2bff      	cmp	r3, #255	@ 0xff
 8003528:	d802      	bhi.n	8003530 <HAL_GPIO_Init+0x14c>
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	e002      	b.n	8003536 <HAL_GPIO_Init+0x152>
 8003530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003532:	3b08      	subs	r3, #8
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	210f      	movs	r1, #15
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	fa01 f303 	lsl.w	r3, r1, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	401a      	ands	r2, r3
 8003548:	6a39      	ldr	r1, [r7, #32]
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	fa01 f303 	lsl.w	r3, r1, r3
 8003550:	431a      	orrs	r2, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80b1 	beq.w	80036c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003564:	4b4d      	ldr	r3, [pc, #308]	@ (800369c <HAL_GPIO_Init+0x2b8>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	4a4c      	ldr	r2, [pc, #304]	@ (800369c <HAL_GPIO_Init+0x2b8>)
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	6193      	str	r3, [r2, #24]
 8003570:	4b4a      	ldr	r3, [pc, #296]	@ (800369c <HAL_GPIO_Init+0x2b8>)
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800357c:	4a48      	ldr	r2, [pc, #288]	@ (80036a0 <HAL_GPIO_Init+0x2bc>)
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	3302      	adds	r3, #2
 8003584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003588:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	220f      	movs	r2, #15
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4013      	ands	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a40      	ldr	r2, [pc, #256]	@ (80036a4 <HAL_GPIO_Init+0x2c0>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d013      	beq.n	80035d0 <HAL_GPIO_Init+0x1ec>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a3f      	ldr	r2, [pc, #252]	@ (80036a8 <HAL_GPIO_Init+0x2c4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00d      	beq.n	80035cc <HAL_GPIO_Init+0x1e8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a3e      	ldr	r2, [pc, #248]	@ (80036ac <HAL_GPIO_Init+0x2c8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <HAL_GPIO_Init+0x1e4>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a3d      	ldr	r2, [pc, #244]	@ (80036b0 <HAL_GPIO_Init+0x2cc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d101      	bne.n	80035c4 <HAL_GPIO_Init+0x1e0>
 80035c0:	2303      	movs	r3, #3
 80035c2:	e006      	b.n	80035d2 <HAL_GPIO_Init+0x1ee>
 80035c4:	2304      	movs	r3, #4
 80035c6:	e004      	b.n	80035d2 <HAL_GPIO_Init+0x1ee>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e002      	b.n	80035d2 <HAL_GPIO_Init+0x1ee>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <HAL_GPIO_Init+0x1ee>
 80035d0:	2300      	movs	r3, #0
 80035d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d4:	f002 0203 	and.w	r2, r2, #3
 80035d8:	0092      	lsls	r2, r2, #2
 80035da:	4093      	lsls	r3, r2
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035e2:	492f      	ldr	r1, [pc, #188]	@ (80036a0 <HAL_GPIO_Init+0x2bc>)
 80035e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e6:	089b      	lsrs	r3, r3, #2
 80035e8:	3302      	adds	r3, #2
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d006      	beq.n	800360a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035fc:	4b2d      	ldr	r3, [pc, #180]	@ (80036b4 <HAL_GPIO_Init+0x2d0>)
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	492c      	ldr	r1, [pc, #176]	@ (80036b4 <HAL_GPIO_Init+0x2d0>)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]
 8003608:	e006      	b.n	8003618 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800360a:	4b2a      	ldr	r3, [pc, #168]	@ (80036b4 <HAL_GPIO_Init+0x2d0>)
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	43db      	mvns	r3, r3
 8003612:	4928      	ldr	r1, [pc, #160]	@ (80036b4 <HAL_GPIO_Init+0x2d0>)
 8003614:	4013      	ands	r3, r2
 8003616:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d006      	beq.n	8003632 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003624:	4b23      	ldr	r3, [pc, #140]	@ (80036b4 <HAL_GPIO_Init+0x2d0>)
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	4922      	ldr	r1, [pc, #136]	@ (80036b4 <HAL_GPIO_Init+0x2d0>)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	4313      	orrs	r3, r2
 800362e:	60cb      	str	r3, [r1, #12]
 8003630:	e006      	b.n	8003640 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003632:	4b20      	ldr	r3, [pc, #128]	@ (80036b4 <HAL_GPIO_Init+0x2d0>)
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	43db      	mvns	r3, r3
 800363a:	491e      	ldr	r1, [pc, #120]	@ (80036b4 <HAL_GPIO_Init+0x2d0>)
 800363c:	4013      	ands	r3, r2
 800363e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d006      	beq.n	800365a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800364c:	4b19      	ldr	r3, [pc, #100]	@ (80036b4 <HAL_GPIO_Init+0x2d0>)
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	4918      	ldr	r1, [pc, #96]	@ (80036b4 <HAL_GPIO_Init+0x2d0>)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]
 8003658:	e006      	b.n	8003668 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800365a:	4b16      	ldr	r3, [pc, #88]	@ (80036b4 <HAL_GPIO_Init+0x2d0>)
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	43db      	mvns	r3, r3
 8003662:	4914      	ldr	r1, [pc, #80]	@ (80036b4 <HAL_GPIO_Init+0x2d0>)
 8003664:	4013      	ands	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d021      	beq.n	80036b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003674:	4b0f      	ldr	r3, [pc, #60]	@ (80036b4 <HAL_GPIO_Init+0x2d0>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	490e      	ldr	r1, [pc, #56]	@ (80036b4 <HAL_GPIO_Init+0x2d0>)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	4313      	orrs	r3, r2
 800367e:	600b      	str	r3, [r1, #0]
 8003680:	e021      	b.n	80036c6 <HAL_GPIO_Init+0x2e2>
 8003682:	bf00      	nop
 8003684:	10320000 	.word	0x10320000
 8003688:	10310000 	.word	0x10310000
 800368c:	10220000 	.word	0x10220000
 8003690:	10210000 	.word	0x10210000
 8003694:	10120000 	.word	0x10120000
 8003698:	10110000 	.word	0x10110000
 800369c:	40021000 	.word	0x40021000
 80036a0:	40010000 	.word	0x40010000
 80036a4:	40010800 	.word	0x40010800
 80036a8:	40010c00 	.word	0x40010c00
 80036ac:	40011000 	.word	0x40011000
 80036b0:	40011400 	.word	0x40011400
 80036b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80036b8:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <HAL_GPIO_Init+0x304>)
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	43db      	mvns	r3, r3
 80036c0:	4909      	ldr	r1, [pc, #36]	@ (80036e8 <HAL_GPIO_Init+0x304>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	3301      	adds	r3, #1
 80036ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d2:	fa22 f303 	lsr.w	r3, r2, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f47f ae8e 	bne.w	80033f8 <HAL_GPIO_Init+0x14>
  }
}
 80036dc:	bf00      	nop
 80036de:	bf00      	nop
 80036e0:	372c      	adds	r7, #44	@ 0x2c
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr
 80036e8:	40010400 	.word	0x40010400

080036ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	807b      	strh	r3, [r7, #2]
 80036f8:	4613      	mov	r3, r2
 80036fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036fc:	787b      	ldrb	r3, [r7, #1]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003702:	887a      	ldrh	r2, [r7, #2]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003708:	e003      	b.n	8003712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800370a:	887b      	ldrh	r3, [r7, #2]
 800370c:	041a      	lsls	r2, r3, #16
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	611a      	str	r2, [r3, #16]
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e272      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8087 	beq.w	800384a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800373c:	4b92      	ldr	r3, [pc, #584]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b04      	cmp	r3, #4
 8003746:	d00c      	beq.n	8003762 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003748:	4b8f      	ldr	r3, [pc, #572]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 030c 	and.w	r3, r3, #12
 8003750:	2b08      	cmp	r3, #8
 8003752:	d112      	bne.n	800377a <HAL_RCC_OscConfig+0x5e>
 8003754:	4b8c      	ldr	r3, [pc, #560]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003760:	d10b      	bne.n	800377a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003762:	4b89      	ldr	r3, [pc, #548]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d06c      	beq.n	8003848 <HAL_RCC_OscConfig+0x12c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d168      	bne.n	8003848 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e24c      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003782:	d106      	bne.n	8003792 <HAL_RCC_OscConfig+0x76>
 8003784:	4b80      	ldr	r3, [pc, #512]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a7f      	ldr	r2, [pc, #508]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 800378a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	e02e      	b.n	80037f0 <HAL_RCC_OscConfig+0xd4>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x98>
 800379a:	4b7b      	ldr	r3, [pc, #492]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a7a      	ldr	r2, [pc, #488]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	4b78      	ldr	r3, [pc, #480]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a77      	ldr	r2, [pc, #476]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	e01d      	b.n	80037f0 <HAL_RCC_OscConfig+0xd4>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037bc:	d10c      	bne.n	80037d8 <HAL_RCC_OscConfig+0xbc>
 80037be:	4b72      	ldr	r3, [pc, #456]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a71      	ldr	r2, [pc, #452]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	4b6f      	ldr	r3, [pc, #444]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a6e      	ldr	r2, [pc, #440]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e00b      	b.n	80037f0 <HAL_RCC_OscConfig+0xd4>
 80037d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a6a      	ldr	r2, [pc, #424]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	4b68      	ldr	r3, [pc, #416]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a67      	ldr	r2, [pc, #412]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 80037ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d013      	beq.n	8003820 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f8:	f7ff f8b6 	bl	8002968 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003800:	f7ff f8b2 	bl	8002968 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	@ 0x64
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e200      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003812:	4b5d      	ldr	r3, [pc, #372]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0xe4>
 800381e:	e014      	b.n	800384a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7ff f8a2 	bl	8002968 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003828:	f7ff f89e 	bl	8002968 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	@ 0x64
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e1ec      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383a:	4b53      	ldr	r3, [pc, #332]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x10c>
 8003846:	e000      	b.n	800384a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d063      	beq.n	800391e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003856:	4b4c      	ldr	r3, [pc, #304]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00b      	beq.n	800387a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003862:	4b49      	ldr	r3, [pc, #292]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 030c 	and.w	r3, r3, #12
 800386a:	2b08      	cmp	r3, #8
 800386c:	d11c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x18c>
 800386e:	4b46      	ldr	r3, [pc, #280]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d116      	bne.n	80038a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387a:	4b43      	ldr	r3, [pc, #268]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_RCC_OscConfig+0x176>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d001      	beq.n	8003892 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e1c0      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003892:	4b3d      	ldr	r3, [pc, #244]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4939      	ldr	r1, [pc, #228]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a6:	e03a      	b.n	800391e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b0:	4b36      	ldr	r3, [pc, #216]	@ (800398c <HAL_RCC_OscConfig+0x270>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7ff f857 	bl	8002968 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038be:	f7ff f853 	bl	8002968 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e1a1      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4927      	ldr	r1, [pc, #156]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	600b      	str	r3, [r1, #0]
 80038f0:	e015      	b.n	800391e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f2:	4b26      	ldr	r3, [pc, #152]	@ (800398c <HAL_RCC_OscConfig+0x270>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7ff f836 	bl	8002968 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003900:	f7ff f832 	bl	8002968 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e180      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003912:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d03a      	beq.n	80039a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d019      	beq.n	8003966 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003932:	4b17      	ldr	r3, [pc, #92]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003938:	f7ff f816 	bl	8002968 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003940:	f7ff f812 	bl	8002968 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e160      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003952:	4b0d      	ldr	r3, [pc, #52]	@ (8003988 <HAL_RCC_OscConfig+0x26c>)
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800395e:	2001      	movs	r0, #1
 8003960:	f000 face 	bl	8003f00 <RCC_Delay>
 8003964:	e01c      	b.n	80039a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003966:	4b0a      	ldr	r3, [pc, #40]	@ (8003990 <HAL_RCC_OscConfig+0x274>)
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396c:	f7fe fffc 	bl	8002968 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003972:	e00f      	b.n	8003994 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003974:	f7fe fff8 	bl	8002968 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d908      	bls.n	8003994 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e146      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000
 800398c:	42420000 	.word	0x42420000
 8003990:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003994:	4b92      	ldr	r3, [pc, #584]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e9      	bne.n	8003974 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80a6 	beq.w	8003afa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ae:	2300      	movs	r3, #0
 80039b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b2:	4b8b      	ldr	r3, [pc, #556]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10d      	bne.n	80039da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039be:	4b88      	ldr	r3, [pc, #544]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	4a87      	ldr	r2, [pc, #540]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 80039c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039c8:	61d3      	str	r3, [r2, #28]
 80039ca:	4b85      	ldr	r3, [pc, #532]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d6:	2301      	movs	r3, #1
 80039d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039da:	4b82      	ldr	r3, [pc, #520]	@ (8003be4 <HAL_RCC_OscConfig+0x4c8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d118      	bne.n	8003a18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039e6:	4b7f      	ldr	r3, [pc, #508]	@ (8003be4 <HAL_RCC_OscConfig+0x4c8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a7e      	ldr	r2, [pc, #504]	@ (8003be4 <HAL_RCC_OscConfig+0x4c8>)
 80039ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f2:	f7fe ffb9 	bl	8002968 <HAL_GetTick>
 80039f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fa:	f7fe ffb5 	bl	8002968 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b64      	cmp	r3, #100	@ 0x64
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e103      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0c:	4b75      	ldr	r3, [pc, #468]	@ (8003be4 <HAL_RCC_OscConfig+0x4c8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCC_OscConfig+0x312>
 8003a20:	4b6f      	ldr	r3, [pc, #444]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	4a6e      	ldr	r2, [pc, #440]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6213      	str	r3, [r2, #32]
 8003a2c:	e02d      	b.n	8003a8a <HAL_RCC_OscConfig+0x36e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x334>
 8003a36:	4b6a      	ldr	r3, [pc, #424]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	4a69      	ldr	r2, [pc, #420]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	6213      	str	r3, [r2, #32]
 8003a42:	4b67      	ldr	r3, [pc, #412]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	4a66      	ldr	r2, [pc, #408]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a48:	f023 0304 	bic.w	r3, r3, #4
 8003a4c:	6213      	str	r3, [r2, #32]
 8003a4e:	e01c      	b.n	8003a8a <HAL_RCC_OscConfig+0x36e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	2b05      	cmp	r3, #5
 8003a56:	d10c      	bne.n	8003a72 <HAL_RCC_OscConfig+0x356>
 8003a58:	4b61      	ldr	r3, [pc, #388]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4a60      	ldr	r2, [pc, #384]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	6213      	str	r3, [r2, #32]
 8003a64:	4b5e      	ldr	r3, [pc, #376]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	4a5d      	ldr	r2, [pc, #372]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6213      	str	r3, [r2, #32]
 8003a70:	e00b      	b.n	8003a8a <HAL_RCC_OscConfig+0x36e>
 8003a72:	4b5b      	ldr	r3, [pc, #364]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	4a5a      	ldr	r2, [pc, #360]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	6213      	str	r3, [r2, #32]
 8003a7e:	4b58      	ldr	r3, [pc, #352]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	4a57      	ldr	r2, [pc, #348]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003a84:	f023 0304 	bic.w	r3, r3, #4
 8003a88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d015      	beq.n	8003abe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a92:	f7fe ff69 	bl	8002968 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7fe ff65 	bl	8002968 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e0b1      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab0:	4b4b      	ldr	r3, [pc, #300]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ee      	beq.n	8003a9a <HAL_RCC_OscConfig+0x37e>
 8003abc:	e014      	b.n	8003ae8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abe:	f7fe ff53 	bl	8002968 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac4:	e00a      	b.n	8003adc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fe ff4f 	bl	8002968 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e09b      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003adc:	4b40      	ldr	r3, [pc, #256]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1ee      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d105      	bne.n	8003afa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aee:	4b3c      	ldr	r3, [pc, #240]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	4a3b      	ldr	r2, [pc, #236]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 8087 	beq.w	8003c12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b04:	4b36      	ldr	r3, [pc, #216]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d061      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d146      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b18:	4b33      	ldr	r3, [pc, #204]	@ (8003be8 <HAL_RCC_OscConfig+0x4cc>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1e:	f7fe ff23 	bl	8002968 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b26:	f7fe ff1f 	bl	8002968 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e06d      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b38:	4b29      	ldr	r3, [pc, #164]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b4c:	d108      	bne.n	8003b60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b4e:	4b24      	ldr	r3, [pc, #144]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	4921      	ldr	r1, [pc, #132]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b60:	4b1f      	ldr	r3, [pc, #124]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a19      	ldr	r1, [r3, #32]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	430b      	orrs	r3, r1
 8003b72:	491b      	ldr	r1, [pc, #108]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b78:	4b1b      	ldr	r3, [pc, #108]	@ (8003be8 <HAL_RCC_OscConfig+0x4cc>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7e:	f7fe fef3 	bl	8002968 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b86:	f7fe feef 	bl	8002968 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e03d      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b98:	4b11      	ldr	r3, [pc, #68]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x46a>
 8003ba4:	e035      	b.n	8003c12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba6:	4b10      	ldr	r3, [pc, #64]	@ (8003be8 <HAL_RCC_OscConfig+0x4cc>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bac:	f7fe fedc 	bl	8002968 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb4:	f7fe fed8 	bl	8002968 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e026      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bc6:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f0      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x498>
 8003bd2:	e01e      	b.n	8003c12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d107      	bne.n	8003bec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e019      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40007000 	.word	0x40007000
 8003be8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bec:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <HAL_RCC_OscConfig+0x500>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d106      	bne.n	8003c0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40021000 	.word	0x40021000

08003c20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0d0      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c34:	4b6a      	ldr	r3, [pc, #424]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d910      	bls.n	8003c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c42:	4b67      	ldr	r3, [pc, #412]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 0207 	bic.w	r2, r3, #7
 8003c4a:	4965      	ldr	r1, [pc, #404]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b63      	ldr	r3, [pc, #396]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0b8      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d020      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c7c:	4b59      	ldr	r3, [pc, #356]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4a58      	ldr	r2, [pc, #352]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c94:	4b53      	ldr	r3, [pc, #332]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4a52      	ldr	r2, [pc, #328]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca0:	4b50      	ldr	r3, [pc, #320]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	494d      	ldr	r1, [pc, #308]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d040      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b47      	ldr	r3, [pc, #284]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d115      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e07f      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d107      	bne.n	8003cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cde:	4b41      	ldr	r3, [pc, #260]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e073      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cee:	4b3d      	ldr	r3, [pc, #244]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e06b      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfe:	4b39      	ldr	r3, [pc, #228]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f023 0203 	bic.w	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	4936      	ldr	r1, [pc, #216]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d10:	f7fe fe2a 	bl	8002968 <HAL_GetTick>
 8003d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d16:	e00a      	b.n	8003d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d18:	f7fe fe26 	bl	8002968 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e053      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 020c 	and.w	r2, r3, #12
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d1eb      	bne.n	8003d18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d40:	4b27      	ldr	r3, [pc, #156]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d210      	bcs.n	8003d70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4e:	4b24      	ldr	r3, [pc, #144]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 0207 	bic.w	r2, r3, #7
 8003d56:	4922      	ldr	r1, [pc, #136]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	4b20      	ldr	r3, [pc, #128]	@ (8003de0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e032      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d7c:	4b19      	ldr	r3, [pc, #100]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4916      	ldr	r1, [pc, #88]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d9a:	4b12      	ldr	r3, [pc, #72]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	490e      	ldr	r1, [pc, #56]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003dae:	f000 f821 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 8003db2:	4602      	mov	r2, r0
 8003db4:	4b0b      	ldr	r3, [pc, #44]	@ (8003de4 <HAL_RCC_ClockConfig+0x1c4>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	490a      	ldr	r1, [pc, #40]	@ (8003de8 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc0:	5ccb      	ldrb	r3, [r1, r3]
 8003dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc6:	4a09      	ldr	r2, [pc, #36]	@ (8003dec <HAL_RCC_ClockConfig+0x1cc>)
 8003dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dca:	4b09      	ldr	r3, [pc, #36]	@ (8003df0 <HAL_RCC_ClockConfig+0x1d0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fe fd88 	bl	80028e4 <HAL_InitTick>

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40022000 	.word	0x40022000
 8003de4:	40021000 	.word	0x40021000
 8003de8:	0800a3c8 	.word	0x0800a3c8
 8003dec:	20000004 	.word	0x20000004
 8003df0:	20000008 	.word	0x20000008

08003df4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d002      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0x30>
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d003      	beq.n	8003e2a <HAL_RCC_GetSysClockFreq+0x36>
 8003e22:	e027      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e24:	4b19      	ldr	r3, [pc, #100]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e26:	613b      	str	r3, [r7, #16]
      break;
 8003e28:	e027      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	0c9b      	lsrs	r3, r3, #18
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	4a17      	ldr	r2, [pc, #92]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e34:	5cd3      	ldrb	r3, [r2, r3]
 8003e36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d010      	beq.n	8003e64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e42:	4b11      	ldr	r3, [pc, #68]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	0c5b      	lsrs	r3, r3, #17
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	4a11      	ldr	r2, [pc, #68]	@ (8003e94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e4e:	5cd3      	ldrb	r3, [r2, r3]
 8003e50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a0d      	ldr	r2, [pc, #52]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e56:	fb03 f202 	mul.w	r2, r3, r2
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	e004      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a0c      	ldr	r2, [pc, #48]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
 8003e6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	613b      	str	r3, [r7, #16]
      break;
 8003e72:	e002      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e74:	4b05      	ldr	r3, [pc, #20]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x98>)
 8003e76:	613b      	str	r3, [r7, #16]
      break;
 8003e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e7a:	693b      	ldr	r3, [r7, #16]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	007a1200 	.word	0x007a1200
 8003e90:	0800a3e0 	.word	0x0800a3e0
 8003e94:	0800a3f0 	.word	0x0800a3f0
 8003e98:	003d0900 	.word	0x003d0900

08003e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea0:	4b02      	ldr	r3, [pc, #8]	@ (8003eac <HAL_RCC_GetHCLKFreq+0x10>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr
 8003eac:	20000004 	.word	0x20000004

08003eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eb4:	f7ff fff2 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b05      	ldr	r3, [pc, #20]	@ (8003ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	4903      	ldr	r1, [pc, #12]	@ (8003ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec6:	5ccb      	ldrb	r3, [r1, r3]
 8003ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	0800a3d8 	.word	0x0800a3d8

08003ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003edc:	f7ff ffde 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	0adb      	lsrs	r3, r3, #11
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4903      	ldr	r1, [pc, #12]	@ (8003efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	0800a3d8 	.word	0x0800a3d8

08003f00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f08:	4b0a      	ldr	r3, [pc, #40]	@ (8003f34 <RCC_Delay+0x34>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8003f38 <RCC_Delay+0x38>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	0a5b      	lsrs	r3, r3, #9
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	fb02 f303 	mul.w	r3, r2, r3
 8003f1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f1c:	bf00      	nop
  }
  while (Delay --);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1e5a      	subs	r2, r3, #1
 8003f22:	60fa      	str	r2, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1f9      	bne.n	8003f1c <RCC_Delay+0x1c>
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr
 8003f34:	20000004 	.word	0x20000004
 8003f38:	10624dd3 	.word	0x10624dd3

08003f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d07d      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10d      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f68:	4b4c      	ldr	r3, [pc, #304]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	4a4b      	ldr	r2, [pc, #300]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f72:	61d3      	str	r3, [r2, #28]
 8003f74:	4b49      	ldr	r3, [pc, #292]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f80:	2301      	movs	r3, #1
 8003f82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f84:	4b46      	ldr	r3, [pc, #280]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d118      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f90:	4b43      	ldr	r3, [pc, #268]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a42      	ldr	r2, [pc, #264]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9c:	f7fe fce4 	bl	8002968 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa4:	f7fe fce0 	bl	8002968 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b64      	cmp	r3, #100	@ 0x64
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e06d      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fc2:	4b36      	ldr	r3, [pc, #216]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d02e      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d027      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fea:	4b2e      	ldr	r3, [pc, #184]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ff6:	4a29      	ldr	r2, [pc, #164]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d014      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004006:	f7fe fcaf 	bl	8002968 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400c:	e00a      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7fe fcab 	bl	8002968 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800401c:	4293      	cmp	r3, r2
 800401e:	d901      	bls.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e036      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004024:	4b1d      	ldr	r3, [pc, #116]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ee      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004030:	4b1a      	ldr	r3, [pc, #104]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4917      	ldr	r1, [pc, #92]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	4313      	orrs	r3, r2
 8004040:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004048:	4b14      	ldr	r3, [pc, #80]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	4a13      	ldr	r2, [pc, #76]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800404e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004052:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004060:	4b0e      	ldr	r3, [pc, #56]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	490b      	ldr	r1, [pc, #44]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406e:	4313      	orrs	r3, r2
 8004070:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b00      	cmp	r3, #0
 800407c:	d008      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800407e:	4b07      	ldr	r3, [pc, #28]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	4904      	ldr	r1, [pc, #16]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40021000 	.word	0x40021000
 80040a0:	40007000 	.word	0x40007000
 80040a4:	42420440 	.word	0x42420440

080040a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	2300      	movs	r3, #0
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	2300      	movs	r3, #0
 80040ba:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	2300      	movs	r3, #0
 80040c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d00a      	beq.n	80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	f200 808a 	bhi.w	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d045      	beq.n	8004164 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d075      	beq.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80040de:	e082      	b.n	80041e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80040e0:	4b46      	ldr	r3, [pc, #280]	@ (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80040e6:	4b45      	ldr	r3, [pc, #276]	@ (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d07b      	beq.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	0c9b      	lsrs	r3, r3, #18
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	4a41      	ldr	r2, [pc, #260]	@ (8004200 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80040fc:	5cd3      	ldrb	r3, [r2, r3]
 80040fe:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d015      	beq.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800410a:	4b3c      	ldr	r3, [pc, #240]	@ (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	0c5b      	lsrs	r3, r3, #17
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	4a3b      	ldr	r2, [pc, #236]	@ (8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004116:	5cd3      	ldrb	r3, [r2, r3]
 8004118:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00d      	beq.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004124:	4a38      	ldr	r2, [pc, #224]	@ (8004208 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	fbb2 f2f3 	udiv	r2, r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	fb02 f303 	mul.w	r3, r2, r3
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	e004      	b.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4a34      	ldr	r2, [pc, #208]	@ (800420c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004140:	4b2e      	ldr	r3, [pc, #184]	@ (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004148:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800414c:	d102      	bne.n	8004154 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	61bb      	str	r3, [r7, #24]
      break;
 8004152:	e04a      	b.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4a2d      	ldr	r2, [pc, #180]	@ (8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	085b      	lsrs	r3, r3, #1
 8004160:	61bb      	str	r3, [r7, #24]
      break;
 8004162:	e042      	b.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004164:	4b25      	ldr	r3, [pc, #148]	@ (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004174:	d108      	bne.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004180:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	e01f      	b.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800418e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004192:	d109      	bne.n	80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004194:	4b19      	ldr	r3, [pc, #100]	@ (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80041a0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	e00f      	b.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041b2:	d11c      	bne.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80041b4:	4b11      	ldr	r3, [pc, #68]	@ (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d016      	beq.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80041c0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80041c4:	61bb      	str	r3, [r7, #24]
      break;
 80041c6:	e012      	b.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80041c8:	e011      	b.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80041ca:	f7ff fe85 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 80041ce:	4602      	mov	r2, r0
 80041d0:	4b0a      	ldr	r3, [pc, #40]	@ (80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	0b9b      	lsrs	r3, r3, #14
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	3301      	adds	r3, #1
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e2:	61bb      	str	r3, [r7, #24]
      break;
 80041e4:	e004      	b.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80041e6:	bf00      	nop
 80041e8:	e002      	b.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80041ea:	bf00      	nop
 80041ec:	e000      	b.n	80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80041ee:	bf00      	nop
    }
  }
  return (frequency);
 80041f0:	69bb      	ldr	r3, [r7, #24]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000
 8004200:	0800a3f4 	.word	0x0800a3f4
 8004204:	0800a404 	.word	0x0800a404
 8004208:	007a1200 	.word	0x007a1200
 800420c:	003d0900 	.word	0x003d0900
 8004210:	aaaaaaab 	.word	0xaaaaaaab

08004214 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e076      	b.n	8004314 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	2b00      	cmp	r3, #0
 800422c:	d108      	bne.n	8004240 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004236:	d009      	beq.n	800424c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	61da      	str	r2, [r3, #28]
 800423e:	e005      	b.n	800424c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fe f8a6 	bl	80023b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004282:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d0:	ea42 0103 	orr.w	r1, r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	0c1a      	lsrs	r2, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f002 0204 	and.w	r2, r2, #4
 80042f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	69da      	ldr	r2, [r3, #28]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004302:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_SPI_Transmit+0x22>
 800433a:	2302      	movs	r3, #2
 800433c:	e12d      	b.n	800459a <HAL_SPI_Transmit+0x27e>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004346:	f7fe fb0f 	bl	8002968 <HAL_GetTick>
 800434a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	d002      	beq.n	8004362 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800435c:	2302      	movs	r3, #2
 800435e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004360:	e116      	b.n	8004590 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_SPI_Transmit+0x52>
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004372:	e10d      	b.n	8004590 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2203      	movs	r2, #3
 8004378:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	88fa      	ldrh	r2, [r7, #6]
 8004392:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ba:	d10f      	bne.n	80043dc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e6:	2b40      	cmp	r3, #64	@ 0x40
 80043e8:	d007      	beq.n	80043fa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004402:	d14f      	bne.n	80044a4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_SPI_Transmit+0xf6>
 800440c:	8afb      	ldrh	r3, [r7, #22]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d142      	bne.n	8004498 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004416:	881a      	ldrh	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004422:	1c9a      	adds	r2, r3, #2
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800442c:	b29b      	uxth	r3, r3
 800442e:	3b01      	subs	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004436:	e02f      	b.n	8004498 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b02      	cmp	r3, #2
 8004444:	d112      	bne.n	800446c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444a:	881a      	ldrh	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004456:	1c9a      	adds	r2, r3, #2
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	86da      	strh	r2, [r3, #54]	@ 0x36
 800446a:	e015      	b.n	8004498 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800446c:	f7fe fa7c 	bl	8002968 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d803      	bhi.n	8004484 <HAL_SPI_Transmit+0x168>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d102      	bne.n	800448a <HAL_SPI_Transmit+0x16e>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004496:	e07b      	b.n	8004590 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1ca      	bne.n	8004438 <HAL_SPI_Transmit+0x11c>
 80044a2:	e050      	b.n	8004546 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <HAL_SPI_Transmit+0x196>
 80044ac:	8afb      	ldrh	r3, [r7, #22]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d144      	bne.n	800453c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	330c      	adds	r3, #12
 80044bc:	7812      	ldrb	r2, [r2, #0]
 80044be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c4:	1c5a      	adds	r2, r3, #1
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044d8:	e030      	b.n	800453c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d113      	bne.n	8004510 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	7812      	ldrb	r2, [r2, #0]
 80044f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800450e:	e015      	b.n	800453c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004510:	f7fe fa2a 	bl	8002968 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d803      	bhi.n	8004528 <HAL_SPI_Transmit+0x20c>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004526:	d102      	bne.n	800452e <HAL_SPI_Transmit+0x212>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800453a:	e029      	b.n	8004590 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1c9      	bne.n	80044da <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fbd8 	bl	8004d00 <SPI_EndRxTxTransaction>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004564:	2300      	movs	r3, #0
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	77fb      	strb	r3, [r7, #31]
 8004586:	e003      	b.n	8004590 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004598:	7ffb      	ldrb	r3, [r7, #31]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b088      	sub	sp, #32
 80045a6:	af02      	add	r7, sp, #8
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	4613      	mov	r3, r2
 80045b0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d002      	beq.n	80045c8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
 80045c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045c6:	e0fb      	b.n	80047c0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045d0:	d112      	bne.n	80045f8 <HAL_SPI_Receive+0x56>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10e      	bne.n	80045f8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2204      	movs	r2, #4
 80045de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80045e2:	88fa      	ldrh	r2, [r7, #6]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	4613      	mov	r3, r2
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f8ef 	bl	80047d2 <HAL_SPI_TransmitReceive>
 80045f4:	4603      	mov	r3, r0
 80045f6:	e0e8      	b.n	80047ca <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_SPI_Receive+0x64>
 8004602:	2302      	movs	r3, #2
 8004604:	e0e1      	b.n	80047ca <HAL_SPI_Receive+0x228>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800460e:	f7fe f9ab 	bl	8002968 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_SPI_Receive+0x7e>
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d102      	bne.n	8004626 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004624:	e0cc      	b.n	80047c0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2204      	movs	r2, #4
 800462a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	88fa      	ldrh	r2, [r7, #6]
 800463e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	88fa      	ldrh	r2, [r7, #6]
 8004644:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800466c:	d10f      	bne.n	800468e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800467c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800468c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004698:	2b40      	cmp	r3, #64	@ 0x40
 800469a:	d007      	beq.n	80046ac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d16a      	bne.n	800478a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046b4:	e032      	b.n	800471c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d115      	bne.n	80046f0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f103 020c 	add.w	r2, r3, #12
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d0:	7812      	ldrb	r2, [r2, #0]
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80046ee:	e015      	b.n	800471c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046f0:	f7fe f93a 	bl	8002968 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d803      	bhi.n	8004708 <HAL_SPI_Receive+0x166>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	d102      	bne.n	800470e <HAL_SPI_Receive+0x16c>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800471a:	e051      	b.n	80047c0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1c7      	bne.n	80046b6 <HAL_SPI_Receive+0x114>
 8004726:	e035      	b.n	8004794 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b01      	cmp	r3, #1
 8004734:	d113      	bne.n	800475e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004740:	b292      	uxth	r2, r2
 8004742:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004748:	1c9a      	adds	r2, r3, #2
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800475c:	e015      	b.n	800478a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800475e:	f7fe f903 	bl	8002968 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d803      	bhi.n	8004776 <HAL_SPI_Receive+0x1d4>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d102      	bne.n	800477c <HAL_SPI_Receive+0x1da>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d106      	bne.n	800478a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004788:	e01a      	b.n	80047c0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1c9      	bne.n	8004728 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	6839      	ldr	r1, [r7, #0]
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fa5f 	bl	8004c5c <SPI_EndRxTransaction>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	75fb      	strb	r3, [r7, #23]
 80047b6:	e003      	b.n	80047c0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80047c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b08c      	sub	sp, #48	@ 0x30
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
 80047de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047e0:	2301      	movs	r3, #1
 80047e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d101      	bne.n	80047f8 <HAL_SPI_TransmitReceive+0x26>
 80047f4:	2302      	movs	r3, #2
 80047f6:	e198      	b.n	8004b2a <HAL_SPI_TransmitReceive+0x358>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004800:	f7fe f8b2 	bl	8002968 <HAL_GetTick>
 8004804:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800480c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004816:	887b      	ldrh	r3, [r7, #2]
 8004818:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800481a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800481e:	2b01      	cmp	r3, #1
 8004820:	d00f      	beq.n	8004842 <HAL_SPI_TransmitReceive+0x70>
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004828:	d107      	bne.n	800483a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <HAL_SPI_TransmitReceive+0x68>
 8004832:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004836:	2b04      	cmp	r3, #4
 8004838:	d003      	beq.n	8004842 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800483a:	2302      	movs	r3, #2
 800483c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004840:	e16d      	b.n	8004b1e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_SPI_TransmitReceive+0x82>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_SPI_TransmitReceive+0x82>
 800484e:	887b      	ldrh	r3, [r7, #2]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d103      	bne.n	800485c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800485a:	e160      	b.n	8004b1e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b04      	cmp	r3, #4
 8004866:	d003      	beq.n	8004870 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2205      	movs	r2, #5
 800486c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	887a      	ldrh	r2, [r7, #2]
 8004880:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	887a      	ldrh	r2, [r7, #2]
 8004886:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	887a      	ldrh	r2, [r7, #2]
 8004892:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	887a      	ldrh	r2, [r7, #2]
 8004898:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b0:	2b40      	cmp	r3, #64	@ 0x40
 80048b2:	d007      	beq.n	80048c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048cc:	d17c      	bne.n	80049c8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <HAL_SPI_TransmitReceive+0x10a>
 80048d6:	8b7b      	ldrh	r3, [r7, #26]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d16a      	bne.n	80049b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e0:	881a      	ldrh	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ec:	1c9a      	adds	r2, r3, #2
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004900:	e057      	b.n	80049b2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b02      	cmp	r3, #2
 800490e:	d11b      	bne.n	8004948 <HAL_SPI_TransmitReceive+0x176>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d016      	beq.n	8004948 <HAL_SPI_TransmitReceive+0x176>
 800491a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d113      	bne.n	8004948 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004924:	881a      	ldrh	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004930:	1c9a      	adds	r2, r3, #2
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b01      	cmp	r3, #1
 8004954:	d119      	bne.n	800498a <HAL_SPI_TransmitReceive+0x1b8>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d014      	beq.n	800498a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496a:	b292      	uxth	r2, r2
 800496c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004972:	1c9a      	adds	r2, r3, #2
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004986:	2301      	movs	r3, #1
 8004988:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800498a:	f7fd ffed 	bl	8002968 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004996:	429a      	cmp	r2, r3
 8004998:	d80b      	bhi.n	80049b2 <HAL_SPI_TransmitReceive+0x1e0>
 800499a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a0:	d007      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80049b0:	e0b5      	b.n	8004b1e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1a2      	bne.n	8004902 <HAL_SPI_TransmitReceive+0x130>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d19d      	bne.n	8004902 <HAL_SPI_TransmitReceive+0x130>
 80049c6:	e080      	b.n	8004aca <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <HAL_SPI_TransmitReceive+0x204>
 80049d0:	8b7b      	ldrh	r3, [r7, #26]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d16f      	bne.n	8004ab6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	7812      	ldrb	r2, [r2, #0]
 80049e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049fc:	e05b      	b.n	8004ab6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d11c      	bne.n	8004a46 <HAL_SPI_TransmitReceive+0x274>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d017      	beq.n	8004a46 <HAL_SPI_TransmitReceive+0x274>
 8004a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d114      	bne.n	8004a46 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	330c      	adds	r3, #12
 8004a26:	7812      	ldrb	r2, [r2, #0]
 8004a28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d119      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x2b6>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d014      	beq.n	8004a88 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a84:	2301      	movs	r3, #1
 8004a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a88:	f7fd ff6e 	bl	8002968 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d803      	bhi.n	8004aa0 <HAL_SPI_TransmitReceive+0x2ce>
 8004a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9e:	d102      	bne.n	8004aa6 <HAL_SPI_TransmitReceive+0x2d4>
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d107      	bne.n	8004ab6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004ab4:	e033      	b.n	8004b1e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d19e      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x22c>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d199      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004acc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f916 	bl	8004d00 <SPI_EndRxTxTransaction>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d006      	beq.n	8004ae8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004ae6:	e01a      	b.n	8004b1e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b14:	e003      	b.n	8004b1e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004b26:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3730      	adds	r7, #48	@ 0x30
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b40:	b2db      	uxtb	r3, r3
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr

08004b4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b5c:	f7fd ff04 	bl	8002968 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	4413      	add	r3, r2
 8004b6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b6c:	f7fd fefc 	bl	8002968 <HAL_GetTick>
 8004b70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b72:	4b39      	ldr	r3, [pc, #228]	@ (8004c58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	015b      	lsls	r3, r3, #5
 8004b78:	0d1b      	lsrs	r3, r3, #20
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	fb02 f303 	mul.w	r3, r2, r3
 8004b80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b82:	e054      	b.n	8004c2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8a:	d050      	beq.n	8004c2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b8c:	f7fd feec 	bl	8002968 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d902      	bls.n	8004ba2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d13d      	bne.n	8004c1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bba:	d111      	bne.n	8004be0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bc4:	d004      	beq.n	8004bd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bce:	d107      	bne.n	8004be0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be8:	d10f      	bne.n	8004c0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e017      	b.n	8004c4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4013      	ands	r3, r2
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	bf0c      	ite	eq
 8004c3e:	2301      	moveq	r3, #1
 8004c40:	2300      	movne	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d19b      	bne.n	8004b84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3720      	adds	r7, #32
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000004 	.word	0x20000004

08004c5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c70:	d111      	bne.n	8004c96 <SPI_EndRxTransaction+0x3a>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c7a:	d004      	beq.n	8004c86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c84:	d107      	bne.n	8004c96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c94:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c9e:	d117      	bne.n	8004cd0 <SPI_EndRxTransaction+0x74>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca8:	d112      	bne.n	8004cd0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f7ff ff49 	bl	8004b4c <SPI_WaitFlagStateUntilTimeout>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01a      	beq.n	8004cf6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc4:	f043 0220 	orr.w	r2, r3, #32
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e013      	b.n	8004cf8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	2180      	movs	r1, #128	@ 0x80
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f7ff ff36 	bl	8004b4c <SPI_WaitFlagStateUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d007      	beq.n	8004cf6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cea:	f043 0220 	orr.w	r2, r3, #32
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e000      	b.n	8004cf8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2200      	movs	r2, #0
 8004d14:	2180      	movs	r1, #128	@ 0x80
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f7ff ff18 	bl	8004b4c <SPI_WaitFlagStateUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d007      	beq.n	8004d32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d26:	f043 0220 	orr.w	r2, r3, #32
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e000      	b.n	8004d34 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e042      	b.n	8004dd4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fd fcfc 	bl	8002760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2224      	movs	r2, #36	@ 0x24
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f91d 	bl	8004fc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695a      	ldr	r2, [r3, #20]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004da4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68da      	ldr	r2, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004db4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08a      	sub	sp, #40	@ 0x28
 8004de0:	af02      	add	r7, sp, #8
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	4613      	mov	r3, r2
 8004dea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d16d      	bne.n	8004ed8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <HAL_UART_Transmit+0x2c>
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e066      	b.n	8004eda <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2221      	movs	r2, #33	@ 0x21
 8004e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e1a:	f7fd fda5 	bl	8002968 <HAL_GetTick>
 8004e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	88fa      	ldrh	r2, [r7, #6]
 8004e24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	88fa      	ldrh	r2, [r7, #6]
 8004e2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e34:	d108      	bne.n	8004e48 <HAL_UART_Transmit+0x6c>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d104      	bne.n	8004e48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	61bb      	str	r3, [r7, #24]
 8004e46:	e003      	b.n	8004e50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e50:	e02a      	b.n	8004ea8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2180      	movs	r1, #128	@ 0x80
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f840 	bl	8004ee2 <UART_WaitOnFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e036      	b.n	8004eda <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10b      	bne.n	8004e8a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	3302      	adds	r3, #2
 8004e86:	61bb      	str	r3, [r7, #24]
 8004e88:	e007      	b.n	8004e9a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	781a      	ldrb	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	3301      	adds	r3, #1
 8004e98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1cf      	bne.n	8004e52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2140      	movs	r1, #64	@ 0x40
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f810 	bl	8004ee2 <UART_WaitOnFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e006      	b.n	8004eda <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	e000      	b.n	8004eda <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004ed8:	2302      	movs	r3, #2
  }
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b090      	sub	sp, #64	@ 0x40
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	603b      	str	r3, [r7, #0]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef2:	e050      	b.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efa:	d04c      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004efc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d007      	beq.n	8004f12 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f02:	f7fd fd31 	bl	8002968 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d241      	bcs.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	330c      	adds	r3, #12
 8004f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1c:	e853 3f00 	ldrex	r3, [r3]
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f32:	637a      	str	r2, [r7, #52]	@ 0x34
 8004f34:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e5      	bne.n	8004f12 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3314      	adds	r3, #20
 8004f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	e853 3f00 	ldrex	r3, [r3]
 8004f54:	613b      	str	r3, [r7, #16]
   return(result);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f023 0301 	bic.w	r3, r3, #1
 8004f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3314      	adds	r3, #20
 8004f64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f66:	623a      	str	r2, [r7, #32]
 8004f68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	69f9      	ldr	r1, [r7, #28]
 8004f6c:	6a3a      	ldr	r2, [r7, #32]
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e5      	bne.n	8004f46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e00f      	b.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d09f      	beq.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3740      	adds	r7, #64	@ 0x40
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004ffa:	f023 030c 	bic.w	r3, r3, #12
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	430b      	orrs	r3, r1
 8005006:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a2c      	ldr	r2, [pc, #176]	@ (80050d4 <UART_SetConfig+0x114>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d103      	bne.n	8005030 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005028:	f7fe ff56 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	e002      	b.n	8005036 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005030:	f7fe ff3e 	bl	8003eb0 <HAL_RCC_GetPCLK1Freq>
 8005034:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	009a      	lsls	r2, r3, #2
 8005040:	441a      	add	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	4a22      	ldr	r2, [pc, #136]	@ (80050d8 <UART_SetConfig+0x118>)
 800504e:	fba2 2303 	umull	r2, r3, r2, r3
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	0119      	lsls	r1, r3, #4
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	009a      	lsls	r2, r3, #2
 8005060:	441a      	add	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	fbb2 f2f3 	udiv	r2, r2, r3
 800506c:	4b1a      	ldr	r3, [pc, #104]	@ (80050d8 <UART_SetConfig+0x118>)
 800506e:	fba3 0302 	umull	r0, r3, r3, r2
 8005072:	095b      	lsrs	r3, r3, #5
 8005074:	2064      	movs	r0, #100	@ 0x64
 8005076:	fb00 f303 	mul.w	r3, r0, r3
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	3332      	adds	r3, #50	@ 0x32
 8005080:	4a15      	ldr	r2, [pc, #84]	@ (80050d8 <UART_SetConfig+0x118>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	095b      	lsrs	r3, r3, #5
 8005088:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800508c:	4419      	add	r1, r3
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	009a      	lsls	r2, r3, #2
 8005098:	441a      	add	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050a4:	4b0c      	ldr	r3, [pc, #48]	@ (80050d8 <UART_SetConfig+0x118>)
 80050a6:	fba3 0302 	umull	r0, r3, r3, r2
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	2064      	movs	r0, #100	@ 0x64
 80050ae:	fb00 f303 	mul.w	r3, r0, r3
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	3332      	adds	r3, #50	@ 0x32
 80050b8:	4a07      	ldr	r2, [pc, #28]	@ (80050d8 <UART_SetConfig+0x118>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	f003 020f 	and.w	r2, r3, #15
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	440a      	add	r2, r1
 80050ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40013800 	.word	0x40013800
 80050d8:	51eb851f 	.word	0x51eb851f

080050dc <__cvt>:
 80050dc:	2b00      	cmp	r3, #0
 80050de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050e2:	461d      	mov	r5, r3
 80050e4:	bfbb      	ittet	lt
 80050e6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80050ea:	461d      	movlt	r5, r3
 80050ec:	2300      	movge	r3, #0
 80050ee:	232d      	movlt	r3, #45	@ 0x2d
 80050f0:	b088      	sub	sp, #32
 80050f2:	4614      	mov	r4, r2
 80050f4:	bfb8      	it	lt
 80050f6:	4614      	movlt	r4, r2
 80050f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80050fa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80050fc:	7013      	strb	r3, [r2, #0]
 80050fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005100:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005104:	f023 0820 	bic.w	r8, r3, #32
 8005108:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800510c:	d005      	beq.n	800511a <__cvt+0x3e>
 800510e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005112:	d100      	bne.n	8005116 <__cvt+0x3a>
 8005114:	3601      	adds	r6, #1
 8005116:	2302      	movs	r3, #2
 8005118:	e000      	b.n	800511c <__cvt+0x40>
 800511a:	2303      	movs	r3, #3
 800511c:	aa07      	add	r2, sp, #28
 800511e:	9204      	str	r2, [sp, #16]
 8005120:	aa06      	add	r2, sp, #24
 8005122:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005126:	e9cd 3600 	strd	r3, r6, [sp]
 800512a:	4622      	mov	r2, r4
 800512c:	462b      	mov	r3, r5
 800512e:	f001 f923 	bl	8006378 <_dtoa_r>
 8005132:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005136:	4607      	mov	r7, r0
 8005138:	d119      	bne.n	800516e <__cvt+0x92>
 800513a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800513c:	07db      	lsls	r3, r3, #31
 800513e:	d50e      	bpl.n	800515e <__cvt+0x82>
 8005140:	eb00 0906 	add.w	r9, r0, r6
 8005144:	2200      	movs	r2, #0
 8005146:	2300      	movs	r3, #0
 8005148:	4620      	mov	r0, r4
 800514a:	4629      	mov	r1, r5
 800514c:	f7fb fc2c 	bl	80009a8 <__aeabi_dcmpeq>
 8005150:	b108      	cbz	r0, 8005156 <__cvt+0x7a>
 8005152:	f8cd 901c 	str.w	r9, [sp, #28]
 8005156:	2230      	movs	r2, #48	@ 0x30
 8005158:	9b07      	ldr	r3, [sp, #28]
 800515a:	454b      	cmp	r3, r9
 800515c:	d31e      	bcc.n	800519c <__cvt+0xc0>
 800515e:	4638      	mov	r0, r7
 8005160:	9b07      	ldr	r3, [sp, #28]
 8005162:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005164:	1bdb      	subs	r3, r3, r7
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	b008      	add	sp, #32
 800516a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800516e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005172:	eb00 0906 	add.w	r9, r0, r6
 8005176:	d1e5      	bne.n	8005144 <__cvt+0x68>
 8005178:	7803      	ldrb	r3, [r0, #0]
 800517a:	2b30      	cmp	r3, #48	@ 0x30
 800517c:	d10a      	bne.n	8005194 <__cvt+0xb8>
 800517e:	2200      	movs	r2, #0
 8005180:	2300      	movs	r3, #0
 8005182:	4620      	mov	r0, r4
 8005184:	4629      	mov	r1, r5
 8005186:	f7fb fc0f 	bl	80009a8 <__aeabi_dcmpeq>
 800518a:	b918      	cbnz	r0, 8005194 <__cvt+0xb8>
 800518c:	f1c6 0601 	rsb	r6, r6, #1
 8005190:	f8ca 6000 	str.w	r6, [sl]
 8005194:	f8da 3000 	ldr.w	r3, [sl]
 8005198:	4499      	add	r9, r3
 800519a:	e7d3      	b.n	8005144 <__cvt+0x68>
 800519c:	1c59      	adds	r1, r3, #1
 800519e:	9107      	str	r1, [sp, #28]
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	e7d9      	b.n	8005158 <__cvt+0x7c>

080051a4 <__exponent>:
 80051a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051a6:	2900      	cmp	r1, #0
 80051a8:	bfb6      	itet	lt
 80051aa:	232d      	movlt	r3, #45	@ 0x2d
 80051ac:	232b      	movge	r3, #43	@ 0x2b
 80051ae:	4249      	neglt	r1, r1
 80051b0:	2909      	cmp	r1, #9
 80051b2:	7002      	strb	r2, [r0, #0]
 80051b4:	7043      	strb	r3, [r0, #1]
 80051b6:	dd29      	ble.n	800520c <__exponent+0x68>
 80051b8:	f10d 0307 	add.w	r3, sp, #7
 80051bc:	461d      	mov	r5, r3
 80051be:	270a      	movs	r7, #10
 80051c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80051c4:	461a      	mov	r2, r3
 80051c6:	fb07 1416 	mls	r4, r7, r6, r1
 80051ca:	3430      	adds	r4, #48	@ 0x30
 80051cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80051d0:	460c      	mov	r4, r1
 80051d2:	2c63      	cmp	r4, #99	@ 0x63
 80051d4:	4631      	mov	r1, r6
 80051d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80051da:	dcf1      	bgt.n	80051c0 <__exponent+0x1c>
 80051dc:	3130      	adds	r1, #48	@ 0x30
 80051de:	1e94      	subs	r4, r2, #2
 80051e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80051e4:	4623      	mov	r3, r4
 80051e6:	1c41      	adds	r1, r0, #1
 80051e8:	42ab      	cmp	r3, r5
 80051ea:	d30a      	bcc.n	8005202 <__exponent+0x5e>
 80051ec:	f10d 0309 	add.w	r3, sp, #9
 80051f0:	1a9b      	subs	r3, r3, r2
 80051f2:	42ac      	cmp	r4, r5
 80051f4:	bf88      	it	hi
 80051f6:	2300      	movhi	r3, #0
 80051f8:	3302      	adds	r3, #2
 80051fa:	4403      	add	r3, r0
 80051fc:	1a18      	subs	r0, r3, r0
 80051fe:	b003      	add	sp, #12
 8005200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005202:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005206:	f801 6f01 	strb.w	r6, [r1, #1]!
 800520a:	e7ed      	b.n	80051e8 <__exponent+0x44>
 800520c:	2330      	movs	r3, #48	@ 0x30
 800520e:	3130      	adds	r1, #48	@ 0x30
 8005210:	7083      	strb	r3, [r0, #2]
 8005212:	70c1      	strb	r1, [r0, #3]
 8005214:	1d03      	adds	r3, r0, #4
 8005216:	e7f1      	b.n	80051fc <__exponent+0x58>

08005218 <_printf_float>:
 8005218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521c:	b091      	sub	sp, #68	@ 0x44
 800521e:	460c      	mov	r4, r1
 8005220:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005224:	4616      	mov	r6, r2
 8005226:	461f      	mov	r7, r3
 8005228:	4605      	mov	r5, r0
 800522a:	f000 ff83 	bl	8006134 <_localeconv_r>
 800522e:	6803      	ldr	r3, [r0, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	9308      	str	r3, [sp, #32]
 8005234:	f7fa ff8c 	bl	8000150 <strlen>
 8005238:	2300      	movs	r3, #0
 800523a:	930e      	str	r3, [sp, #56]	@ 0x38
 800523c:	f8d8 3000 	ldr.w	r3, [r8]
 8005240:	9009      	str	r0, [sp, #36]	@ 0x24
 8005242:	3307      	adds	r3, #7
 8005244:	f023 0307 	bic.w	r3, r3, #7
 8005248:	f103 0208 	add.w	r2, r3, #8
 800524c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005250:	f8d4 b000 	ldr.w	fp, [r4]
 8005254:	f8c8 2000 	str.w	r2, [r8]
 8005258:	e9d3 8900 	ldrd	r8, r9, [r3]
 800525c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005262:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005266:	f04f 32ff 	mov.w	r2, #4294967295
 800526a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800526e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005272:	4b9c      	ldr	r3, [pc, #624]	@ (80054e4 <_printf_float+0x2cc>)
 8005274:	f7fb fbca 	bl	8000a0c <__aeabi_dcmpun>
 8005278:	bb70      	cbnz	r0, 80052d8 <_printf_float+0xc0>
 800527a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800527e:	f04f 32ff 	mov.w	r2, #4294967295
 8005282:	4b98      	ldr	r3, [pc, #608]	@ (80054e4 <_printf_float+0x2cc>)
 8005284:	f7fb fba4 	bl	80009d0 <__aeabi_dcmple>
 8005288:	bb30      	cbnz	r0, 80052d8 <_printf_float+0xc0>
 800528a:	2200      	movs	r2, #0
 800528c:	2300      	movs	r3, #0
 800528e:	4640      	mov	r0, r8
 8005290:	4649      	mov	r1, r9
 8005292:	f7fb fb93 	bl	80009bc <__aeabi_dcmplt>
 8005296:	b110      	cbz	r0, 800529e <_printf_float+0x86>
 8005298:	232d      	movs	r3, #45	@ 0x2d
 800529a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800529e:	4a92      	ldr	r2, [pc, #584]	@ (80054e8 <_printf_float+0x2d0>)
 80052a0:	4b92      	ldr	r3, [pc, #584]	@ (80054ec <_printf_float+0x2d4>)
 80052a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80052a6:	bf94      	ite	ls
 80052a8:	4690      	movls	r8, r2
 80052aa:	4698      	movhi	r8, r3
 80052ac:	2303      	movs	r3, #3
 80052ae:	f04f 0900 	mov.w	r9, #0
 80052b2:	6123      	str	r3, [r4, #16]
 80052b4:	f02b 0304 	bic.w	r3, fp, #4
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	4633      	mov	r3, r6
 80052bc:	4621      	mov	r1, r4
 80052be:	4628      	mov	r0, r5
 80052c0:	9700      	str	r7, [sp, #0]
 80052c2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80052c4:	f000 f9d4 	bl	8005670 <_printf_common>
 80052c8:	3001      	adds	r0, #1
 80052ca:	f040 8090 	bne.w	80053ee <_printf_float+0x1d6>
 80052ce:	f04f 30ff 	mov.w	r0, #4294967295
 80052d2:	b011      	add	sp, #68	@ 0x44
 80052d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d8:	4642      	mov	r2, r8
 80052da:	464b      	mov	r3, r9
 80052dc:	4640      	mov	r0, r8
 80052de:	4649      	mov	r1, r9
 80052e0:	f7fb fb94 	bl	8000a0c <__aeabi_dcmpun>
 80052e4:	b148      	cbz	r0, 80052fa <_printf_float+0xe2>
 80052e6:	464b      	mov	r3, r9
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bfb8      	it	lt
 80052ec:	232d      	movlt	r3, #45	@ 0x2d
 80052ee:	4a80      	ldr	r2, [pc, #512]	@ (80054f0 <_printf_float+0x2d8>)
 80052f0:	bfb8      	it	lt
 80052f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80052f6:	4b7f      	ldr	r3, [pc, #508]	@ (80054f4 <_printf_float+0x2dc>)
 80052f8:	e7d3      	b.n	80052a2 <_printf_float+0x8a>
 80052fa:	6863      	ldr	r3, [r4, #4]
 80052fc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	d13f      	bne.n	8005384 <_printf_float+0x16c>
 8005304:	2306      	movs	r3, #6
 8005306:	6063      	str	r3, [r4, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800530e:	6023      	str	r3, [r4, #0]
 8005310:	9206      	str	r2, [sp, #24]
 8005312:	aa0e      	add	r2, sp, #56	@ 0x38
 8005314:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005318:	aa0d      	add	r2, sp, #52	@ 0x34
 800531a:	9203      	str	r2, [sp, #12]
 800531c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005320:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005324:	6863      	ldr	r3, [r4, #4]
 8005326:	4642      	mov	r2, r8
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	4628      	mov	r0, r5
 800532c:	464b      	mov	r3, r9
 800532e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005330:	f7ff fed4 	bl	80050dc <__cvt>
 8005334:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005336:	4680      	mov	r8, r0
 8005338:	2947      	cmp	r1, #71	@ 0x47
 800533a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800533c:	d128      	bne.n	8005390 <_printf_float+0x178>
 800533e:	1cc8      	adds	r0, r1, #3
 8005340:	db02      	blt.n	8005348 <_printf_float+0x130>
 8005342:	6863      	ldr	r3, [r4, #4]
 8005344:	4299      	cmp	r1, r3
 8005346:	dd40      	ble.n	80053ca <_printf_float+0x1b2>
 8005348:	f1aa 0a02 	sub.w	sl, sl, #2
 800534c:	fa5f fa8a 	uxtb.w	sl, sl
 8005350:	4652      	mov	r2, sl
 8005352:	3901      	subs	r1, #1
 8005354:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005358:	910d      	str	r1, [sp, #52]	@ 0x34
 800535a:	f7ff ff23 	bl	80051a4 <__exponent>
 800535e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005360:	4681      	mov	r9, r0
 8005362:	1813      	adds	r3, r2, r0
 8005364:	2a01      	cmp	r2, #1
 8005366:	6123      	str	r3, [r4, #16]
 8005368:	dc02      	bgt.n	8005370 <_printf_float+0x158>
 800536a:	6822      	ldr	r2, [r4, #0]
 800536c:	07d2      	lsls	r2, r2, #31
 800536e:	d501      	bpl.n	8005374 <_printf_float+0x15c>
 8005370:	3301      	adds	r3, #1
 8005372:	6123      	str	r3, [r4, #16]
 8005374:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005378:	2b00      	cmp	r3, #0
 800537a:	d09e      	beq.n	80052ba <_printf_float+0xa2>
 800537c:	232d      	movs	r3, #45	@ 0x2d
 800537e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005382:	e79a      	b.n	80052ba <_printf_float+0xa2>
 8005384:	2947      	cmp	r1, #71	@ 0x47
 8005386:	d1bf      	bne.n	8005308 <_printf_float+0xf0>
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1bd      	bne.n	8005308 <_printf_float+0xf0>
 800538c:	2301      	movs	r3, #1
 800538e:	e7ba      	b.n	8005306 <_printf_float+0xee>
 8005390:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005394:	d9dc      	bls.n	8005350 <_printf_float+0x138>
 8005396:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800539a:	d118      	bne.n	80053ce <_printf_float+0x1b6>
 800539c:	2900      	cmp	r1, #0
 800539e:	6863      	ldr	r3, [r4, #4]
 80053a0:	dd0b      	ble.n	80053ba <_printf_float+0x1a2>
 80053a2:	6121      	str	r1, [r4, #16]
 80053a4:	b913      	cbnz	r3, 80053ac <_printf_float+0x194>
 80053a6:	6822      	ldr	r2, [r4, #0]
 80053a8:	07d0      	lsls	r0, r2, #31
 80053aa:	d502      	bpl.n	80053b2 <_printf_float+0x19a>
 80053ac:	3301      	adds	r3, #1
 80053ae:	440b      	add	r3, r1
 80053b0:	6123      	str	r3, [r4, #16]
 80053b2:	f04f 0900 	mov.w	r9, #0
 80053b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80053b8:	e7dc      	b.n	8005374 <_printf_float+0x15c>
 80053ba:	b913      	cbnz	r3, 80053c2 <_printf_float+0x1aa>
 80053bc:	6822      	ldr	r2, [r4, #0]
 80053be:	07d2      	lsls	r2, r2, #31
 80053c0:	d501      	bpl.n	80053c6 <_printf_float+0x1ae>
 80053c2:	3302      	adds	r3, #2
 80053c4:	e7f4      	b.n	80053b0 <_printf_float+0x198>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e7f2      	b.n	80053b0 <_printf_float+0x198>
 80053ca:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80053ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053d0:	4299      	cmp	r1, r3
 80053d2:	db05      	blt.n	80053e0 <_printf_float+0x1c8>
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	6121      	str	r1, [r4, #16]
 80053d8:	07d8      	lsls	r0, r3, #31
 80053da:	d5ea      	bpl.n	80053b2 <_printf_float+0x19a>
 80053dc:	1c4b      	adds	r3, r1, #1
 80053de:	e7e7      	b.n	80053b0 <_printf_float+0x198>
 80053e0:	2900      	cmp	r1, #0
 80053e2:	bfcc      	ite	gt
 80053e4:	2201      	movgt	r2, #1
 80053e6:	f1c1 0202 	rsble	r2, r1, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	e7e0      	b.n	80053b0 <_printf_float+0x198>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	055a      	lsls	r2, r3, #21
 80053f2:	d407      	bmi.n	8005404 <_printf_float+0x1ec>
 80053f4:	6923      	ldr	r3, [r4, #16]
 80053f6:	4642      	mov	r2, r8
 80053f8:	4631      	mov	r1, r6
 80053fa:	4628      	mov	r0, r5
 80053fc:	47b8      	blx	r7
 80053fe:	3001      	adds	r0, #1
 8005400:	d12b      	bne.n	800545a <_printf_float+0x242>
 8005402:	e764      	b.n	80052ce <_printf_float+0xb6>
 8005404:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005408:	f240 80dc 	bls.w	80055c4 <_printf_float+0x3ac>
 800540c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005410:	2200      	movs	r2, #0
 8005412:	2300      	movs	r3, #0
 8005414:	f7fb fac8 	bl	80009a8 <__aeabi_dcmpeq>
 8005418:	2800      	cmp	r0, #0
 800541a:	d033      	beq.n	8005484 <_printf_float+0x26c>
 800541c:	2301      	movs	r3, #1
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	4a35      	ldr	r2, [pc, #212]	@ (80054f8 <_printf_float+0x2e0>)
 8005424:	47b8      	blx	r7
 8005426:	3001      	adds	r0, #1
 8005428:	f43f af51 	beq.w	80052ce <_printf_float+0xb6>
 800542c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005430:	4543      	cmp	r3, r8
 8005432:	db02      	blt.n	800543a <_printf_float+0x222>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	07d8      	lsls	r0, r3, #31
 8005438:	d50f      	bpl.n	800545a <_printf_float+0x242>
 800543a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800543e:	4631      	mov	r1, r6
 8005440:	4628      	mov	r0, r5
 8005442:	47b8      	blx	r7
 8005444:	3001      	adds	r0, #1
 8005446:	f43f af42 	beq.w	80052ce <_printf_float+0xb6>
 800544a:	f04f 0900 	mov.w	r9, #0
 800544e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005452:	f104 0a1a 	add.w	sl, r4, #26
 8005456:	45c8      	cmp	r8, r9
 8005458:	dc09      	bgt.n	800546e <_printf_float+0x256>
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	079b      	lsls	r3, r3, #30
 800545e:	f100 8102 	bmi.w	8005666 <_printf_float+0x44e>
 8005462:	68e0      	ldr	r0, [r4, #12]
 8005464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005466:	4298      	cmp	r0, r3
 8005468:	bfb8      	it	lt
 800546a:	4618      	movlt	r0, r3
 800546c:	e731      	b.n	80052d2 <_printf_float+0xba>
 800546e:	2301      	movs	r3, #1
 8005470:	4652      	mov	r2, sl
 8005472:	4631      	mov	r1, r6
 8005474:	4628      	mov	r0, r5
 8005476:	47b8      	blx	r7
 8005478:	3001      	adds	r0, #1
 800547a:	f43f af28 	beq.w	80052ce <_printf_float+0xb6>
 800547e:	f109 0901 	add.w	r9, r9, #1
 8005482:	e7e8      	b.n	8005456 <_printf_float+0x23e>
 8005484:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005486:	2b00      	cmp	r3, #0
 8005488:	dc38      	bgt.n	80054fc <_printf_float+0x2e4>
 800548a:	2301      	movs	r3, #1
 800548c:	4631      	mov	r1, r6
 800548e:	4628      	mov	r0, r5
 8005490:	4a19      	ldr	r2, [pc, #100]	@ (80054f8 <_printf_float+0x2e0>)
 8005492:	47b8      	blx	r7
 8005494:	3001      	adds	r0, #1
 8005496:	f43f af1a 	beq.w	80052ce <_printf_float+0xb6>
 800549a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800549e:	ea59 0303 	orrs.w	r3, r9, r3
 80054a2:	d102      	bne.n	80054aa <_printf_float+0x292>
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	07d9      	lsls	r1, r3, #31
 80054a8:	d5d7      	bpl.n	800545a <_printf_float+0x242>
 80054aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054ae:	4631      	mov	r1, r6
 80054b0:	4628      	mov	r0, r5
 80054b2:	47b8      	blx	r7
 80054b4:	3001      	adds	r0, #1
 80054b6:	f43f af0a 	beq.w	80052ce <_printf_float+0xb6>
 80054ba:	f04f 0a00 	mov.w	sl, #0
 80054be:	f104 0b1a 	add.w	fp, r4, #26
 80054c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054c4:	425b      	negs	r3, r3
 80054c6:	4553      	cmp	r3, sl
 80054c8:	dc01      	bgt.n	80054ce <_printf_float+0x2b6>
 80054ca:	464b      	mov	r3, r9
 80054cc:	e793      	b.n	80053f6 <_printf_float+0x1de>
 80054ce:	2301      	movs	r3, #1
 80054d0:	465a      	mov	r2, fp
 80054d2:	4631      	mov	r1, r6
 80054d4:	4628      	mov	r0, r5
 80054d6:	47b8      	blx	r7
 80054d8:	3001      	adds	r0, #1
 80054da:	f43f aef8 	beq.w	80052ce <_printf_float+0xb6>
 80054de:	f10a 0a01 	add.w	sl, sl, #1
 80054e2:	e7ee      	b.n	80054c2 <_printf_float+0x2aa>
 80054e4:	7fefffff 	.word	0x7fefffff
 80054e8:	0800a406 	.word	0x0800a406
 80054ec:	0800a40a 	.word	0x0800a40a
 80054f0:	0800a40e 	.word	0x0800a40e
 80054f4:	0800a412 	.word	0x0800a412
 80054f8:	0800a7a0 	.word	0x0800a7a0
 80054fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054fe:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005502:	4553      	cmp	r3, sl
 8005504:	bfa8      	it	ge
 8005506:	4653      	movge	r3, sl
 8005508:	2b00      	cmp	r3, #0
 800550a:	4699      	mov	r9, r3
 800550c:	dc36      	bgt.n	800557c <_printf_float+0x364>
 800550e:	f04f 0b00 	mov.w	fp, #0
 8005512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005516:	f104 021a 	add.w	r2, r4, #26
 800551a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800551c:	930a      	str	r3, [sp, #40]	@ 0x28
 800551e:	eba3 0309 	sub.w	r3, r3, r9
 8005522:	455b      	cmp	r3, fp
 8005524:	dc31      	bgt.n	800558a <_printf_float+0x372>
 8005526:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005528:	459a      	cmp	sl, r3
 800552a:	dc3a      	bgt.n	80055a2 <_printf_float+0x38a>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	07da      	lsls	r2, r3, #31
 8005530:	d437      	bmi.n	80055a2 <_printf_float+0x38a>
 8005532:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005534:	ebaa 0903 	sub.w	r9, sl, r3
 8005538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800553a:	ebaa 0303 	sub.w	r3, sl, r3
 800553e:	4599      	cmp	r9, r3
 8005540:	bfa8      	it	ge
 8005542:	4699      	movge	r9, r3
 8005544:	f1b9 0f00 	cmp.w	r9, #0
 8005548:	dc33      	bgt.n	80055b2 <_printf_float+0x39a>
 800554a:	f04f 0800 	mov.w	r8, #0
 800554e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005552:	f104 0b1a 	add.w	fp, r4, #26
 8005556:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005558:	ebaa 0303 	sub.w	r3, sl, r3
 800555c:	eba3 0309 	sub.w	r3, r3, r9
 8005560:	4543      	cmp	r3, r8
 8005562:	f77f af7a 	ble.w	800545a <_printf_float+0x242>
 8005566:	2301      	movs	r3, #1
 8005568:	465a      	mov	r2, fp
 800556a:	4631      	mov	r1, r6
 800556c:	4628      	mov	r0, r5
 800556e:	47b8      	blx	r7
 8005570:	3001      	adds	r0, #1
 8005572:	f43f aeac 	beq.w	80052ce <_printf_float+0xb6>
 8005576:	f108 0801 	add.w	r8, r8, #1
 800557a:	e7ec      	b.n	8005556 <_printf_float+0x33e>
 800557c:	4642      	mov	r2, r8
 800557e:	4631      	mov	r1, r6
 8005580:	4628      	mov	r0, r5
 8005582:	47b8      	blx	r7
 8005584:	3001      	adds	r0, #1
 8005586:	d1c2      	bne.n	800550e <_printf_float+0x2f6>
 8005588:	e6a1      	b.n	80052ce <_printf_float+0xb6>
 800558a:	2301      	movs	r3, #1
 800558c:	4631      	mov	r1, r6
 800558e:	4628      	mov	r0, r5
 8005590:	920a      	str	r2, [sp, #40]	@ 0x28
 8005592:	47b8      	blx	r7
 8005594:	3001      	adds	r0, #1
 8005596:	f43f ae9a 	beq.w	80052ce <_printf_float+0xb6>
 800559a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800559c:	f10b 0b01 	add.w	fp, fp, #1
 80055a0:	e7bb      	b.n	800551a <_printf_float+0x302>
 80055a2:	4631      	mov	r1, r6
 80055a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b8      	blx	r7
 80055ac:	3001      	adds	r0, #1
 80055ae:	d1c0      	bne.n	8005532 <_printf_float+0x31a>
 80055b0:	e68d      	b.n	80052ce <_printf_float+0xb6>
 80055b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80055b4:	464b      	mov	r3, r9
 80055b6:	4631      	mov	r1, r6
 80055b8:	4628      	mov	r0, r5
 80055ba:	4442      	add	r2, r8
 80055bc:	47b8      	blx	r7
 80055be:	3001      	adds	r0, #1
 80055c0:	d1c3      	bne.n	800554a <_printf_float+0x332>
 80055c2:	e684      	b.n	80052ce <_printf_float+0xb6>
 80055c4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80055c8:	f1ba 0f01 	cmp.w	sl, #1
 80055cc:	dc01      	bgt.n	80055d2 <_printf_float+0x3ba>
 80055ce:	07db      	lsls	r3, r3, #31
 80055d0:	d536      	bpl.n	8005640 <_printf_float+0x428>
 80055d2:	2301      	movs	r3, #1
 80055d4:	4642      	mov	r2, r8
 80055d6:	4631      	mov	r1, r6
 80055d8:	4628      	mov	r0, r5
 80055da:	47b8      	blx	r7
 80055dc:	3001      	adds	r0, #1
 80055de:	f43f ae76 	beq.w	80052ce <_printf_float+0xb6>
 80055e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80055e6:	4631      	mov	r1, r6
 80055e8:	4628      	mov	r0, r5
 80055ea:	47b8      	blx	r7
 80055ec:	3001      	adds	r0, #1
 80055ee:	f43f ae6e 	beq.w	80052ce <_printf_float+0xb6>
 80055f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055f6:	2200      	movs	r2, #0
 80055f8:	2300      	movs	r3, #0
 80055fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055fe:	f7fb f9d3 	bl	80009a8 <__aeabi_dcmpeq>
 8005602:	b9c0      	cbnz	r0, 8005636 <_printf_float+0x41e>
 8005604:	4653      	mov	r3, sl
 8005606:	f108 0201 	add.w	r2, r8, #1
 800560a:	4631      	mov	r1, r6
 800560c:	4628      	mov	r0, r5
 800560e:	47b8      	blx	r7
 8005610:	3001      	adds	r0, #1
 8005612:	d10c      	bne.n	800562e <_printf_float+0x416>
 8005614:	e65b      	b.n	80052ce <_printf_float+0xb6>
 8005616:	2301      	movs	r3, #1
 8005618:	465a      	mov	r2, fp
 800561a:	4631      	mov	r1, r6
 800561c:	4628      	mov	r0, r5
 800561e:	47b8      	blx	r7
 8005620:	3001      	adds	r0, #1
 8005622:	f43f ae54 	beq.w	80052ce <_printf_float+0xb6>
 8005626:	f108 0801 	add.w	r8, r8, #1
 800562a:	45d0      	cmp	r8, sl
 800562c:	dbf3      	blt.n	8005616 <_printf_float+0x3fe>
 800562e:	464b      	mov	r3, r9
 8005630:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005634:	e6e0      	b.n	80053f8 <_printf_float+0x1e0>
 8005636:	f04f 0800 	mov.w	r8, #0
 800563a:	f104 0b1a 	add.w	fp, r4, #26
 800563e:	e7f4      	b.n	800562a <_printf_float+0x412>
 8005640:	2301      	movs	r3, #1
 8005642:	4642      	mov	r2, r8
 8005644:	e7e1      	b.n	800560a <_printf_float+0x3f2>
 8005646:	2301      	movs	r3, #1
 8005648:	464a      	mov	r2, r9
 800564a:	4631      	mov	r1, r6
 800564c:	4628      	mov	r0, r5
 800564e:	47b8      	blx	r7
 8005650:	3001      	adds	r0, #1
 8005652:	f43f ae3c 	beq.w	80052ce <_printf_float+0xb6>
 8005656:	f108 0801 	add.w	r8, r8, #1
 800565a:	68e3      	ldr	r3, [r4, #12]
 800565c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800565e:	1a5b      	subs	r3, r3, r1
 8005660:	4543      	cmp	r3, r8
 8005662:	dcf0      	bgt.n	8005646 <_printf_float+0x42e>
 8005664:	e6fd      	b.n	8005462 <_printf_float+0x24a>
 8005666:	f04f 0800 	mov.w	r8, #0
 800566a:	f104 0919 	add.w	r9, r4, #25
 800566e:	e7f4      	b.n	800565a <_printf_float+0x442>

08005670 <_printf_common>:
 8005670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005674:	4616      	mov	r6, r2
 8005676:	4698      	mov	r8, r3
 8005678:	688a      	ldr	r2, [r1, #8]
 800567a:	690b      	ldr	r3, [r1, #16]
 800567c:	4607      	mov	r7, r0
 800567e:	4293      	cmp	r3, r2
 8005680:	bfb8      	it	lt
 8005682:	4613      	movlt	r3, r2
 8005684:	6033      	str	r3, [r6, #0]
 8005686:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800568a:	460c      	mov	r4, r1
 800568c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005690:	b10a      	cbz	r2, 8005696 <_printf_common+0x26>
 8005692:	3301      	adds	r3, #1
 8005694:	6033      	str	r3, [r6, #0]
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	0699      	lsls	r1, r3, #26
 800569a:	bf42      	ittt	mi
 800569c:	6833      	ldrmi	r3, [r6, #0]
 800569e:	3302      	addmi	r3, #2
 80056a0:	6033      	strmi	r3, [r6, #0]
 80056a2:	6825      	ldr	r5, [r4, #0]
 80056a4:	f015 0506 	ands.w	r5, r5, #6
 80056a8:	d106      	bne.n	80056b8 <_printf_common+0x48>
 80056aa:	f104 0a19 	add.w	sl, r4, #25
 80056ae:	68e3      	ldr	r3, [r4, #12]
 80056b0:	6832      	ldr	r2, [r6, #0]
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	42ab      	cmp	r3, r5
 80056b6:	dc2b      	bgt.n	8005710 <_printf_common+0xa0>
 80056b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056bc:	6822      	ldr	r2, [r4, #0]
 80056be:	3b00      	subs	r3, #0
 80056c0:	bf18      	it	ne
 80056c2:	2301      	movne	r3, #1
 80056c4:	0692      	lsls	r2, r2, #26
 80056c6:	d430      	bmi.n	800572a <_printf_common+0xba>
 80056c8:	4641      	mov	r1, r8
 80056ca:	4638      	mov	r0, r7
 80056cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056d0:	47c8      	blx	r9
 80056d2:	3001      	adds	r0, #1
 80056d4:	d023      	beq.n	800571e <_printf_common+0xae>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	6922      	ldr	r2, [r4, #16]
 80056da:	f003 0306 	and.w	r3, r3, #6
 80056de:	2b04      	cmp	r3, #4
 80056e0:	bf14      	ite	ne
 80056e2:	2500      	movne	r5, #0
 80056e4:	6833      	ldreq	r3, [r6, #0]
 80056e6:	f04f 0600 	mov.w	r6, #0
 80056ea:	bf08      	it	eq
 80056ec:	68e5      	ldreq	r5, [r4, #12]
 80056ee:	f104 041a 	add.w	r4, r4, #26
 80056f2:	bf08      	it	eq
 80056f4:	1aed      	subeq	r5, r5, r3
 80056f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80056fa:	bf08      	it	eq
 80056fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005700:	4293      	cmp	r3, r2
 8005702:	bfc4      	itt	gt
 8005704:	1a9b      	subgt	r3, r3, r2
 8005706:	18ed      	addgt	r5, r5, r3
 8005708:	42b5      	cmp	r5, r6
 800570a:	d11a      	bne.n	8005742 <_printf_common+0xd2>
 800570c:	2000      	movs	r0, #0
 800570e:	e008      	b.n	8005722 <_printf_common+0xb2>
 8005710:	2301      	movs	r3, #1
 8005712:	4652      	mov	r2, sl
 8005714:	4641      	mov	r1, r8
 8005716:	4638      	mov	r0, r7
 8005718:	47c8      	blx	r9
 800571a:	3001      	adds	r0, #1
 800571c:	d103      	bne.n	8005726 <_printf_common+0xb6>
 800571e:	f04f 30ff 	mov.w	r0, #4294967295
 8005722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005726:	3501      	adds	r5, #1
 8005728:	e7c1      	b.n	80056ae <_printf_common+0x3e>
 800572a:	2030      	movs	r0, #48	@ 0x30
 800572c:	18e1      	adds	r1, r4, r3
 800572e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005738:	4422      	add	r2, r4
 800573a:	3302      	adds	r3, #2
 800573c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005740:	e7c2      	b.n	80056c8 <_printf_common+0x58>
 8005742:	2301      	movs	r3, #1
 8005744:	4622      	mov	r2, r4
 8005746:	4641      	mov	r1, r8
 8005748:	4638      	mov	r0, r7
 800574a:	47c8      	blx	r9
 800574c:	3001      	adds	r0, #1
 800574e:	d0e6      	beq.n	800571e <_printf_common+0xae>
 8005750:	3601      	adds	r6, #1
 8005752:	e7d9      	b.n	8005708 <_printf_common+0x98>

08005754 <_printf_i>:
 8005754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005758:	7e0f      	ldrb	r7, [r1, #24]
 800575a:	4691      	mov	r9, r2
 800575c:	2f78      	cmp	r7, #120	@ 0x78
 800575e:	4680      	mov	r8, r0
 8005760:	460c      	mov	r4, r1
 8005762:	469a      	mov	sl, r3
 8005764:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800576a:	d807      	bhi.n	800577c <_printf_i+0x28>
 800576c:	2f62      	cmp	r7, #98	@ 0x62
 800576e:	d80a      	bhi.n	8005786 <_printf_i+0x32>
 8005770:	2f00      	cmp	r7, #0
 8005772:	f000 80d3 	beq.w	800591c <_printf_i+0x1c8>
 8005776:	2f58      	cmp	r7, #88	@ 0x58
 8005778:	f000 80ba 	beq.w	80058f0 <_printf_i+0x19c>
 800577c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005784:	e03a      	b.n	80057fc <_printf_i+0xa8>
 8005786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800578a:	2b15      	cmp	r3, #21
 800578c:	d8f6      	bhi.n	800577c <_printf_i+0x28>
 800578e:	a101      	add	r1, pc, #4	@ (adr r1, 8005794 <_printf_i+0x40>)
 8005790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005794:	080057ed 	.word	0x080057ed
 8005798:	08005801 	.word	0x08005801
 800579c:	0800577d 	.word	0x0800577d
 80057a0:	0800577d 	.word	0x0800577d
 80057a4:	0800577d 	.word	0x0800577d
 80057a8:	0800577d 	.word	0x0800577d
 80057ac:	08005801 	.word	0x08005801
 80057b0:	0800577d 	.word	0x0800577d
 80057b4:	0800577d 	.word	0x0800577d
 80057b8:	0800577d 	.word	0x0800577d
 80057bc:	0800577d 	.word	0x0800577d
 80057c0:	08005903 	.word	0x08005903
 80057c4:	0800582b 	.word	0x0800582b
 80057c8:	080058bd 	.word	0x080058bd
 80057cc:	0800577d 	.word	0x0800577d
 80057d0:	0800577d 	.word	0x0800577d
 80057d4:	08005925 	.word	0x08005925
 80057d8:	0800577d 	.word	0x0800577d
 80057dc:	0800582b 	.word	0x0800582b
 80057e0:	0800577d 	.word	0x0800577d
 80057e4:	0800577d 	.word	0x0800577d
 80057e8:	080058c5 	.word	0x080058c5
 80057ec:	6833      	ldr	r3, [r6, #0]
 80057ee:	1d1a      	adds	r2, r3, #4
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6032      	str	r2, [r6, #0]
 80057f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057fc:	2301      	movs	r3, #1
 80057fe:	e09e      	b.n	800593e <_printf_i+0x1ea>
 8005800:	6833      	ldr	r3, [r6, #0]
 8005802:	6820      	ldr	r0, [r4, #0]
 8005804:	1d19      	adds	r1, r3, #4
 8005806:	6031      	str	r1, [r6, #0]
 8005808:	0606      	lsls	r6, r0, #24
 800580a:	d501      	bpl.n	8005810 <_printf_i+0xbc>
 800580c:	681d      	ldr	r5, [r3, #0]
 800580e:	e003      	b.n	8005818 <_printf_i+0xc4>
 8005810:	0645      	lsls	r5, r0, #25
 8005812:	d5fb      	bpl.n	800580c <_printf_i+0xb8>
 8005814:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005818:	2d00      	cmp	r5, #0
 800581a:	da03      	bge.n	8005824 <_printf_i+0xd0>
 800581c:	232d      	movs	r3, #45	@ 0x2d
 800581e:	426d      	negs	r5, r5
 8005820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005824:	230a      	movs	r3, #10
 8005826:	4859      	ldr	r0, [pc, #356]	@ (800598c <_printf_i+0x238>)
 8005828:	e011      	b.n	800584e <_printf_i+0xfa>
 800582a:	6821      	ldr	r1, [r4, #0]
 800582c:	6833      	ldr	r3, [r6, #0]
 800582e:	0608      	lsls	r0, r1, #24
 8005830:	f853 5b04 	ldr.w	r5, [r3], #4
 8005834:	d402      	bmi.n	800583c <_printf_i+0xe8>
 8005836:	0649      	lsls	r1, r1, #25
 8005838:	bf48      	it	mi
 800583a:	b2ad      	uxthmi	r5, r5
 800583c:	2f6f      	cmp	r7, #111	@ 0x6f
 800583e:	6033      	str	r3, [r6, #0]
 8005840:	bf14      	ite	ne
 8005842:	230a      	movne	r3, #10
 8005844:	2308      	moveq	r3, #8
 8005846:	4851      	ldr	r0, [pc, #324]	@ (800598c <_printf_i+0x238>)
 8005848:	2100      	movs	r1, #0
 800584a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800584e:	6866      	ldr	r6, [r4, #4]
 8005850:	2e00      	cmp	r6, #0
 8005852:	bfa8      	it	ge
 8005854:	6821      	ldrge	r1, [r4, #0]
 8005856:	60a6      	str	r6, [r4, #8]
 8005858:	bfa4      	itt	ge
 800585a:	f021 0104 	bicge.w	r1, r1, #4
 800585e:	6021      	strge	r1, [r4, #0]
 8005860:	b90d      	cbnz	r5, 8005866 <_printf_i+0x112>
 8005862:	2e00      	cmp	r6, #0
 8005864:	d04b      	beq.n	80058fe <_printf_i+0x1aa>
 8005866:	4616      	mov	r6, r2
 8005868:	fbb5 f1f3 	udiv	r1, r5, r3
 800586c:	fb03 5711 	mls	r7, r3, r1, r5
 8005870:	5dc7      	ldrb	r7, [r0, r7]
 8005872:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005876:	462f      	mov	r7, r5
 8005878:	42bb      	cmp	r3, r7
 800587a:	460d      	mov	r5, r1
 800587c:	d9f4      	bls.n	8005868 <_printf_i+0x114>
 800587e:	2b08      	cmp	r3, #8
 8005880:	d10b      	bne.n	800589a <_printf_i+0x146>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	07df      	lsls	r7, r3, #31
 8005886:	d508      	bpl.n	800589a <_printf_i+0x146>
 8005888:	6923      	ldr	r3, [r4, #16]
 800588a:	6861      	ldr	r1, [r4, #4]
 800588c:	4299      	cmp	r1, r3
 800588e:	bfde      	ittt	le
 8005890:	2330      	movle	r3, #48	@ 0x30
 8005892:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005896:	f106 36ff 	addle.w	r6, r6, #4294967295
 800589a:	1b92      	subs	r2, r2, r6
 800589c:	6122      	str	r2, [r4, #16]
 800589e:	464b      	mov	r3, r9
 80058a0:	4621      	mov	r1, r4
 80058a2:	4640      	mov	r0, r8
 80058a4:	f8cd a000 	str.w	sl, [sp]
 80058a8:	aa03      	add	r2, sp, #12
 80058aa:	f7ff fee1 	bl	8005670 <_printf_common>
 80058ae:	3001      	adds	r0, #1
 80058b0:	d14a      	bne.n	8005948 <_printf_i+0x1f4>
 80058b2:	f04f 30ff 	mov.w	r0, #4294967295
 80058b6:	b004      	add	sp, #16
 80058b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058bc:	6823      	ldr	r3, [r4, #0]
 80058be:	f043 0320 	orr.w	r3, r3, #32
 80058c2:	6023      	str	r3, [r4, #0]
 80058c4:	2778      	movs	r7, #120	@ 0x78
 80058c6:	4832      	ldr	r0, [pc, #200]	@ (8005990 <_printf_i+0x23c>)
 80058c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	6831      	ldr	r1, [r6, #0]
 80058d0:	061f      	lsls	r7, r3, #24
 80058d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80058d6:	d402      	bmi.n	80058de <_printf_i+0x18a>
 80058d8:	065f      	lsls	r7, r3, #25
 80058da:	bf48      	it	mi
 80058dc:	b2ad      	uxthmi	r5, r5
 80058de:	6031      	str	r1, [r6, #0]
 80058e0:	07d9      	lsls	r1, r3, #31
 80058e2:	bf44      	itt	mi
 80058e4:	f043 0320 	orrmi.w	r3, r3, #32
 80058e8:	6023      	strmi	r3, [r4, #0]
 80058ea:	b11d      	cbz	r5, 80058f4 <_printf_i+0x1a0>
 80058ec:	2310      	movs	r3, #16
 80058ee:	e7ab      	b.n	8005848 <_printf_i+0xf4>
 80058f0:	4826      	ldr	r0, [pc, #152]	@ (800598c <_printf_i+0x238>)
 80058f2:	e7e9      	b.n	80058c8 <_printf_i+0x174>
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	f023 0320 	bic.w	r3, r3, #32
 80058fa:	6023      	str	r3, [r4, #0]
 80058fc:	e7f6      	b.n	80058ec <_printf_i+0x198>
 80058fe:	4616      	mov	r6, r2
 8005900:	e7bd      	b.n	800587e <_printf_i+0x12a>
 8005902:	6833      	ldr	r3, [r6, #0]
 8005904:	6825      	ldr	r5, [r4, #0]
 8005906:	1d18      	adds	r0, r3, #4
 8005908:	6961      	ldr	r1, [r4, #20]
 800590a:	6030      	str	r0, [r6, #0]
 800590c:	062e      	lsls	r6, r5, #24
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	d501      	bpl.n	8005916 <_printf_i+0x1c2>
 8005912:	6019      	str	r1, [r3, #0]
 8005914:	e002      	b.n	800591c <_printf_i+0x1c8>
 8005916:	0668      	lsls	r0, r5, #25
 8005918:	d5fb      	bpl.n	8005912 <_printf_i+0x1be>
 800591a:	8019      	strh	r1, [r3, #0]
 800591c:	2300      	movs	r3, #0
 800591e:	4616      	mov	r6, r2
 8005920:	6123      	str	r3, [r4, #16]
 8005922:	e7bc      	b.n	800589e <_printf_i+0x14a>
 8005924:	6833      	ldr	r3, [r6, #0]
 8005926:	2100      	movs	r1, #0
 8005928:	1d1a      	adds	r2, r3, #4
 800592a:	6032      	str	r2, [r6, #0]
 800592c:	681e      	ldr	r6, [r3, #0]
 800592e:	6862      	ldr	r2, [r4, #4]
 8005930:	4630      	mov	r0, r6
 8005932:	f000 fc76 	bl	8006222 <memchr>
 8005936:	b108      	cbz	r0, 800593c <_printf_i+0x1e8>
 8005938:	1b80      	subs	r0, r0, r6
 800593a:	6060      	str	r0, [r4, #4]
 800593c:	6863      	ldr	r3, [r4, #4]
 800593e:	6123      	str	r3, [r4, #16]
 8005940:	2300      	movs	r3, #0
 8005942:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005946:	e7aa      	b.n	800589e <_printf_i+0x14a>
 8005948:	4632      	mov	r2, r6
 800594a:	4649      	mov	r1, r9
 800594c:	4640      	mov	r0, r8
 800594e:	6923      	ldr	r3, [r4, #16]
 8005950:	47d0      	blx	sl
 8005952:	3001      	adds	r0, #1
 8005954:	d0ad      	beq.n	80058b2 <_printf_i+0x15e>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	079b      	lsls	r3, r3, #30
 800595a:	d413      	bmi.n	8005984 <_printf_i+0x230>
 800595c:	68e0      	ldr	r0, [r4, #12]
 800595e:	9b03      	ldr	r3, [sp, #12]
 8005960:	4298      	cmp	r0, r3
 8005962:	bfb8      	it	lt
 8005964:	4618      	movlt	r0, r3
 8005966:	e7a6      	b.n	80058b6 <_printf_i+0x162>
 8005968:	2301      	movs	r3, #1
 800596a:	4632      	mov	r2, r6
 800596c:	4649      	mov	r1, r9
 800596e:	4640      	mov	r0, r8
 8005970:	47d0      	blx	sl
 8005972:	3001      	adds	r0, #1
 8005974:	d09d      	beq.n	80058b2 <_printf_i+0x15e>
 8005976:	3501      	adds	r5, #1
 8005978:	68e3      	ldr	r3, [r4, #12]
 800597a:	9903      	ldr	r1, [sp, #12]
 800597c:	1a5b      	subs	r3, r3, r1
 800597e:	42ab      	cmp	r3, r5
 8005980:	dcf2      	bgt.n	8005968 <_printf_i+0x214>
 8005982:	e7eb      	b.n	800595c <_printf_i+0x208>
 8005984:	2500      	movs	r5, #0
 8005986:	f104 0619 	add.w	r6, r4, #25
 800598a:	e7f5      	b.n	8005978 <_printf_i+0x224>
 800598c:	0800a416 	.word	0x0800a416
 8005990:	0800a427 	.word	0x0800a427

08005994 <_scanf_float>:
 8005994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005998:	b087      	sub	sp, #28
 800599a:	9303      	str	r3, [sp, #12]
 800599c:	688b      	ldr	r3, [r1, #8]
 800599e:	4617      	mov	r7, r2
 80059a0:	1e5a      	subs	r2, r3, #1
 80059a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80059a6:	bf82      	ittt	hi
 80059a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80059ac:	eb03 0b05 	addhi.w	fp, r3, r5
 80059b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80059b4:	460a      	mov	r2, r1
 80059b6:	f04f 0500 	mov.w	r5, #0
 80059ba:	bf88      	it	hi
 80059bc:	608b      	strhi	r3, [r1, #8]
 80059be:	680b      	ldr	r3, [r1, #0]
 80059c0:	4680      	mov	r8, r0
 80059c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80059c6:	f842 3b1c 	str.w	r3, [r2], #28
 80059ca:	460c      	mov	r4, r1
 80059cc:	bf98      	it	ls
 80059ce:	f04f 0b00 	movls.w	fp, #0
 80059d2:	4616      	mov	r6, r2
 80059d4:	46aa      	mov	sl, r5
 80059d6:	46a9      	mov	r9, r5
 80059d8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80059dc:	9201      	str	r2, [sp, #4]
 80059de:	9502      	str	r5, [sp, #8]
 80059e0:	68a2      	ldr	r2, [r4, #8]
 80059e2:	b152      	cbz	r2, 80059fa <_scanf_float+0x66>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b4e      	cmp	r3, #78	@ 0x4e
 80059ea:	d865      	bhi.n	8005ab8 <_scanf_float+0x124>
 80059ec:	2b40      	cmp	r3, #64	@ 0x40
 80059ee:	d83d      	bhi.n	8005a6c <_scanf_float+0xd8>
 80059f0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80059f4:	b2c8      	uxtb	r0, r1
 80059f6:	280e      	cmp	r0, #14
 80059f8:	d93b      	bls.n	8005a72 <_scanf_float+0xde>
 80059fa:	f1b9 0f00 	cmp.w	r9, #0
 80059fe:	d003      	beq.n	8005a08 <_scanf_float+0x74>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a06:	6023      	str	r3, [r4, #0]
 8005a08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a0c:	f1ba 0f01 	cmp.w	sl, #1
 8005a10:	f200 8118 	bhi.w	8005c44 <_scanf_float+0x2b0>
 8005a14:	9b01      	ldr	r3, [sp, #4]
 8005a16:	429e      	cmp	r6, r3
 8005a18:	f200 8109 	bhi.w	8005c2e <_scanf_float+0x29a>
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	b007      	add	sp, #28
 8005a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a24:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005a28:	2a0d      	cmp	r2, #13
 8005a2a:	d8e6      	bhi.n	80059fa <_scanf_float+0x66>
 8005a2c:	a101      	add	r1, pc, #4	@ (adr r1, 8005a34 <_scanf_float+0xa0>)
 8005a2e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005a32:	bf00      	nop
 8005a34:	08005b7b 	.word	0x08005b7b
 8005a38:	080059fb 	.word	0x080059fb
 8005a3c:	080059fb 	.word	0x080059fb
 8005a40:	080059fb 	.word	0x080059fb
 8005a44:	08005bdb 	.word	0x08005bdb
 8005a48:	08005bb3 	.word	0x08005bb3
 8005a4c:	080059fb 	.word	0x080059fb
 8005a50:	080059fb 	.word	0x080059fb
 8005a54:	08005b89 	.word	0x08005b89
 8005a58:	080059fb 	.word	0x080059fb
 8005a5c:	080059fb 	.word	0x080059fb
 8005a60:	080059fb 	.word	0x080059fb
 8005a64:	080059fb 	.word	0x080059fb
 8005a68:	08005b41 	.word	0x08005b41
 8005a6c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005a70:	e7da      	b.n	8005a28 <_scanf_float+0x94>
 8005a72:	290e      	cmp	r1, #14
 8005a74:	d8c1      	bhi.n	80059fa <_scanf_float+0x66>
 8005a76:	a001      	add	r0, pc, #4	@ (adr r0, 8005a7c <_scanf_float+0xe8>)
 8005a78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005a7c:	08005b31 	.word	0x08005b31
 8005a80:	080059fb 	.word	0x080059fb
 8005a84:	08005b31 	.word	0x08005b31
 8005a88:	08005bc7 	.word	0x08005bc7
 8005a8c:	080059fb 	.word	0x080059fb
 8005a90:	08005ad9 	.word	0x08005ad9
 8005a94:	08005b17 	.word	0x08005b17
 8005a98:	08005b17 	.word	0x08005b17
 8005a9c:	08005b17 	.word	0x08005b17
 8005aa0:	08005b17 	.word	0x08005b17
 8005aa4:	08005b17 	.word	0x08005b17
 8005aa8:	08005b17 	.word	0x08005b17
 8005aac:	08005b17 	.word	0x08005b17
 8005ab0:	08005b17 	.word	0x08005b17
 8005ab4:	08005b17 	.word	0x08005b17
 8005ab8:	2b6e      	cmp	r3, #110	@ 0x6e
 8005aba:	d809      	bhi.n	8005ad0 <_scanf_float+0x13c>
 8005abc:	2b60      	cmp	r3, #96	@ 0x60
 8005abe:	d8b1      	bhi.n	8005a24 <_scanf_float+0x90>
 8005ac0:	2b54      	cmp	r3, #84	@ 0x54
 8005ac2:	d07b      	beq.n	8005bbc <_scanf_float+0x228>
 8005ac4:	2b59      	cmp	r3, #89	@ 0x59
 8005ac6:	d198      	bne.n	80059fa <_scanf_float+0x66>
 8005ac8:	2d07      	cmp	r5, #7
 8005aca:	d196      	bne.n	80059fa <_scanf_float+0x66>
 8005acc:	2508      	movs	r5, #8
 8005ace:	e02c      	b.n	8005b2a <_scanf_float+0x196>
 8005ad0:	2b74      	cmp	r3, #116	@ 0x74
 8005ad2:	d073      	beq.n	8005bbc <_scanf_float+0x228>
 8005ad4:	2b79      	cmp	r3, #121	@ 0x79
 8005ad6:	e7f6      	b.n	8005ac6 <_scanf_float+0x132>
 8005ad8:	6821      	ldr	r1, [r4, #0]
 8005ada:	05c8      	lsls	r0, r1, #23
 8005adc:	d51b      	bpl.n	8005b16 <_scanf_float+0x182>
 8005ade:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005ae2:	6021      	str	r1, [r4, #0]
 8005ae4:	f109 0901 	add.w	r9, r9, #1
 8005ae8:	f1bb 0f00 	cmp.w	fp, #0
 8005aec:	d003      	beq.n	8005af6 <_scanf_float+0x162>
 8005aee:	3201      	adds	r2, #1
 8005af0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005af4:	60a2      	str	r2, [r4, #8]
 8005af6:	68a3      	ldr	r3, [r4, #8]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	60a3      	str	r3, [r4, #8]
 8005afc:	6923      	ldr	r3, [r4, #16]
 8005afe:	3301      	adds	r3, #1
 8005b00:	6123      	str	r3, [r4, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	607b      	str	r3, [r7, #4]
 8005b0a:	f340 8087 	ble.w	8005c1c <_scanf_float+0x288>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	3301      	adds	r3, #1
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	e764      	b.n	80059e0 <_scanf_float+0x4c>
 8005b16:	eb1a 0105 	adds.w	r1, sl, r5
 8005b1a:	f47f af6e 	bne.w	80059fa <_scanf_float+0x66>
 8005b1e:	460d      	mov	r5, r1
 8005b20:	468a      	mov	sl, r1
 8005b22:	6822      	ldr	r2, [r4, #0]
 8005b24:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005b28:	6022      	str	r2, [r4, #0]
 8005b2a:	f806 3b01 	strb.w	r3, [r6], #1
 8005b2e:	e7e2      	b.n	8005af6 <_scanf_float+0x162>
 8005b30:	6822      	ldr	r2, [r4, #0]
 8005b32:	0610      	lsls	r0, r2, #24
 8005b34:	f57f af61 	bpl.w	80059fa <_scanf_float+0x66>
 8005b38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b3c:	6022      	str	r2, [r4, #0]
 8005b3e:	e7f4      	b.n	8005b2a <_scanf_float+0x196>
 8005b40:	f1ba 0f00 	cmp.w	sl, #0
 8005b44:	d10e      	bne.n	8005b64 <_scanf_float+0x1d0>
 8005b46:	f1b9 0f00 	cmp.w	r9, #0
 8005b4a:	d10e      	bne.n	8005b6a <_scanf_float+0x1d6>
 8005b4c:	6822      	ldr	r2, [r4, #0]
 8005b4e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005b52:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005b56:	d108      	bne.n	8005b6a <_scanf_float+0x1d6>
 8005b58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005b5c:	f04f 0a01 	mov.w	sl, #1
 8005b60:	6022      	str	r2, [r4, #0]
 8005b62:	e7e2      	b.n	8005b2a <_scanf_float+0x196>
 8005b64:	f1ba 0f02 	cmp.w	sl, #2
 8005b68:	d055      	beq.n	8005c16 <_scanf_float+0x282>
 8005b6a:	2d01      	cmp	r5, #1
 8005b6c:	d002      	beq.n	8005b74 <_scanf_float+0x1e0>
 8005b6e:	2d04      	cmp	r5, #4
 8005b70:	f47f af43 	bne.w	80059fa <_scanf_float+0x66>
 8005b74:	3501      	adds	r5, #1
 8005b76:	b2ed      	uxtb	r5, r5
 8005b78:	e7d7      	b.n	8005b2a <_scanf_float+0x196>
 8005b7a:	f1ba 0f01 	cmp.w	sl, #1
 8005b7e:	f47f af3c 	bne.w	80059fa <_scanf_float+0x66>
 8005b82:	f04f 0a02 	mov.w	sl, #2
 8005b86:	e7d0      	b.n	8005b2a <_scanf_float+0x196>
 8005b88:	b97d      	cbnz	r5, 8005baa <_scanf_float+0x216>
 8005b8a:	f1b9 0f00 	cmp.w	r9, #0
 8005b8e:	f47f af37 	bne.w	8005a00 <_scanf_float+0x6c>
 8005b92:	6822      	ldr	r2, [r4, #0]
 8005b94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005b98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005b9c:	f040 8103 	bne.w	8005da6 <_scanf_float+0x412>
 8005ba0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005ba4:	2501      	movs	r5, #1
 8005ba6:	6022      	str	r2, [r4, #0]
 8005ba8:	e7bf      	b.n	8005b2a <_scanf_float+0x196>
 8005baa:	2d03      	cmp	r5, #3
 8005bac:	d0e2      	beq.n	8005b74 <_scanf_float+0x1e0>
 8005bae:	2d05      	cmp	r5, #5
 8005bb0:	e7de      	b.n	8005b70 <_scanf_float+0x1dc>
 8005bb2:	2d02      	cmp	r5, #2
 8005bb4:	f47f af21 	bne.w	80059fa <_scanf_float+0x66>
 8005bb8:	2503      	movs	r5, #3
 8005bba:	e7b6      	b.n	8005b2a <_scanf_float+0x196>
 8005bbc:	2d06      	cmp	r5, #6
 8005bbe:	f47f af1c 	bne.w	80059fa <_scanf_float+0x66>
 8005bc2:	2507      	movs	r5, #7
 8005bc4:	e7b1      	b.n	8005b2a <_scanf_float+0x196>
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	0591      	lsls	r1, r2, #22
 8005bca:	f57f af16 	bpl.w	80059fa <_scanf_float+0x66>
 8005bce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005bd2:	6022      	str	r2, [r4, #0]
 8005bd4:	f8cd 9008 	str.w	r9, [sp, #8]
 8005bd8:	e7a7      	b.n	8005b2a <_scanf_float+0x196>
 8005bda:	6822      	ldr	r2, [r4, #0]
 8005bdc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005be0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005be4:	d006      	beq.n	8005bf4 <_scanf_float+0x260>
 8005be6:	0550      	lsls	r0, r2, #21
 8005be8:	f57f af07 	bpl.w	80059fa <_scanf_float+0x66>
 8005bec:	f1b9 0f00 	cmp.w	r9, #0
 8005bf0:	f000 80d9 	beq.w	8005da6 <_scanf_float+0x412>
 8005bf4:	0591      	lsls	r1, r2, #22
 8005bf6:	bf58      	it	pl
 8005bf8:	9902      	ldrpl	r1, [sp, #8]
 8005bfa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005bfe:	bf58      	it	pl
 8005c00:	eba9 0101 	subpl.w	r1, r9, r1
 8005c04:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005c08:	f04f 0900 	mov.w	r9, #0
 8005c0c:	bf58      	it	pl
 8005c0e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005c12:	6022      	str	r2, [r4, #0]
 8005c14:	e789      	b.n	8005b2a <_scanf_float+0x196>
 8005c16:	f04f 0a03 	mov.w	sl, #3
 8005c1a:	e786      	b.n	8005b2a <_scanf_float+0x196>
 8005c1c:	4639      	mov	r1, r7
 8005c1e:	4640      	mov	r0, r8
 8005c20:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005c24:	4798      	blx	r3
 8005c26:	2800      	cmp	r0, #0
 8005c28:	f43f aeda 	beq.w	80059e0 <_scanf_float+0x4c>
 8005c2c:	e6e5      	b.n	80059fa <_scanf_float+0x66>
 8005c2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c32:	463a      	mov	r2, r7
 8005c34:	4640      	mov	r0, r8
 8005c36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c3a:	4798      	blx	r3
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	6123      	str	r3, [r4, #16]
 8005c42:	e6e7      	b.n	8005a14 <_scanf_float+0x80>
 8005c44:	1e6b      	subs	r3, r5, #1
 8005c46:	2b06      	cmp	r3, #6
 8005c48:	d824      	bhi.n	8005c94 <_scanf_float+0x300>
 8005c4a:	2d02      	cmp	r5, #2
 8005c4c:	d836      	bhi.n	8005cbc <_scanf_float+0x328>
 8005c4e:	9b01      	ldr	r3, [sp, #4]
 8005c50:	429e      	cmp	r6, r3
 8005c52:	f67f aee3 	bls.w	8005a1c <_scanf_float+0x88>
 8005c56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c5a:	463a      	mov	r2, r7
 8005c5c:	4640      	mov	r0, r8
 8005c5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c62:	4798      	blx	r3
 8005c64:	6923      	ldr	r3, [r4, #16]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	6123      	str	r3, [r4, #16]
 8005c6a:	e7f0      	b.n	8005c4e <_scanf_float+0x2ba>
 8005c6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c70:	463a      	mov	r2, r7
 8005c72:	4640      	mov	r0, r8
 8005c74:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005c78:	4798      	blx	r3
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	6123      	str	r3, [r4, #16]
 8005c80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c84:	fa5f fa8a 	uxtb.w	sl, sl
 8005c88:	f1ba 0f02 	cmp.w	sl, #2
 8005c8c:	d1ee      	bne.n	8005c6c <_scanf_float+0x2d8>
 8005c8e:	3d03      	subs	r5, #3
 8005c90:	b2ed      	uxtb	r5, r5
 8005c92:	1b76      	subs	r6, r6, r5
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	05da      	lsls	r2, r3, #23
 8005c98:	d530      	bpl.n	8005cfc <_scanf_float+0x368>
 8005c9a:	055b      	lsls	r3, r3, #21
 8005c9c:	d511      	bpl.n	8005cc2 <_scanf_float+0x32e>
 8005c9e:	9b01      	ldr	r3, [sp, #4]
 8005ca0:	429e      	cmp	r6, r3
 8005ca2:	f67f aebb 	bls.w	8005a1c <_scanf_float+0x88>
 8005ca6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005caa:	463a      	mov	r2, r7
 8005cac:	4640      	mov	r0, r8
 8005cae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cb2:	4798      	blx	r3
 8005cb4:	6923      	ldr	r3, [r4, #16]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	6123      	str	r3, [r4, #16]
 8005cba:	e7f0      	b.n	8005c9e <_scanf_float+0x30a>
 8005cbc:	46aa      	mov	sl, r5
 8005cbe:	46b3      	mov	fp, r6
 8005cc0:	e7de      	b.n	8005c80 <_scanf_float+0x2ec>
 8005cc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005cc6:	6923      	ldr	r3, [r4, #16]
 8005cc8:	2965      	cmp	r1, #101	@ 0x65
 8005cca:	f103 33ff 	add.w	r3, r3, #4294967295
 8005cce:	f106 35ff 	add.w	r5, r6, #4294967295
 8005cd2:	6123      	str	r3, [r4, #16]
 8005cd4:	d00c      	beq.n	8005cf0 <_scanf_float+0x35c>
 8005cd6:	2945      	cmp	r1, #69	@ 0x45
 8005cd8:	d00a      	beq.n	8005cf0 <_scanf_float+0x35c>
 8005cda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005cde:	463a      	mov	r2, r7
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	4798      	blx	r3
 8005ce4:	6923      	ldr	r3, [r4, #16]
 8005ce6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	1eb5      	subs	r5, r6, #2
 8005cee:	6123      	str	r3, [r4, #16]
 8005cf0:	463a      	mov	r2, r7
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005cf8:	4798      	blx	r3
 8005cfa:	462e      	mov	r6, r5
 8005cfc:	6822      	ldr	r2, [r4, #0]
 8005cfe:	f012 0210 	ands.w	r2, r2, #16
 8005d02:	d001      	beq.n	8005d08 <_scanf_float+0x374>
 8005d04:	2000      	movs	r0, #0
 8005d06:	e68a      	b.n	8005a1e <_scanf_float+0x8a>
 8005d08:	7032      	strb	r2, [r6, #0]
 8005d0a:	6823      	ldr	r3, [r4, #0]
 8005d0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d14:	d11c      	bne.n	8005d50 <_scanf_float+0x3bc>
 8005d16:	9b02      	ldr	r3, [sp, #8]
 8005d18:	454b      	cmp	r3, r9
 8005d1a:	eba3 0209 	sub.w	r2, r3, r9
 8005d1e:	d123      	bne.n	8005d68 <_scanf_float+0x3d4>
 8005d20:	2200      	movs	r2, #0
 8005d22:	4640      	mov	r0, r8
 8005d24:	9901      	ldr	r1, [sp, #4]
 8005d26:	f002 fc8f 	bl	8008648 <_strtod_r>
 8005d2a:	9b03      	ldr	r3, [sp, #12]
 8005d2c:	6825      	ldr	r5, [r4, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f015 0f02 	tst.w	r5, #2
 8005d34:	4606      	mov	r6, r0
 8005d36:	460f      	mov	r7, r1
 8005d38:	f103 0204 	add.w	r2, r3, #4
 8005d3c:	d01f      	beq.n	8005d7e <_scanf_float+0x3ea>
 8005d3e:	9903      	ldr	r1, [sp, #12]
 8005d40:	600a      	str	r2, [r1, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	e9c3 6700 	strd	r6, r7, [r3]
 8005d48:	68e3      	ldr	r3, [r4, #12]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	60e3      	str	r3, [r4, #12]
 8005d4e:	e7d9      	b.n	8005d04 <_scanf_float+0x370>
 8005d50:	9b04      	ldr	r3, [sp, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0e4      	beq.n	8005d20 <_scanf_float+0x38c>
 8005d56:	9905      	ldr	r1, [sp, #20]
 8005d58:	230a      	movs	r3, #10
 8005d5a:	4640      	mov	r0, r8
 8005d5c:	3101      	adds	r1, #1
 8005d5e:	f002 fcf3 	bl	8008748 <_strtol_r>
 8005d62:	9b04      	ldr	r3, [sp, #16]
 8005d64:	9e05      	ldr	r6, [sp, #20]
 8005d66:	1ac2      	subs	r2, r0, r3
 8005d68:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005d6c:	429e      	cmp	r6, r3
 8005d6e:	bf28      	it	cs
 8005d70:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005d74:	4630      	mov	r0, r6
 8005d76:	490d      	ldr	r1, [pc, #52]	@ (8005dac <_scanf_float+0x418>)
 8005d78:	f000 f924 	bl	8005fc4 <siprintf>
 8005d7c:	e7d0      	b.n	8005d20 <_scanf_float+0x38c>
 8005d7e:	076d      	lsls	r5, r5, #29
 8005d80:	d4dd      	bmi.n	8005d3e <_scanf_float+0x3aa>
 8005d82:	9d03      	ldr	r5, [sp, #12]
 8005d84:	602a      	str	r2, [r5, #0]
 8005d86:	681d      	ldr	r5, [r3, #0]
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	f7fa fe3e 	bl	8000a0c <__aeabi_dcmpun>
 8005d90:	b120      	cbz	r0, 8005d9c <_scanf_float+0x408>
 8005d92:	4807      	ldr	r0, [pc, #28]	@ (8005db0 <_scanf_float+0x41c>)
 8005d94:	f000 fa62 	bl	800625c <nanf>
 8005d98:	6028      	str	r0, [r5, #0]
 8005d9a:	e7d5      	b.n	8005d48 <_scanf_float+0x3b4>
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	4639      	mov	r1, r7
 8005da0:	f7fa fe92 	bl	8000ac8 <__aeabi_d2f>
 8005da4:	e7f8      	b.n	8005d98 <_scanf_float+0x404>
 8005da6:	f04f 0900 	mov.w	r9, #0
 8005daa:	e62d      	b.n	8005a08 <_scanf_float+0x74>
 8005dac:	0800a438 	.word	0x0800a438
 8005db0:	0800a7e8 	.word	0x0800a7e8

08005db4 <std>:
 8005db4:	2300      	movs	r3, #0
 8005db6:	b510      	push	{r4, lr}
 8005db8:	4604      	mov	r4, r0
 8005dba:	e9c0 3300 	strd	r3, r3, [r0]
 8005dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dc2:	6083      	str	r3, [r0, #8]
 8005dc4:	8181      	strh	r1, [r0, #12]
 8005dc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005dc8:	81c2      	strh	r2, [r0, #14]
 8005dca:	6183      	str	r3, [r0, #24]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	2208      	movs	r2, #8
 8005dd0:	305c      	adds	r0, #92	@ 0x5c
 8005dd2:	f000 f986 	bl	80060e2 <memset>
 8005dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e0c <std+0x58>)
 8005dd8:	6224      	str	r4, [r4, #32]
 8005dda:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8005e10 <std+0x5c>)
 8005dde:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005de0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e14 <std+0x60>)
 8005de2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005de4:	4b0c      	ldr	r3, [pc, #48]	@ (8005e18 <std+0x64>)
 8005de6:	6323      	str	r3, [r4, #48]	@ 0x30
 8005de8:	4b0c      	ldr	r3, [pc, #48]	@ (8005e1c <std+0x68>)
 8005dea:	429c      	cmp	r4, r3
 8005dec:	d006      	beq.n	8005dfc <std+0x48>
 8005dee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005df2:	4294      	cmp	r4, r2
 8005df4:	d002      	beq.n	8005dfc <std+0x48>
 8005df6:	33d0      	adds	r3, #208	@ 0xd0
 8005df8:	429c      	cmp	r4, r3
 8005dfa:	d105      	bne.n	8005e08 <std+0x54>
 8005dfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e04:	f000 ba0a 	b.w	800621c <__retarget_lock_init_recursive>
 8005e08:	bd10      	pop	{r4, pc}
 8005e0a:	bf00      	nop
 8005e0c:	08006059 	.word	0x08006059
 8005e10:	0800607f 	.word	0x0800607f
 8005e14:	080060b7 	.word	0x080060b7
 8005e18:	080060db 	.word	0x080060db
 8005e1c:	20000700 	.word	0x20000700

08005e20 <stdio_exit_handler>:
 8005e20:	4a02      	ldr	r2, [pc, #8]	@ (8005e2c <stdio_exit_handler+0xc>)
 8005e22:	4903      	ldr	r1, [pc, #12]	@ (8005e30 <stdio_exit_handler+0x10>)
 8005e24:	4803      	ldr	r0, [pc, #12]	@ (8005e34 <stdio_exit_handler+0x14>)
 8005e26:	f000 b869 	b.w	8005efc <_fwalk_sglue>
 8005e2a:	bf00      	nop
 8005e2c:	20000010 	.word	0x20000010
 8005e30:	080093a9 	.word	0x080093a9
 8005e34:	20000020 	.word	0x20000020

08005e38 <cleanup_stdio>:
 8005e38:	6841      	ldr	r1, [r0, #4]
 8005e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e6c <cleanup_stdio+0x34>)
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	4299      	cmp	r1, r3
 8005e40:	4604      	mov	r4, r0
 8005e42:	d001      	beq.n	8005e48 <cleanup_stdio+0x10>
 8005e44:	f003 fab0 	bl	80093a8 <_fflush_r>
 8005e48:	68a1      	ldr	r1, [r4, #8]
 8005e4a:	4b09      	ldr	r3, [pc, #36]	@ (8005e70 <cleanup_stdio+0x38>)
 8005e4c:	4299      	cmp	r1, r3
 8005e4e:	d002      	beq.n	8005e56 <cleanup_stdio+0x1e>
 8005e50:	4620      	mov	r0, r4
 8005e52:	f003 faa9 	bl	80093a8 <_fflush_r>
 8005e56:	68e1      	ldr	r1, [r4, #12]
 8005e58:	4b06      	ldr	r3, [pc, #24]	@ (8005e74 <cleanup_stdio+0x3c>)
 8005e5a:	4299      	cmp	r1, r3
 8005e5c:	d004      	beq.n	8005e68 <cleanup_stdio+0x30>
 8005e5e:	4620      	mov	r0, r4
 8005e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e64:	f003 baa0 	b.w	80093a8 <_fflush_r>
 8005e68:	bd10      	pop	{r4, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000700 	.word	0x20000700
 8005e70:	20000768 	.word	0x20000768
 8005e74:	200007d0 	.word	0x200007d0

08005e78 <global_stdio_init.part.0>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ea8 <global_stdio_init.part.0+0x30>)
 8005e7c:	4c0b      	ldr	r4, [pc, #44]	@ (8005eac <global_stdio_init.part.0+0x34>)
 8005e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8005eb0 <global_stdio_init.part.0+0x38>)
 8005e80:	4620      	mov	r0, r4
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	2104      	movs	r1, #4
 8005e86:	2200      	movs	r2, #0
 8005e88:	f7ff ff94 	bl	8005db4 <std>
 8005e8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e90:	2201      	movs	r2, #1
 8005e92:	2109      	movs	r1, #9
 8005e94:	f7ff ff8e 	bl	8005db4 <std>
 8005e98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ea2:	2112      	movs	r1, #18
 8005ea4:	f7ff bf86 	b.w	8005db4 <std>
 8005ea8:	20000838 	.word	0x20000838
 8005eac:	20000700 	.word	0x20000700
 8005eb0:	08005e21 	.word	0x08005e21

08005eb4 <__sfp_lock_acquire>:
 8005eb4:	4801      	ldr	r0, [pc, #4]	@ (8005ebc <__sfp_lock_acquire+0x8>)
 8005eb6:	f000 b9b2 	b.w	800621e <__retarget_lock_acquire_recursive>
 8005eba:	bf00      	nop
 8005ebc:	20000841 	.word	0x20000841

08005ec0 <__sfp_lock_release>:
 8005ec0:	4801      	ldr	r0, [pc, #4]	@ (8005ec8 <__sfp_lock_release+0x8>)
 8005ec2:	f000 b9ad 	b.w	8006220 <__retarget_lock_release_recursive>
 8005ec6:	bf00      	nop
 8005ec8:	20000841 	.word	0x20000841

08005ecc <__sinit>:
 8005ecc:	b510      	push	{r4, lr}
 8005ece:	4604      	mov	r4, r0
 8005ed0:	f7ff fff0 	bl	8005eb4 <__sfp_lock_acquire>
 8005ed4:	6a23      	ldr	r3, [r4, #32]
 8005ed6:	b11b      	cbz	r3, 8005ee0 <__sinit+0x14>
 8005ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005edc:	f7ff bff0 	b.w	8005ec0 <__sfp_lock_release>
 8005ee0:	4b04      	ldr	r3, [pc, #16]	@ (8005ef4 <__sinit+0x28>)
 8005ee2:	6223      	str	r3, [r4, #32]
 8005ee4:	4b04      	ldr	r3, [pc, #16]	@ (8005ef8 <__sinit+0x2c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1f5      	bne.n	8005ed8 <__sinit+0xc>
 8005eec:	f7ff ffc4 	bl	8005e78 <global_stdio_init.part.0>
 8005ef0:	e7f2      	b.n	8005ed8 <__sinit+0xc>
 8005ef2:	bf00      	nop
 8005ef4:	08005e39 	.word	0x08005e39
 8005ef8:	20000838 	.word	0x20000838

08005efc <_fwalk_sglue>:
 8005efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f00:	4607      	mov	r7, r0
 8005f02:	4688      	mov	r8, r1
 8005f04:	4614      	mov	r4, r2
 8005f06:	2600      	movs	r6, #0
 8005f08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f0c:	f1b9 0901 	subs.w	r9, r9, #1
 8005f10:	d505      	bpl.n	8005f1e <_fwalk_sglue+0x22>
 8005f12:	6824      	ldr	r4, [r4, #0]
 8005f14:	2c00      	cmp	r4, #0
 8005f16:	d1f7      	bne.n	8005f08 <_fwalk_sglue+0xc>
 8005f18:	4630      	mov	r0, r6
 8005f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f1e:	89ab      	ldrh	r3, [r5, #12]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d907      	bls.n	8005f34 <_fwalk_sglue+0x38>
 8005f24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	d003      	beq.n	8005f34 <_fwalk_sglue+0x38>
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	4638      	mov	r0, r7
 8005f30:	47c0      	blx	r8
 8005f32:	4306      	orrs	r6, r0
 8005f34:	3568      	adds	r5, #104	@ 0x68
 8005f36:	e7e9      	b.n	8005f0c <_fwalk_sglue+0x10>

08005f38 <iprintf>:
 8005f38:	b40f      	push	{r0, r1, r2, r3}
 8005f3a:	b507      	push	{r0, r1, r2, lr}
 8005f3c:	4906      	ldr	r1, [pc, #24]	@ (8005f58 <iprintf+0x20>)
 8005f3e:	ab04      	add	r3, sp, #16
 8005f40:	6808      	ldr	r0, [r1, #0]
 8005f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f46:	6881      	ldr	r1, [r0, #8]
 8005f48:	9301      	str	r3, [sp, #4]
 8005f4a:	f002 ff49 	bl	8008de0 <_vfiprintf_r>
 8005f4e:	b003      	add	sp, #12
 8005f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f54:	b004      	add	sp, #16
 8005f56:	4770      	bx	lr
 8005f58:	2000001c 	.word	0x2000001c

08005f5c <sniprintf>:
 8005f5c:	b40c      	push	{r2, r3}
 8005f5e:	b530      	push	{r4, r5, lr}
 8005f60:	4b17      	ldr	r3, [pc, #92]	@ (8005fc0 <sniprintf+0x64>)
 8005f62:	1e0c      	subs	r4, r1, #0
 8005f64:	681d      	ldr	r5, [r3, #0]
 8005f66:	b09d      	sub	sp, #116	@ 0x74
 8005f68:	da08      	bge.n	8005f7c <sniprintf+0x20>
 8005f6a:	238b      	movs	r3, #139	@ 0x8b
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f70:	602b      	str	r3, [r5, #0]
 8005f72:	b01d      	add	sp, #116	@ 0x74
 8005f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f78:	b002      	add	sp, #8
 8005f7a:	4770      	bx	lr
 8005f7c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005f80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005f84:	bf0c      	ite	eq
 8005f86:	4623      	moveq	r3, r4
 8005f88:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005f8c:	9304      	str	r3, [sp, #16]
 8005f8e:	9307      	str	r3, [sp, #28]
 8005f90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f94:	9002      	str	r0, [sp, #8]
 8005f96:	9006      	str	r0, [sp, #24]
 8005f98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	ab21      	add	r3, sp, #132	@ 0x84
 8005fa0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005fa2:	a902      	add	r1, sp, #8
 8005fa4:	9301      	str	r3, [sp, #4]
 8005fa6:	f002 fc2d 	bl	8008804 <_svfiprintf_r>
 8005faa:	1c43      	adds	r3, r0, #1
 8005fac:	bfbc      	itt	lt
 8005fae:	238b      	movlt	r3, #139	@ 0x8b
 8005fb0:	602b      	strlt	r3, [r5, #0]
 8005fb2:	2c00      	cmp	r4, #0
 8005fb4:	d0dd      	beq.n	8005f72 <sniprintf+0x16>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	9b02      	ldr	r3, [sp, #8]
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	e7d9      	b.n	8005f72 <sniprintf+0x16>
 8005fbe:	bf00      	nop
 8005fc0:	2000001c 	.word	0x2000001c

08005fc4 <siprintf>:
 8005fc4:	b40e      	push	{r1, r2, r3}
 8005fc6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005fca:	b500      	push	{lr}
 8005fcc:	b09c      	sub	sp, #112	@ 0x70
 8005fce:	ab1d      	add	r3, sp, #116	@ 0x74
 8005fd0:	9002      	str	r0, [sp, #8]
 8005fd2:	9006      	str	r0, [sp, #24]
 8005fd4:	9107      	str	r1, [sp, #28]
 8005fd6:	9104      	str	r1, [sp, #16]
 8005fd8:	4808      	ldr	r0, [pc, #32]	@ (8005ffc <siprintf+0x38>)
 8005fda:	4909      	ldr	r1, [pc, #36]	@ (8006000 <siprintf+0x3c>)
 8005fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fe0:	9105      	str	r1, [sp, #20]
 8005fe2:	6800      	ldr	r0, [r0, #0]
 8005fe4:	a902      	add	r1, sp, #8
 8005fe6:	9301      	str	r3, [sp, #4]
 8005fe8:	f002 fc0c 	bl	8008804 <_svfiprintf_r>
 8005fec:	2200      	movs	r2, #0
 8005fee:	9b02      	ldr	r3, [sp, #8]
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	b01c      	add	sp, #112	@ 0x70
 8005ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ff8:	b003      	add	sp, #12
 8005ffa:	4770      	bx	lr
 8005ffc:	2000001c 	.word	0x2000001c
 8006000:	ffff0208 	.word	0xffff0208

08006004 <siscanf>:
 8006004:	b40e      	push	{r1, r2, r3}
 8006006:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800600a:	b530      	push	{r4, r5, lr}
 800600c:	b09c      	sub	sp, #112	@ 0x70
 800600e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8006010:	f854 5b04 	ldr.w	r5, [r4], #4
 8006014:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006018:	9002      	str	r0, [sp, #8]
 800601a:	9006      	str	r0, [sp, #24]
 800601c:	f7fa f898 	bl	8000150 <strlen>
 8006020:	4b0b      	ldr	r3, [pc, #44]	@ (8006050 <siscanf+0x4c>)
 8006022:	9003      	str	r0, [sp, #12]
 8006024:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006026:	2300      	movs	r3, #0
 8006028:	930f      	str	r3, [sp, #60]	@ 0x3c
 800602a:	9314      	str	r3, [sp, #80]	@ 0x50
 800602c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006030:	9007      	str	r0, [sp, #28]
 8006032:	4808      	ldr	r0, [pc, #32]	@ (8006054 <siscanf+0x50>)
 8006034:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006038:	462a      	mov	r2, r5
 800603a:	4623      	mov	r3, r4
 800603c:	a902      	add	r1, sp, #8
 800603e:	6800      	ldr	r0, [r0, #0]
 8006040:	9401      	str	r4, [sp, #4]
 8006042:	f002 fd33 	bl	8008aac <__ssvfiscanf_r>
 8006046:	b01c      	add	sp, #112	@ 0x70
 8006048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800604c:	b003      	add	sp, #12
 800604e:	4770      	bx	lr
 8006050:	0800607b 	.word	0x0800607b
 8006054:	2000001c 	.word	0x2000001c

08006058 <__sread>:
 8006058:	b510      	push	{r4, lr}
 800605a:	460c      	mov	r4, r1
 800605c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006060:	f000 f88e 	bl	8006180 <_read_r>
 8006064:	2800      	cmp	r0, #0
 8006066:	bfab      	itete	ge
 8006068:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800606a:	89a3      	ldrhlt	r3, [r4, #12]
 800606c:	181b      	addge	r3, r3, r0
 800606e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006072:	bfac      	ite	ge
 8006074:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006076:	81a3      	strhlt	r3, [r4, #12]
 8006078:	bd10      	pop	{r4, pc}

0800607a <__seofread>:
 800607a:	2000      	movs	r0, #0
 800607c:	4770      	bx	lr

0800607e <__swrite>:
 800607e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006082:	461f      	mov	r7, r3
 8006084:	898b      	ldrh	r3, [r1, #12]
 8006086:	4605      	mov	r5, r0
 8006088:	05db      	lsls	r3, r3, #23
 800608a:	460c      	mov	r4, r1
 800608c:	4616      	mov	r6, r2
 800608e:	d505      	bpl.n	800609c <__swrite+0x1e>
 8006090:	2302      	movs	r3, #2
 8006092:	2200      	movs	r2, #0
 8006094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006098:	f000 f860 	bl	800615c <_lseek_r>
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	4632      	mov	r2, r6
 80060a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060a4:	81a3      	strh	r3, [r4, #12]
 80060a6:	4628      	mov	r0, r5
 80060a8:	463b      	mov	r3, r7
 80060aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060b2:	f000 b877 	b.w	80061a4 <_write_r>

080060b6 <__sseek>:
 80060b6:	b510      	push	{r4, lr}
 80060b8:	460c      	mov	r4, r1
 80060ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060be:	f000 f84d 	bl	800615c <_lseek_r>
 80060c2:	1c43      	adds	r3, r0, #1
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	bf15      	itete	ne
 80060c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060d2:	81a3      	strheq	r3, [r4, #12]
 80060d4:	bf18      	it	ne
 80060d6:	81a3      	strhne	r3, [r4, #12]
 80060d8:	bd10      	pop	{r4, pc}

080060da <__sclose>:
 80060da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060de:	f000 b82d 	b.w	800613c <_close_r>

080060e2 <memset>:
 80060e2:	4603      	mov	r3, r0
 80060e4:	4402      	add	r2, r0
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d100      	bne.n	80060ec <memset+0xa>
 80060ea:	4770      	bx	lr
 80060ec:	f803 1b01 	strb.w	r1, [r3], #1
 80060f0:	e7f9      	b.n	80060e6 <memset+0x4>

080060f2 <strchr>:
 80060f2:	4603      	mov	r3, r0
 80060f4:	b2c9      	uxtb	r1, r1
 80060f6:	4618      	mov	r0, r3
 80060f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060fc:	b112      	cbz	r2, 8006104 <strchr+0x12>
 80060fe:	428a      	cmp	r2, r1
 8006100:	d1f9      	bne.n	80060f6 <strchr+0x4>
 8006102:	4770      	bx	lr
 8006104:	2900      	cmp	r1, #0
 8006106:	bf18      	it	ne
 8006108:	2000      	movne	r0, #0
 800610a:	4770      	bx	lr

0800610c <strncpy>:
 800610c:	4603      	mov	r3, r0
 800610e:	b510      	push	{r4, lr}
 8006110:	3901      	subs	r1, #1
 8006112:	b132      	cbz	r2, 8006122 <strncpy+0x16>
 8006114:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006118:	3a01      	subs	r2, #1
 800611a:	f803 4b01 	strb.w	r4, [r3], #1
 800611e:	2c00      	cmp	r4, #0
 8006120:	d1f7      	bne.n	8006112 <strncpy+0x6>
 8006122:	2100      	movs	r1, #0
 8006124:	441a      	add	r2, r3
 8006126:	4293      	cmp	r3, r2
 8006128:	d100      	bne.n	800612c <strncpy+0x20>
 800612a:	bd10      	pop	{r4, pc}
 800612c:	f803 1b01 	strb.w	r1, [r3], #1
 8006130:	e7f9      	b.n	8006126 <strncpy+0x1a>
	...

08006134 <_localeconv_r>:
 8006134:	4800      	ldr	r0, [pc, #0]	@ (8006138 <_localeconv_r+0x4>)
 8006136:	4770      	bx	lr
 8006138:	2000015c 	.word	0x2000015c

0800613c <_close_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	2300      	movs	r3, #0
 8006140:	4d05      	ldr	r5, [pc, #20]	@ (8006158 <_close_r+0x1c>)
 8006142:	4604      	mov	r4, r0
 8006144:	4608      	mov	r0, r1
 8006146:	602b      	str	r3, [r5, #0]
 8006148:	f7fc fa49 	bl	80025de <_close>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_close_r+0x1a>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	b103      	cbz	r3, 8006156 <_close_r+0x1a>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	2000083c 	.word	0x2000083c

0800615c <_lseek_r>:
 800615c:	b538      	push	{r3, r4, r5, lr}
 800615e:	4604      	mov	r4, r0
 8006160:	4608      	mov	r0, r1
 8006162:	4611      	mov	r1, r2
 8006164:	2200      	movs	r2, #0
 8006166:	4d05      	ldr	r5, [pc, #20]	@ (800617c <_lseek_r+0x20>)
 8006168:	602a      	str	r2, [r5, #0]
 800616a:	461a      	mov	r2, r3
 800616c:	f7fc fa5b 	bl	8002626 <_lseek>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d102      	bne.n	800617a <_lseek_r+0x1e>
 8006174:	682b      	ldr	r3, [r5, #0]
 8006176:	b103      	cbz	r3, 800617a <_lseek_r+0x1e>
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	bd38      	pop	{r3, r4, r5, pc}
 800617c:	2000083c 	.word	0x2000083c

08006180 <_read_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4604      	mov	r4, r0
 8006184:	4608      	mov	r0, r1
 8006186:	4611      	mov	r1, r2
 8006188:	2200      	movs	r2, #0
 800618a:	4d05      	ldr	r5, [pc, #20]	@ (80061a0 <_read_r+0x20>)
 800618c:	602a      	str	r2, [r5, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	f7fc f9ec 	bl	800256c <_read>
 8006194:	1c43      	adds	r3, r0, #1
 8006196:	d102      	bne.n	800619e <_read_r+0x1e>
 8006198:	682b      	ldr	r3, [r5, #0]
 800619a:	b103      	cbz	r3, 800619e <_read_r+0x1e>
 800619c:	6023      	str	r3, [r4, #0]
 800619e:	bd38      	pop	{r3, r4, r5, pc}
 80061a0:	2000083c 	.word	0x2000083c

080061a4 <_write_r>:
 80061a4:	b538      	push	{r3, r4, r5, lr}
 80061a6:	4604      	mov	r4, r0
 80061a8:	4608      	mov	r0, r1
 80061aa:	4611      	mov	r1, r2
 80061ac:	2200      	movs	r2, #0
 80061ae:	4d05      	ldr	r5, [pc, #20]	@ (80061c4 <_write_r+0x20>)
 80061b0:	602a      	str	r2, [r5, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	f7fc f9f7 	bl	80025a6 <_write>
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	d102      	bne.n	80061c2 <_write_r+0x1e>
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	b103      	cbz	r3, 80061c2 <_write_r+0x1e>
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	bd38      	pop	{r3, r4, r5, pc}
 80061c4:	2000083c 	.word	0x2000083c

080061c8 <__errno>:
 80061c8:	4b01      	ldr	r3, [pc, #4]	@ (80061d0 <__errno+0x8>)
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	2000001c 	.word	0x2000001c

080061d4 <__libc_init_array>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	2600      	movs	r6, #0
 80061d8:	4d0c      	ldr	r5, [pc, #48]	@ (800620c <__libc_init_array+0x38>)
 80061da:	4c0d      	ldr	r4, [pc, #52]	@ (8006210 <__libc_init_array+0x3c>)
 80061dc:	1b64      	subs	r4, r4, r5
 80061de:	10a4      	asrs	r4, r4, #2
 80061e0:	42a6      	cmp	r6, r4
 80061e2:	d109      	bne.n	80061f8 <__libc_init_array+0x24>
 80061e4:	f003 ff64 	bl	800a0b0 <_init>
 80061e8:	2600      	movs	r6, #0
 80061ea:	4d0a      	ldr	r5, [pc, #40]	@ (8006214 <__libc_init_array+0x40>)
 80061ec:	4c0a      	ldr	r4, [pc, #40]	@ (8006218 <__libc_init_array+0x44>)
 80061ee:	1b64      	subs	r4, r4, r5
 80061f0:	10a4      	asrs	r4, r4, #2
 80061f2:	42a6      	cmp	r6, r4
 80061f4:	d105      	bne.n	8006202 <__libc_init_array+0x2e>
 80061f6:	bd70      	pop	{r4, r5, r6, pc}
 80061f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fc:	4798      	blx	r3
 80061fe:	3601      	adds	r6, #1
 8006200:	e7ee      	b.n	80061e0 <__libc_init_array+0xc>
 8006202:	f855 3b04 	ldr.w	r3, [r5], #4
 8006206:	4798      	blx	r3
 8006208:	3601      	adds	r6, #1
 800620a:	e7f2      	b.n	80061f2 <__libc_init_array+0x1e>
 800620c:	0800a854 	.word	0x0800a854
 8006210:	0800a854 	.word	0x0800a854
 8006214:	0800a854 	.word	0x0800a854
 8006218:	0800a858 	.word	0x0800a858

0800621c <__retarget_lock_init_recursive>:
 800621c:	4770      	bx	lr

0800621e <__retarget_lock_acquire_recursive>:
 800621e:	4770      	bx	lr

08006220 <__retarget_lock_release_recursive>:
 8006220:	4770      	bx	lr

08006222 <memchr>:
 8006222:	4603      	mov	r3, r0
 8006224:	b510      	push	{r4, lr}
 8006226:	b2c9      	uxtb	r1, r1
 8006228:	4402      	add	r2, r0
 800622a:	4293      	cmp	r3, r2
 800622c:	4618      	mov	r0, r3
 800622e:	d101      	bne.n	8006234 <memchr+0x12>
 8006230:	2000      	movs	r0, #0
 8006232:	e003      	b.n	800623c <memchr+0x1a>
 8006234:	7804      	ldrb	r4, [r0, #0]
 8006236:	3301      	adds	r3, #1
 8006238:	428c      	cmp	r4, r1
 800623a:	d1f6      	bne.n	800622a <memchr+0x8>
 800623c:	bd10      	pop	{r4, pc}

0800623e <memcpy>:
 800623e:	440a      	add	r2, r1
 8006240:	4291      	cmp	r1, r2
 8006242:	f100 33ff 	add.w	r3, r0, #4294967295
 8006246:	d100      	bne.n	800624a <memcpy+0xc>
 8006248:	4770      	bx	lr
 800624a:	b510      	push	{r4, lr}
 800624c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006250:	4291      	cmp	r1, r2
 8006252:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006256:	d1f9      	bne.n	800624c <memcpy+0xe>
 8006258:	bd10      	pop	{r4, pc}
	...

0800625c <nanf>:
 800625c:	4800      	ldr	r0, [pc, #0]	@ (8006260 <nanf+0x4>)
 800625e:	4770      	bx	lr
 8006260:	7fc00000 	.word	0x7fc00000

08006264 <quorem>:
 8006264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006268:	6903      	ldr	r3, [r0, #16]
 800626a:	690c      	ldr	r4, [r1, #16]
 800626c:	4607      	mov	r7, r0
 800626e:	42a3      	cmp	r3, r4
 8006270:	db7e      	blt.n	8006370 <quorem+0x10c>
 8006272:	3c01      	subs	r4, #1
 8006274:	00a3      	lsls	r3, r4, #2
 8006276:	f100 0514 	add.w	r5, r0, #20
 800627a:	f101 0814 	add.w	r8, r1, #20
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800628a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800628e:	3301      	adds	r3, #1
 8006290:	429a      	cmp	r2, r3
 8006292:	fbb2 f6f3 	udiv	r6, r2, r3
 8006296:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800629a:	d32e      	bcc.n	80062fa <quorem+0x96>
 800629c:	f04f 0a00 	mov.w	sl, #0
 80062a0:	46c4      	mov	ip, r8
 80062a2:	46ae      	mov	lr, r5
 80062a4:	46d3      	mov	fp, sl
 80062a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80062aa:	b298      	uxth	r0, r3
 80062ac:	fb06 a000 	mla	r0, r6, r0, sl
 80062b0:	0c1b      	lsrs	r3, r3, #16
 80062b2:	0c02      	lsrs	r2, r0, #16
 80062b4:	fb06 2303 	mla	r3, r6, r3, r2
 80062b8:	f8de 2000 	ldr.w	r2, [lr]
 80062bc:	b280      	uxth	r0, r0
 80062be:	b292      	uxth	r2, r2
 80062c0:	1a12      	subs	r2, r2, r0
 80062c2:	445a      	add	r2, fp
 80062c4:	f8de 0000 	ldr.w	r0, [lr]
 80062c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80062d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80062d6:	b292      	uxth	r2, r2
 80062d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80062dc:	45e1      	cmp	r9, ip
 80062de:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80062e2:	f84e 2b04 	str.w	r2, [lr], #4
 80062e6:	d2de      	bcs.n	80062a6 <quorem+0x42>
 80062e8:	9b00      	ldr	r3, [sp, #0]
 80062ea:	58eb      	ldr	r3, [r5, r3]
 80062ec:	b92b      	cbnz	r3, 80062fa <quorem+0x96>
 80062ee:	9b01      	ldr	r3, [sp, #4]
 80062f0:	3b04      	subs	r3, #4
 80062f2:	429d      	cmp	r5, r3
 80062f4:	461a      	mov	r2, r3
 80062f6:	d32f      	bcc.n	8006358 <quorem+0xf4>
 80062f8:	613c      	str	r4, [r7, #16]
 80062fa:	4638      	mov	r0, r7
 80062fc:	f001 f9c4 	bl	8007688 <__mcmp>
 8006300:	2800      	cmp	r0, #0
 8006302:	db25      	blt.n	8006350 <quorem+0xec>
 8006304:	4629      	mov	r1, r5
 8006306:	2000      	movs	r0, #0
 8006308:	f858 2b04 	ldr.w	r2, [r8], #4
 800630c:	f8d1 c000 	ldr.w	ip, [r1]
 8006310:	fa1f fe82 	uxth.w	lr, r2
 8006314:	fa1f f38c 	uxth.w	r3, ip
 8006318:	eba3 030e 	sub.w	r3, r3, lr
 800631c:	4403      	add	r3, r0
 800631e:	0c12      	lsrs	r2, r2, #16
 8006320:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006324:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006328:	b29b      	uxth	r3, r3
 800632a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800632e:	45c1      	cmp	r9, r8
 8006330:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006334:	f841 3b04 	str.w	r3, [r1], #4
 8006338:	d2e6      	bcs.n	8006308 <quorem+0xa4>
 800633a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800633e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006342:	b922      	cbnz	r2, 800634e <quorem+0xea>
 8006344:	3b04      	subs	r3, #4
 8006346:	429d      	cmp	r5, r3
 8006348:	461a      	mov	r2, r3
 800634a:	d30b      	bcc.n	8006364 <quorem+0x100>
 800634c:	613c      	str	r4, [r7, #16]
 800634e:	3601      	adds	r6, #1
 8006350:	4630      	mov	r0, r6
 8006352:	b003      	add	sp, #12
 8006354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006358:	6812      	ldr	r2, [r2, #0]
 800635a:	3b04      	subs	r3, #4
 800635c:	2a00      	cmp	r2, #0
 800635e:	d1cb      	bne.n	80062f8 <quorem+0x94>
 8006360:	3c01      	subs	r4, #1
 8006362:	e7c6      	b.n	80062f2 <quorem+0x8e>
 8006364:	6812      	ldr	r2, [r2, #0]
 8006366:	3b04      	subs	r3, #4
 8006368:	2a00      	cmp	r2, #0
 800636a:	d1ef      	bne.n	800634c <quorem+0xe8>
 800636c:	3c01      	subs	r4, #1
 800636e:	e7ea      	b.n	8006346 <quorem+0xe2>
 8006370:	2000      	movs	r0, #0
 8006372:	e7ee      	b.n	8006352 <quorem+0xee>
 8006374:	0000      	movs	r0, r0
	...

08006378 <_dtoa_r>:
 8006378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	4614      	mov	r4, r2
 800637e:	461d      	mov	r5, r3
 8006380:	69c7      	ldr	r7, [r0, #28]
 8006382:	b097      	sub	sp, #92	@ 0x5c
 8006384:	4683      	mov	fp, r0
 8006386:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800638a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800638c:	b97f      	cbnz	r7, 80063ae <_dtoa_r+0x36>
 800638e:	2010      	movs	r0, #16
 8006390:	f000 fe02 	bl	8006f98 <malloc>
 8006394:	4602      	mov	r2, r0
 8006396:	f8cb 001c 	str.w	r0, [fp, #28]
 800639a:	b920      	cbnz	r0, 80063a6 <_dtoa_r+0x2e>
 800639c:	21ef      	movs	r1, #239	@ 0xef
 800639e:	4ba8      	ldr	r3, [pc, #672]	@ (8006640 <_dtoa_r+0x2c8>)
 80063a0:	48a8      	ldr	r0, [pc, #672]	@ (8006644 <_dtoa_r+0x2cc>)
 80063a2:	f003 f971 	bl	8009688 <__assert_func>
 80063a6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80063aa:	6007      	str	r7, [r0, #0]
 80063ac:	60c7      	str	r7, [r0, #12]
 80063ae:	f8db 301c 	ldr.w	r3, [fp, #28]
 80063b2:	6819      	ldr	r1, [r3, #0]
 80063b4:	b159      	cbz	r1, 80063ce <_dtoa_r+0x56>
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	2301      	movs	r3, #1
 80063ba:	4093      	lsls	r3, r2
 80063bc:	604a      	str	r2, [r1, #4]
 80063be:	608b      	str	r3, [r1, #8]
 80063c0:	4658      	mov	r0, fp
 80063c2:	f000 fedf 	bl	8007184 <_Bfree>
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	1e2b      	subs	r3, r5, #0
 80063d0:	bfaf      	iteee	ge
 80063d2:	2300      	movge	r3, #0
 80063d4:	2201      	movlt	r2, #1
 80063d6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80063da:	9303      	strlt	r3, [sp, #12]
 80063dc:	bfa8      	it	ge
 80063de:	6033      	strge	r3, [r6, #0]
 80063e0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80063e4:	4b98      	ldr	r3, [pc, #608]	@ (8006648 <_dtoa_r+0x2d0>)
 80063e6:	bfb8      	it	lt
 80063e8:	6032      	strlt	r2, [r6, #0]
 80063ea:	ea33 0308 	bics.w	r3, r3, r8
 80063ee:	d112      	bne.n	8006416 <_dtoa_r+0x9e>
 80063f0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80063f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80063fc:	4323      	orrs	r3, r4
 80063fe:	f000 8550 	beq.w	8006ea2 <_dtoa_r+0xb2a>
 8006402:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006404:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800664c <_dtoa_r+0x2d4>
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 8552 	beq.w	8006eb2 <_dtoa_r+0xb3a>
 800640e:	f10a 0303 	add.w	r3, sl, #3
 8006412:	f000 bd4c 	b.w	8006eae <_dtoa_r+0xb36>
 8006416:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800641a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800641e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006422:	2200      	movs	r2, #0
 8006424:	2300      	movs	r3, #0
 8006426:	f7fa fabf 	bl	80009a8 <__aeabi_dcmpeq>
 800642a:	4607      	mov	r7, r0
 800642c:	b158      	cbz	r0, 8006446 <_dtoa_r+0xce>
 800642e:	2301      	movs	r3, #1
 8006430:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006436:	b113      	cbz	r3, 800643e <_dtoa_r+0xc6>
 8006438:	4b85      	ldr	r3, [pc, #532]	@ (8006650 <_dtoa_r+0x2d8>)
 800643a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006654 <_dtoa_r+0x2dc>
 8006442:	f000 bd36 	b.w	8006eb2 <_dtoa_r+0xb3a>
 8006446:	ab14      	add	r3, sp, #80	@ 0x50
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	ab15      	add	r3, sp, #84	@ 0x54
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	4658      	mov	r0, fp
 8006450:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006454:	f001 fa30 	bl	80078b8 <__d2b>
 8006458:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800645c:	4681      	mov	r9, r0
 800645e:	2e00      	cmp	r6, #0
 8006460:	d077      	beq.n	8006552 <_dtoa_r+0x1da>
 8006462:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006466:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006468:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800646c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006470:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006474:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006478:	9712      	str	r7, [sp, #72]	@ 0x48
 800647a:	4619      	mov	r1, r3
 800647c:	2200      	movs	r2, #0
 800647e:	4b76      	ldr	r3, [pc, #472]	@ (8006658 <_dtoa_r+0x2e0>)
 8006480:	f7f9 fe72 	bl	8000168 <__aeabi_dsub>
 8006484:	a368      	add	r3, pc, #416	@ (adr r3, 8006628 <_dtoa_r+0x2b0>)
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	f7fa f825 	bl	80004d8 <__aeabi_dmul>
 800648e:	a368      	add	r3, pc, #416	@ (adr r3, 8006630 <_dtoa_r+0x2b8>)
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f7f9 fe6a 	bl	800016c <__adddf3>
 8006498:	4604      	mov	r4, r0
 800649a:	4630      	mov	r0, r6
 800649c:	460d      	mov	r5, r1
 800649e:	f7f9 ffb1 	bl	8000404 <__aeabi_i2d>
 80064a2:	a365      	add	r3, pc, #404	@ (adr r3, 8006638 <_dtoa_r+0x2c0>)
 80064a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a8:	f7fa f816 	bl	80004d8 <__aeabi_dmul>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4620      	mov	r0, r4
 80064b2:	4629      	mov	r1, r5
 80064b4:	f7f9 fe5a 	bl	800016c <__adddf3>
 80064b8:	4604      	mov	r4, r0
 80064ba:	460d      	mov	r5, r1
 80064bc:	f7fa fabc 	bl	8000a38 <__aeabi_d2iz>
 80064c0:	2200      	movs	r2, #0
 80064c2:	4607      	mov	r7, r0
 80064c4:	2300      	movs	r3, #0
 80064c6:	4620      	mov	r0, r4
 80064c8:	4629      	mov	r1, r5
 80064ca:	f7fa fa77 	bl	80009bc <__aeabi_dcmplt>
 80064ce:	b140      	cbz	r0, 80064e2 <_dtoa_r+0x16a>
 80064d0:	4638      	mov	r0, r7
 80064d2:	f7f9 ff97 	bl	8000404 <__aeabi_i2d>
 80064d6:	4622      	mov	r2, r4
 80064d8:	462b      	mov	r3, r5
 80064da:	f7fa fa65 	bl	80009a8 <__aeabi_dcmpeq>
 80064de:	b900      	cbnz	r0, 80064e2 <_dtoa_r+0x16a>
 80064e0:	3f01      	subs	r7, #1
 80064e2:	2f16      	cmp	r7, #22
 80064e4:	d853      	bhi.n	800658e <_dtoa_r+0x216>
 80064e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064ea:	4b5c      	ldr	r3, [pc, #368]	@ (800665c <_dtoa_r+0x2e4>)
 80064ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f7fa fa62 	bl	80009bc <__aeabi_dcmplt>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d04a      	beq.n	8006592 <_dtoa_r+0x21a>
 80064fc:	2300      	movs	r3, #0
 80064fe:	3f01      	subs	r7, #1
 8006500:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006502:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006504:	1b9b      	subs	r3, r3, r6
 8006506:	1e5a      	subs	r2, r3, #1
 8006508:	bf46      	itte	mi
 800650a:	f1c3 0801 	rsbmi	r8, r3, #1
 800650e:	2300      	movmi	r3, #0
 8006510:	f04f 0800 	movpl.w	r8, #0
 8006514:	9209      	str	r2, [sp, #36]	@ 0x24
 8006516:	bf48      	it	mi
 8006518:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800651a:	2f00      	cmp	r7, #0
 800651c:	db3b      	blt.n	8006596 <_dtoa_r+0x21e>
 800651e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006520:	970e      	str	r7, [sp, #56]	@ 0x38
 8006522:	443b      	add	r3, r7
 8006524:	9309      	str	r3, [sp, #36]	@ 0x24
 8006526:	2300      	movs	r3, #0
 8006528:	930a      	str	r3, [sp, #40]	@ 0x28
 800652a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800652c:	2b09      	cmp	r3, #9
 800652e:	d866      	bhi.n	80065fe <_dtoa_r+0x286>
 8006530:	2b05      	cmp	r3, #5
 8006532:	bfc4      	itt	gt
 8006534:	3b04      	subgt	r3, #4
 8006536:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006538:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800653a:	bfc8      	it	gt
 800653c:	2400      	movgt	r4, #0
 800653e:	f1a3 0302 	sub.w	r3, r3, #2
 8006542:	bfd8      	it	le
 8006544:	2401      	movle	r4, #1
 8006546:	2b03      	cmp	r3, #3
 8006548:	d864      	bhi.n	8006614 <_dtoa_r+0x29c>
 800654a:	e8df f003 	tbb	[pc, r3]
 800654e:	382b      	.short	0x382b
 8006550:	5636      	.short	0x5636
 8006552:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006556:	441e      	add	r6, r3
 8006558:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800655c:	2b20      	cmp	r3, #32
 800655e:	bfc1      	itttt	gt
 8006560:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006564:	fa08 f803 	lslgt.w	r8, r8, r3
 8006568:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800656c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006570:	bfd6      	itet	le
 8006572:	f1c3 0320 	rsble	r3, r3, #32
 8006576:	ea48 0003 	orrgt.w	r0, r8, r3
 800657a:	fa04 f003 	lslle.w	r0, r4, r3
 800657e:	f7f9 ff31 	bl	80003e4 <__aeabi_ui2d>
 8006582:	2201      	movs	r2, #1
 8006584:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006588:	3e01      	subs	r6, #1
 800658a:	9212      	str	r2, [sp, #72]	@ 0x48
 800658c:	e775      	b.n	800647a <_dtoa_r+0x102>
 800658e:	2301      	movs	r3, #1
 8006590:	e7b6      	b.n	8006500 <_dtoa_r+0x188>
 8006592:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006594:	e7b5      	b.n	8006502 <_dtoa_r+0x18a>
 8006596:	427b      	negs	r3, r7
 8006598:	930a      	str	r3, [sp, #40]	@ 0x28
 800659a:	2300      	movs	r3, #0
 800659c:	eba8 0807 	sub.w	r8, r8, r7
 80065a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80065a2:	e7c2      	b.n	800652a <_dtoa_r+0x1b2>
 80065a4:	2300      	movs	r3, #0
 80065a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	dc35      	bgt.n	800661a <_dtoa_r+0x2a2>
 80065ae:	2301      	movs	r3, #1
 80065b0:	461a      	mov	r2, r3
 80065b2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80065b6:	9221      	str	r2, [sp, #132]	@ 0x84
 80065b8:	e00b      	b.n	80065d2 <_dtoa_r+0x25a>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e7f3      	b.n	80065a6 <_dtoa_r+0x22e>
 80065be:	2300      	movs	r3, #0
 80065c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065c4:	18fb      	adds	r3, r7, r3
 80065c6:	9308      	str	r3, [sp, #32]
 80065c8:	3301      	adds	r3, #1
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	9307      	str	r3, [sp, #28]
 80065ce:	bfb8      	it	lt
 80065d0:	2301      	movlt	r3, #1
 80065d2:	2100      	movs	r1, #0
 80065d4:	2204      	movs	r2, #4
 80065d6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80065da:	f102 0514 	add.w	r5, r2, #20
 80065de:	429d      	cmp	r5, r3
 80065e0:	d91f      	bls.n	8006622 <_dtoa_r+0x2aa>
 80065e2:	6041      	str	r1, [r0, #4]
 80065e4:	4658      	mov	r0, fp
 80065e6:	f000 fd8d 	bl	8007104 <_Balloc>
 80065ea:	4682      	mov	sl, r0
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d139      	bne.n	8006664 <_dtoa_r+0x2ec>
 80065f0:	4602      	mov	r2, r0
 80065f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80065f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006660 <_dtoa_r+0x2e8>)
 80065f8:	e6d2      	b.n	80063a0 <_dtoa_r+0x28>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e7e0      	b.n	80065c0 <_dtoa_r+0x248>
 80065fe:	2401      	movs	r4, #1
 8006600:	2300      	movs	r3, #0
 8006602:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006604:	9320      	str	r3, [sp, #128]	@ 0x80
 8006606:	f04f 33ff 	mov.w	r3, #4294967295
 800660a:	2200      	movs	r2, #0
 800660c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006610:	2312      	movs	r3, #18
 8006612:	e7d0      	b.n	80065b6 <_dtoa_r+0x23e>
 8006614:	2301      	movs	r3, #1
 8006616:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006618:	e7f5      	b.n	8006606 <_dtoa_r+0x28e>
 800661a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800661c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006620:	e7d7      	b.n	80065d2 <_dtoa_r+0x25a>
 8006622:	3101      	adds	r1, #1
 8006624:	0052      	lsls	r2, r2, #1
 8006626:	e7d8      	b.n	80065da <_dtoa_r+0x262>
 8006628:	636f4361 	.word	0x636f4361
 800662c:	3fd287a7 	.word	0x3fd287a7
 8006630:	8b60c8b3 	.word	0x8b60c8b3
 8006634:	3fc68a28 	.word	0x3fc68a28
 8006638:	509f79fb 	.word	0x509f79fb
 800663c:	3fd34413 	.word	0x3fd34413
 8006640:	0800a44a 	.word	0x0800a44a
 8006644:	0800a461 	.word	0x0800a461
 8006648:	7ff00000 	.word	0x7ff00000
 800664c:	0800a446 	.word	0x0800a446
 8006650:	0800a7a1 	.word	0x0800a7a1
 8006654:	0800a7a0 	.word	0x0800a7a0
 8006658:	3ff80000 	.word	0x3ff80000
 800665c:	0800a558 	.word	0x0800a558
 8006660:	0800a4b9 	.word	0x0800a4b9
 8006664:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006668:	6018      	str	r0, [r3, #0]
 800666a:	9b07      	ldr	r3, [sp, #28]
 800666c:	2b0e      	cmp	r3, #14
 800666e:	f200 80a4 	bhi.w	80067ba <_dtoa_r+0x442>
 8006672:	2c00      	cmp	r4, #0
 8006674:	f000 80a1 	beq.w	80067ba <_dtoa_r+0x442>
 8006678:	2f00      	cmp	r7, #0
 800667a:	dd33      	ble.n	80066e4 <_dtoa_r+0x36c>
 800667c:	4b86      	ldr	r3, [pc, #536]	@ (8006898 <_dtoa_r+0x520>)
 800667e:	f007 020f 	and.w	r2, r7, #15
 8006682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006686:	05f8      	lsls	r0, r7, #23
 8006688:	e9d3 3400 	ldrd	r3, r4, [r3]
 800668c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006690:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006694:	d516      	bpl.n	80066c4 <_dtoa_r+0x34c>
 8006696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800669a:	4b80      	ldr	r3, [pc, #512]	@ (800689c <_dtoa_r+0x524>)
 800669c:	2603      	movs	r6, #3
 800669e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066a2:	f7fa f843 	bl	800072c <__aeabi_ddiv>
 80066a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066aa:	f004 040f 	and.w	r4, r4, #15
 80066ae:	4d7b      	ldr	r5, [pc, #492]	@ (800689c <_dtoa_r+0x524>)
 80066b0:	b954      	cbnz	r4, 80066c8 <_dtoa_r+0x350>
 80066b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ba:	f7fa f837 	bl	800072c <__aeabi_ddiv>
 80066be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066c2:	e028      	b.n	8006716 <_dtoa_r+0x39e>
 80066c4:	2602      	movs	r6, #2
 80066c6:	e7f2      	b.n	80066ae <_dtoa_r+0x336>
 80066c8:	07e1      	lsls	r1, r4, #31
 80066ca:	d508      	bpl.n	80066de <_dtoa_r+0x366>
 80066cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066d4:	f7f9 ff00 	bl	80004d8 <__aeabi_dmul>
 80066d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066dc:	3601      	adds	r6, #1
 80066de:	1064      	asrs	r4, r4, #1
 80066e0:	3508      	adds	r5, #8
 80066e2:	e7e5      	b.n	80066b0 <_dtoa_r+0x338>
 80066e4:	f000 80d2 	beq.w	800688c <_dtoa_r+0x514>
 80066e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066ec:	427c      	negs	r4, r7
 80066ee:	4b6a      	ldr	r3, [pc, #424]	@ (8006898 <_dtoa_r+0x520>)
 80066f0:	f004 020f 	and.w	r2, r4, #15
 80066f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	f7f9 feec 	bl	80004d8 <__aeabi_dmul>
 8006700:	2602      	movs	r6, #2
 8006702:	2300      	movs	r3, #0
 8006704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006708:	4d64      	ldr	r5, [pc, #400]	@ (800689c <_dtoa_r+0x524>)
 800670a:	1124      	asrs	r4, r4, #4
 800670c:	2c00      	cmp	r4, #0
 800670e:	f040 80b2 	bne.w	8006876 <_dtoa_r+0x4fe>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1d3      	bne.n	80066be <_dtoa_r+0x346>
 8006716:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800671a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80b7 	beq.w	8006890 <_dtoa_r+0x518>
 8006722:	2200      	movs	r2, #0
 8006724:	4620      	mov	r0, r4
 8006726:	4629      	mov	r1, r5
 8006728:	4b5d      	ldr	r3, [pc, #372]	@ (80068a0 <_dtoa_r+0x528>)
 800672a:	f7fa f947 	bl	80009bc <__aeabi_dcmplt>
 800672e:	2800      	cmp	r0, #0
 8006730:	f000 80ae 	beq.w	8006890 <_dtoa_r+0x518>
 8006734:	9b07      	ldr	r3, [sp, #28]
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 80aa 	beq.w	8006890 <_dtoa_r+0x518>
 800673c:	9b08      	ldr	r3, [sp, #32]
 800673e:	2b00      	cmp	r3, #0
 8006740:	dd37      	ble.n	80067b2 <_dtoa_r+0x43a>
 8006742:	1e7b      	subs	r3, r7, #1
 8006744:	4620      	mov	r0, r4
 8006746:	9304      	str	r3, [sp, #16]
 8006748:	2200      	movs	r2, #0
 800674a:	4629      	mov	r1, r5
 800674c:	4b55      	ldr	r3, [pc, #340]	@ (80068a4 <_dtoa_r+0x52c>)
 800674e:	f7f9 fec3 	bl	80004d8 <__aeabi_dmul>
 8006752:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006756:	9c08      	ldr	r4, [sp, #32]
 8006758:	3601      	adds	r6, #1
 800675a:	4630      	mov	r0, r6
 800675c:	f7f9 fe52 	bl	8000404 <__aeabi_i2d>
 8006760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006764:	f7f9 feb8 	bl	80004d8 <__aeabi_dmul>
 8006768:	2200      	movs	r2, #0
 800676a:	4b4f      	ldr	r3, [pc, #316]	@ (80068a8 <_dtoa_r+0x530>)
 800676c:	f7f9 fcfe 	bl	800016c <__adddf3>
 8006770:	4605      	mov	r5, r0
 8006772:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006776:	2c00      	cmp	r4, #0
 8006778:	f040 809a 	bne.w	80068b0 <_dtoa_r+0x538>
 800677c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006780:	2200      	movs	r2, #0
 8006782:	4b4a      	ldr	r3, [pc, #296]	@ (80068ac <_dtoa_r+0x534>)
 8006784:	f7f9 fcf0 	bl	8000168 <__aeabi_dsub>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006790:	462a      	mov	r2, r5
 8006792:	4633      	mov	r3, r6
 8006794:	f7fa f930 	bl	80009f8 <__aeabi_dcmpgt>
 8006798:	2800      	cmp	r0, #0
 800679a:	f040 828e 	bne.w	8006cba <_dtoa_r+0x942>
 800679e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a2:	462a      	mov	r2, r5
 80067a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80067a8:	f7fa f908 	bl	80009bc <__aeabi_dcmplt>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	f040 8127 	bne.w	8006a00 <_dtoa_r+0x688>
 80067b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80067b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80067ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f2c0 8163 	blt.w	8006a88 <_dtoa_r+0x710>
 80067c2:	2f0e      	cmp	r7, #14
 80067c4:	f300 8160 	bgt.w	8006a88 <_dtoa_r+0x710>
 80067c8:	4b33      	ldr	r3, [pc, #204]	@ (8006898 <_dtoa_r+0x520>)
 80067ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80067ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80067d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067d8:	2b00      	cmp	r3, #0
 80067da:	da03      	bge.n	80067e4 <_dtoa_r+0x46c>
 80067dc:	9b07      	ldr	r3, [sp, #28]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f340 8100 	ble.w	80069e4 <_dtoa_r+0x66c>
 80067e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80067e8:	4656      	mov	r6, sl
 80067ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067ee:	4620      	mov	r0, r4
 80067f0:	4629      	mov	r1, r5
 80067f2:	f7f9 ff9b 	bl	800072c <__aeabi_ddiv>
 80067f6:	f7fa f91f 	bl	8000a38 <__aeabi_d2iz>
 80067fa:	4680      	mov	r8, r0
 80067fc:	f7f9 fe02 	bl	8000404 <__aeabi_i2d>
 8006800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006804:	f7f9 fe68 	bl	80004d8 <__aeabi_dmul>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4620      	mov	r0, r4
 800680e:	4629      	mov	r1, r5
 8006810:	f7f9 fcaa 	bl	8000168 <__aeabi_dsub>
 8006814:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006818:	9d07      	ldr	r5, [sp, #28]
 800681a:	f806 4b01 	strb.w	r4, [r6], #1
 800681e:	eba6 040a 	sub.w	r4, r6, sl
 8006822:	42a5      	cmp	r5, r4
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	f040 8116 	bne.w	8006a58 <_dtoa_r+0x6e0>
 800682c:	f7f9 fc9e 	bl	800016c <__adddf3>
 8006830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006834:	4604      	mov	r4, r0
 8006836:	460d      	mov	r5, r1
 8006838:	f7fa f8de 	bl	80009f8 <__aeabi_dcmpgt>
 800683c:	2800      	cmp	r0, #0
 800683e:	f040 80f8 	bne.w	8006a32 <_dtoa_r+0x6ba>
 8006842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006846:	4620      	mov	r0, r4
 8006848:	4629      	mov	r1, r5
 800684a:	f7fa f8ad 	bl	80009a8 <__aeabi_dcmpeq>
 800684e:	b118      	cbz	r0, 8006858 <_dtoa_r+0x4e0>
 8006850:	f018 0f01 	tst.w	r8, #1
 8006854:	f040 80ed 	bne.w	8006a32 <_dtoa_r+0x6ba>
 8006858:	4649      	mov	r1, r9
 800685a:	4658      	mov	r0, fp
 800685c:	f000 fc92 	bl	8007184 <_Bfree>
 8006860:	2300      	movs	r3, #0
 8006862:	7033      	strb	r3, [r6, #0]
 8006864:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006866:	3701      	adds	r7, #1
 8006868:	601f      	str	r7, [r3, #0]
 800686a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 8320 	beq.w	8006eb2 <_dtoa_r+0xb3a>
 8006872:	601e      	str	r6, [r3, #0]
 8006874:	e31d      	b.n	8006eb2 <_dtoa_r+0xb3a>
 8006876:	07e2      	lsls	r2, r4, #31
 8006878:	d505      	bpl.n	8006886 <_dtoa_r+0x50e>
 800687a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800687e:	f7f9 fe2b 	bl	80004d8 <__aeabi_dmul>
 8006882:	2301      	movs	r3, #1
 8006884:	3601      	adds	r6, #1
 8006886:	1064      	asrs	r4, r4, #1
 8006888:	3508      	adds	r5, #8
 800688a:	e73f      	b.n	800670c <_dtoa_r+0x394>
 800688c:	2602      	movs	r6, #2
 800688e:	e742      	b.n	8006716 <_dtoa_r+0x39e>
 8006890:	9c07      	ldr	r4, [sp, #28]
 8006892:	9704      	str	r7, [sp, #16]
 8006894:	e761      	b.n	800675a <_dtoa_r+0x3e2>
 8006896:	bf00      	nop
 8006898:	0800a558 	.word	0x0800a558
 800689c:	0800a530 	.word	0x0800a530
 80068a0:	3ff00000 	.word	0x3ff00000
 80068a4:	40240000 	.word	0x40240000
 80068a8:	401c0000 	.word	0x401c0000
 80068ac:	40140000 	.word	0x40140000
 80068b0:	4b70      	ldr	r3, [pc, #448]	@ (8006a74 <_dtoa_r+0x6fc>)
 80068b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068bc:	4454      	add	r4, sl
 80068be:	2900      	cmp	r1, #0
 80068c0:	d045      	beq.n	800694e <_dtoa_r+0x5d6>
 80068c2:	2000      	movs	r0, #0
 80068c4:	496c      	ldr	r1, [pc, #432]	@ (8006a78 <_dtoa_r+0x700>)
 80068c6:	f7f9 ff31 	bl	800072c <__aeabi_ddiv>
 80068ca:	4633      	mov	r3, r6
 80068cc:	462a      	mov	r2, r5
 80068ce:	f7f9 fc4b 	bl	8000168 <__aeabi_dsub>
 80068d2:	4656      	mov	r6, sl
 80068d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80068d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068dc:	f7fa f8ac 	bl	8000a38 <__aeabi_d2iz>
 80068e0:	4605      	mov	r5, r0
 80068e2:	f7f9 fd8f 	bl	8000404 <__aeabi_i2d>
 80068e6:	4602      	mov	r2, r0
 80068e8:	460b      	mov	r3, r1
 80068ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068ee:	f7f9 fc3b 	bl	8000168 <__aeabi_dsub>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	3530      	adds	r5, #48	@ 0x30
 80068f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80068fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006900:	f806 5b01 	strb.w	r5, [r6], #1
 8006904:	f7fa f85a 	bl	80009bc <__aeabi_dcmplt>
 8006908:	2800      	cmp	r0, #0
 800690a:	d163      	bne.n	80069d4 <_dtoa_r+0x65c>
 800690c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006910:	2000      	movs	r0, #0
 8006912:	495a      	ldr	r1, [pc, #360]	@ (8006a7c <_dtoa_r+0x704>)
 8006914:	f7f9 fc28 	bl	8000168 <__aeabi_dsub>
 8006918:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800691c:	f7fa f84e 	bl	80009bc <__aeabi_dcmplt>
 8006920:	2800      	cmp	r0, #0
 8006922:	f040 8087 	bne.w	8006a34 <_dtoa_r+0x6bc>
 8006926:	42a6      	cmp	r6, r4
 8006928:	f43f af43 	beq.w	80067b2 <_dtoa_r+0x43a>
 800692c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006930:	2200      	movs	r2, #0
 8006932:	4b53      	ldr	r3, [pc, #332]	@ (8006a80 <_dtoa_r+0x708>)
 8006934:	f7f9 fdd0 	bl	80004d8 <__aeabi_dmul>
 8006938:	2200      	movs	r2, #0
 800693a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800693e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006942:	4b4f      	ldr	r3, [pc, #316]	@ (8006a80 <_dtoa_r+0x708>)
 8006944:	f7f9 fdc8 	bl	80004d8 <__aeabi_dmul>
 8006948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800694c:	e7c4      	b.n	80068d8 <_dtoa_r+0x560>
 800694e:	4631      	mov	r1, r6
 8006950:	4628      	mov	r0, r5
 8006952:	f7f9 fdc1 	bl	80004d8 <__aeabi_dmul>
 8006956:	4656      	mov	r6, sl
 8006958:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800695c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800695e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006962:	f7fa f869 	bl	8000a38 <__aeabi_d2iz>
 8006966:	4605      	mov	r5, r0
 8006968:	f7f9 fd4c 	bl	8000404 <__aeabi_i2d>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006974:	f7f9 fbf8 	bl	8000168 <__aeabi_dsub>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	3530      	adds	r5, #48	@ 0x30
 800697e:	f806 5b01 	strb.w	r5, [r6], #1
 8006982:	42a6      	cmp	r6, r4
 8006984:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	d124      	bne.n	80069d8 <_dtoa_r+0x660>
 800698e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006992:	4b39      	ldr	r3, [pc, #228]	@ (8006a78 <_dtoa_r+0x700>)
 8006994:	f7f9 fbea 	bl	800016c <__adddf3>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069a0:	f7fa f82a 	bl	80009f8 <__aeabi_dcmpgt>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d145      	bne.n	8006a34 <_dtoa_r+0x6bc>
 80069a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069ac:	2000      	movs	r0, #0
 80069ae:	4932      	ldr	r1, [pc, #200]	@ (8006a78 <_dtoa_r+0x700>)
 80069b0:	f7f9 fbda 	bl	8000168 <__aeabi_dsub>
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069bc:	f7f9 fffe 	bl	80009bc <__aeabi_dcmplt>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	f43f aef6 	beq.w	80067b2 <_dtoa_r+0x43a>
 80069c6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80069c8:	1e73      	subs	r3, r6, #1
 80069ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80069cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80069d0:	2b30      	cmp	r3, #48	@ 0x30
 80069d2:	d0f8      	beq.n	80069c6 <_dtoa_r+0x64e>
 80069d4:	9f04      	ldr	r7, [sp, #16]
 80069d6:	e73f      	b.n	8006858 <_dtoa_r+0x4e0>
 80069d8:	4b29      	ldr	r3, [pc, #164]	@ (8006a80 <_dtoa_r+0x708>)
 80069da:	f7f9 fd7d 	bl	80004d8 <__aeabi_dmul>
 80069de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069e2:	e7bc      	b.n	800695e <_dtoa_r+0x5e6>
 80069e4:	d10c      	bne.n	8006a00 <_dtoa_r+0x688>
 80069e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069ea:	2200      	movs	r2, #0
 80069ec:	4b25      	ldr	r3, [pc, #148]	@ (8006a84 <_dtoa_r+0x70c>)
 80069ee:	f7f9 fd73 	bl	80004d8 <__aeabi_dmul>
 80069f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069f6:	f7f9 fff5 	bl	80009e4 <__aeabi_dcmpge>
 80069fa:	2800      	cmp	r0, #0
 80069fc:	f000 815b 	beq.w	8006cb6 <_dtoa_r+0x93e>
 8006a00:	2400      	movs	r4, #0
 8006a02:	4625      	mov	r5, r4
 8006a04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a06:	4656      	mov	r6, sl
 8006a08:	43db      	mvns	r3, r3
 8006a0a:	9304      	str	r3, [sp, #16]
 8006a0c:	2700      	movs	r7, #0
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4658      	mov	r0, fp
 8006a12:	f000 fbb7 	bl	8007184 <_Bfree>
 8006a16:	2d00      	cmp	r5, #0
 8006a18:	d0dc      	beq.n	80069d4 <_dtoa_r+0x65c>
 8006a1a:	b12f      	cbz	r7, 8006a28 <_dtoa_r+0x6b0>
 8006a1c:	42af      	cmp	r7, r5
 8006a1e:	d003      	beq.n	8006a28 <_dtoa_r+0x6b0>
 8006a20:	4639      	mov	r1, r7
 8006a22:	4658      	mov	r0, fp
 8006a24:	f000 fbae 	bl	8007184 <_Bfree>
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4658      	mov	r0, fp
 8006a2c:	f000 fbaa 	bl	8007184 <_Bfree>
 8006a30:	e7d0      	b.n	80069d4 <_dtoa_r+0x65c>
 8006a32:	9704      	str	r7, [sp, #16]
 8006a34:	4633      	mov	r3, r6
 8006a36:	461e      	mov	r6, r3
 8006a38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a3c:	2a39      	cmp	r2, #57	@ 0x39
 8006a3e:	d107      	bne.n	8006a50 <_dtoa_r+0x6d8>
 8006a40:	459a      	cmp	sl, r3
 8006a42:	d1f8      	bne.n	8006a36 <_dtoa_r+0x6be>
 8006a44:	9a04      	ldr	r2, [sp, #16]
 8006a46:	3201      	adds	r2, #1
 8006a48:	9204      	str	r2, [sp, #16]
 8006a4a:	2230      	movs	r2, #48	@ 0x30
 8006a4c:	f88a 2000 	strb.w	r2, [sl]
 8006a50:	781a      	ldrb	r2, [r3, #0]
 8006a52:	3201      	adds	r2, #1
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	e7bd      	b.n	80069d4 <_dtoa_r+0x65c>
 8006a58:	2200      	movs	r2, #0
 8006a5a:	4b09      	ldr	r3, [pc, #36]	@ (8006a80 <_dtoa_r+0x708>)
 8006a5c:	f7f9 fd3c 	bl	80004d8 <__aeabi_dmul>
 8006a60:	2200      	movs	r2, #0
 8006a62:	2300      	movs	r3, #0
 8006a64:	4604      	mov	r4, r0
 8006a66:	460d      	mov	r5, r1
 8006a68:	f7f9 ff9e 	bl	80009a8 <__aeabi_dcmpeq>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	f43f aebc 	beq.w	80067ea <_dtoa_r+0x472>
 8006a72:	e6f1      	b.n	8006858 <_dtoa_r+0x4e0>
 8006a74:	0800a558 	.word	0x0800a558
 8006a78:	3fe00000 	.word	0x3fe00000
 8006a7c:	3ff00000 	.word	0x3ff00000
 8006a80:	40240000 	.word	0x40240000
 8006a84:	40140000 	.word	0x40140000
 8006a88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006a8a:	2a00      	cmp	r2, #0
 8006a8c:	f000 80db 	beq.w	8006c46 <_dtoa_r+0x8ce>
 8006a90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006a92:	2a01      	cmp	r2, #1
 8006a94:	f300 80bf 	bgt.w	8006c16 <_dtoa_r+0x89e>
 8006a98:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006a9a:	2a00      	cmp	r2, #0
 8006a9c:	f000 80b7 	beq.w	8006c0e <_dtoa_r+0x896>
 8006aa0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006aa4:	4646      	mov	r6, r8
 8006aa6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006aa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006aaa:	2101      	movs	r1, #1
 8006aac:	441a      	add	r2, r3
 8006aae:	4658      	mov	r0, fp
 8006ab0:	4498      	add	r8, r3
 8006ab2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ab4:	f000 fc64 	bl	8007380 <__i2b>
 8006ab8:	4605      	mov	r5, r0
 8006aba:	b15e      	cbz	r6, 8006ad4 <_dtoa_r+0x75c>
 8006abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	dd08      	ble.n	8006ad4 <_dtoa_r+0x75c>
 8006ac2:	42b3      	cmp	r3, r6
 8006ac4:	bfa8      	it	ge
 8006ac6:	4633      	movge	r3, r6
 8006ac8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006aca:	eba8 0803 	sub.w	r8, r8, r3
 8006ace:	1af6      	subs	r6, r6, r3
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ad6:	b1f3      	cbz	r3, 8006b16 <_dtoa_r+0x79e>
 8006ad8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 80b7 	beq.w	8006c4e <_dtoa_r+0x8d6>
 8006ae0:	b18c      	cbz	r4, 8006b06 <_dtoa_r+0x78e>
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	4622      	mov	r2, r4
 8006ae6:	4658      	mov	r0, fp
 8006ae8:	f000 fd08 	bl	80074fc <__pow5mult>
 8006aec:	464a      	mov	r2, r9
 8006aee:	4601      	mov	r1, r0
 8006af0:	4605      	mov	r5, r0
 8006af2:	4658      	mov	r0, fp
 8006af4:	f000 fc5a 	bl	80073ac <__multiply>
 8006af8:	4649      	mov	r1, r9
 8006afa:	9004      	str	r0, [sp, #16]
 8006afc:	4658      	mov	r0, fp
 8006afe:	f000 fb41 	bl	8007184 <_Bfree>
 8006b02:	9b04      	ldr	r3, [sp, #16]
 8006b04:	4699      	mov	r9, r3
 8006b06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b08:	1b1a      	subs	r2, r3, r4
 8006b0a:	d004      	beq.n	8006b16 <_dtoa_r+0x79e>
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	4658      	mov	r0, fp
 8006b10:	f000 fcf4 	bl	80074fc <__pow5mult>
 8006b14:	4681      	mov	r9, r0
 8006b16:	2101      	movs	r1, #1
 8006b18:	4658      	mov	r0, fp
 8006b1a:	f000 fc31 	bl	8007380 <__i2b>
 8006b1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b20:	4604      	mov	r4, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 81c9 	beq.w	8006eba <_dtoa_r+0xb42>
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	4658      	mov	r0, fp
 8006b2e:	f000 fce5 	bl	80074fc <__pow5mult>
 8006b32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b34:	4604      	mov	r4, r0
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	f300 808f 	bgt.w	8006c5a <_dtoa_r+0x8e2>
 8006b3c:	9b02      	ldr	r3, [sp, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f040 8087 	bne.w	8006c52 <_dtoa_r+0x8da>
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f040 8083 	bne.w	8006c56 <_dtoa_r+0x8de>
 8006b50:	9b03      	ldr	r3, [sp, #12]
 8006b52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b56:	0d1b      	lsrs	r3, r3, #20
 8006b58:	051b      	lsls	r3, r3, #20
 8006b5a:	b12b      	cbz	r3, 8006b68 <_dtoa_r+0x7f0>
 8006b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b5e:	f108 0801 	add.w	r8, r8, #1
 8006b62:	3301      	adds	r3, #1
 8006b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b66:	2301      	movs	r3, #1
 8006b68:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 81aa 	beq.w	8006ec6 <_dtoa_r+0xb4e>
 8006b72:	6923      	ldr	r3, [r4, #16]
 8006b74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b78:	6918      	ldr	r0, [r3, #16]
 8006b7a:	f000 fbb5 	bl	80072e8 <__hi0bits>
 8006b7e:	f1c0 0020 	rsb	r0, r0, #32
 8006b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b84:	4418      	add	r0, r3
 8006b86:	f010 001f 	ands.w	r0, r0, #31
 8006b8a:	d071      	beq.n	8006c70 <_dtoa_r+0x8f8>
 8006b8c:	f1c0 0320 	rsb	r3, r0, #32
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	dd65      	ble.n	8006c60 <_dtoa_r+0x8e8>
 8006b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b96:	f1c0 001c 	rsb	r0, r0, #28
 8006b9a:	4403      	add	r3, r0
 8006b9c:	4480      	add	r8, r0
 8006b9e:	4406      	add	r6, r0
 8006ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ba2:	f1b8 0f00 	cmp.w	r8, #0
 8006ba6:	dd05      	ble.n	8006bb4 <_dtoa_r+0x83c>
 8006ba8:	4649      	mov	r1, r9
 8006baa:	4642      	mov	r2, r8
 8006bac:	4658      	mov	r0, fp
 8006bae:	f000 fcff 	bl	80075b0 <__lshift>
 8006bb2:	4681      	mov	r9, r0
 8006bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	dd05      	ble.n	8006bc6 <_dtoa_r+0x84e>
 8006bba:	4621      	mov	r1, r4
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4658      	mov	r0, fp
 8006bc0:	f000 fcf6 	bl	80075b0 <__lshift>
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d053      	beq.n	8006c74 <_dtoa_r+0x8fc>
 8006bcc:	4621      	mov	r1, r4
 8006bce:	4648      	mov	r0, r9
 8006bd0:	f000 fd5a 	bl	8007688 <__mcmp>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	da4d      	bge.n	8006c74 <_dtoa_r+0x8fc>
 8006bd8:	1e7b      	subs	r3, r7, #1
 8006bda:	4649      	mov	r1, r9
 8006bdc:	9304      	str	r3, [sp, #16]
 8006bde:	220a      	movs	r2, #10
 8006be0:	2300      	movs	r3, #0
 8006be2:	4658      	mov	r0, fp
 8006be4:	f000 faf0 	bl	80071c8 <__multadd>
 8006be8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bea:	4681      	mov	r9, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 816c 	beq.w	8006eca <_dtoa_r+0xb52>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	220a      	movs	r2, #10
 8006bf8:	4658      	mov	r0, fp
 8006bfa:	f000 fae5 	bl	80071c8 <__multadd>
 8006bfe:	9b08      	ldr	r3, [sp, #32]
 8006c00:	4605      	mov	r5, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	dc61      	bgt.n	8006cca <_dtoa_r+0x952>
 8006c06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	dc3b      	bgt.n	8006c84 <_dtoa_r+0x90c>
 8006c0c:	e05d      	b.n	8006cca <_dtoa_r+0x952>
 8006c0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c10:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006c14:	e746      	b.n	8006aa4 <_dtoa_r+0x72c>
 8006c16:	9b07      	ldr	r3, [sp, #28]
 8006c18:	1e5c      	subs	r4, r3, #1
 8006c1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	bfbf      	itttt	lt
 8006c20:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006c22:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006c24:	1ae3      	sublt	r3, r4, r3
 8006c26:	18d2      	addlt	r2, r2, r3
 8006c28:	bfa8      	it	ge
 8006c2a:	1b1c      	subge	r4, r3, r4
 8006c2c:	9b07      	ldr	r3, [sp, #28]
 8006c2e:	bfbe      	ittt	lt
 8006c30:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006c32:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006c34:	2400      	movlt	r4, #0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	bfb5      	itete	lt
 8006c3a:	eba8 0603 	sublt.w	r6, r8, r3
 8006c3e:	4646      	movge	r6, r8
 8006c40:	2300      	movlt	r3, #0
 8006c42:	9b07      	ldrge	r3, [sp, #28]
 8006c44:	e730      	b.n	8006aa8 <_dtoa_r+0x730>
 8006c46:	4646      	mov	r6, r8
 8006c48:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c4a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006c4c:	e735      	b.n	8006aba <_dtoa_r+0x742>
 8006c4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c50:	e75c      	b.n	8006b0c <_dtoa_r+0x794>
 8006c52:	2300      	movs	r3, #0
 8006c54:	e788      	b.n	8006b68 <_dtoa_r+0x7f0>
 8006c56:	9b02      	ldr	r3, [sp, #8]
 8006c58:	e786      	b.n	8006b68 <_dtoa_r+0x7f0>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c5e:	e788      	b.n	8006b72 <_dtoa_r+0x7fa>
 8006c60:	d09f      	beq.n	8006ba2 <_dtoa_r+0x82a>
 8006c62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c64:	331c      	adds	r3, #28
 8006c66:	441a      	add	r2, r3
 8006c68:	4498      	add	r8, r3
 8006c6a:	441e      	add	r6, r3
 8006c6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c6e:	e798      	b.n	8006ba2 <_dtoa_r+0x82a>
 8006c70:	4603      	mov	r3, r0
 8006c72:	e7f6      	b.n	8006c62 <_dtoa_r+0x8ea>
 8006c74:	9b07      	ldr	r3, [sp, #28]
 8006c76:	9704      	str	r7, [sp, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	dc20      	bgt.n	8006cbe <_dtoa_r+0x946>
 8006c7c:	9308      	str	r3, [sp, #32]
 8006c7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	dd1e      	ble.n	8006cc2 <_dtoa_r+0x94a>
 8006c84:	9b08      	ldr	r3, [sp, #32]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f47f aebc 	bne.w	8006a04 <_dtoa_r+0x68c>
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	2205      	movs	r2, #5
 8006c90:	4658      	mov	r0, fp
 8006c92:	f000 fa99 	bl	80071c8 <__multadd>
 8006c96:	4601      	mov	r1, r0
 8006c98:	4604      	mov	r4, r0
 8006c9a:	4648      	mov	r0, r9
 8006c9c:	f000 fcf4 	bl	8007688 <__mcmp>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	f77f aeaf 	ble.w	8006a04 <_dtoa_r+0x68c>
 8006ca6:	2331      	movs	r3, #49	@ 0x31
 8006ca8:	4656      	mov	r6, sl
 8006caa:	f806 3b01 	strb.w	r3, [r6], #1
 8006cae:	9b04      	ldr	r3, [sp, #16]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	9304      	str	r3, [sp, #16]
 8006cb4:	e6aa      	b.n	8006a0c <_dtoa_r+0x694>
 8006cb6:	9c07      	ldr	r4, [sp, #28]
 8006cb8:	9704      	str	r7, [sp, #16]
 8006cba:	4625      	mov	r5, r4
 8006cbc:	e7f3      	b.n	8006ca6 <_dtoa_r+0x92e>
 8006cbe:	9b07      	ldr	r3, [sp, #28]
 8006cc0:	9308      	str	r3, [sp, #32]
 8006cc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8104 	beq.w	8006ed2 <_dtoa_r+0xb5a>
 8006cca:	2e00      	cmp	r6, #0
 8006ccc:	dd05      	ble.n	8006cda <_dtoa_r+0x962>
 8006cce:	4629      	mov	r1, r5
 8006cd0:	4632      	mov	r2, r6
 8006cd2:	4658      	mov	r0, fp
 8006cd4:	f000 fc6c 	bl	80075b0 <__lshift>
 8006cd8:	4605      	mov	r5, r0
 8006cda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d05a      	beq.n	8006d96 <_dtoa_r+0xa1e>
 8006ce0:	4658      	mov	r0, fp
 8006ce2:	6869      	ldr	r1, [r5, #4]
 8006ce4:	f000 fa0e 	bl	8007104 <_Balloc>
 8006ce8:	4606      	mov	r6, r0
 8006cea:	b928      	cbnz	r0, 8006cf8 <_dtoa_r+0x980>
 8006cec:	4602      	mov	r2, r0
 8006cee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006cf2:	4b83      	ldr	r3, [pc, #524]	@ (8006f00 <_dtoa_r+0xb88>)
 8006cf4:	f7ff bb54 	b.w	80063a0 <_dtoa_r+0x28>
 8006cf8:	692a      	ldr	r2, [r5, #16]
 8006cfa:	f105 010c 	add.w	r1, r5, #12
 8006cfe:	3202      	adds	r2, #2
 8006d00:	0092      	lsls	r2, r2, #2
 8006d02:	300c      	adds	r0, #12
 8006d04:	f7ff fa9b 	bl	800623e <memcpy>
 8006d08:	2201      	movs	r2, #1
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4658      	mov	r0, fp
 8006d0e:	f000 fc4f 	bl	80075b0 <__lshift>
 8006d12:	462f      	mov	r7, r5
 8006d14:	4605      	mov	r5, r0
 8006d16:	f10a 0301 	add.w	r3, sl, #1
 8006d1a:	9307      	str	r3, [sp, #28]
 8006d1c:	9b08      	ldr	r3, [sp, #32]
 8006d1e:	4453      	add	r3, sl
 8006d20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d22:	9b02      	ldr	r3, [sp, #8]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d2a:	9b07      	ldr	r3, [sp, #28]
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	4648      	mov	r0, r9
 8006d32:	9302      	str	r3, [sp, #8]
 8006d34:	f7ff fa96 	bl	8006264 <quorem>
 8006d38:	4639      	mov	r1, r7
 8006d3a:	9008      	str	r0, [sp, #32]
 8006d3c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d40:	4648      	mov	r0, r9
 8006d42:	f000 fca1 	bl	8007688 <__mcmp>
 8006d46:	462a      	mov	r2, r5
 8006d48:	9009      	str	r0, [sp, #36]	@ 0x24
 8006d4a:	4621      	mov	r1, r4
 8006d4c:	4658      	mov	r0, fp
 8006d4e:	f000 fcb7 	bl	80076c0 <__mdiff>
 8006d52:	68c2      	ldr	r2, [r0, #12]
 8006d54:	4606      	mov	r6, r0
 8006d56:	bb02      	cbnz	r2, 8006d9a <_dtoa_r+0xa22>
 8006d58:	4601      	mov	r1, r0
 8006d5a:	4648      	mov	r0, r9
 8006d5c:	f000 fc94 	bl	8007688 <__mcmp>
 8006d60:	4602      	mov	r2, r0
 8006d62:	4631      	mov	r1, r6
 8006d64:	4658      	mov	r0, fp
 8006d66:	920c      	str	r2, [sp, #48]	@ 0x30
 8006d68:	f000 fa0c 	bl	8007184 <_Bfree>
 8006d6c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d6e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006d70:	9e07      	ldr	r6, [sp, #28]
 8006d72:	ea43 0102 	orr.w	r1, r3, r2
 8006d76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d78:	4319      	orrs	r1, r3
 8006d7a:	d110      	bne.n	8006d9e <_dtoa_r+0xa26>
 8006d7c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006d80:	d029      	beq.n	8006dd6 <_dtoa_r+0xa5e>
 8006d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	dd02      	ble.n	8006d8e <_dtoa_r+0xa16>
 8006d88:	9b08      	ldr	r3, [sp, #32]
 8006d8a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006d8e:	9b02      	ldr	r3, [sp, #8]
 8006d90:	f883 8000 	strb.w	r8, [r3]
 8006d94:	e63b      	b.n	8006a0e <_dtoa_r+0x696>
 8006d96:	4628      	mov	r0, r5
 8006d98:	e7bb      	b.n	8006d12 <_dtoa_r+0x99a>
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	e7e1      	b.n	8006d62 <_dtoa_r+0x9ea>
 8006d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	db04      	blt.n	8006dae <_dtoa_r+0xa36>
 8006da4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006da6:	430b      	orrs	r3, r1
 8006da8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006daa:	430b      	orrs	r3, r1
 8006dac:	d120      	bne.n	8006df0 <_dtoa_r+0xa78>
 8006dae:	2a00      	cmp	r2, #0
 8006db0:	dded      	ble.n	8006d8e <_dtoa_r+0xa16>
 8006db2:	4649      	mov	r1, r9
 8006db4:	2201      	movs	r2, #1
 8006db6:	4658      	mov	r0, fp
 8006db8:	f000 fbfa 	bl	80075b0 <__lshift>
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	4681      	mov	r9, r0
 8006dc0:	f000 fc62 	bl	8007688 <__mcmp>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	dc03      	bgt.n	8006dd0 <_dtoa_r+0xa58>
 8006dc8:	d1e1      	bne.n	8006d8e <_dtoa_r+0xa16>
 8006dca:	f018 0f01 	tst.w	r8, #1
 8006dce:	d0de      	beq.n	8006d8e <_dtoa_r+0xa16>
 8006dd0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006dd4:	d1d8      	bne.n	8006d88 <_dtoa_r+0xa10>
 8006dd6:	2339      	movs	r3, #57	@ 0x39
 8006dd8:	9a02      	ldr	r2, [sp, #8]
 8006dda:	7013      	strb	r3, [r2, #0]
 8006ddc:	4633      	mov	r3, r6
 8006dde:	461e      	mov	r6, r3
 8006de0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	2a39      	cmp	r2, #57	@ 0x39
 8006de8:	d052      	beq.n	8006e90 <_dtoa_r+0xb18>
 8006dea:	3201      	adds	r2, #1
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	e60e      	b.n	8006a0e <_dtoa_r+0x696>
 8006df0:	2a00      	cmp	r2, #0
 8006df2:	dd07      	ble.n	8006e04 <_dtoa_r+0xa8c>
 8006df4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006df8:	d0ed      	beq.n	8006dd6 <_dtoa_r+0xa5e>
 8006dfa:	9a02      	ldr	r2, [sp, #8]
 8006dfc:	f108 0301 	add.w	r3, r8, #1
 8006e00:	7013      	strb	r3, [r2, #0]
 8006e02:	e604      	b.n	8006a0e <_dtoa_r+0x696>
 8006e04:	9b07      	ldr	r3, [sp, #28]
 8006e06:	9a07      	ldr	r2, [sp, #28]
 8006e08:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006e0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d028      	beq.n	8006e64 <_dtoa_r+0xaec>
 8006e12:	4649      	mov	r1, r9
 8006e14:	2300      	movs	r3, #0
 8006e16:	220a      	movs	r2, #10
 8006e18:	4658      	mov	r0, fp
 8006e1a:	f000 f9d5 	bl	80071c8 <__multadd>
 8006e1e:	42af      	cmp	r7, r5
 8006e20:	4681      	mov	r9, r0
 8006e22:	f04f 0300 	mov.w	r3, #0
 8006e26:	f04f 020a 	mov.w	r2, #10
 8006e2a:	4639      	mov	r1, r7
 8006e2c:	4658      	mov	r0, fp
 8006e2e:	d107      	bne.n	8006e40 <_dtoa_r+0xac8>
 8006e30:	f000 f9ca 	bl	80071c8 <__multadd>
 8006e34:	4607      	mov	r7, r0
 8006e36:	4605      	mov	r5, r0
 8006e38:	9b07      	ldr	r3, [sp, #28]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	9307      	str	r3, [sp, #28]
 8006e3e:	e774      	b.n	8006d2a <_dtoa_r+0x9b2>
 8006e40:	f000 f9c2 	bl	80071c8 <__multadd>
 8006e44:	4629      	mov	r1, r5
 8006e46:	4607      	mov	r7, r0
 8006e48:	2300      	movs	r3, #0
 8006e4a:	220a      	movs	r2, #10
 8006e4c:	4658      	mov	r0, fp
 8006e4e:	f000 f9bb 	bl	80071c8 <__multadd>
 8006e52:	4605      	mov	r5, r0
 8006e54:	e7f0      	b.n	8006e38 <_dtoa_r+0xac0>
 8006e56:	9b08      	ldr	r3, [sp, #32]
 8006e58:	2700      	movs	r7, #0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	bfcc      	ite	gt
 8006e5e:	461e      	movgt	r6, r3
 8006e60:	2601      	movle	r6, #1
 8006e62:	4456      	add	r6, sl
 8006e64:	4649      	mov	r1, r9
 8006e66:	2201      	movs	r2, #1
 8006e68:	4658      	mov	r0, fp
 8006e6a:	f000 fba1 	bl	80075b0 <__lshift>
 8006e6e:	4621      	mov	r1, r4
 8006e70:	4681      	mov	r9, r0
 8006e72:	f000 fc09 	bl	8007688 <__mcmp>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	dcb0      	bgt.n	8006ddc <_dtoa_r+0xa64>
 8006e7a:	d102      	bne.n	8006e82 <_dtoa_r+0xb0a>
 8006e7c:	f018 0f01 	tst.w	r8, #1
 8006e80:	d1ac      	bne.n	8006ddc <_dtoa_r+0xa64>
 8006e82:	4633      	mov	r3, r6
 8006e84:	461e      	mov	r6, r3
 8006e86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e8a:	2a30      	cmp	r2, #48	@ 0x30
 8006e8c:	d0fa      	beq.n	8006e84 <_dtoa_r+0xb0c>
 8006e8e:	e5be      	b.n	8006a0e <_dtoa_r+0x696>
 8006e90:	459a      	cmp	sl, r3
 8006e92:	d1a4      	bne.n	8006dde <_dtoa_r+0xa66>
 8006e94:	9b04      	ldr	r3, [sp, #16]
 8006e96:	3301      	adds	r3, #1
 8006e98:	9304      	str	r3, [sp, #16]
 8006e9a:	2331      	movs	r3, #49	@ 0x31
 8006e9c:	f88a 3000 	strb.w	r3, [sl]
 8006ea0:	e5b5      	b.n	8006a0e <_dtoa_r+0x696>
 8006ea2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006ea4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006f04 <_dtoa_r+0xb8c>
 8006ea8:	b11b      	cbz	r3, 8006eb2 <_dtoa_r+0xb3a>
 8006eaa:	f10a 0308 	add.w	r3, sl, #8
 8006eae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	4650      	mov	r0, sl
 8006eb4:	b017      	add	sp, #92	@ 0x5c
 8006eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	f77f ae3d 	ble.w	8006b3c <_dtoa_r+0x7c4>
 8006ec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ec4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ec6:	2001      	movs	r0, #1
 8006ec8:	e65b      	b.n	8006b82 <_dtoa_r+0x80a>
 8006eca:	9b08      	ldr	r3, [sp, #32]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f77f aed6 	ble.w	8006c7e <_dtoa_r+0x906>
 8006ed2:	4656      	mov	r6, sl
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	4648      	mov	r0, r9
 8006ed8:	f7ff f9c4 	bl	8006264 <quorem>
 8006edc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ee0:	9b08      	ldr	r3, [sp, #32]
 8006ee2:	f806 8b01 	strb.w	r8, [r6], #1
 8006ee6:	eba6 020a 	sub.w	r2, r6, sl
 8006eea:	4293      	cmp	r3, r2
 8006eec:	ddb3      	ble.n	8006e56 <_dtoa_r+0xade>
 8006eee:	4649      	mov	r1, r9
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	220a      	movs	r2, #10
 8006ef4:	4658      	mov	r0, fp
 8006ef6:	f000 f967 	bl	80071c8 <__multadd>
 8006efa:	4681      	mov	r9, r0
 8006efc:	e7ea      	b.n	8006ed4 <_dtoa_r+0xb5c>
 8006efe:	bf00      	nop
 8006f00:	0800a4b9 	.word	0x0800a4b9
 8006f04:	0800a43d 	.word	0x0800a43d

08006f08 <_free_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	2900      	cmp	r1, #0
 8006f0e:	d040      	beq.n	8006f92 <_free_r+0x8a>
 8006f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f14:	1f0c      	subs	r4, r1, #4
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	bfb8      	it	lt
 8006f1a:	18e4      	addlt	r4, r4, r3
 8006f1c:	f000 f8e6 	bl	80070ec <__malloc_lock>
 8006f20:	4a1c      	ldr	r2, [pc, #112]	@ (8006f94 <_free_r+0x8c>)
 8006f22:	6813      	ldr	r3, [r2, #0]
 8006f24:	b933      	cbnz	r3, 8006f34 <_free_r+0x2c>
 8006f26:	6063      	str	r3, [r4, #4]
 8006f28:	6014      	str	r4, [r2, #0]
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f30:	f000 b8e2 	b.w	80070f8 <__malloc_unlock>
 8006f34:	42a3      	cmp	r3, r4
 8006f36:	d908      	bls.n	8006f4a <_free_r+0x42>
 8006f38:	6820      	ldr	r0, [r4, #0]
 8006f3a:	1821      	adds	r1, r4, r0
 8006f3c:	428b      	cmp	r3, r1
 8006f3e:	bf01      	itttt	eq
 8006f40:	6819      	ldreq	r1, [r3, #0]
 8006f42:	685b      	ldreq	r3, [r3, #4]
 8006f44:	1809      	addeq	r1, r1, r0
 8006f46:	6021      	streq	r1, [r4, #0]
 8006f48:	e7ed      	b.n	8006f26 <_free_r+0x1e>
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	b10b      	cbz	r3, 8006f54 <_free_r+0x4c>
 8006f50:	42a3      	cmp	r3, r4
 8006f52:	d9fa      	bls.n	8006f4a <_free_r+0x42>
 8006f54:	6811      	ldr	r1, [r2, #0]
 8006f56:	1850      	adds	r0, r2, r1
 8006f58:	42a0      	cmp	r0, r4
 8006f5a:	d10b      	bne.n	8006f74 <_free_r+0x6c>
 8006f5c:	6820      	ldr	r0, [r4, #0]
 8006f5e:	4401      	add	r1, r0
 8006f60:	1850      	adds	r0, r2, r1
 8006f62:	4283      	cmp	r3, r0
 8006f64:	6011      	str	r1, [r2, #0]
 8006f66:	d1e0      	bne.n	8006f2a <_free_r+0x22>
 8006f68:	6818      	ldr	r0, [r3, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	4408      	add	r0, r1
 8006f6e:	6010      	str	r0, [r2, #0]
 8006f70:	6053      	str	r3, [r2, #4]
 8006f72:	e7da      	b.n	8006f2a <_free_r+0x22>
 8006f74:	d902      	bls.n	8006f7c <_free_r+0x74>
 8006f76:	230c      	movs	r3, #12
 8006f78:	602b      	str	r3, [r5, #0]
 8006f7a:	e7d6      	b.n	8006f2a <_free_r+0x22>
 8006f7c:	6820      	ldr	r0, [r4, #0]
 8006f7e:	1821      	adds	r1, r4, r0
 8006f80:	428b      	cmp	r3, r1
 8006f82:	bf01      	itttt	eq
 8006f84:	6819      	ldreq	r1, [r3, #0]
 8006f86:	685b      	ldreq	r3, [r3, #4]
 8006f88:	1809      	addeq	r1, r1, r0
 8006f8a:	6021      	streq	r1, [r4, #0]
 8006f8c:	6063      	str	r3, [r4, #4]
 8006f8e:	6054      	str	r4, [r2, #4]
 8006f90:	e7cb      	b.n	8006f2a <_free_r+0x22>
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	20000848 	.word	0x20000848

08006f98 <malloc>:
 8006f98:	4b02      	ldr	r3, [pc, #8]	@ (8006fa4 <malloc+0xc>)
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	f000 b825 	b.w	8006fec <_malloc_r>
 8006fa2:	bf00      	nop
 8006fa4:	2000001c 	.word	0x2000001c

08006fa8 <sbrk_aligned>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	4e0f      	ldr	r6, [pc, #60]	@ (8006fe8 <sbrk_aligned+0x40>)
 8006fac:	460c      	mov	r4, r1
 8006fae:	6831      	ldr	r1, [r6, #0]
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	b911      	cbnz	r1, 8006fba <sbrk_aligned+0x12>
 8006fb4:	f002 fb52 	bl	800965c <_sbrk_r>
 8006fb8:	6030      	str	r0, [r6, #0]
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f002 fb4d 	bl	800965c <_sbrk_r>
 8006fc2:	1c43      	adds	r3, r0, #1
 8006fc4:	d103      	bne.n	8006fce <sbrk_aligned+0x26>
 8006fc6:	f04f 34ff 	mov.w	r4, #4294967295
 8006fca:	4620      	mov	r0, r4
 8006fcc:	bd70      	pop	{r4, r5, r6, pc}
 8006fce:	1cc4      	adds	r4, r0, #3
 8006fd0:	f024 0403 	bic.w	r4, r4, #3
 8006fd4:	42a0      	cmp	r0, r4
 8006fd6:	d0f8      	beq.n	8006fca <sbrk_aligned+0x22>
 8006fd8:	1a21      	subs	r1, r4, r0
 8006fda:	4628      	mov	r0, r5
 8006fdc:	f002 fb3e 	bl	800965c <_sbrk_r>
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d1f2      	bne.n	8006fca <sbrk_aligned+0x22>
 8006fe4:	e7ef      	b.n	8006fc6 <sbrk_aligned+0x1e>
 8006fe6:	bf00      	nop
 8006fe8:	20000844 	.word	0x20000844

08006fec <_malloc_r>:
 8006fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff0:	1ccd      	adds	r5, r1, #3
 8006ff2:	f025 0503 	bic.w	r5, r5, #3
 8006ff6:	3508      	adds	r5, #8
 8006ff8:	2d0c      	cmp	r5, #12
 8006ffa:	bf38      	it	cc
 8006ffc:	250c      	movcc	r5, #12
 8006ffe:	2d00      	cmp	r5, #0
 8007000:	4606      	mov	r6, r0
 8007002:	db01      	blt.n	8007008 <_malloc_r+0x1c>
 8007004:	42a9      	cmp	r1, r5
 8007006:	d904      	bls.n	8007012 <_malloc_r+0x26>
 8007008:	230c      	movs	r3, #12
 800700a:	6033      	str	r3, [r6, #0]
 800700c:	2000      	movs	r0, #0
 800700e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007012:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070e8 <_malloc_r+0xfc>
 8007016:	f000 f869 	bl	80070ec <__malloc_lock>
 800701a:	f8d8 3000 	ldr.w	r3, [r8]
 800701e:	461c      	mov	r4, r3
 8007020:	bb44      	cbnz	r4, 8007074 <_malloc_r+0x88>
 8007022:	4629      	mov	r1, r5
 8007024:	4630      	mov	r0, r6
 8007026:	f7ff ffbf 	bl	8006fa8 <sbrk_aligned>
 800702a:	1c43      	adds	r3, r0, #1
 800702c:	4604      	mov	r4, r0
 800702e:	d158      	bne.n	80070e2 <_malloc_r+0xf6>
 8007030:	f8d8 4000 	ldr.w	r4, [r8]
 8007034:	4627      	mov	r7, r4
 8007036:	2f00      	cmp	r7, #0
 8007038:	d143      	bne.n	80070c2 <_malloc_r+0xd6>
 800703a:	2c00      	cmp	r4, #0
 800703c:	d04b      	beq.n	80070d6 <_malloc_r+0xea>
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	4639      	mov	r1, r7
 8007042:	4630      	mov	r0, r6
 8007044:	eb04 0903 	add.w	r9, r4, r3
 8007048:	f002 fb08 	bl	800965c <_sbrk_r>
 800704c:	4581      	cmp	r9, r0
 800704e:	d142      	bne.n	80070d6 <_malloc_r+0xea>
 8007050:	6821      	ldr	r1, [r4, #0]
 8007052:	4630      	mov	r0, r6
 8007054:	1a6d      	subs	r5, r5, r1
 8007056:	4629      	mov	r1, r5
 8007058:	f7ff ffa6 	bl	8006fa8 <sbrk_aligned>
 800705c:	3001      	adds	r0, #1
 800705e:	d03a      	beq.n	80070d6 <_malloc_r+0xea>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	442b      	add	r3, r5
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	f8d8 3000 	ldr.w	r3, [r8]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	bb62      	cbnz	r2, 80070c8 <_malloc_r+0xdc>
 800706e:	f8c8 7000 	str.w	r7, [r8]
 8007072:	e00f      	b.n	8007094 <_malloc_r+0xa8>
 8007074:	6822      	ldr	r2, [r4, #0]
 8007076:	1b52      	subs	r2, r2, r5
 8007078:	d420      	bmi.n	80070bc <_malloc_r+0xd0>
 800707a:	2a0b      	cmp	r2, #11
 800707c:	d917      	bls.n	80070ae <_malloc_r+0xc2>
 800707e:	1961      	adds	r1, r4, r5
 8007080:	42a3      	cmp	r3, r4
 8007082:	6025      	str	r5, [r4, #0]
 8007084:	bf18      	it	ne
 8007086:	6059      	strne	r1, [r3, #4]
 8007088:	6863      	ldr	r3, [r4, #4]
 800708a:	bf08      	it	eq
 800708c:	f8c8 1000 	streq.w	r1, [r8]
 8007090:	5162      	str	r2, [r4, r5]
 8007092:	604b      	str	r3, [r1, #4]
 8007094:	4630      	mov	r0, r6
 8007096:	f000 f82f 	bl	80070f8 <__malloc_unlock>
 800709a:	f104 000b 	add.w	r0, r4, #11
 800709e:	1d23      	adds	r3, r4, #4
 80070a0:	f020 0007 	bic.w	r0, r0, #7
 80070a4:	1ac2      	subs	r2, r0, r3
 80070a6:	bf1c      	itt	ne
 80070a8:	1a1b      	subne	r3, r3, r0
 80070aa:	50a3      	strne	r3, [r4, r2]
 80070ac:	e7af      	b.n	800700e <_malloc_r+0x22>
 80070ae:	6862      	ldr	r2, [r4, #4]
 80070b0:	42a3      	cmp	r3, r4
 80070b2:	bf0c      	ite	eq
 80070b4:	f8c8 2000 	streq.w	r2, [r8]
 80070b8:	605a      	strne	r2, [r3, #4]
 80070ba:	e7eb      	b.n	8007094 <_malloc_r+0xa8>
 80070bc:	4623      	mov	r3, r4
 80070be:	6864      	ldr	r4, [r4, #4]
 80070c0:	e7ae      	b.n	8007020 <_malloc_r+0x34>
 80070c2:	463c      	mov	r4, r7
 80070c4:	687f      	ldr	r7, [r7, #4]
 80070c6:	e7b6      	b.n	8007036 <_malloc_r+0x4a>
 80070c8:	461a      	mov	r2, r3
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	42a3      	cmp	r3, r4
 80070ce:	d1fb      	bne.n	80070c8 <_malloc_r+0xdc>
 80070d0:	2300      	movs	r3, #0
 80070d2:	6053      	str	r3, [r2, #4]
 80070d4:	e7de      	b.n	8007094 <_malloc_r+0xa8>
 80070d6:	230c      	movs	r3, #12
 80070d8:	4630      	mov	r0, r6
 80070da:	6033      	str	r3, [r6, #0]
 80070dc:	f000 f80c 	bl	80070f8 <__malloc_unlock>
 80070e0:	e794      	b.n	800700c <_malloc_r+0x20>
 80070e2:	6005      	str	r5, [r0, #0]
 80070e4:	e7d6      	b.n	8007094 <_malloc_r+0xa8>
 80070e6:	bf00      	nop
 80070e8:	20000848 	.word	0x20000848

080070ec <__malloc_lock>:
 80070ec:	4801      	ldr	r0, [pc, #4]	@ (80070f4 <__malloc_lock+0x8>)
 80070ee:	f7ff b896 	b.w	800621e <__retarget_lock_acquire_recursive>
 80070f2:	bf00      	nop
 80070f4:	20000840 	.word	0x20000840

080070f8 <__malloc_unlock>:
 80070f8:	4801      	ldr	r0, [pc, #4]	@ (8007100 <__malloc_unlock+0x8>)
 80070fa:	f7ff b891 	b.w	8006220 <__retarget_lock_release_recursive>
 80070fe:	bf00      	nop
 8007100:	20000840 	.word	0x20000840

08007104 <_Balloc>:
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	69c6      	ldr	r6, [r0, #28]
 8007108:	4604      	mov	r4, r0
 800710a:	460d      	mov	r5, r1
 800710c:	b976      	cbnz	r6, 800712c <_Balloc+0x28>
 800710e:	2010      	movs	r0, #16
 8007110:	f7ff ff42 	bl	8006f98 <malloc>
 8007114:	4602      	mov	r2, r0
 8007116:	61e0      	str	r0, [r4, #28]
 8007118:	b920      	cbnz	r0, 8007124 <_Balloc+0x20>
 800711a:	216b      	movs	r1, #107	@ 0x6b
 800711c:	4b17      	ldr	r3, [pc, #92]	@ (800717c <_Balloc+0x78>)
 800711e:	4818      	ldr	r0, [pc, #96]	@ (8007180 <_Balloc+0x7c>)
 8007120:	f002 fab2 	bl	8009688 <__assert_func>
 8007124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007128:	6006      	str	r6, [r0, #0]
 800712a:	60c6      	str	r6, [r0, #12]
 800712c:	69e6      	ldr	r6, [r4, #28]
 800712e:	68f3      	ldr	r3, [r6, #12]
 8007130:	b183      	cbz	r3, 8007154 <_Balloc+0x50>
 8007132:	69e3      	ldr	r3, [r4, #28]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800713a:	b9b8      	cbnz	r0, 800716c <_Balloc+0x68>
 800713c:	2101      	movs	r1, #1
 800713e:	fa01 f605 	lsl.w	r6, r1, r5
 8007142:	1d72      	adds	r2, r6, #5
 8007144:	4620      	mov	r0, r4
 8007146:	0092      	lsls	r2, r2, #2
 8007148:	f002 fabc 	bl	80096c4 <_calloc_r>
 800714c:	b160      	cbz	r0, 8007168 <_Balloc+0x64>
 800714e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007152:	e00e      	b.n	8007172 <_Balloc+0x6e>
 8007154:	2221      	movs	r2, #33	@ 0x21
 8007156:	2104      	movs	r1, #4
 8007158:	4620      	mov	r0, r4
 800715a:	f002 fab3 	bl	80096c4 <_calloc_r>
 800715e:	69e3      	ldr	r3, [r4, #28]
 8007160:	60f0      	str	r0, [r6, #12]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e4      	bne.n	8007132 <_Balloc+0x2e>
 8007168:	2000      	movs	r0, #0
 800716a:	bd70      	pop	{r4, r5, r6, pc}
 800716c:	6802      	ldr	r2, [r0, #0]
 800716e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007172:	2300      	movs	r3, #0
 8007174:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007178:	e7f7      	b.n	800716a <_Balloc+0x66>
 800717a:	bf00      	nop
 800717c:	0800a44a 	.word	0x0800a44a
 8007180:	0800a4ca 	.word	0x0800a4ca

08007184 <_Bfree>:
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	69c6      	ldr	r6, [r0, #28]
 8007188:	4605      	mov	r5, r0
 800718a:	460c      	mov	r4, r1
 800718c:	b976      	cbnz	r6, 80071ac <_Bfree+0x28>
 800718e:	2010      	movs	r0, #16
 8007190:	f7ff ff02 	bl	8006f98 <malloc>
 8007194:	4602      	mov	r2, r0
 8007196:	61e8      	str	r0, [r5, #28]
 8007198:	b920      	cbnz	r0, 80071a4 <_Bfree+0x20>
 800719a:	218f      	movs	r1, #143	@ 0x8f
 800719c:	4b08      	ldr	r3, [pc, #32]	@ (80071c0 <_Bfree+0x3c>)
 800719e:	4809      	ldr	r0, [pc, #36]	@ (80071c4 <_Bfree+0x40>)
 80071a0:	f002 fa72 	bl	8009688 <__assert_func>
 80071a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071a8:	6006      	str	r6, [r0, #0]
 80071aa:	60c6      	str	r6, [r0, #12]
 80071ac:	b13c      	cbz	r4, 80071be <_Bfree+0x3a>
 80071ae:	69eb      	ldr	r3, [r5, #28]
 80071b0:	6862      	ldr	r2, [r4, #4]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071b8:	6021      	str	r1, [r4, #0]
 80071ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071be:	bd70      	pop	{r4, r5, r6, pc}
 80071c0:	0800a44a 	.word	0x0800a44a
 80071c4:	0800a4ca 	.word	0x0800a4ca

080071c8 <__multadd>:
 80071c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071cc:	4607      	mov	r7, r0
 80071ce:	460c      	mov	r4, r1
 80071d0:	461e      	mov	r6, r3
 80071d2:	2000      	movs	r0, #0
 80071d4:	690d      	ldr	r5, [r1, #16]
 80071d6:	f101 0c14 	add.w	ip, r1, #20
 80071da:	f8dc 3000 	ldr.w	r3, [ip]
 80071de:	3001      	adds	r0, #1
 80071e0:	b299      	uxth	r1, r3
 80071e2:	fb02 6101 	mla	r1, r2, r1, r6
 80071e6:	0c1e      	lsrs	r6, r3, #16
 80071e8:	0c0b      	lsrs	r3, r1, #16
 80071ea:	fb02 3306 	mla	r3, r2, r6, r3
 80071ee:	b289      	uxth	r1, r1
 80071f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071f4:	4285      	cmp	r5, r0
 80071f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071fa:	f84c 1b04 	str.w	r1, [ip], #4
 80071fe:	dcec      	bgt.n	80071da <__multadd+0x12>
 8007200:	b30e      	cbz	r6, 8007246 <__multadd+0x7e>
 8007202:	68a3      	ldr	r3, [r4, #8]
 8007204:	42ab      	cmp	r3, r5
 8007206:	dc19      	bgt.n	800723c <__multadd+0x74>
 8007208:	6861      	ldr	r1, [r4, #4]
 800720a:	4638      	mov	r0, r7
 800720c:	3101      	adds	r1, #1
 800720e:	f7ff ff79 	bl	8007104 <_Balloc>
 8007212:	4680      	mov	r8, r0
 8007214:	b928      	cbnz	r0, 8007222 <__multadd+0x5a>
 8007216:	4602      	mov	r2, r0
 8007218:	21ba      	movs	r1, #186	@ 0xba
 800721a:	4b0c      	ldr	r3, [pc, #48]	@ (800724c <__multadd+0x84>)
 800721c:	480c      	ldr	r0, [pc, #48]	@ (8007250 <__multadd+0x88>)
 800721e:	f002 fa33 	bl	8009688 <__assert_func>
 8007222:	6922      	ldr	r2, [r4, #16]
 8007224:	f104 010c 	add.w	r1, r4, #12
 8007228:	3202      	adds	r2, #2
 800722a:	0092      	lsls	r2, r2, #2
 800722c:	300c      	adds	r0, #12
 800722e:	f7ff f806 	bl	800623e <memcpy>
 8007232:	4621      	mov	r1, r4
 8007234:	4638      	mov	r0, r7
 8007236:	f7ff ffa5 	bl	8007184 <_Bfree>
 800723a:	4644      	mov	r4, r8
 800723c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007240:	3501      	adds	r5, #1
 8007242:	615e      	str	r6, [r3, #20]
 8007244:	6125      	str	r5, [r4, #16]
 8007246:	4620      	mov	r0, r4
 8007248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800724c:	0800a4b9 	.word	0x0800a4b9
 8007250:	0800a4ca 	.word	0x0800a4ca

08007254 <__s2b>:
 8007254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007258:	4615      	mov	r5, r2
 800725a:	2209      	movs	r2, #9
 800725c:	461f      	mov	r7, r3
 800725e:	3308      	adds	r3, #8
 8007260:	460c      	mov	r4, r1
 8007262:	fb93 f3f2 	sdiv	r3, r3, r2
 8007266:	4606      	mov	r6, r0
 8007268:	2201      	movs	r2, #1
 800726a:	2100      	movs	r1, #0
 800726c:	429a      	cmp	r2, r3
 800726e:	db09      	blt.n	8007284 <__s2b+0x30>
 8007270:	4630      	mov	r0, r6
 8007272:	f7ff ff47 	bl	8007104 <_Balloc>
 8007276:	b940      	cbnz	r0, 800728a <__s2b+0x36>
 8007278:	4602      	mov	r2, r0
 800727a:	21d3      	movs	r1, #211	@ 0xd3
 800727c:	4b18      	ldr	r3, [pc, #96]	@ (80072e0 <__s2b+0x8c>)
 800727e:	4819      	ldr	r0, [pc, #100]	@ (80072e4 <__s2b+0x90>)
 8007280:	f002 fa02 	bl	8009688 <__assert_func>
 8007284:	0052      	lsls	r2, r2, #1
 8007286:	3101      	adds	r1, #1
 8007288:	e7f0      	b.n	800726c <__s2b+0x18>
 800728a:	9b08      	ldr	r3, [sp, #32]
 800728c:	2d09      	cmp	r5, #9
 800728e:	6143      	str	r3, [r0, #20]
 8007290:	f04f 0301 	mov.w	r3, #1
 8007294:	6103      	str	r3, [r0, #16]
 8007296:	dd16      	ble.n	80072c6 <__s2b+0x72>
 8007298:	f104 0909 	add.w	r9, r4, #9
 800729c:	46c8      	mov	r8, r9
 800729e:	442c      	add	r4, r5
 80072a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80072a4:	4601      	mov	r1, r0
 80072a6:	220a      	movs	r2, #10
 80072a8:	4630      	mov	r0, r6
 80072aa:	3b30      	subs	r3, #48	@ 0x30
 80072ac:	f7ff ff8c 	bl	80071c8 <__multadd>
 80072b0:	45a0      	cmp	r8, r4
 80072b2:	d1f5      	bne.n	80072a0 <__s2b+0x4c>
 80072b4:	f1a5 0408 	sub.w	r4, r5, #8
 80072b8:	444c      	add	r4, r9
 80072ba:	1b2d      	subs	r5, r5, r4
 80072bc:	1963      	adds	r3, r4, r5
 80072be:	42bb      	cmp	r3, r7
 80072c0:	db04      	blt.n	80072cc <__s2b+0x78>
 80072c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072c6:	2509      	movs	r5, #9
 80072c8:	340a      	adds	r4, #10
 80072ca:	e7f6      	b.n	80072ba <__s2b+0x66>
 80072cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80072d0:	4601      	mov	r1, r0
 80072d2:	220a      	movs	r2, #10
 80072d4:	4630      	mov	r0, r6
 80072d6:	3b30      	subs	r3, #48	@ 0x30
 80072d8:	f7ff ff76 	bl	80071c8 <__multadd>
 80072dc:	e7ee      	b.n	80072bc <__s2b+0x68>
 80072de:	bf00      	nop
 80072e0:	0800a4b9 	.word	0x0800a4b9
 80072e4:	0800a4ca 	.word	0x0800a4ca

080072e8 <__hi0bits>:
 80072e8:	4603      	mov	r3, r0
 80072ea:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80072ee:	bf3a      	itte	cc
 80072f0:	0403      	lslcc	r3, r0, #16
 80072f2:	2010      	movcc	r0, #16
 80072f4:	2000      	movcs	r0, #0
 80072f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072fa:	bf3c      	itt	cc
 80072fc:	021b      	lslcc	r3, r3, #8
 80072fe:	3008      	addcc	r0, #8
 8007300:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007304:	bf3c      	itt	cc
 8007306:	011b      	lslcc	r3, r3, #4
 8007308:	3004      	addcc	r0, #4
 800730a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800730e:	bf3c      	itt	cc
 8007310:	009b      	lslcc	r3, r3, #2
 8007312:	3002      	addcc	r0, #2
 8007314:	2b00      	cmp	r3, #0
 8007316:	db05      	blt.n	8007324 <__hi0bits+0x3c>
 8007318:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800731c:	f100 0001 	add.w	r0, r0, #1
 8007320:	bf08      	it	eq
 8007322:	2020      	moveq	r0, #32
 8007324:	4770      	bx	lr

08007326 <__lo0bits>:
 8007326:	6803      	ldr	r3, [r0, #0]
 8007328:	4602      	mov	r2, r0
 800732a:	f013 0007 	ands.w	r0, r3, #7
 800732e:	d00b      	beq.n	8007348 <__lo0bits+0x22>
 8007330:	07d9      	lsls	r1, r3, #31
 8007332:	d421      	bmi.n	8007378 <__lo0bits+0x52>
 8007334:	0798      	lsls	r0, r3, #30
 8007336:	bf49      	itett	mi
 8007338:	085b      	lsrmi	r3, r3, #1
 800733a:	089b      	lsrpl	r3, r3, #2
 800733c:	2001      	movmi	r0, #1
 800733e:	6013      	strmi	r3, [r2, #0]
 8007340:	bf5c      	itt	pl
 8007342:	2002      	movpl	r0, #2
 8007344:	6013      	strpl	r3, [r2, #0]
 8007346:	4770      	bx	lr
 8007348:	b299      	uxth	r1, r3
 800734a:	b909      	cbnz	r1, 8007350 <__lo0bits+0x2a>
 800734c:	2010      	movs	r0, #16
 800734e:	0c1b      	lsrs	r3, r3, #16
 8007350:	b2d9      	uxtb	r1, r3
 8007352:	b909      	cbnz	r1, 8007358 <__lo0bits+0x32>
 8007354:	3008      	adds	r0, #8
 8007356:	0a1b      	lsrs	r3, r3, #8
 8007358:	0719      	lsls	r1, r3, #28
 800735a:	bf04      	itt	eq
 800735c:	091b      	lsreq	r3, r3, #4
 800735e:	3004      	addeq	r0, #4
 8007360:	0799      	lsls	r1, r3, #30
 8007362:	bf04      	itt	eq
 8007364:	089b      	lsreq	r3, r3, #2
 8007366:	3002      	addeq	r0, #2
 8007368:	07d9      	lsls	r1, r3, #31
 800736a:	d403      	bmi.n	8007374 <__lo0bits+0x4e>
 800736c:	085b      	lsrs	r3, r3, #1
 800736e:	f100 0001 	add.w	r0, r0, #1
 8007372:	d003      	beq.n	800737c <__lo0bits+0x56>
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	4770      	bx	lr
 8007378:	2000      	movs	r0, #0
 800737a:	4770      	bx	lr
 800737c:	2020      	movs	r0, #32
 800737e:	4770      	bx	lr

08007380 <__i2b>:
 8007380:	b510      	push	{r4, lr}
 8007382:	460c      	mov	r4, r1
 8007384:	2101      	movs	r1, #1
 8007386:	f7ff febd 	bl	8007104 <_Balloc>
 800738a:	4602      	mov	r2, r0
 800738c:	b928      	cbnz	r0, 800739a <__i2b+0x1a>
 800738e:	f240 1145 	movw	r1, #325	@ 0x145
 8007392:	4b04      	ldr	r3, [pc, #16]	@ (80073a4 <__i2b+0x24>)
 8007394:	4804      	ldr	r0, [pc, #16]	@ (80073a8 <__i2b+0x28>)
 8007396:	f002 f977 	bl	8009688 <__assert_func>
 800739a:	2301      	movs	r3, #1
 800739c:	6144      	str	r4, [r0, #20]
 800739e:	6103      	str	r3, [r0, #16]
 80073a0:	bd10      	pop	{r4, pc}
 80073a2:	bf00      	nop
 80073a4:	0800a4b9 	.word	0x0800a4b9
 80073a8:	0800a4ca 	.word	0x0800a4ca

080073ac <__multiply>:
 80073ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b0:	4614      	mov	r4, r2
 80073b2:	690a      	ldr	r2, [r1, #16]
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	460f      	mov	r7, r1
 80073b8:	429a      	cmp	r2, r3
 80073ba:	bfa2      	ittt	ge
 80073bc:	4623      	movge	r3, r4
 80073be:	460c      	movge	r4, r1
 80073c0:	461f      	movge	r7, r3
 80073c2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80073c6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80073ca:	68a3      	ldr	r3, [r4, #8]
 80073cc:	6861      	ldr	r1, [r4, #4]
 80073ce:	eb0a 0609 	add.w	r6, sl, r9
 80073d2:	42b3      	cmp	r3, r6
 80073d4:	b085      	sub	sp, #20
 80073d6:	bfb8      	it	lt
 80073d8:	3101      	addlt	r1, #1
 80073da:	f7ff fe93 	bl	8007104 <_Balloc>
 80073de:	b930      	cbnz	r0, 80073ee <__multiply+0x42>
 80073e0:	4602      	mov	r2, r0
 80073e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80073e6:	4b43      	ldr	r3, [pc, #268]	@ (80074f4 <__multiply+0x148>)
 80073e8:	4843      	ldr	r0, [pc, #268]	@ (80074f8 <__multiply+0x14c>)
 80073ea:	f002 f94d 	bl	8009688 <__assert_func>
 80073ee:	f100 0514 	add.w	r5, r0, #20
 80073f2:	462b      	mov	r3, r5
 80073f4:	2200      	movs	r2, #0
 80073f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073fa:	4543      	cmp	r3, r8
 80073fc:	d321      	bcc.n	8007442 <__multiply+0x96>
 80073fe:	f107 0114 	add.w	r1, r7, #20
 8007402:	f104 0214 	add.w	r2, r4, #20
 8007406:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800740a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800740e:	9302      	str	r3, [sp, #8]
 8007410:	1b13      	subs	r3, r2, r4
 8007412:	3b15      	subs	r3, #21
 8007414:	f023 0303 	bic.w	r3, r3, #3
 8007418:	3304      	adds	r3, #4
 800741a:	f104 0715 	add.w	r7, r4, #21
 800741e:	42ba      	cmp	r2, r7
 8007420:	bf38      	it	cc
 8007422:	2304      	movcc	r3, #4
 8007424:	9301      	str	r3, [sp, #4]
 8007426:	9b02      	ldr	r3, [sp, #8]
 8007428:	9103      	str	r1, [sp, #12]
 800742a:	428b      	cmp	r3, r1
 800742c:	d80c      	bhi.n	8007448 <__multiply+0x9c>
 800742e:	2e00      	cmp	r6, #0
 8007430:	dd03      	ble.n	800743a <__multiply+0x8e>
 8007432:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007436:	2b00      	cmp	r3, #0
 8007438:	d05a      	beq.n	80074f0 <__multiply+0x144>
 800743a:	6106      	str	r6, [r0, #16]
 800743c:	b005      	add	sp, #20
 800743e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007442:	f843 2b04 	str.w	r2, [r3], #4
 8007446:	e7d8      	b.n	80073fa <__multiply+0x4e>
 8007448:	f8b1 a000 	ldrh.w	sl, [r1]
 800744c:	f1ba 0f00 	cmp.w	sl, #0
 8007450:	d023      	beq.n	800749a <__multiply+0xee>
 8007452:	46a9      	mov	r9, r5
 8007454:	f04f 0c00 	mov.w	ip, #0
 8007458:	f104 0e14 	add.w	lr, r4, #20
 800745c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007460:	f8d9 3000 	ldr.w	r3, [r9]
 8007464:	fa1f fb87 	uxth.w	fp, r7
 8007468:	b29b      	uxth	r3, r3
 800746a:	fb0a 330b 	mla	r3, sl, fp, r3
 800746e:	4463      	add	r3, ip
 8007470:	f8d9 c000 	ldr.w	ip, [r9]
 8007474:	0c3f      	lsrs	r7, r7, #16
 8007476:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800747a:	fb0a c707 	mla	r7, sl, r7, ip
 800747e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007482:	b29b      	uxth	r3, r3
 8007484:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007488:	4572      	cmp	r2, lr
 800748a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800748e:	f849 3b04 	str.w	r3, [r9], #4
 8007492:	d8e3      	bhi.n	800745c <__multiply+0xb0>
 8007494:	9b01      	ldr	r3, [sp, #4]
 8007496:	f845 c003 	str.w	ip, [r5, r3]
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	3104      	adds	r1, #4
 800749e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80074a2:	f1b9 0f00 	cmp.w	r9, #0
 80074a6:	d021      	beq.n	80074ec <__multiply+0x140>
 80074a8:	46ae      	mov	lr, r5
 80074aa:	f04f 0a00 	mov.w	sl, #0
 80074ae:	682b      	ldr	r3, [r5, #0]
 80074b0:	f104 0c14 	add.w	ip, r4, #20
 80074b4:	f8bc b000 	ldrh.w	fp, [ip]
 80074b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80074bc:	b29b      	uxth	r3, r3
 80074be:	fb09 770b 	mla	r7, r9, fp, r7
 80074c2:	4457      	add	r7, sl
 80074c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074c8:	f84e 3b04 	str.w	r3, [lr], #4
 80074cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80074d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074d4:	f8be 3000 	ldrh.w	r3, [lr]
 80074d8:	4562      	cmp	r2, ip
 80074da:	fb09 330a 	mla	r3, r9, sl, r3
 80074de:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80074e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074e6:	d8e5      	bhi.n	80074b4 <__multiply+0x108>
 80074e8:	9f01      	ldr	r7, [sp, #4]
 80074ea:	51eb      	str	r3, [r5, r7]
 80074ec:	3504      	adds	r5, #4
 80074ee:	e79a      	b.n	8007426 <__multiply+0x7a>
 80074f0:	3e01      	subs	r6, #1
 80074f2:	e79c      	b.n	800742e <__multiply+0x82>
 80074f4:	0800a4b9 	.word	0x0800a4b9
 80074f8:	0800a4ca 	.word	0x0800a4ca

080074fc <__pow5mult>:
 80074fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007500:	4615      	mov	r5, r2
 8007502:	f012 0203 	ands.w	r2, r2, #3
 8007506:	4607      	mov	r7, r0
 8007508:	460e      	mov	r6, r1
 800750a:	d007      	beq.n	800751c <__pow5mult+0x20>
 800750c:	4c25      	ldr	r4, [pc, #148]	@ (80075a4 <__pow5mult+0xa8>)
 800750e:	3a01      	subs	r2, #1
 8007510:	2300      	movs	r3, #0
 8007512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007516:	f7ff fe57 	bl	80071c8 <__multadd>
 800751a:	4606      	mov	r6, r0
 800751c:	10ad      	asrs	r5, r5, #2
 800751e:	d03d      	beq.n	800759c <__pow5mult+0xa0>
 8007520:	69fc      	ldr	r4, [r7, #28]
 8007522:	b97c      	cbnz	r4, 8007544 <__pow5mult+0x48>
 8007524:	2010      	movs	r0, #16
 8007526:	f7ff fd37 	bl	8006f98 <malloc>
 800752a:	4602      	mov	r2, r0
 800752c:	61f8      	str	r0, [r7, #28]
 800752e:	b928      	cbnz	r0, 800753c <__pow5mult+0x40>
 8007530:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007534:	4b1c      	ldr	r3, [pc, #112]	@ (80075a8 <__pow5mult+0xac>)
 8007536:	481d      	ldr	r0, [pc, #116]	@ (80075ac <__pow5mult+0xb0>)
 8007538:	f002 f8a6 	bl	8009688 <__assert_func>
 800753c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007540:	6004      	str	r4, [r0, #0]
 8007542:	60c4      	str	r4, [r0, #12]
 8007544:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007548:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800754c:	b94c      	cbnz	r4, 8007562 <__pow5mult+0x66>
 800754e:	f240 2171 	movw	r1, #625	@ 0x271
 8007552:	4638      	mov	r0, r7
 8007554:	f7ff ff14 	bl	8007380 <__i2b>
 8007558:	2300      	movs	r3, #0
 800755a:	4604      	mov	r4, r0
 800755c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007560:	6003      	str	r3, [r0, #0]
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	07eb      	lsls	r3, r5, #31
 8007568:	d50a      	bpl.n	8007580 <__pow5mult+0x84>
 800756a:	4631      	mov	r1, r6
 800756c:	4622      	mov	r2, r4
 800756e:	4638      	mov	r0, r7
 8007570:	f7ff ff1c 	bl	80073ac <__multiply>
 8007574:	4680      	mov	r8, r0
 8007576:	4631      	mov	r1, r6
 8007578:	4638      	mov	r0, r7
 800757a:	f7ff fe03 	bl	8007184 <_Bfree>
 800757e:	4646      	mov	r6, r8
 8007580:	106d      	asrs	r5, r5, #1
 8007582:	d00b      	beq.n	800759c <__pow5mult+0xa0>
 8007584:	6820      	ldr	r0, [r4, #0]
 8007586:	b938      	cbnz	r0, 8007598 <__pow5mult+0x9c>
 8007588:	4622      	mov	r2, r4
 800758a:	4621      	mov	r1, r4
 800758c:	4638      	mov	r0, r7
 800758e:	f7ff ff0d 	bl	80073ac <__multiply>
 8007592:	6020      	str	r0, [r4, #0]
 8007594:	f8c0 9000 	str.w	r9, [r0]
 8007598:	4604      	mov	r4, r0
 800759a:	e7e4      	b.n	8007566 <__pow5mult+0x6a>
 800759c:	4630      	mov	r0, r6
 800759e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075a2:	bf00      	nop
 80075a4:	0800a524 	.word	0x0800a524
 80075a8:	0800a44a 	.word	0x0800a44a
 80075ac:	0800a4ca 	.word	0x0800a4ca

080075b0 <__lshift>:
 80075b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b4:	460c      	mov	r4, r1
 80075b6:	4607      	mov	r7, r0
 80075b8:	4691      	mov	r9, r2
 80075ba:	6923      	ldr	r3, [r4, #16]
 80075bc:	6849      	ldr	r1, [r1, #4]
 80075be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075c2:	68a3      	ldr	r3, [r4, #8]
 80075c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075c8:	f108 0601 	add.w	r6, r8, #1
 80075cc:	42b3      	cmp	r3, r6
 80075ce:	db0b      	blt.n	80075e8 <__lshift+0x38>
 80075d0:	4638      	mov	r0, r7
 80075d2:	f7ff fd97 	bl	8007104 <_Balloc>
 80075d6:	4605      	mov	r5, r0
 80075d8:	b948      	cbnz	r0, 80075ee <__lshift+0x3e>
 80075da:	4602      	mov	r2, r0
 80075dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80075e0:	4b27      	ldr	r3, [pc, #156]	@ (8007680 <__lshift+0xd0>)
 80075e2:	4828      	ldr	r0, [pc, #160]	@ (8007684 <__lshift+0xd4>)
 80075e4:	f002 f850 	bl	8009688 <__assert_func>
 80075e8:	3101      	adds	r1, #1
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	e7ee      	b.n	80075cc <__lshift+0x1c>
 80075ee:	2300      	movs	r3, #0
 80075f0:	f100 0114 	add.w	r1, r0, #20
 80075f4:	f100 0210 	add.w	r2, r0, #16
 80075f8:	4618      	mov	r0, r3
 80075fa:	4553      	cmp	r3, sl
 80075fc:	db33      	blt.n	8007666 <__lshift+0xb6>
 80075fe:	6920      	ldr	r0, [r4, #16]
 8007600:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007604:	f104 0314 	add.w	r3, r4, #20
 8007608:	f019 091f 	ands.w	r9, r9, #31
 800760c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007610:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007614:	d02b      	beq.n	800766e <__lshift+0xbe>
 8007616:	468a      	mov	sl, r1
 8007618:	2200      	movs	r2, #0
 800761a:	f1c9 0e20 	rsb	lr, r9, #32
 800761e:	6818      	ldr	r0, [r3, #0]
 8007620:	fa00 f009 	lsl.w	r0, r0, r9
 8007624:	4310      	orrs	r0, r2
 8007626:	f84a 0b04 	str.w	r0, [sl], #4
 800762a:	f853 2b04 	ldr.w	r2, [r3], #4
 800762e:	459c      	cmp	ip, r3
 8007630:	fa22 f20e 	lsr.w	r2, r2, lr
 8007634:	d8f3      	bhi.n	800761e <__lshift+0x6e>
 8007636:	ebac 0304 	sub.w	r3, ip, r4
 800763a:	3b15      	subs	r3, #21
 800763c:	f023 0303 	bic.w	r3, r3, #3
 8007640:	3304      	adds	r3, #4
 8007642:	f104 0015 	add.w	r0, r4, #21
 8007646:	4584      	cmp	ip, r0
 8007648:	bf38      	it	cc
 800764a:	2304      	movcc	r3, #4
 800764c:	50ca      	str	r2, [r1, r3]
 800764e:	b10a      	cbz	r2, 8007654 <__lshift+0xa4>
 8007650:	f108 0602 	add.w	r6, r8, #2
 8007654:	3e01      	subs	r6, #1
 8007656:	4638      	mov	r0, r7
 8007658:	4621      	mov	r1, r4
 800765a:	612e      	str	r6, [r5, #16]
 800765c:	f7ff fd92 	bl	8007184 <_Bfree>
 8007660:	4628      	mov	r0, r5
 8007662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007666:	f842 0f04 	str.w	r0, [r2, #4]!
 800766a:	3301      	adds	r3, #1
 800766c:	e7c5      	b.n	80075fa <__lshift+0x4a>
 800766e:	3904      	subs	r1, #4
 8007670:	f853 2b04 	ldr.w	r2, [r3], #4
 8007674:	459c      	cmp	ip, r3
 8007676:	f841 2f04 	str.w	r2, [r1, #4]!
 800767a:	d8f9      	bhi.n	8007670 <__lshift+0xc0>
 800767c:	e7ea      	b.n	8007654 <__lshift+0xa4>
 800767e:	bf00      	nop
 8007680:	0800a4b9 	.word	0x0800a4b9
 8007684:	0800a4ca 	.word	0x0800a4ca

08007688 <__mcmp>:
 8007688:	4603      	mov	r3, r0
 800768a:	690a      	ldr	r2, [r1, #16]
 800768c:	6900      	ldr	r0, [r0, #16]
 800768e:	b530      	push	{r4, r5, lr}
 8007690:	1a80      	subs	r0, r0, r2
 8007692:	d10e      	bne.n	80076b2 <__mcmp+0x2a>
 8007694:	3314      	adds	r3, #20
 8007696:	3114      	adds	r1, #20
 8007698:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800769c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80076a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80076a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80076a8:	4295      	cmp	r5, r2
 80076aa:	d003      	beq.n	80076b4 <__mcmp+0x2c>
 80076ac:	d205      	bcs.n	80076ba <__mcmp+0x32>
 80076ae:	f04f 30ff 	mov.w	r0, #4294967295
 80076b2:	bd30      	pop	{r4, r5, pc}
 80076b4:	42a3      	cmp	r3, r4
 80076b6:	d3f3      	bcc.n	80076a0 <__mcmp+0x18>
 80076b8:	e7fb      	b.n	80076b2 <__mcmp+0x2a>
 80076ba:	2001      	movs	r0, #1
 80076bc:	e7f9      	b.n	80076b2 <__mcmp+0x2a>
	...

080076c0 <__mdiff>:
 80076c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	4689      	mov	r9, r1
 80076c6:	4606      	mov	r6, r0
 80076c8:	4611      	mov	r1, r2
 80076ca:	4648      	mov	r0, r9
 80076cc:	4614      	mov	r4, r2
 80076ce:	f7ff ffdb 	bl	8007688 <__mcmp>
 80076d2:	1e05      	subs	r5, r0, #0
 80076d4:	d112      	bne.n	80076fc <__mdiff+0x3c>
 80076d6:	4629      	mov	r1, r5
 80076d8:	4630      	mov	r0, r6
 80076da:	f7ff fd13 	bl	8007104 <_Balloc>
 80076de:	4602      	mov	r2, r0
 80076e0:	b928      	cbnz	r0, 80076ee <__mdiff+0x2e>
 80076e2:	f240 2137 	movw	r1, #567	@ 0x237
 80076e6:	4b3e      	ldr	r3, [pc, #248]	@ (80077e0 <__mdiff+0x120>)
 80076e8:	483e      	ldr	r0, [pc, #248]	@ (80077e4 <__mdiff+0x124>)
 80076ea:	f001 ffcd 	bl	8009688 <__assert_func>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076f4:	4610      	mov	r0, r2
 80076f6:	b003      	add	sp, #12
 80076f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fc:	bfbc      	itt	lt
 80076fe:	464b      	movlt	r3, r9
 8007700:	46a1      	movlt	r9, r4
 8007702:	4630      	mov	r0, r6
 8007704:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007708:	bfba      	itte	lt
 800770a:	461c      	movlt	r4, r3
 800770c:	2501      	movlt	r5, #1
 800770e:	2500      	movge	r5, #0
 8007710:	f7ff fcf8 	bl	8007104 <_Balloc>
 8007714:	4602      	mov	r2, r0
 8007716:	b918      	cbnz	r0, 8007720 <__mdiff+0x60>
 8007718:	f240 2145 	movw	r1, #581	@ 0x245
 800771c:	4b30      	ldr	r3, [pc, #192]	@ (80077e0 <__mdiff+0x120>)
 800771e:	e7e3      	b.n	80076e8 <__mdiff+0x28>
 8007720:	f100 0b14 	add.w	fp, r0, #20
 8007724:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007728:	f109 0310 	add.w	r3, r9, #16
 800772c:	60c5      	str	r5, [r0, #12]
 800772e:	f04f 0c00 	mov.w	ip, #0
 8007732:	f109 0514 	add.w	r5, r9, #20
 8007736:	46d9      	mov	r9, fp
 8007738:	6926      	ldr	r6, [r4, #16]
 800773a:	f104 0e14 	add.w	lr, r4, #20
 800773e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007742:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007746:	9301      	str	r3, [sp, #4]
 8007748:	9b01      	ldr	r3, [sp, #4]
 800774a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800774e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007752:	b281      	uxth	r1, r0
 8007754:	9301      	str	r3, [sp, #4]
 8007756:	fa1f f38a 	uxth.w	r3, sl
 800775a:	1a5b      	subs	r3, r3, r1
 800775c:	0c00      	lsrs	r0, r0, #16
 800775e:	4463      	add	r3, ip
 8007760:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007764:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007768:	b29b      	uxth	r3, r3
 800776a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800776e:	4576      	cmp	r6, lr
 8007770:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007774:	f849 3b04 	str.w	r3, [r9], #4
 8007778:	d8e6      	bhi.n	8007748 <__mdiff+0x88>
 800777a:	1b33      	subs	r3, r6, r4
 800777c:	3b15      	subs	r3, #21
 800777e:	f023 0303 	bic.w	r3, r3, #3
 8007782:	3415      	adds	r4, #21
 8007784:	3304      	adds	r3, #4
 8007786:	42a6      	cmp	r6, r4
 8007788:	bf38      	it	cc
 800778a:	2304      	movcc	r3, #4
 800778c:	441d      	add	r5, r3
 800778e:	445b      	add	r3, fp
 8007790:	461e      	mov	r6, r3
 8007792:	462c      	mov	r4, r5
 8007794:	4544      	cmp	r4, r8
 8007796:	d30e      	bcc.n	80077b6 <__mdiff+0xf6>
 8007798:	f108 0103 	add.w	r1, r8, #3
 800779c:	1b49      	subs	r1, r1, r5
 800779e:	f021 0103 	bic.w	r1, r1, #3
 80077a2:	3d03      	subs	r5, #3
 80077a4:	45a8      	cmp	r8, r5
 80077a6:	bf38      	it	cc
 80077a8:	2100      	movcc	r1, #0
 80077aa:	440b      	add	r3, r1
 80077ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077b0:	b199      	cbz	r1, 80077da <__mdiff+0x11a>
 80077b2:	6117      	str	r7, [r2, #16]
 80077b4:	e79e      	b.n	80076f4 <__mdiff+0x34>
 80077b6:	46e6      	mov	lr, ip
 80077b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80077bc:	fa1f fc81 	uxth.w	ip, r1
 80077c0:	44f4      	add	ip, lr
 80077c2:	0c08      	lsrs	r0, r1, #16
 80077c4:	4471      	add	r1, lr
 80077c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80077ca:	b289      	uxth	r1, r1
 80077cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80077d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077d4:	f846 1b04 	str.w	r1, [r6], #4
 80077d8:	e7dc      	b.n	8007794 <__mdiff+0xd4>
 80077da:	3f01      	subs	r7, #1
 80077dc:	e7e6      	b.n	80077ac <__mdiff+0xec>
 80077de:	bf00      	nop
 80077e0:	0800a4b9 	.word	0x0800a4b9
 80077e4:	0800a4ca 	.word	0x0800a4ca

080077e8 <__ulp>:
 80077e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007824 <__ulp+0x3c>)
 80077ea:	400b      	ands	r3, r1
 80077ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	dc08      	bgt.n	8007806 <__ulp+0x1e>
 80077f4:	425b      	negs	r3, r3
 80077f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80077fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80077fe:	da04      	bge.n	800780a <__ulp+0x22>
 8007800:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007804:	4113      	asrs	r3, r2
 8007806:	2200      	movs	r2, #0
 8007808:	e008      	b.n	800781c <__ulp+0x34>
 800780a:	f1a2 0314 	sub.w	r3, r2, #20
 800780e:	2b1e      	cmp	r3, #30
 8007810:	bfd6      	itet	le
 8007812:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007816:	2201      	movgt	r2, #1
 8007818:	40da      	lsrle	r2, r3
 800781a:	2300      	movs	r3, #0
 800781c:	4619      	mov	r1, r3
 800781e:	4610      	mov	r0, r2
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	7ff00000 	.word	0x7ff00000

08007828 <__b2d>:
 8007828:	6902      	ldr	r2, [r0, #16]
 800782a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800782c:	f100 0614 	add.w	r6, r0, #20
 8007830:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007834:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007838:	4f1e      	ldr	r7, [pc, #120]	@ (80078b4 <__b2d+0x8c>)
 800783a:	4620      	mov	r0, r4
 800783c:	f7ff fd54 	bl	80072e8 <__hi0bits>
 8007840:	4603      	mov	r3, r0
 8007842:	f1c0 0020 	rsb	r0, r0, #32
 8007846:	2b0a      	cmp	r3, #10
 8007848:	f1a2 0504 	sub.w	r5, r2, #4
 800784c:	6008      	str	r0, [r1, #0]
 800784e:	dc12      	bgt.n	8007876 <__b2d+0x4e>
 8007850:	42ae      	cmp	r6, r5
 8007852:	bf2c      	ite	cs
 8007854:	2200      	movcs	r2, #0
 8007856:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800785a:	f1c3 0c0b 	rsb	ip, r3, #11
 800785e:	3315      	adds	r3, #21
 8007860:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007864:	fa04 f303 	lsl.w	r3, r4, r3
 8007868:	fa22 f20c 	lsr.w	r2, r2, ip
 800786c:	ea4e 0107 	orr.w	r1, lr, r7
 8007870:	431a      	orrs	r2, r3
 8007872:	4610      	mov	r0, r2
 8007874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007876:	42ae      	cmp	r6, r5
 8007878:	bf36      	itet	cc
 800787a:	f1a2 0508 	subcc.w	r5, r2, #8
 800787e:	2200      	movcs	r2, #0
 8007880:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007884:	3b0b      	subs	r3, #11
 8007886:	d012      	beq.n	80078ae <__b2d+0x86>
 8007888:	f1c3 0720 	rsb	r7, r3, #32
 800788c:	fa22 f107 	lsr.w	r1, r2, r7
 8007890:	409c      	lsls	r4, r3
 8007892:	430c      	orrs	r4, r1
 8007894:	42b5      	cmp	r5, r6
 8007896:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800789a:	bf94      	ite	ls
 800789c:	2400      	movls	r4, #0
 800789e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80078a2:	409a      	lsls	r2, r3
 80078a4:	40fc      	lsrs	r4, r7
 80078a6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80078aa:	4322      	orrs	r2, r4
 80078ac:	e7e1      	b.n	8007872 <__b2d+0x4a>
 80078ae:	ea44 0107 	orr.w	r1, r4, r7
 80078b2:	e7de      	b.n	8007872 <__b2d+0x4a>
 80078b4:	3ff00000 	.word	0x3ff00000

080078b8 <__d2b>:
 80078b8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80078bc:	2101      	movs	r1, #1
 80078be:	4690      	mov	r8, r2
 80078c0:	4699      	mov	r9, r3
 80078c2:	9e08      	ldr	r6, [sp, #32]
 80078c4:	f7ff fc1e 	bl	8007104 <_Balloc>
 80078c8:	4604      	mov	r4, r0
 80078ca:	b930      	cbnz	r0, 80078da <__d2b+0x22>
 80078cc:	4602      	mov	r2, r0
 80078ce:	f240 310f 	movw	r1, #783	@ 0x30f
 80078d2:	4b23      	ldr	r3, [pc, #140]	@ (8007960 <__d2b+0xa8>)
 80078d4:	4823      	ldr	r0, [pc, #140]	@ (8007964 <__d2b+0xac>)
 80078d6:	f001 fed7 	bl	8009688 <__assert_func>
 80078da:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078e2:	b10d      	cbz	r5, 80078e8 <__d2b+0x30>
 80078e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	f1b8 0300 	subs.w	r3, r8, #0
 80078ee:	d024      	beq.n	800793a <__d2b+0x82>
 80078f0:	4668      	mov	r0, sp
 80078f2:	9300      	str	r3, [sp, #0]
 80078f4:	f7ff fd17 	bl	8007326 <__lo0bits>
 80078f8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80078fc:	b1d8      	cbz	r0, 8007936 <__d2b+0x7e>
 80078fe:	f1c0 0320 	rsb	r3, r0, #32
 8007902:	fa02 f303 	lsl.w	r3, r2, r3
 8007906:	430b      	orrs	r3, r1
 8007908:	40c2      	lsrs	r2, r0
 800790a:	6163      	str	r3, [r4, #20]
 800790c:	9201      	str	r2, [sp, #4]
 800790e:	9b01      	ldr	r3, [sp, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	bf0c      	ite	eq
 8007914:	2201      	moveq	r2, #1
 8007916:	2202      	movne	r2, #2
 8007918:	61a3      	str	r3, [r4, #24]
 800791a:	6122      	str	r2, [r4, #16]
 800791c:	b1ad      	cbz	r5, 800794a <__d2b+0x92>
 800791e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007922:	4405      	add	r5, r0
 8007924:	6035      	str	r5, [r6, #0]
 8007926:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800792a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800792c:	6018      	str	r0, [r3, #0]
 800792e:	4620      	mov	r0, r4
 8007930:	b002      	add	sp, #8
 8007932:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007936:	6161      	str	r1, [r4, #20]
 8007938:	e7e9      	b.n	800790e <__d2b+0x56>
 800793a:	a801      	add	r0, sp, #4
 800793c:	f7ff fcf3 	bl	8007326 <__lo0bits>
 8007940:	9b01      	ldr	r3, [sp, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	6163      	str	r3, [r4, #20]
 8007946:	3020      	adds	r0, #32
 8007948:	e7e7      	b.n	800791a <__d2b+0x62>
 800794a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800794e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007952:	6030      	str	r0, [r6, #0]
 8007954:	6918      	ldr	r0, [r3, #16]
 8007956:	f7ff fcc7 	bl	80072e8 <__hi0bits>
 800795a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800795e:	e7e4      	b.n	800792a <__d2b+0x72>
 8007960:	0800a4b9 	.word	0x0800a4b9
 8007964:	0800a4ca 	.word	0x0800a4ca

08007968 <__ratio>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	b085      	sub	sp, #20
 800796e:	e9cd 1000 	strd	r1, r0, [sp]
 8007972:	a902      	add	r1, sp, #8
 8007974:	f7ff ff58 	bl	8007828 <__b2d>
 8007978:	468b      	mov	fp, r1
 800797a:	4606      	mov	r6, r0
 800797c:	460f      	mov	r7, r1
 800797e:	9800      	ldr	r0, [sp, #0]
 8007980:	a903      	add	r1, sp, #12
 8007982:	f7ff ff51 	bl	8007828 <__b2d>
 8007986:	460d      	mov	r5, r1
 8007988:	9b01      	ldr	r3, [sp, #4]
 800798a:	4689      	mov	r9, r1
 800798c:	6919      	ldr	r1, [r3, #16]
 800798e:	9b00      	ldr	r3, [sp, #0]
 8007990:	4604      	mov	r4, r0
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	4630      	mov	r0, r6
 8007996:	1ac9      	subs	r1, r1, r3
 8007998:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800799c:	1a9b      	subs	r3, r3, r2
 800799e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bfcd      	iteet	gt
 80079a6:	463a      	movgt	r2, r7
 80079a8:	462a      	movle	r2, r5
 80079aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80079ae:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80079b2:	bfd8      	it	le
 80079b4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80079b8:	464b      	mov	r3, r9
 80079ba:	4622      	mov	r2, r4
 80079bc:	4659      	mov	r1, fp
 80079be:	f7f8 feb5 	bl	800072c <__aeabi_ddiv>
 80079c2:	b005      	add	sp, #20
 80079c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079c8 <__copybits>:
 80079c8:	3901      	subs	r1, #1
 80079ca:	b570      	push	{r4, r5, r6, lr}
 80079cc:	1149      	asrs	r1, r1, #5
 80079ce:	6914      	ldr	r4, [r2, #16]
 80079d0:	3101      	adds	r1, #1
 80079d2:	f102 0314 	add.w	r3, r2, #20
 80079d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80079da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80079de:	1f05      	subs	r5, r0, #4
 80079e0:	42a3      	cmp	r3, r4
 80079e2:	d30c      	bcc.n	80079fe <__copybits+0x36>
 80079e4:	1aa3      	subs	r3, r4, r2
 80079e6:	3b11      	subs	r3, #17
 80079e8:	f023 0303 	bic.w	r3, r3, #3
 80079ec:	3211      	adds	r2, #17
 80079ee:	42a2      	cmp	r2, r4
 80079f0:	bf88      	it	hi
 80079f2:	2300      	movhi	r3, #0
 80079f4:	4418      	add	r0, r3
 80079f6:	2300      	movs	r3, #0
 80079f8:	4288      	cmp	r0, r1
 80079fa:	d305      	bcc.n	8007a08 <__copybits+0x40>
 80079fc:	bd70      	pop	{r4, r5, r6, pc}
 80079fe:	f853 6b04 	ldr.w	r6, [r3], #4
 8007a02:	f845 6f04 	str.w	r6, [r5, #4]!
 8007a06:	e7eb      	b.n	80079e0 <__copybits+0x18>
 8007a08:	f840 3b04 	str.w	r3, [r0], #4
 8007a0c:	e7f4      	b.n	80079f8 <__copybits+0x30>

08007a0e <__any_on>:
 8007a0e:	f100 0214 	add.w	r2, r0, #20
 8007a12:	6900      	ldr	r0, [r0, #16]
 8007a14:	114b      	asrs	r3, r1, #5
 8007a16:	4298      	cmp	r0, r3
 8007a18:	b510      	push	{r4, lr}
 8007a1a:	db11      	blt.n	8007a40 <__any_on+0x32>
 8007a1c:	dd0a      	ble.n	8007a34 <__any_on+0x26>
 8007a1e:	f011 011f 	ands.w	r1, r1, #31
 8007a22:	d007      	beq.n	8007a34 <__any_on+0x26>
 8007a24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007a28:	fa24 f001 	lsr.w	r0, r4, r1
 8007a2c:	fa00 f101 	lsl.w	r1, r0, r1
 8007a30:	428c      	cmp	r4, r1
 8007a32:	d10b      	bne.n	8007a4c <__any_on+0x3e>
 8007a34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d803      	bhi.n	8007a44 <__any_on+0x36>
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	bd10      	pop	{r4, pc}
 8007a40:	4603      	mov	r3, r0
 8007a42:	e7f7      	b.n	8007a34 <__any_on+0x26>
 8007a44:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a48:	2900      	cmp	r1, #0
 8007a4a:	d0f5      	beq.n	8007a38 <__any_on+0x2a>
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	e7f6      	b.n	8007a3e <__any_on+0x30>

08007a50 <sulp>:
 8007a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a54:	460f      	mov	r7, r1
 8007a56:	4690      	mov	r8, r2
 8007a58:	f7ff fec6 	bl	80077e8 <__ulp>
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	460d      	mov	r5, r1
 8007a60:	f1b8 0f00 	cmp.w	r8, #0
 8007a64:	d011      	beq.n	8007a8a <sulp+0x3a>
 8007a66:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007a6a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	dd0b      	ble.n	8007a8a <sulp+0x3a>
 8007a72:	2400      	movs	r4, #0
 8007a74:	051b      	lsls	r3, r3, #20
 8007a76:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007a7a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007a7e:	4622      	mov	r2, r4
 8007a80:	462b      	mov	r3, r5
 8007a82:	f7f8 fd29 	bl	80004d8 <__aeabi_dmul>
 8007a86:	4604      	mov	r4, r0
 8007a88:	460d      	mov	r5, r1
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a92:	0000      	movs	r0, r0
 8007a94:	0000      	movs	r0, r0
	...

08007a98 <_strtod_l>:
 8007a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9c:	b09f      	sub	sp, #124	@ 0x7c
 8007a9e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	921a      	str	r2, [sp, #104]	@ 0x68
 8007aa6:	f04f 0a00 	mov.w	sl, #0
 8007aaa:	f04f 0b00 	mov.w	fp, #0
 8007aae:	460a      	mov	r2, r1
 8007ab0:	9005      	str	r0, [sp, #20]
 8007ab2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ab4:	7811      	ldrb	r1, [r2, #0]
 8007ab6:	292b      	cmp	r1, #43	@ 0x2b
 8007ab8:	d048      	beq.n	8007b4c <_strtod_l+0xb4>
 8007aba:	d836      	bhi.n	8007b2a <_strtod_l+0x92>
 8007abc:	290d      	cmp	r1, #13
 8007abe:	d830      	bhi.n	8007b22 <_strtod_l+0x8a>
 8007ac0:	2908      	cmp	r1, #8
 8007ac2:	d830      	bhi.n	8007b26 <_strtod_l+0x8e>
 8007ac4:	2900      	cmp	r1, #0
 8007ac6:	d039      	beq.n	8007b3c <_strtod_l+0xa4>
 8007ac8:	2200      	movs	r2, #0
 8007aca:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007acc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007ace:	782a      	ldrb	r2, [r5, #0]
 8007ad0:	2a30      	cmp	r2, #48	@ 0x30
 8007ad2:	f040 80b1 	bne.w	8007c38 <_strtod_l+0x1a0>
 8007ad6:	786a      	ldrb	r2, [r5, #1]
 8007ad8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007adc:	2a58      	cmp	r2, #88	@ 0x58
 8007ade:	d16c      	bne.n	8007bba <_strtod_l+0x122>
 8007ae0:	9302      	str	r3, [sp, #8]
 8007ae2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ae4:	4a8e      	ldr	r2, [pc, #568]	@ (8007d20 <_strtod_l+0x288>)
 8007ae6:	9301      	str	r3, [sp, #4]
 8007ae8:	ab1a      	add	r3, sp, #104	@ 0x68
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	9805      	ldr	r0, [sp, #20]
 8007aee:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007af0:	a919      	add	r1, sp, #100	@ 0x64
 8007af2:	f001 fe63 	bl	80097bc <__gethex>
 8007af6:	f010 060f 	ands.w	r6, r0, #15
 8007afa:	4604      	mov	r4, r0
 8007afc:	d005      	beq.n	8007b0a <_strtod_l+0x72>
 8007afe:	2e06      	cmp	r6, #6
 8007b00:	d126      	bne.n	8007b50 <_strtod_l+0xb8>
 8007b02:	2300      	movs	r3, #0
 8007b04:	3501      	adds	r5, #1
 8007b06:	9519      	str	r5, [sp, #100]	@ 0x64
 8007b08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f040 8584 	bne.w	800861a <_strtod_l+0xb82>
 8007b12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b14:	b1bb      	cbz	r3, 8007b46 <_strtod_l+0xae>
 8007b16:	4650      	mov	r0, sl
 8007b18:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007b1c:	b01f      	add	sp, #124	@ 0x7c
 8007b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b22:	2920      	cmp	r1, #32
 8007b24:	d1d0      	bne.n	8007ac8 <_strtod_l+0x30>
 8007b26:	3201      	adds	r2, #1
 8007b28:	e7c3      	b.n	8007ab2 <_strtod_l+0x1a>
 8007b2a:	292d      	cmp	r1, #45	@ 0x2d
 8007b2c:	d1cc      	bne.n	8007ac8 <_strtod_l+0x30>
 8007b2e:	2101      	movs	r1, #1
 8007b30:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007b32:	1c51      	adds	r1, r2, #1
 8007b34:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b36:	7852      	ldrb	r2, [r2, #1]
 8007b38:	2a00      	cmp	r2, #0
 8007b3a:	d1c7      	bne.n	8007acc <_strtod_l+0x34>
 8007b3c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b3e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f040 8568 	bne.w	8008616 <_strtod_l+0xb7e>
 8007b46:	4650      	mov	r0, sl
 8007b48:	4659      	mov	r1, fp
 8007b4a:	e7e7      	b.n	8007b1c <_strtod_l+0x84>
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	e7ef      	b.n	8007b30 <_strtod_l+0x98>
 8007b50:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b52:	b13a      	cbz	r2, 8007b64 <_strtod_l+0xcc>
 8007b54:	2135      	movs	r1, #53	@ 0x35
 8007b56:	a81c      	add	r0, sp, #112	@ 0x70
 8007b58:	f7ff ff36 	bl	80079c8 <__copybits>
 8007b5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b5e:	9805      	ldr	r0, [sp, #20]
 8007b60:	f7ff fb10 	bl	8007184 <_Bfree>
 8007b64:	3e01      	subs	r6, #1
 8007b66:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007b68:	2e04      	cmp	r6, #4
 8007b6a:	d806      	bhi.n	8007b7a <_strtod_l+0xe2>
 8007b6c:	e8df f006 	tbb	[pc, r6]
 8007b70:	201d0314 	.word	0x201d0314
 8007b74:	14          	.byte	0x14
 8007b75:	00          	.byte	0x00
 8007b76:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007b7a:	05e1      	lsls	r1, r4, #23
 8007b7c:	bf48      	it	mi
 8007b7e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007b82:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b86:	0d1b      	lsrs	r3, r3, #20
 8007b88:	051b      	lsls	r3, r3, #20
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1bd      	bne.n	8007b0a <_strtod_l+0x72>
 8007b8e:	f7fe fb1b 	bl	80061c8 <__errno>
 8007b92:	2322      	movs	r3, #34	@ 0x22
 8007b94:	6003      	str	r3, [r0, #0]
 8007b96:	e7b8      	b.n	8007b0a <_strtod_l+0x72>
 8007b98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007b9c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007ba0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007ba4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007ba8:	e7e7      	b.n	8007b7a <_strtod_l+0xe2>
 8007baa:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007d24 <_strtod_l+0x28c>
 8007bae:	e7e4      	b.n	8007b7a <_strtod_l+0xe2>
 8007bb0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007bb4:	f04f 3aff 	mov.w	sl, #4294967295
 8007bb8:	e7df      	b.n	8007b7a <_strtod_l+0xe2>
 8007bba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bbc:	1c5a      	adds	r2, r3, #1
 8007bbe:	9219      	str	r2, [sp, #100]	@ 0x64
 8007bc0:	785b      	ldrb	r3, [r3, #1]
 8007bc2:	2b30      	cmp	r3, #48	@ 0x30
 8007bc4:	d0f9      	beq.n	8007bba <_strtod_l+0x122>
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d09f      	beq.n	8007b0a <_strtod_l+0x72>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bd0:	220a      	movs	r2, #10
 8007bd2:	930c      	str	r3, [sp, #48]	@ 0x30
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	461f      	mov	r7, r3
 8007bd8:	9308      	str	r3, [sp, #32]
 8007bda:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bdc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007bde:	7805      	ldrb	r5, [r0, #0]
 8007be0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007be4:	b2d9      	uxtb	r1, r3
 8007be6:	2909      	cmp	r1, #9
 8007be8:	d928      	bls.n	8007c3c <_strtod_l+0x1a4>
 8007bea:	2201      	movs	r2, #1
 8007bec:	494e      	ldr	r1, [pc, #312]	@ (8007d28 <_strtod_l+0x290>)
 8007bee:	f001 fd23 	bl	8009638 <strncmp>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d032      	beq.n	8007c5c <_strtod_l+0x1c4>
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	462a      	mov	r2, r5
 8007bfa:	4681      	mov	r9, r0
 8007bfc:	463d      	mov	r5, r7
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2a65      	cmp	r2, #101	@ 0x65
 8007c02:	d001      	beq.n	8007c08 <_strtod_l+0x170>
 8007c04:	2a45      	cmp	r2, #69	@ 0x45
 8007c06:	d114      	bne.n	8007c32 <_strtod_l+0x19a>
 8007c08:	b91d      	cbnz	r5, 8007c12 <_strtod_l+0x17a>
 8007c0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c0c:	4302      	orrs	r2, r0
 8007c0e:	d095      	beq.n	8007b3c <_strtod_l+0xa4>
 8007c10:	2500      	movs	r5, #0
 8007c12:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007c14:	1c62      	adds	r2, r4, #1
 8007c16:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c18:	7862      	ldrb	r2, [r4, #1]
 8007c1a:	2a2b      	cmp	r2, #43	@ 0x2b
 8007c1c:	d077      	beq.n	8007d0e <_strtod_l+0x276>
 8007c1e:	2a2d      	cmp	r2, #45	@ 0x2d
 8007c20:	d07b      	beq.n	8007d1a <_strtod_l+0x282>
 8007c22:	f04f 0c00 	mov.w	ip, #0
 8007c26:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007c2a:	2909      	cmp	r1, #9
 8007c2c:	f240 8082 	bls.w	8007d34 <_strtod_l+0x29c>
 8007c30:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c32:	f04f 0800 	mov.w	r8, #0
 8007c36:	e0a2      	b.n	8007d7e <_strtod_l+0x2e6>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	e7c7      	b.n	8007bcc <_strtod_l+0x134>
 8007c3c:	2f08      	cmp	r7, #8
 8007c3e:	bfd5      	itete	le
 8007c40:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007c42:	9908      	ldrgt	r1, [sp, #32]
 8007c44:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c48:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007c4c:	f100 0001 	add.w	r0, r0, #1
 8007c50:	bfd4      	ite	le
 8007c52:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007c54:	9308      	strgt	r3, [sp, #32]
 8007c56:	3701      	adds	r7, #1
 8007c58:	9019      	str	r0, [sp, #100]	@ 0x64
 8007c5a:	e7bf      	b.n	8007bdc <_strtod_l+0x144>
 8007c5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c62:	785a      	ldrb	r2, [r3, #1]
 8007c64:	b37f      	cbz	r7, 8007cc6 <_strtod_l+0x22e>
 8007c66:	4681      	mov	r9, r0
 8007c68:	463d      	mov	r5, r7
 8007c6a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007c6e:	2b09      	cmp	r3, #9
 8007c70:	d912      	bls.n	8007c98 <_strtod_l+0x200>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e7c4      	b.n	8007c00 <_strtod_l+0x168>
 8007c76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c78:	3001      	adds	r0, #1
 8007c7a:	1c5a      	adds	r2, r3, #1
 8007c7c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c7e:	785a      	ldrb	r2, [r3, #1]
 8007c80:	2a30      	cmp	r2, #48	@ 0x30
 8007c82:	d0f8      	beq.n	8007c76 <_strtod_l+0x1de>
 8007c84:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007c88:	2b08      	cmp	r3, #8
 8007c8a:	f200 84cb 	bhi.w	8008624 <_strtod_l+0xb8c>
 8007c8e:	4681      	mov	r9, r0
 8007c90:	2000      	movs	r0, #0
 8007c92:	4605      	mov	r5, r0
 8007c94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c96:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c98:	3a30      	subs	r2, #48	@ 0x30
 8007c9a:	f100 0301 	add.w	r3, r0, #1
 8007c9e:	d02a      	beq.n	8007cf6 <_strtod_l+0x25e>
 8007ca0:	4499      	add	r9, r3
 8007ca2:	210a      	movs	r1, #10
 8007ca4:	462b      	mov	r3, r5
 8007ca6:	eb00 0c05 	add.w	ip, r0, r5
 8007caa:	4563      	cmp	r3, ip
 8007cac:	d10d      	bne.n	8007cca <_strtod_l+0x232>
 8007cae:	1c69      	adds	r1, r5, #1
 8007cb0:	4401      	add	r1, r0
 8007cb2:	4428      	add	r0, r5
 8007cb4:	2808      	cmp	r0, #8
 8007cb6:	dc16      	bgt.n	8007ce6 <_strtod_l+0x24e>
 8007cb8:	230a      	movs	r3, #10
 8007cba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007cbc:	fb03 2300 	mla	r3, r3, r0, r2
 8007cc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e018      	b.n	8007cf8 <_strtod_l+0x260>
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	e7da      	b.n	8007c80 <_strtod_l+0x1e8>
 8007cca:	2b08      	cmp	r3, #8
 8007ccc:	f103 0301 	add.w	r3, r3, #1
 8007cd0:	dc03      	bgt.n	8007cda <_strtod_l+0x242>
 8007cd2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007cd4:	434e      	muls	r6, r1
 8007cd6:	960a      	str	r6, [sp, #40]	@ 0x28
 8007cd8:	e7e7      	b.n	8007caa <_strtod_l+0x212>
 8007cda:	2b10      	cmp	r3, #16
 8007cdc:	bfde      	ittt	le
 8007cde:	9e08      	ldrle	r6, [sp, #32]
 8007ce0:	434e      	mulle	r6, r1
 8007ce2:	9608      	strle	r6, [sp, #32]
 8007ce4:	e7e1      	b.n	8007caa <_strtod_l+0x212>
 8007ce6:	280f      	cmp	r0, #15
 8007ce8:	dceb      	bgt.n	8007cc2 <_strtod_l+0x22a>
 8007cea:	230a      	movs	r3, #10
 8007cec:	9808      	ldr	r0, [sp, #32]
 8007cee:	fb03 2300 	mla	r3, r3, r0, r2
 8007cf2:	9308      	str	r3, [sp, #32]
 8007cf4:	e7e5      	b.n	8007cc2 <_strtod_l+0x22a>
 8007cf6:	4629      	mov	r1, r5
 8007cf8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007cfa:	460d      	mov	r5, r1
 8007cfc:	1c50      	adds	r0, r2, #1
 8007cfe:	9019      	str	r0, [sp, #100]	@ 0x64
 8007d00:	7852      	ldrb	r2, [r2, #1]
 8007d02:	4618      	mov	r0, r3
 8007d04:	e7b1      	b.n	8007c6a <_strtod_l+0x1d2>
 8007d06:	f04f 0900 	mov.w	r9, #0
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e77d      	b.n	8007c0a <_strtod_l+0x172>
 8007d0e:	f04f 0c00 	mov.w	ip, #0
 8007d12:	1ca2      	adds	r2, r4, #2
 8007d14:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d16:	78a2      	ldrb	r2, [r4, #2]
 8007d18:	e785      	b.n	8007c26 <_strtod_l+0x18e>
 8007d1a:	f04f 0c01 	mov.w	ip, #1
 8007d1e:	e7f8      	b.n	8007d12 <_strtod_l+0x27a>
 8007d20:	0800a638 	.word	0x0800a638
 8007d24:	7ff00000 	.word	0x7ff00000
 8007d28:	0800a620 	.word	0x0800a620
 8007d2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d2e:	1c51      	adds	r1, r2, #1
 8007d30:	9119      	str	r1, [sp, #100]	@ 0x64
 8007d32:	7852      	ldrb	r2, [r2, #1]
 8007d34:	2a30      	cmp	r2, #48	@ 0x30
 8007d36:	d0f9      	beq.n	8007d2c <_strtod_l+0x294>
 8007d38:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007d3c:	2908      	cmp	r1, #8
 8007d3e:	f63f af78 	bhi.w	8007c32 <_strtod_l+0x19a>
 8007d42:	f04f 080a 	mov.w	r8, #10
 8007d46:	3a30      	subs	r2, #48	@ 0x30
 8007d48:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007d4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d50:	1c56      	adds	r6, r2, #1
 8007d52:	9619      	str	r6, [sp, #100]	@ 0x64
 8007d54:	7852      	ldrb	r2, [r2, #1]
 8007d56:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007d5a:	f1be 0f09 	cmp.w	lr, #9
 8007d5e:	d939      	bls.n	8007dd4 <_strtod_l+0x33c>
 8007d60:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007d62:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007d66:	1a76      	subs	r6, r6, r1
 8007d68:	2e08      	cmp	r6, #8
 8007d6a:	dc03      	bgt.n	8007d74 <_strtod_l+0x2dc>
 8007d6c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007d6e:	4588      	cmp	r8, r1
 8007d70:	bfa8      	it	ge
 8007d72:	4688      	movge	r8, r1
 8007d74:	f1bc 0f00 	cmp.w	ip, #0
 8007d78:	d001      	beq.n	8007d7e <_strtod_l+0x2e6>
 8007d7a:	f1c8 0800 	rsb	r8, r8, #0
 8007d7e:	2d00      	cmp	r5, #0
 8007d80:	d14e      	bne.n	8007e20 <_strtod_l+0x388>
 8007d82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d84:	4308      	orrs	r0, r1
 8007d86:	f47f aec0 	bne.w	8007b0a <_strtod_l+0x72>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f47f aed6 	bne.w	8007b3c <_strtod_l+0xa4>
 8007d90:	2a69      	cmp	r2, #105	@ 0x69
 8007d92:	d028      	beq.n	8007de6 <_strtod_l+0x34e>
 8007d94:	dc25      	bgt.n	8007de2 <_strtod_l+0x34a>
 8007d96:	2a49      	cmp	r2, #73	@ 0x49
 8007d98:	d025      	beq.n	8007de6 <_strtod_l+0x34e>
 8007d9a:	2a4e      	cmp	r2, #78	@ 0x4e
 8007d9c:	f47f aece 	bne.w	8007b3c <_strtod_l+0xa4>
 8007da0:	499a      	ldr	r1, [pc, #616]	@ (800800c <_strtod_l+0x574>)
 8007da2:	a819      	add	r0, sp, #100	@ 0x64
 8007da4:	f001 ff2c 	bl	8009c00 <__match>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	f43f aec7 	beq.w	8007b3c <_strtod_l+0xa4>
 8007dae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b28      	cmp	r3, #40	@ 0x28
 8007db4:	d12e      	bne.n	8007e14 <_strtod_l+0x37c>
 8007db6:	4996      	ldr	r1, [pc, #600]	@ (8008010 <_strtod_l+0x578>)
 8007db8:	aa1c      	add	r2, sp, #112	@ 0x70
 8007dba:	a819      	add	r0, sp, #100	@ 0x64
 8007dbc:	f001 ff34 	bl	8009c28 <__hexnan>
 8007dc0:	2805      	cmp	r0, #5
 8007dc2:	d127      	bne.n	8007e14 <_strtod_l+0x37c>
 8007dc4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007dc6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007dca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007dce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007dd2:	e69a      	b.n	8007b0a <_strtod_l+0x72>
 8007dd4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007dd6:	fb08 2101 	mla	r1, r8, r1, r2
 8007dda:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007dde:	920e      	str	r2, [sp, #56]	@ 0x38
 8007de0:	e7b5      	b.n	8007d4e <_strtod_l+0x2b6>
 8007de2:	2a6e      	cmp	r2, #110	@ 0x6e
 8007de4:	e7da      	b.n	8007d9c <_strtod_l+0x304>
 8007de6:	498b      	ldr	r1, [pc, #556]	@ (8008014 <_strtod_l+0x57c>)
 8007de8:	a819      	add	r0, sp, #100	@ 0x64
 8007dea:	f001 ff09 	bl	8009c00 <__match>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	f43f aea4 	beq.w	8007b3c <_strtod_l+0xa4>
 8007df4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007df6:	4988      	ldr	r1, [pc, #544]	@ (8008018 <_strtod_l+0x580>)
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	a819      	add	r0, sp, #100	@ 0x64
 8007dfc:	9319      	str	r3, [sp, #100]	@ 0x64
 8007dfe:	f001 feff 	bl	8009c00 <__match>
 8007e02:	b910      	cbnz	r0, 8007e0a <_strtod_l+0x372>
 8007e04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e06:	3301      	adds	r3, #1
 8007e08:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e0a:	f04f 0a00 	mov.w	sl, #0
 8007e0e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800801c <_strtod_l+0x584>
 8007e12:	e67a      	b.n	8007b0a <_strtod_l+0x72>
 8007e14:	4882      	ldr	r0, [pc, #520]	@ (8008020 <_strtod_l+0x588>)
 8007e16:	f001 fc31 	bl	800967c <nan>
 8007e1a:	4682      	mov	sl, r0
 8007e1c:	468b      	mov	fp, r1
 8007e1e:	e674      	b.n	8007b0a <_strtod_l+0x72>
 8007e20:	eba8 0309 	sub.w	r3, r8, r9
 8007e24:	2f00      	cmp	r7, #0
 8007e26:	bf08      	it	eq
 8007e28:	462f      	moveq	r7, r5
 8007e2a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e2c:	2d10      	cmp	r5, #16
 8007e2e:	462c      	mov	r4, r5
 8007e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e32:	bfa8      	it	ge
 8007e34:	2410      	movge	r4, #16
 8007e36:	f7f8 fad5 	bl	80003e4 <__aeabi_ui2d>
 8007e3a:	2d09      	cmp	r5, #9
 8007e3c:	4682      	mov	sl, r0
 8007e3e:	468b      	mov	fp, r1
 8007e40:	dc11      	bgt.n	8007e66 <_strtod_l+0x3ce>
 8007e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f43f ae60 	beq.w	8007b0a <_strtod_l+0x72>
 8007e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e4c:	dd76      	ble.n	8007f3c <_strtod_l+0x4a4>
 8007e4e:	2b16      	cmp	r3, #22
 8007e50:	dc5d      	bgt.n	8007f0e <_strtod_l+0x476>
 8007e52:	4974      	ldr	r1, [pc, #464]	@ (8008024 <_strtod_l+0x58c>)
 8007e54:	4652      	mov	r2, sl
 8007e56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e5a:	465b      	mov	r3, fp
 8007e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e60:	f7f8 fb3a 	bl	80004d8 <__aeabi_dmul>
 8007e64:	e7d9      	b.n	8007e1a <_strtod_l+0x382>
 8007e66:	4b6f      	ldr	r3, [pc, #444]	@ (8008024 <_strtod_l+0x58c>)
 8007e68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007e70:	f7f8 fb32 	bl	80004d8 <__aeabi_dmul>
 8007e74:	4682      	mov	sl, r0
 8007e76:	9808      	ldr	r0, [sp, #32]
 8007e78:	468b      	mov	fp, r1
 8007e7a:	f7f8 fab3 	bl	80003e4 <__aeabi_ui2d>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4650      	mov	r0, sl
 8007e84:	4659      	mov	r1, fp
 8007e86:	f7f8 f971 	bl	800016c <__adddf3>
 8007e8a:	2d0f      	cmp	r5, #15
 8007e8c:	4682      	mov	sl, r0
 8007e8e:	468b      	mov	fp, r1
 8007e90:	ddd7      	ble.n	8007e42 <_strtod_l+0x3aa>
 8007e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e94:	1b2c      	subs	r4, r5, r4
 8007e96:	441c      	add	r4, r3
 8007e98:	2c00      	cmp	r4, #0
 8007e9a:	f340 8096 	ble.w	8007fca <_strtod_l+0x532>
 8007e9e:	f014 030f 	ands.w	r3, r4, #15
 8007ea2:	d00a      	beq.n	8007eba <_strtod_l+0x422>
 8007ea4:	495f      	ldr	r1, [pc, #380]	@ (8008024 <_strtod_l+0x58c>)
 8007ea6:	4652      	mov	r2, sl
 8007ea8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eb0:	465b      	mov	r3, fp
 8007eb2:	f7f8 fb11 	bl	80004d8 <__aeabi_dmul>
 8007eb6:	4682      	mov	sl, r0
 8007eb8:	468b      	mov	fp, r1
 8007eba:	f034 040f 	bics.w	r4, r4, #15
 8007ebe:	d073      	beq.n	8007fa8 <_strtod_l+0x510>
 8007ec0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007ec4:	dd48      	ble.n	8007f58 <_strtod_l+0x4c0>
 8007ec6:	2400      	movs	r4, #0
 8007ec8:	46a0      	mov	r8, r4
 8007eca:	46a1      	mov	r9, r4
 8007ecc:	940a      	str	r4, [sp, #40]	@ 0x28
 8007ece:	2322      	movs	r3, #34	@ 0x22
 8007ed0:	f04f 0a00 	mov.w	sl, #0
 8007ed4:	9a05      	ldr	r2, [sp, #20]
 8007ed6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800801c <_strtod_l+0x584>
 8007eda:	6013      	str	r3, [r2, #0]
 8007edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f43f ae13 	beq.w	8007b0a <_strtod_l+0x72>
 8007ee4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ee6:	9805      	ldr	r0, [sp, #20]
 8007ee8:	f7ff f94c 	bl	8007184 <_Bfree>
 8007eec:	4649      	mov	r1, r9
 8007eee:	9805      	ldr	r0, [sp, #20]
 8007ef0:	f7ff f948 	bl	8007184 <_Bfree>
 8007ef4:	4641      	mov	r1, r8
 8007ef6:	9805      	ldr	r0, [sp, #20]
 8007ef8:	f7ff f944 	bl	8007184 <_Bfree>
 8007efc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007efe:	9805      	ldr	r0, [sp, #20]
 8007f00:	f7ff f940 	bl	8007184 <_Bfree>
 8007f04:	4621      	mov	r1, r4
 8007f06:	9805      	ldr	r0, [sp, #20]
 8007f08:	f7ff f93c 	bl	8007184 <_Bfree>
 8007f0c:	e5fd      	b.n	8007b0a <_strtod_l+0x72>
 8007f0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007f14:	4293      	cmp	r3, r2
 8007f16:	dbbc      	blt.n	8007e92 <_strtod_l+0x3fa>
 8007f18:	4c42      	ldr	r4, [pc, #264]	@ (8008024 <_strtod_l+0x58c>)
 8007f1a:	f1c5 050f 	rsb	r5, r5, #15
 8007f1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007f22:	4652      	mov	r2, sl
 8007f24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f28:	465b      	mov	r3, fp
 8007f2a:	f7f8 fad5 	bl	80004d8 <__aeabi_dmul>
 8007f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f30:	1b5d      	subs	r5, r3, r5
 8007f32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007f36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f3a:	e791      	b.n	8007e60 <_strtod_l+0x3c8>
 8007f3c:	3316      	adds	r3, #22
 8007f3e:	dba8      	blt.n	8007e92 <_strtod_l+0x3fa>
 8007f40:	4b38      	ldr	r3, [pc, #224]	@ (8008024 <_strtod_l+0x58c>)
 8007f42:	eba9 0808 	sub.w	r8, r9, r8
 8007f46:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007f4a:	4650      	mov	r0, sl
 8007f4c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007f50:	4659      	mov	r1, fp
 8007f52:	f7f8 fbeb 	bl	800072c <__aeabi_ddiv>
 8007f56:	e760      	b.n	8007e1a <_strtod_l+0x382>
 8007f58:	4b33      	ldr	r3, [pc, #204]	@ (8008028 <_strtod_l+0x590>)
 8007f5a:	4650      	mov	r0, sl
 8007f5c:	9308      	str	r3, [sp, #32]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	4659      	mov	r1, fp
 8007f62:	461e      	mov	r6, r3
 8007f64:	1124      	asrs	r4, r4, #4
 8007f66:	2c01      	cmp	r4, #1
 8007f68:	dc21      	bgt.n	8007fae <_strtod_l+0x516>
 8007f6a:	b10b      	cbz	r3, 8007f70 <_strtod_l+0x4d8>
 8007f6c:	4682      	mov	sl, r0
 8007f6e:	468b      	mov	fp, r1
 8007f70:	492d      	ldr	r1, [pc, #180]	@ (8008028 <_strtod_l+0x590>)
 8007f72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007f76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007f7a:	4652      	mov	r2, sl
 8007f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f80:	465b      	mov	r3, fp
 8007f82:	f7f8 faa9 	bl	80004d8 <__aeabi_dmul>
 8007f86:	4b25      	ldr	r3, [pc, #148]	@ (800801c <_strtod_l+0x584>)
 8007f88:	460a      	mov	r2, r1
 8007f8a:	400b      	ands	r3, r1
 8007f8c:	4927      	ldr	r1, [pc, #156]	@ (800802c <_strtod_l+0x594>)
 8007f8e:	4682      	mov	sl, r0
 8007f90:	428b      	cmp	r3, r1
 8007f92:	d898      	bhi.n	8007ec6 <_strtod_l+0x42e>
 8007f94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007f98:	428b      	cmp	r3, r1
 8007f9a:	bf86      	itte	hi
 8007f9c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007fa0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008030 <_strtod_l+0x598>
 8007fa4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007fa8:	2300      	movs	r3, #0
 8007faa:	9308      	str	r3, [sp, #32]
 8007fac:	e07a      	b.n	80080a4 <_strtod_l+0x60c>
 8007fae:	07e2      	lsls	r2, r4, #31
 8007fb0:	d505      	bpl.n	8007fbe <_strtod_l+0x526>
 8007fb2:	9b08      	ldr	r3, [sp, #32]
 8007fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb8:	f7f8 fa8e 	bl	80004d8 <__aeabi_dmul>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	9a08      	ldr	r2, [sp, #32]
 8007fc0:	3601      	adds	r6, #1
 8007fc2:	3208      	adds	r2, #8
 8007fc4:	1064      	asrs	r4, r4, #1
 8007fc6:	9208      	str	r2, [sp, #32]
 8007fc8:	e7cd      	b.n	8007f66 <_strtod_l+0x4ce>
 8007fca:	d0ed      	beq.n	8007fa8 <_strtod_l+0x510>
 8007fcc:	4264      	negs	r4, r4
 8007fce:	f014 020f 	ands.w	r2, r4, #15
 8007fd2:	d00a      	beq.n	8007fea <_strtod_l+0x552>
 8007fd4:	4b13      	ldr	r3, [pc, #76]	@ (8008024 <_strtod_l+0x58c>)
 8007fd6:	4650      	mov	r0, sl
 8007fd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fdc:	4659      	mov	r1, fp
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	f7f8 fba3 	bl	800072c <__aeabi_ddiv>
 8007fe6:	4682      	mov	sl, r0
 8007fe8:	468b      	mov	fp, r1
 8007fea:	1124      	asrs	r4, r4, #4
 8007fec:	d0dc      	beq.n	8007fa8 <_strtod_l+0x510>
 8007fee:	2c1f      	cmp	r4, #31
 8007ff0:	dd20      	ble.n	8008034 <_strtod_l+0x59c>
 8007ff2:	2400      	movs	r4, #0
 8007ff4:	46a0      	mov	r8, r4
 8007ff6:	46a1      	mov	r9, r4
 8007ff8:	940a      	str	r4, [sp, #40]	@ 0x28
 8007ffa:	2322      	movs	r3, #34	@ 0x22
 8007ffc:	9a05      	ldr	r2, [sp, #20]
 8007ffe:	f04f 0a00 	mov.w	sl, #0
 8008002:	f04f 0b00 	mov.w	fp, #0
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	e768      	b.n	8007edc <_strtod_l+0x444>
 800800a:	bf00      	nop
 800800c:	0800a413 	.word	0x0800a413
 8008010:	0800a624 	.word	0x0800a624
 8008014:	0800a40b 	.word	0x0800a40b
 8008018:	0800a440 	.word	0x0800a440
 800801c:	7ff00000 	.word	0x7ff00000
 8008020:	0800a7e8 	.word	0x0800a7e8
 8008024:	0800a558 	.word	0x0800a558
 8008028:	0800a530 	.word	0x0800a530
 800802c:	7ca00000 	.word	0x7ca00000
 8008030:	7fefffff 	.word	0x7fefffff
 8008034:	f014 0310 	ands.w	r3, r4, #16
 8008038:	bf18      	it	ne
 800803a:	236a      	movne	r3, #106	@ 0x6a
 800803c:	4650      	mov	r0, sl
 800803e:	9308      	str	r3, [sp, #32]
 8008040:	4659      	mov	r1, fp
 8008042:	2300      	movs	r3, #0
 8008044:	4ea9      	ldr	r6, [pc, #676]	@ (80082ec <_strtod_l+0x854>)
 8008046:	07e2      	lsls	r2, r4, #31
 8008048:	d504      	bpl.n	8008054 <_strtod_l+0x5bc>
 800804a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800804e:	f7f8 fa43 	bl	80004d8 <__aeabi_dmul>
 8008052:	2301      	movs	r3, #1
 8008054:	1064      	asrs	r4, r4, #1
 8008056:	f106 0608 	add.w	r6, r6, #8
 800805a:	d1f4      	bne.n	8008046 <_strtod_l+0x5ae>
 800805c:	b10b      	cbz	r3, 8008062 <_strtod_l+0x5ca>
 800805e:	4682      	mov	sl, r0
 8008060:	468b      	mov	fp, r1
 8008062:	9b08      	ldr	r3, [sp, #32]
 8008064:	b1b3      	cbz	r3, 8008094 <_strtod_l+0x5fc>
 8008066:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800806a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800806e:	2b00      	cmp	r3, #0
 8008070:	4659      	mov	r1, fp
 8008072:	dd0f      	ble.n	8008094 <_strtod_l+0x5fc>
 8008074:	2b1f      	cmp	r3, #31
 8008076:	dd57      	ble.n	8008128 <_strtod_l+0x690>
 8008078:	2b34      	cmp	r3, #52	@ 0x34
 800807a:	bfd8      	it	le
 800807c:	f04f 33ff 	movle.w	r3, #4294967295
 8008080:	f04f 0a00 	mov.w	sl, #0
 8008084:	bfcf      	iteee	gt
 8008086:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800808a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800808e:	4093      	lslle	r3, r2
 8008090:	ea03 0b01 	andle.w	fp, r3, r1
 8008094:	2200      	movs	r2, #0
 8008096:	2300      	movs	r3, #0
 8008098:	4650      	mov	r0, sl
 800809a:	4659      	mov	r1, fp
 800809c:	f7f8 fc84 	bl	80009a8 <__aeabi_dcmpeq>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	d1a6      	bne.n	8007ff2 <_strtod_l+0x55a>
 80080a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080a6:	463a      	mov	r2, r7
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80080ac:	462b      	mov	r3, r5
 80080ae:	9805      	ldr	r0, [sp, #20]
 80080b0:	f7ff f8d0 	bl	8007254 <__s2b>
 80080b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80080b6:	2800      	cmp	r0, #0
 80080b8:	f43f af05 	beq.w	8007ec6 <_strtod_l+0x42e>
 80080bc:	2400      	movs	r4, #0
 80080be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080c0:	eba9 0308 	sub.w	r3, r9, r8
 80080c4:	2a00      	cmp	r2, #0
 80080c6:	bfa8      	it	ge
 80080c8:	2300      	movge	r3, #0
 80080ca:	46a0      	mov	r8, r4
 80080cc:	9312      	str	r3, [sp, #72]	@ 0x48
 80080ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80080d2:	9316      	str	r3, [sp, #88]	@ 0x58
 80080d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080d6:	9805      	ldr	r0, [sp, #20]
 80080d8:	6859      	ldr	r1, [r3, #4]
 80080da:	f7ff f813 	bl	8007104 <_Balloc>
 80080de:	4681      	mov	r9, r0
 80080e0:	2800      	cmp	r0, #0
 80080e2:	f43f aef4 	beq.w	8007ece <_strtod_l+0x436>
 80080e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080e8:	300c      	adds	r0, #12
 80080ea:	691a      	ldr	r2, [r3, #16]
 80080ec:	f103 010c 	add.w	r1, r3, #12
 80080f0:	3202      	adds	r2, #2
 80080f2:	0092      	lsls	r2, r2, #2
 80080f4:	f7fe f8a3 	bl	800623e <memcpy>
 80080f8:	ab1c      	add	r3, sp, #112	@ 0x70
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	4652      	mov	r2, sl
 8008102:	465b      	mov	r3, fp
 8008104:	9805      	ldr	r0, [sp, #20]
 8008106:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800810a:	f7ff fbd5 	bl	80078b8 <__d2b>
 800810e:	901a      	str	r0, [sp, #104]	@ 0x68
 8008110:	2800      	cmp	r0, #0
 8008112:	f43f aedc 	beq.w	8007ece <_strtod_l+0x436>
 8008116:	2101      	movs	r1, #1
 8008118:	9805      	ldr	r0, [sp, #20]
 800811a:	f7ff f931 	bl	8007380 <__i2b>
 800811e:	4680      	mov	r8, r0
 8008120:	b948      	cbnz	r0, 8008136 <_strtod_l+0x69e>
 8008122:	f04f 0800 	mov.w	r8, #0
 8008126:	e6d2      	b.n	8007ece <_strtod_l+0x436>
 8008128:	f04f 32ff 	mov.w	r2, #4294967295
 800812c:	fa02 f303 	lsl.w	r3, r2, r3
 8008130:	ea03 0a0a 	and.w	sl, r3, sl
 8008134:	e7ae      	b.n	8008094 <_strtod_l+0x5fc>
 8008136:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008138:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800813a:	2d00      	cmp	r5, #0
 800813c:	bfab      	itete	ge
 800813e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008140:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008142:	18ef      	addge	r7, r5, r3
 8008144:	1b5e      	sublt	r6, r3, r5
 8008146:	9b08      	ldr	r3, [sp, #32]
 8008148:	bfa8      	it	ge
 800814a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800814c:	eba5 0503 	sub.w	r5, r5, r3
 8008150:	4415      	add	r5, r2
 8008152:	4b67      	ldr	r3, [pc, #412]	@ (80082f0 <_strtod_l+0x858>)
 8008154:	f105 35ff 	add.w	r5, r5, #4294967295
 8008158:	bfb8      	it	lt
 800815a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800815c:	429d      	cmp	r5, r3
 800815e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008162:	da50      	bge.n	8008206 <_strtod_l+0x76e>
 8008164:	1b5b      	subs	r3, r3, r5
 8008166:	2b1f      	cmp	r3, #31
 8008168:	f04f 0101 	mov.w	r1, #1
 800816c:	eba2 0203 	sub.w	r2, r2, r3
 8008170:	dc3d      	bgt.n	80081ee <_strtod_l+0x756>
 8008172:	fa01 f303 	lsl.w	r3, r1, r3
 8008176:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008178:	2300      	movs	r3, #0
 800817a:	9310      	str	r3, [sp, #64]	@ 0x40
 800817c:	18bd      	adds	r5, r7, r2
 800817e:	9b08      	ldr	r3, [sp, #32]
 8008180:	42af      	cmp	r7, r5
 8008182:	4416      	add	r6, r2
 8008184:	441e      	add	r6, r3
 8008186:	463b      	mov	r3, r7
 8008188:	bfa8      	it	ge
 800818a:	462b      	movge	r3, r5
 800818c:	42b3      	cmp	r3, r6
 800818e:	bfa8      	it	ge
 8008190:	4633      	movge	r3, r6
 8008192:	2b00      	cmp	r3, #0
 8008194:	bfc2      	ittt	gt
 8008196:	1aed      	subgt	r5, r5, r3
 8008198:	1af6      	subgt	r6, r6, r3
 800819a:	1aff      	subgt	r7, r7, r3
 800819c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800819e:	2b00      	cmp	r3, #0
 80081a0:	dd16      	ble.n	80081d0 <_strtod_l+0x738>
 80081a2:	4641      	mov	r1, r8
 80081a4:	461a      	mov	r2, r3
 80081a6:	9805      	ldr	r0, [sp, #20]
 80081a8:	f7ff f9a8 	bl	80074fc <__pow5mult>
 80081ac:	4680      	mov	r8, r0
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d0b7      	beq.n	8008122 <_strtod_l+0x68a>
 80081b2:	4601      	mov	r1, r0
 80081b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80081b6:	9805      	ldr	r0, [sp, #20]
 80081b8:	f7ff f8f8 	bl	80073ac <__multiply>
 80081bc:	900e      	str	r0, [sp, #56]	@ 0x38
 80081be:	2800      	cmp	r0, #0
 80081c0:	f43f ae85 	beq.w	8007ece <_strtod_l+0x436>
 80081c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081c6:	9805      	ldr	r0, [sp, #20]
 80081c8:	f7fe ffdc 	bl	8007184 <_Bfree>
 80081cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80081d0:	2d00      	cmp	r5, #0
 80081d2:	dc1d      	bgt.n	8008210 <_strtod_l+0x778>
 80081d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	dd23      	ble.n	8008222 <_strtod_l+0x78a>
 80081da:	4649      	mov	r1, r9
 80081dc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80081de:	9805      	ldr	r0, [sp, #20]
 80081e0:	f7ff f98c 	bl	80074fc <__pow5mult>
 80081e4:	4681      	mov	r9, r0
 80081e6:	b9e0      	cbnz	r0, 8008222 <_strtod_l+0x78a>
 80081e8:	f04f 0900 	mov.w	r9, #0
 80081ec:	e66f      	b.n	8007ece <_strtod_l+0x436>
 80081ee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80081f2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80081f6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80081fa:	35e2      	adds	r5, #226	@ 0xe2
 80081fc:	fa01 f305 	lsl.w	r3, r1, r5
 8008200:	9310      	str	r3, [sp, #64]	@ 0x40
 8008202:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008204:	e7ba      	b.n	800817c <_strtod_l+0x6e4>
 8008206:	2300      	movs	r3, #0
 8008208:	9310      	str	r3, [sp, #64]	@ 0x40
 800820a:	2301      	movs	r3, #1
 800820c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800820e:	e7b5      	b.n	800817c <_strtod_l+0x6e4>
 8008210:	462a      	mov	r2, r5
 8008212:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008214:	9805      	ldr	r0, [sp, #20]
 8008216:	f7ff f9cb 	bl	80075b0 <__lshift>
 800821a:	901a      	str	r0, [sp, #104]	@ 0x68
 800821c:	2800      	cmp	r0, #0
 800821e:	d1d9      	bne.n	80081d4 <_strtod_l+0x73c>
 8008220:	e655      	b.n	8007ece <_strtod_l+0x436>
 8008222:	2e00      	cmp	r6, #0
 8008224:	dd07      	ble.n	8008236 <_strtod_l+0x79e>
 8008226:	4649      	mov	r1, r9
 8008228:	4632      	mov	r2, r6
 800822a:	9805      	ldr	r0, [sp, #20]
 800822c:	f7ff f9c0 	bl	80075b0 <__lshift>
 8008230:	4681      	mov	r9, r0
 8008232:	2800      	cmp	r0, #0
 8008234:	d0d8      	beq.n	80081e8 <_strtod_l+0x750>
 8008236:	2f00      	cmp	r7, #0
 8008238:	dd08      	ble.n	800824c <_strtod_l+0x7b4>
 800823a:	4641      	mov	r1, r8
 800823c:	463a      	mov	r2, r7
 800823e:	9805      	ldr	r0, [sp, #20]
 8008240:	f7ff f9b6 	bl	80075b0 <__lshift>
 8008244:	4680      	mov	r8, r0
 8008246:	2800      	cmp	r0, #0
 8008248:	f43f ae41 	beq.w	8007ece <_strtod_l+0x436>
 800824c:	464a      	mov	r2, r9
 800824e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008250:	9805      	ldr	r0, [sp, #20]
 8008252:	f7ff fa35 	bl	80076c0 <__mdiff>
 8008256:	4604      	mov	r4, r0
 8008258:	2800      	cmp	r0, #0
 800825a:	f43f ae38 	beq.w	8007ece <_strtod_l+0x436>
 800825e:	68c3      	ldr	r3, [r0, #12]
 8008260:	4641      	mov	r1, r8
 8008262:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008264:	2300      	movs	r3, #0
 8008266:	60c3      	str	r3, [r0, #12]
 8008268:	f7ff fa0e 	bl	8007688 <__mcmp>
 800826c:	2800      	cmp	r0, #0
 800826e:	da45      	bge.n	80082fc <_strtod_l+0x864>
 8008270:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008272:	ea53 030a 	orrs.w	r3, r3, sl
 8008276:	d16b      	bne.n	8008350 <_strtod_l+0x8b8>
 8008278:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800827c:	2b00      	cmp	r3, #0
 800827e:	d167      	bne.n	8008350 <_strtod_l+0x8b8>
 8008280:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008284:	0d1b      	lsrs	r3, r3, #20
 8008286:	051b      	lsls	r3, r3, #20
 8008288:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800828c:	d960      	bls.n	8008350 <_strtod_l+0x8b8>
 800828e:	6963      	ldr	r3, [r4, #20]
 8008290:	b913      	cbnz	r3, 8008298 <_strtod_l+0x800>
 8008292:	6923      	ldr	r3, [r4, #16]
 8008294:	2b01      	cmp	r3, #1
 8008296:	dd5b      	ble.n	8008350 <_strtod_l+0x8b8>
 8008298:	4621      	mov	r1, r4
 800829a:	2201      	movs	r2, #1
 800829c:	9805      	ldr	r0, [sp, #20]
 800829e:	f7ff f987 	bl	80075b0 <__lshift>
 80082a2:	4641      	mov	r1, r8
 80082a4:	4604      	mov	r4, r0
 80082a6:	f7ff f9ef 	bl	8007688 <__mcmp>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	dd50      	ble.n	8008350 <_strtod_l+0x8b8>
 80082ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082b2:	9a08      	ldr	r2, [sp, #32]
 80082b4:	0d1b      	lsrs	r3, r3, #20
 80082b6:	051b      	lsls	r3, r3, #20
 80082b8:	2a00      	cmp	r2, #0
 80082ba:	d06a      	beq.n	8008392 <_strtod_l+0x8fa>
 80082bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80082c0:	d867      	bhi.n	8008392 <_strtod_l+0x8fa>
 80082c2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80082c6:	f67f ae98 	bls.w	8007ffa <_strtod_l+0x562>
 80082ca:	4650      	mov	r0, sl
 80082cc:	4659      	mov	r1, fp
 80082ce:	4b09      	ldr	r3, [pc, #36]	@ (80082f4 <_strtod_l+0x85c>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	f7f8 f901 	bl	80004d8 <__aeabi_dmul>
 80082d6:	4b08      	ldr	r3, [pc, #32]	@ (80082f8 <_strtod_l+0x860>)
 80082d8:	4682      	mov	sl, r0
 80082da:	400b      	ands	r3, r1
 80082dc:	468b      	mov	fp, r1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f47f ae00 	bne.w	8007ee4 <_strtod_l+0x44c>
 80082e4:	2322      	movs	r3, #34	@ 0x22
 80082e6:	9a05      	ldr	r2, [sp, #20]
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	e5fb      	b.n	8007ee4 <_strtod_l+0x44c>
 80082ec:	0800a650 	.word	0x0800a650
 80082f0:	fffffc02 	.word	0xfffffc02
 80082f4:	39500000 	.word	0x39500000
 80082f8:	7ff00000 	.word	0x7ff00000
 80082fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008300:	d165      	bne.n	80083ce <_strtod_l+0x936>
 8008302:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008304:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008308:	b35a      	cbz	r2, 8008362 <_strtod_l+0x8ca>
 800830a:	4a99      	ldr	r2, [pc, #612]	@ (8008570 <_strtod_l+0xad8>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d12b      	bne.n	8008368 <_strtod_l+0x8d0>
 8008310:	9b08      	ldr	r3, [sp, #32]
 8008312:	4651      	mov	r1, sl
 8008314:	b303      	cbz	r3, 8008358 <_strtod_l+0x8c0>
 8008316:	465a      	mov	r2, fp
 8008318:	4b96      	ldr	r3, [pc, #600]	@ (8008574 <_strtod_l+0xadc>)
 800831a:	4013      	ands	r3, r2
 800831c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008320:	f04f 32ff 	mov.w	r2, #4294967295
 8008324:	d81b      	bhi.n	800835e <_strtod_l+0x8c6>
 8008326:	0d1b      	lsrs	r3, r3, #20
 8008328:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800832c:	fa02 f303 	lsl.w	r3, r2, r3
 8008330:	4299      	cmp	r1, r3
 8008332:	d119      	bne.n	8008368 <_strtod_l+0x8d0>
 8008334:	4b90      	ldr	r3, [pc, #576]	@ (8008578 <_strtod_l+0xae0>)
 8008336:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008338:	429a      	cmp	r2, r3
 800833a:	d102      	bne.n	8008342 <_strtod_l+0x8aa>
 800833c:	3101      	adds	r1, #1
 800833e:	f43f adc6 	beq.w	8007ece <_strtod_l+0x436>
 8008342:	f04f 0a00 	mov.w	sl, #0
 8008346:	4b8b      	ldr	r3, [pc, #556]	@ (8008574 <_strtod_l+0xadc>)
 8008348:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800834a:	401a      	ands	r2, r3
 800834c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008350:	9b08      	ldr	r3, [sp, #32]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1b9      	bne.n	80082ca <_strtod_l+0x832>
 8008356:	e5c5      	b.n	8007ee4 <_strtod_l+0x44c>
 8008358:	f04f 33ff 	mov.w	r3, #4294967295
 800835c:	e7e8      	b.n	8008330 <_strtod_l+0x898>
 800835e:	4613      	mov	r3, r2
 8008360:	e7e6      	b.n	8008330 <_strtod_l+0x898>
 8008362:	ea53 030a 	orrs.w	r3, r3, sl
 8008366:	d0a2      	beq.n	80082ae <_strtod_l+0x816>
 8008368:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800836a:	b1db      	cbz	r3, 80083a4 <_strtod_l+0x90c>
 800836c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800836e:	4213      	tst	r3, r2
 8008370:	d0ee      	beq.n	8008350 <_strtod_l+0x8b8>
 8008372:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008374:	4650      	mov	r0, sl
 8008376:	4659      	mov	r1, fp
 8008378:	9a08      	ldr	r2, [sp, #32]
 800837a:	b1bb      	cbz	r3, 80083ac <_strtod_l+0x914>
 800837c:	f7ff fb68 	bl	8007a50 <sulp>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008388:	f7f7 fef0 	bl	800016c <__adddf3>
 800838c:	4682      	mov	sl, r0
 800838e:	468b      	mov	fp, r1
 8008390:	e7de      	b.n	8008350 <_strtod_l+0x8b8>
 8008392:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008396:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800839a:	f04f 3aff 	mov.w	sl, #4294967295
 800839e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80083a2:	e7d5      	b.n	8008350 <_strtod_l+0x8b8>
 80083a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083a6:	ea13 0f0a 	tst.w	r3, sl
 80083aa:	e7e1      	b.n	8008370 <_strtod_l+0x8d8>
 80083ac:	f7ff fb50 	bl	8007a50 <sulp>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083b8:	f7f7 fed6 	bl	8000168 <__aeabi_dsub>
 80083bc:	2200      	movs	r2, #0
 80083be:	2300      	movs	r3, #0
 80083c0:	4682      	mov	sl, r0
 80083c2:	468b      	mov	fp, r1
 80083c4:	f7f8 faf0 	bl	80009a8 <__aeabi_dcmpeq>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d0c1      	beq.n	8008350 <_strtod_l+0x8b8>
 80083cc:	e615      	b.n	8007ffa <_strtod_l+0x562>
 80083ce:	4641      	mov	r1, r8
 80083d0:	4620      	mov	r0, r4
 80083d2:	f7ff fac9 	bl	8007968 <__ratio>
 80083d6:	2200      	movs	r2, #0
 80083d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80083dc:	4606      	mov	r6, r0
 80083de:	460f      	mov	r7, r1
 80083e0:	f7f8 faf6 	bl	80009d0 <__aeabi_dcmple>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d06d      	beq.n	80084c4 <_strtod_l+0xa2c>
 80083e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d178      	bne.n	80084e0 <_strtod_l+0xa48>
 80083ee:	f1ba 0f00 	cmp.w	sl, #0
 80083f2:	d156      	bne.n	80084a2 <_strtod_l+0xa0a>
 80083f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d158      	bne.n	80084b0 <_strtod_l+0xa18>
 80083fe:	2200      	movs	r2, #0
 8008400:	4630      	mov	r0, r6
 8008402:	4639      	mov	r1, r7
 8008404:	4b5d      	ldr	r3, [pc, #372]	@ (800857c <_strtod_l+0xae4>)
 8008406:	f7f8 fad9 	bl	80009bc <__aeabi_dcmplt>
 800840a:	2800      	cmp	r0, #0
 800840c:	d157      	bne.n	80084be <_strtod_l+0xa26>
 800840e:	4630      	mov	r0, r6
 8008410:	4639      	mov	r1, r7
 8008412:	2200      	movs	r2, #0
 8008414:	4b5a      	ldr	r3, [pc, #360]	@ (8008580 <_strtod_l+0xae8>)
 8008416:	f7f8 f85f 	bl	80004d8 <__aeabi_dmul>
 800841a:	4606      	mov	r6, r0
 800841c:	460f      	mov	r7, r1
 800841e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008422:	9606      	str	r6, [sp, #24]
 8008424:	9307      	str	r3, [sp, #28]
 8008426:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800842a:	4d52      	ldr	r5, [pc, #328]	@ (8008574 <_strtod_l+0xadc>)
 800842c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008430:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008432:	401d      	ands	r5, r3
 8008434:	4b53      	ldr	r3, [pc, #332]	@ (8008584 <_strtod_l+0xaec>)
 8008436:	429d      	cmp	r5, r3
 8008438:	f040 80aa 	bne.w	8008590 <_strtod_l+0xaf8>
 800843c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800843e:	4650      	mov	r0, sl
 8008440:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008444:	4659      	mov	r1, fp
 8008446:	f7ff f9cf 	bl	80077e8 <__ulp>
 800844a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800844e:	f7f8 f843 	bl	80004d8 <__aeabi_dmul>
 8008452:	4652      	mov	r2, sl
 8008454:	465b      	mov	r3, fp
 8008456:	f7f7 fe89 	bl	800016c <__adddf3>
 800845a:	460b      	mov	r3, r1
 800845c:	4945      	ldr	r1, [pc, #276]	@ (8008574 <_strtod_l+0xadc>)
 800845e:	4a4a      	ldr	r2, [pc, #296]	@ (8008588 <_strtod_l+0xaf0>)
 8008460:	4019      	ands	r1, r3
 8008462:	4291      	cmp	r1, r2
 8008464:	4682      	mov	sl, r0
 8008466:	d942      	bls.n	80084ee <_strtod_l+0xa56>
 8008468:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800846a:	4b43      	ldr	r3, [pc, #268]	@ (8008578 <_strtod_l+0xae0>)
 800846c:	429a      	cmp	r2, r3
 800846e:	d103      	bne.n	8008478 <_strtod_l+0x9e0>
 8008470:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008472:	3301      	adds	r3, #1
 8008474:	f43f ad2b 	beq.w	8007ece <_strtod_l+0x436>
 8008478:	f04f 3aff 	mov.w	sl, #4294967295
 800847c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8008578 <_strtod_l+0xae0>
 8008480:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008482:	9805      	ldr	r0, [sp, #20]
 8008484:	f7fe fe7e 	bl	8007184 <_Bfree>
 8008488:	4649      	mov	r1, r9
 800848a:	9805      	ldr	r0, [sp, #20]
 800848c:	f7fe fe7a 	bl	8007184 <_Bfree>
 8008490:	4641      	mov	r1, r8
 8008492:	9805      	ldr	r0, [sp, #20]
 8008494:	f7fe fe76 	bl	8007184 <_Bfree>
 8008498:	4621      	mov	r1, r4
 800849a:	9805      	ldr	r0, [sp, #20]
 800849c:	f7fe fe72 	bl	8007184 <_Bfree>
 80084a0:	e618      	b.n	80080d4 <_strtod_l+0x63c>
 80084a2:	f1ba 0f01 	cmp.w	sl, #1
 80084a6:	d103      	bne.n	80084b0 <_strtod_l+0xa18>
 80084a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f43f ada5 	beq.w	8007ffa <_strtod_l+0x562>
 80084b0:	2200      	movs	r2, #0
 80084b2:	4b36      	ldr	r3, [pc, #216]	@ (800858c <_strtod_l+0xaf4>)
 80084b4:	2600      	movs	r6, #0
 80084b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084ba:	4f30      	ldr	r7, [pc, #192]	@ (800857c <_strtod_l+0xae4>)
 80084bc:	e7b3      	b.n	8008426 <_strtod_l+0x98e>
 80084be:	2600      	movs	r6, #0
 80084c0:	4f2f      	ldr	r7, [pc, #188]	@ (8008580 <_strtod_l+0xae8>)
 80084c2:	e7ac      	b.n	800841e <_strtod_l+0x986>
 80084c4:	4630      	mov	r0, r6
 80084c6:	4639      	mov	r1, r7
 80084c8:	4b2d      	ldr	r3, [pc, #180]	@ (8008580 <_strtod_l+0xae8>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	f7f8 f804 	bl	80004d8 <__aeabi_dmul>
 80084d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084d2:	4606      	mov	r6, r0
 80084d4:	460f      	mov	r7, r1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d0a1      	beq.n	800841e <_strtod_l+0x986>
 80084da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80084de:	e7a2      	b.n	8008426 <_strtod_l+0x98e>
 80084e0:	2200      	movs	r2, #0
 80084e2:	4b26      	ldr	r3, [pc, #152]	@ (800857c <_strtod_l+0xae4>)
 80084e4:	4616      	mov	r6, r2
 80084e6:	461f      	mov	r7, r3
 80084e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084ec:	e79b      	b.n	8008426 <_strtod_l+0x98e>
 80084ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80084f2:	9b08      	ldr	r3, [sp, #32]
 80084f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1c1      	bne.n	8008480 <_strtod_l+0x9e8>
 80084fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008500:	0d1b      	lsrs	r3, r3, #20
 8008502:	051b      	lsls	r3, r3, #20
 8008504:	429d      	cmp	r5, r3
 8008506:	d1bb      	bne.n	8008480 <_strtod_l+0x9e8>
 8008508:	4630      	mov	r0, r6
 800850a:	4639      	mov	r1, r7
 800850c:	f7f8 fe26 	bl	800115c <__aeabi_d2lz>
 8008510:	f7f7 ffb4 	bl	800047c <__aeabi_l2d>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4630      	mov	r0, r6
 800851a:	4639      	mov	r1, r7
 800851c:	f7f7 fe24 	bl	8000168 <__aeabi_dsub>
 8008520:	460b      	mov	r3, r1
 8008522:	4602      	mov	r2, r0
 8008524:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008528:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800852c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800852e:	ea46 060a 	orr.w	r6, r6, sl
 8008532:	431e      	orrs	r6, r3
 8008534:	d069      	beq.n	800860a <_strtod_l+0xb72>
 8008536:	a30a      	add	r3, pc, #40	@ (adr r3, 8008560 <_strtod_l+0xac8>)
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	f7f8 fa3e 	bl	80009bc <__aeabi_dcmplt>
 8008540:	2800      	cmp	r0, #0
 8008542:	f47f accf 	bne.w	8007ee4 <_strtod_l+0x44c>
 8008546:	a308      	add	r3, pc, #32	@ (adr r3, 8008568 <_strtod_l+0xad0>)
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008550:	f7f8 fa52 	bl	80009f8 <__aeabi_dcmpgt>
 8008554:	2800      	cmp	r0, #0
 8008556:	d093      	beq.n	8008480 <_strtod_l+0x9e8>
 8008558:	e4c4      	b.n	8007ee4 <_strtod_l+0x44c>
 800855a:	bf00      	nop
 800855c:	f3af 8000 	nop.w
 8008560:	94a03595 	.word	0x94a03595
 8008564:	3fdfffff 	.word	0x3fdfffff
 8008568:	35afe535 	.word	0x35afe535
 800856c:	3fe00000 	.word	0x3fe00000
 8008570:	000fffff 	.word	0x000fffff
 8008574:	7ff00000 	.word	0x7ff00000
 8008578:	7fefffff 	.word	0x7fefffff
 800857c:	3ff00000 	.word	0x3ff00000
 8008580:	3fe00000 	.word	0x3fe00000
 8008584:	7fe00000 	.word	0x7fe00000
 8008588:	7c9fffff 	.word	0x7c9fffff
 800858c:	bff00000 	.word	0xbff00000
 8008590:	9b08      	ldr	r3, [sp, #32]
 8008592:	b323      	cbz	r3, 80085de <_strtod_l+0xb46>
 8008594:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008598:	d821      	bhi.n	80085de <_strtod_l+0xb46>
 800859a:	a327      	add	r3, pc, #156	@ (adr r3, 8008638 <_strtod_l+0xba0>)
 800859c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a0:	4630      	mov	r0, r6
 80085a2:	4639      	mov	r1, r7
 80085a4:	f7f8 fa14 	bl	80009d0 <__aeabi_dcmple>
 80085a8:	b1a0      	cbz	r0, 80085d4 <_strtod_l+0xb3c>
 80085aa:	4639      	mov	r1, r7
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7f8 fa6b 	bl	8000a88 <__aeabi_d2uiz>
 80085b2:	2801      	cmp	r0, #1
 80085b4:	bf38      	it	cc
 80085b6:	2001      	movcc	r0, #1
 80085b8:	f7f7 ff14 	bl	80003e4 <__aeabi_ui2d>
 80085bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085be:	4606      	mov	r6, r0
 80085c0:	460f      	mov	r7, r1
 80085c2:	b9fb      	cbnz	r3, 8008604 <_strtod_l+0xb6c>
 80085c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80085c8:	9014      	str	r0, [sp, #80]	@ 0x50
 80085ca:	9315      	str	r3, [sp, #84]	@ 0x54
 80085cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80085d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80085d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80085d6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80085da:	1b5b      	subs	r3, r3, r5
 80085dc:	9311      	str	r3, [sp, #68]	@ 0x44
 80085de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085e2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80085e6:	f7ff f8ff 	bl	80077e8 <__ulp>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	4650      	mov	r0, sl
 80085f0:	4659      	mov	r1, fp
 80085f2:	f7f7 ff71 	bl	80004d8 <__aeabi_dmul>
 80085f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80085fa:	f7f7 fdb7 	bl	800016c <__adddf3>
 80085fe:	4682      	mov	sl, r0
 8008600:	468b      	mov	fp, r1
 8008602:	e776      	b.n	80084f2 <_strtod_l+0xa5a>
 8008604:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008608:	e7e0      	b.n	80085cc <_strtod_l+0xb34>
 800860a:	a30d      	add	r3, pc, #52	@ (adr r3, 8008640 <_strtod_l+0xba8>)
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	f7f8 f9d4 	bl	80009bc <__aeabi_dcmplt>
 8008614:	e79e      	b.n	8008554 <_strtod_l+0xabc>
 8008616:	2300      	movs	r3, #0
 8008618:	930b      	str	r3, [sp, #44]	@ 0x2c
 800861a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800861c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	f7ff ba77 	b.w	8007b12 <_strtod_l+0x7a>
 8008624:	2a65      	cmp	r2, #101	@ 0x65
 8008626:	f43f ab6e 	beq.w	8007d06 <_strtod_l+0x26e>
 800862a:	2a45      	cmp	r2, #69	@ 0x45
 800862c:	f43f ab6b 	beq.w	8007d06 <_strtod_l+0x26e>
 8008630:	2301      	movs	r3, #1
 8008632:	f7ff bba6 	b.w	8007d82 <_strtod_l+0x2ea>
 8008636:	bf00      	nop
 8008638:	ffc00000 	.word	0xffc00000
 800863c:	41dfffff 	.word	0x41dfffff
 8008640:	94a03595 	.word	0x94a03595
 8008644:	3fcfffff 	.word	0x3fcfffff

08008648 <_strtod_r>:
 8008648:	4b01      	ldr	r3, [pc, #4]	@ (8008650 <_strtod_r+0x8>)
 800864a:	f7ff ba25 	b.w	8007a98 <_strtod_l>
 800864e:	bf00      	nop
 8008650:	2000006c 	.word	0x2000006c

08008654 <_strtol_l.constprop.0>:
 8008654:	2b24      	cmp	r3, #36	@ 0x24
 8008656:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800865a:	4686      	mov	lr, r0
 800865c:	4690      	mov	r8, r2
 800865e:	d801      	bhi.n	8008664 <_strtol_l.constprop.0+0x10>
 8008660:	2b01      	cmp	r3, #1
 8008662:	d106      	bne.n	8008672 <_strtol_l.constprop.0+0x1e>
 8008664:	f7fd fdb0 	bl	80061c8 <__errno>
 8008668:	2316      	movs	r3, #22
 800866a:	6003      	str	r3, [r0, #0]
 800866c:	2000      	movs	r0, #0
 800866e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008672:	460d      	mov	r5, r1
 8008674:	4833      	ldr	r0, [pc, #204]	@ (8008744 <_strtol_l.constprop.0+0xf0>)
 8008676:	462a      	mov	r2, r5
 8008678:	f815 4b01 	ldrb.w	r4, [r5], #1
 800867c:	5d06      	ldrb	r6, [r0, r4]
 800867e:	f016 0608 	ands.w	r6, r6, #8
 8008682:	d1f8      	bne.n	8008676 <_strtol_l.constprop.0+0x22>
 8008684:	2c2d      	cmp	r4, #45	@ 0x2d
 8008686:	d12d      	bne.n	80086e4 <_strtol_l.constprop.0+0x90>
 8008688:	2601      	movs	r6, #1
 800868a:	782c      	ldrb	r4, [r5, #0]
 800868c:	1c95      	adds	r5, r2, #2
 800868e:	f033 0210 	bics.w	r2, r3, #16
 8008692:	d109      	bne.n	80086a8 <_strtol_l.constprop.0+0x54>
 8008694:	2c30      	cmp	r4, #48	@ 0x30
 8008696:	d12a      	bne.n	80086ee <_strtol_l.constprop.0+0x9a>
 8008698:	782a      	ldrb	r2, [r5, #0]
 800869a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800869e:	2a58      	cmp	r2, #88	@ 0x58
 80086a0:	d125      	bne.n	80086ee <_strtol_l.constprop.0+0x9a>
 80086a2:	2310      	movs	r3, #16
 80086a4:	786c      	ldrb	r4, [r5, #1]
 80086a6:	3502      	adds	r5, #2
 80086a8:	2200      	movs	r2, #0
 80086aa:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80086ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 80086b2:	fbbc f9f3 	udiv	r9, ip, r3
 80086b6:	4610      	mov	r0, r2
 80086b8:	fb03 ca19 	mls	sl, r3, r9, ip
 80086bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80086c0:	2f09      	cmp	r7, #9
 80086c2:	d81b      	bhi.n	80086fc <_strtol_l.constprop.0+0xa8>
 80086c4:	463c      	mov	r4, r7
 80086c6:	42a3      	cmp	r3, r4
 80086c8:	dd27      	ble.n	800871a <_strtol_l.constprop.0+0xc6>
 80086ca:	1c57      	adds	r7, r2, #1
 80086cc:	d007      	beq.n	80086de <_strtol_l.constprop.0+0x8a>
 80086ce:	4581      	cmp	r9, r0
 80086d0:	d320      	bcc.n	8008714 <_strtol_l.constprop.0+0xc0>
 80086d2:	d101      	bne.n	80086d8 <_strtol_l.constprop.0+0x84>
 80086d4:	45a2      	cmp	sl, r4
 80086d6:	db1d      	blt.n	8008714 <_strtol_l.constprop.0+0xc0>
 80086d8:	2201      	movs	r2, #1
 80086da:	fb00 4003 	mla	r0, r0, r3, r4
 80086de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086e2:	e7eb      	b.n	80086bc <_strtol_l.constprop.0+0x68>
 80086e4:	2c2b      	cmp	r4, #43	@ 0x2b
 80086e6:	bf04      	itt	eq
 80086e8:	782c      	ldrbeq	r4, [r5, #0]
 80086ea:	1c95      	addeq	r5, r2, #2
 80086ec:	e7cf      	b.n	800868e <_strtol_l.constprop.0+0x3a>
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1da      	bne.n	80086a8 <_strtol_l.constprop.0+0x54>
 80086f2:	2c30      	cmp	r4, #48	@ 0x30
 80086f4:	bf0c      	ite	eq
 80086f6:	2308      	moveq	r3, #8
 80086f8:	230a      	movne	r3, #10
 80086fa:	e7d5      	b.n	80086a8 <_strtol_l.constprop.0+0x54>
 80086fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008700:	2f19      	cmp	r7, #25
 8008702:	d801      	bhi.n	8008708 <_strtol_l.constprop.0+0xb4>
 8008704:	3c37      	subs	r4, #55	@ 0x37
 8008706:	e7de      	b.n	80086c6 <_strtol_l.constprop.0+0x72>
 8008708:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800870c:	2f19      	cmp	r7, #25
 800870e:	d804      	bhi.n	800871a <_strtol_l.constprop.0+0xc6>
 8008710:	3c57      	subs	r4, #87	@ 0x57
 8008712:	e7d8      	b.n	80086c6 <_strtol_l.constprop.0+0x72>
 8008714:	f04f 32ff 	mov.w	r2, #4294967295
 8008718:	e7e1      	b.n	80086de <_strtol_l.constprop.0+0x8a>
 800871a:	1c53      	adds	r3, r2, #1
 800871c:	d108      	bne.n	8008730 <_strtol_l.constprop.0+0xdc>
 800871e:	2322      	movs	r3, #34	@ 0x22
 8008720:	4660      	mov	r0, ip
 8008722:	f8ce 3000 	str.w	r3, [lr]
 8008726:	f1b8 0f00 	cmp.w	r8, #0
 800872a:	d0a0      	beq.n	800866e <_strtol_l.constprop.0+0x1a>
 800872c:	1e69      	subs	r1, r5, #1
 800872e:	e006      	b.n	800873e <_strtol_l.constprop.0+0xea>
 8008730:	b106      	cbz	r6, 8008734 <_strtol_l.constprop.0+0xe0>
 8008732:	4240      	negs	r0, r0
 8008734:	f1b8 0f00 	cmp.w	r8, #0
 8008738:	d099      	beq.n	800866e <_strtol_l.constprop.0+0x1a>
 800873a:	2a00      	cmp	r2, #0
 800873c:	d1f6      	bne.n	800872c <_strtol_l.constprop.0+0xd8>
 800873e:	f8c8 1000 	str.w	r1, [r8]
 8008742:	e794      	b.n	800866e <_strtol_l.constprop.0+0x1a>
 8008744:	0800a679 	.word	0x0800a679

08008748 <_strtol_r>:
 8008748:	f7ff bf84 	b.w	8008654 <_strtol_l.constprop.0>

0800874c <__ssputs_r>:
 800874c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008750:	461f      	mov	r7, r3
 8008752:	688e      	ldr	r6, [r1, #8]
 8008754:	4682      	mov	sl, r0
 8008756:	42be      	cmp	r6, r7
 8008758:	460c      	mov	r4, r1
 800875a:	4690      	mov	r8, r2
 800875c:	680b      	ldr	r3, [r1, #0]
 800875e:	d82d      	bhi.n	80087bc <__ssputs_r+0x70>
 8008760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008764:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008768:	d026      	beq.n	80087b8 <__ssputs_r+0x6c>
 800876a:	6965      	ldr	r5, [r4, #20]
 800876c:	6909      	ldr	r1, [r1, #16]
 800876e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008772:	eba3 0901 	sub.w	r9, r3, r1
 8008776:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800877a:	1c7b      	adds	r3, r7, #1
 800877c:	444b      	add	r3, r9
 800877e:	106d      	asrs	r5, r5, #1
 8008780:	429d      	cmp	r5, r3
 8008782:	bf38      	it	cc
 8008784:	461d      	movcc	r5, r3
 8008786:	0553      	lsls	r3, r2, #21
 8008788:	d527      	bpl.n	80087da <__ssputs_r+0x8e>
 800878a:	4629      	mov	r1, r5
 800878c:	f7fe fc2e 	bl	8006fec <_malloc_r>
 8008790:	4606      	mov	r6, r0
 8008792:	b360      	cbz	r0, 80087ee <__ssputs_r+0xa2>
 8008794:	464a      	mov	r2, r9
 8008796:	6921      	ldr	r1, [r4, #16]
 8008798:	f7fd fd51 	bl	800623e <memcpy>
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80087a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087a6:	81a3      	strh	r3, [r4, #12]
 80087a8:	6126      	str	r6, [r4, #16]
 80087aa:	444e      	add	r6, r9
 80087ac:	6026      	str	r6, [r4, #0]
 80087ae:	463e      	mov	r6, r7
 80087b0:	6165      	str	r5, [r4, #20]
 80087b2:	eba5 0509 	sub.w	r5, r5, r9
 80087b6:	60a5      	str	r5, [r4, #8]
 80087b8:	42be      	cmp	r6, r7
 80087ba:	d900      	bls.n	80087be <__ssputs_r+0x72>
 80087bc:	463e      	mov	r6, r7
 80087be:	4632      	mov	r2, r6
 80087c0:	4641      	mov	r1, r8
 80087c2:	6820      	ldr	r0, [r4, #0]
 80087c4:	f000 ff1e 	bl	8009604 <memmove>
 80087c8:	2000      	movs	r0, #0
 80087ca:	68a3      	ldr	r3, [r4, #8]
 80087cc:	1b9b      	subs	r3, r3, r6
 80087ce:	60a3      	str	r3, [r4, #8]
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	4433      	add	r3, r6
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087da:	462a      	mov	r2, r5
 80087dc:	f001 fad1 	bl	8009d82 <_realloc_r>
 80087e0:	4606      	mov	r6, r0
 80087e2:	2800      	cmp	r0, #0
 80087e4:	d1e0      	bne.n	80087a8 <__ssputs_r+0x5c>
 80087e6:	4650      	mov	r0, sl
 80087e8:	6921      	ldr	r1, [r4, #16]
 80087ea:	f7fe fb8d 	bl	8006f08 <_free_r>
 80087ee:	230c      	movs	r3, #12
 80087f0:	f8ca 3000 	str.w	r3, [sl]
 80087f4:	89a3      	ldrh	r3, [r4, #12]
 80087f6:	f04f 30ff 	mov.w	r0, #4294967295
 80087fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087fe:	81a3      	strh	r3, [r4, #12]
 8008800:	e7e9      	b.n	80087d6 <__ssputs_r+0x8a>
	...

08008804 <_svfiprintf_r>:
 8008804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008808:	4698      	mov	r8, r3
 800880a:	898b      	ldrh	r3, [r1, #12]
 800880c:	4607      	mov	r7, r0
 800880e:	061b      	lsls	r3, r3, #24
 8008810:	460d      	mov	r5, r1
 8008812:	4614      	mov	r4, r2
 8008814:	b09d      	sub	sp, #116	@ 0x74
 8008816:	d510      	bpl.n	800883a <_svfiprintf_r+0x36>
 8008818:	690b      	ldr	r3, [r1, #16]
 800881a:	b973      	cbnz	r3, 800883a <_svfiprintf_r+0x36>
 800881c:	2140      	movs	r1, #64	@ 0x40
 800881e:	f7fe fbe5 	bl	8006fec <_malloc_r>
 8008822:	6028      	str	r0, [r5, #0]
 8008824:	6128      	str	r0, [r5, #16]
 8008826:	b930      	cbnz	r0, 8008836 <_svfiprintf_r+0x32>
 8008828:	230c      	movs	r3, #12
 800882a:	603b      	str	r3, [r7, #0]
 800882c:	f04f 30ff 	mov.w	r0, #4294967295
 8008830:	b01d      	add	sp, #116	@ 0x74
 8008832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008836:	2340      	movs	r3, #64	@ 0x40
 8008838:	616b      	str	r3, [r5, #20]
 800883a:	2300      	movs	r3, #0
 800883c:	9309      	str	r3, [sp, #36]	@ 0x24
 800883e:	2320      	movs	r3, #32
 8008840:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008844:	2330      	movs	r3, #48	@ 0x30
 8008846:	f04f 0901 	mov.w	r9, #1
 800884a:	f8cd 800c 	str.w	r8, [sp, #12]
 800884e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80089e8 <_svfiprintf_r+0x1e4>
 8008852:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008856:	4623      	mov	r3, r4
 8008858:	469a      	mov	sl, r3
 800885a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800885e:	b10a      	cbz	r2, 8008864 <_svfiprintf_r+0x60>
 8008860:	2a25      	cmp	r2, #37	@ 0x25
 8008862:	d1f9      	bne.n	8008858 <_svfiprintf_r+0x54>
 8008864:	ebba 0b04 	subs.w	fp, sl, r4
 8008868:	d00b      	beq.n	8008882 <_svfiprintf_r+0x7e>
 800886a:	465b      	mov	r3, fp
 800886c:	4622      	mov	r2, r4
 800886e:	4629      	mov	r1, r5
 8008870:	4638      	mov	r0, r7
 8008872:	f7ff ff6b 	bl	800874c <__ssputs_r>
 8008876:	3001      	adds	r0, #1
 8008878:	f000 80a7 	beq.w	80089ca <_svfiprintf_r+0x1c6>
 800887c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800887e:	445a      	add	r2, fp
 8008880:	9209      	str	r2, [sp, #36]	@ 0x24
 8008882:	f89a 3000 	ldrb.w	r3, [sl]
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 809f 	beq.w	80089ca <_svfiprintf_r+0x1c6>
 800888c:	2300      	movs	r3, #0
 800888e:	f04f 32ff 	mov.w	r2, #4294967295
 8008892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008896:	f10a 0a01 	add.w	sl, sl, #1
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	9307      	str	r3, [sp, #28]
 800889e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80088a4:	4654      	mov	r4, sl
 80088a6:	2205      	movs	r2, #5
 80088a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ac:	484e      	ldr	r0, [pc, #312]	@ (80089e8 <_svfiprintf_r+0x1e4>)
 80088ae:	f7fd fcb8 	bl	8006222 <memchr>
 80088b2:	9a04      	ldr	r2, [sp, #16]
 80088b4:	b9d8      	cbnz	r0, 80088ee <_svfiprintf_r+0xea>
 80088b6:	06d0      	lsls	r0, r2, #27
 80088b8:	bf44      	itt	mi
 80088ba:	2320      	movmi	r3, #32
 80088bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088c0:	0711      	lsls	r1, r2, #28
 80088c2:	bf44      	itt	mi
 80088c4:	232b      	movmi	r3, #43	@ 0x2b
 80088c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088ca:	f89a 3000 	ldrb.w	r3, [sl]
 80088ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80088d0:	d015      	beq.n	80088fe <_svfiprintf_r+0xfa>
 80088d2:	4654      	mov	r4, sl
 80088d4:	2000      	movs	r0, #0
 80088d6:	f04f 0c0a 	mov.w	ip, #10
 80088da:	9a07      	ldr	r2, [sp, #28]
 80088dc:	4621      	mov	r1, r4
 80088de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088e2:	3b30      	subs	r3, #48	@ 0x30
 80088e4:	2b09      	cmp	r3, #9
 80088e6:	d94b      	bls.n	8008980 <_svfiprintf_r+0x17c>
 80088e8:	b1b0      	cbz	r0, 8008918 <_svfiprintf_r+0x114>
 80088ea:	9207      	str	r2, [sp, #28]
 80088ec:	e014      	b.n	8008918 <_svfiprintf_r+0x114>
 80088ee:	eba0 0308 	sub.w	r3, r0, r8
 80088f2:	fa09 f303 	lsl.w	r3, r9, r3
 80088f6:	4313      	orrs	r3, r2
 80088f8:	46a2      	mov	sl, r4
 80088fa:	9304      	str	r3, [sp, #16]
 80088fc:	e7d2      	b.n	80088a4 <_svfiprintf_r+0xa0>
 80088fe:	9b03      	ldr	r3, [sp, #12]
 8008900:	1d19      	adds	r1, r3, #4
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	9103      	str	r1, [sp, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	bfbb      	ittet	lt
 800890a:	425b      	neglt	r3, r3
 800890c:	f042 0202 	orrlt.w	r2, r2, #2
 8008910:	9307      	strge	r3, [sp, #28]
 8008912:	9307      	strlt	r3, [sp, #28]
 8008914:	bfb8      	it	lt
 8008916:	9204      	strlt	r2, [sp, #16]
 8008918:	7823      	ldrb	r3, [r4, #0]
 800891a:	2b2e      	cmp	r3, #46	@ 0x2e
 800891c:	d10a      	bne.n	8008934 <_svfiprintf_r+0x130>
 800891e:	7863      	ldrb	r3, [r4, #1]
 8008920:	2b2a      	cmp	r3, #42	@ 0x2a
 8008922:	d132      	bne.n	800898a <_svfiprintf_r+0x186>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	3402      	adds	r4, #2
 8008928:	1d1a      	adds	r2, r3, #4
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	9203      	str	r2, [sp, #12]
 800892e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008932:	9305      	str	r3, [sp, #20]
 8008934:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80089ec <_svfiprintf_r+0x1e8>
 8008938:	2203      	movs	r2, #3
 800893a:	4650      	mov	r0, sl
 800893c:	7821      	ldrb	r1, [r4, #0]
 800893e:	f7fd fc70 	bl	8006222 <memchr>
 8008942:	b138      	cbz	r0, 8008954 <_svfiprintf_r+0x150>
 8008944:	2240      	movs	r2, #64	@ 0x40
 8008946:	9b04      	ldr	r3, [sp, #16]
 8008948:	eba0 000a 	sub.w	r0, r0, sl
 800894c:	4082      	lsls	r2, r0
 800894e:	4313      	orrs	r3, r2
 8008950:	3401      	adds	r4, #1
 8008952:	9304      	str	r3, [sp, #16]
 8008954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008958:	2206      	movs	r2, #6
 800895a:	4825      	ldr	r0, [pc, #148]	@ (80089f0 <_svfiprintf_r+0x1ec>)
 800895c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008960:	f7fd fc5f 	bl	8006222 <memchr>
 8008964:	2800      	cmp	r0, #0
 8008966:	d036      	beq.n	80089d6 <_svfiprintf_r+0x1d2>
 8008968:	4b22      	ldr	r3, [pc, #136]	@ (80089f4 <_svfiprintf_r+0x1f0>)
 800896a:	bb1b      	cbnz	r3, 80089b4 <_svfiprintf_r+0x1b0>
 800896c:	9b03      	ldr	r3, [sp, #12]
 800896e:	3307      	adds	r3, #7
 8008970:	f023 0307 	bic.w	r3, r3, #7
 8008974:	3308      	adds	r3, #8
 8008976:	9303      	str	r3, [sp, #12]
 8008978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800897a:	4433      	add	r3, r6
 800897c:	9309      	str	r3, [sp, #36]	@ 0x24
 800897e:	e76a      	b.n	8008856 <_svfiprintf_r+0x52>
 8008980:	460c      	mov	r4, r1
 8008982:	2001      	movs	r0, #1
 8008984:	fb0c 3202 	mla	r2, ip, r2, r3
 8008988:	e7a8      	b.n	80088dc <_svfiprintf_r+0xd8>
 800898a:	2300      	movs	r3, #0
 800898c:	f04f 0c0a 	mov.w	ip, #10
 8008990:	4619      	mov	r1, r3
 8008992:	3401      	adds	r4, #1
 8008994:	9305      	str	r3, [sp, #20]
 8008996:	4620      	mov	r0, r4
 8008998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800899c:	3a30      	subs	r2, #48	@ 0x30
 800899e:	2a09      	cmp	r2, #9
 80089a0:	d903      	bls.n	80089aa <_svfiprintf_r+0x1a6>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0c6      	beq.n	8008934 <_svfiprintf_r+0x130>
 80089a6:	9105      	str	r1, [sp, #20]
 80089a8:	e7c4      	b.n	8008934 <_svfiprintf_r+0x130>
 80089aa:	4604      	mov	r4, r0
 80089ac:	2301      	movs	r3, #1
 80089ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80089b2:	e7f0      	b.n	8008996 <_svfiprintf_r+0x192>
 80089b4:	ab03      	add	r3, sp, #12
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	462a      	mov	r2, r5
 80089ba:	4638      	mov	r0, r7
 80089bc:	4b0e      	ldr	r3, [pc, #56]	@ (80089f8 <_svfiprintf_r+0x1f4>)
 80089be:	a904      	add	r1, sp, #16
 80089c0:	f7fc fc2a 	bl	8005218 <_printf_float>
 80089c4:	1c42      	adds	r2, r0, #1
 80089c6:	4606      	mov	r6, r0
 80089c8:	d1d6      	bne.n	8008978 <_svfiprintf_r+0x174>
 80089ca:	89ab      	ldrh	r3, [r5, #12]
 80089cc:	065b      	lsls	r3, r3, #25
 80089ce:	f53f af2d 	bmi.w	800882c <_svfiprintf_r+0x28>
 80089d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089d4:	e72c      	b.n	8008830 <_svfiprintf_r+0x2c>
 80089d6:	ab03      	add	r3, sp, #12
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	462a      	mov	r2, r5
 80089dc:	4638      	mov	r0, r7
 80089de:	4b06      	ldr	r3, [pc, #24]	@ (80089f8 <_svfiprintf_r+0x1f4>)
 80089e0:	a904      	add	r1, sp, #16
 80089e2:	f7fc feb7 	bl	8005754 <_printf_i>
 80089e6:	e7ed      	b.n	80089c4 <_svfiprintf_r+0x1c0>
 80089e8:	0800a779 	.word	0x0800a779
 80089ec:	0800a77f 	.word	0x0800a77f
 80089f0:	0800a783 	.word	0x0800a783
 80089f4:	08005219 	.word	0x08005219
 80089f8:	0800874d 	.word	0x0800874d

080089fc <_sungetc_r>:
 80089fc:	b538      	push	{r3, r4, r5, lr}
 80089fe:	1c4b      	adds	r3, r1, #1
 8008a00:	4614      	mov	r4, r2
 8008a02:	d103      	bne.n	8008a0c <_sungetc_r+0x10>
 8008a04:	f04f 35ff 	mov.w	r5, #4294967295
 8008a08:	4628      	mov	r0, r5
 8008a0a:	bd38      	pop	{r3, r4, r5, pc}
 8008a0c:	8993      	ldrh	r3, [r2, #12]
 8008a0e:	b2cd      	uxtb	r5, r1
 8008a10:	f023 0320 	bic.w	r3, r3, #32
 8008a14:	8193      	strh	r3, [r2, #12]
 8008a16:	6853      	ldr	r3, [r2, #4]
 8008a18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008a1a:	b18a      	cbz	r2, 8008a40 <_sungetc_r+0x44>
 8008a1c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	dd08      	ble.n	8008a34 <_sungetc_r+0x38>
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	1e5a      	subs	r2, r3, #1
 8008a26:	6022      	str	r2, [r4, #0]
 8008a28:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008a2c:	6863      	ldr	r3, [r4, #4]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	6063      	str	r3, [r4, #4]
 8008a32:	e7e9      	b.n	8008a08 <_sungetc_r+0xc>
 8008a34:	4621      	mov	r1, r4
 8008a36:	f000 fd18 	bl	800946a <__submore>
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d0f1      	beq.n	8008a22 <_sungetc_r+0x26>
 8008a3e:	e7e1      	b.n	8008a04 <_sungetc_r+0x8>
 8008a40:	6921      	ldr	r1, [r4, #16]
 8008a42:	6822      	ldr	r2, [r4, #0]
 8008a44:	b141      	cbz	r1, 8008a58 <_sungetc_r+0x5c>
 8008a46:	4291      	cmp	r1, r2
 8008a48:	d206      	bcs.n	8008a58 <_sungetc_r+0x5c>
 8008a4a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008a4e:	42a9      	cmp	r1, r5
 8008a50:	d102      	bne.n	8008a58 <_sungetc_r+0x5c>
 8008a52:	3a01      	subs	r2, #1
 8008a54:	6022      	str	r2, [r4, #0]
 8008a56:	e7ea      	b.n	8008a2e <_sungetc_r+0x32>
 8008a58:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008a5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a60:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a62:	2303      	movs	r3, #3
 8008a64:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008a66:	4623      	mov	r3, r4
 8008a68:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008a6c:	6023      	str	r3, [r4, #0]
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e7de      	b.n	8008a30 <_sungetc_r+0x34>

08008a72 <__ssrefill_r>:
 8008a72:	b510      	push	{r4, lr}
 8008a74:	460c      	mov	r4, r1
 8008a76:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008a78:	b169      	cbz	r1, 8008a96 <__ssrefill_r+0x24>
 8008a7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a7e:	4299      	cmp	r1, r3
 8008a80:	d001      	beq.n	8008a86 <__ssrefill_r+0x14>
 8008a82:	f7fe fa41 	bl	8006f08 <_free_r>
 8008a86:	2000      	movs	r0, #0
 8008a88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a8a:	6360      	str	r0, [r4, #52]	@ 0x34
 8008a8c:	6063      	str	r3, [r4, #4]
 8008a8e:	b113      	cbz	r3, 8008a96 <__ssrefill_r+0x24>
 8008a90:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008a92:	6023      	str	r3, [r4, #0]
 8008a94:	bd10      	pop	{r4, pc}
 8008a96:	6923      	ldr	r3, [r4, #16]
 8008a98:	f04f 30ff 	mov.w	r0, #4294967295
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	6063      	str	r3, [r4, #4]
 8008aa2:	89a3      	ldrh	r3, [r4, #12]
 8008aa4:	f043 0320 	orr.w	r3, r3, #32
 8008aa8:	81a3      	strh	r3, [r4, #12]
 8008aaa:	e7f3      	b.n	8008a94 <__ssrefill_r+0x22>

08008aac <__ssvfiscanf_r>:
 8008aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	4606      	mov	r6, r0
 8008ab6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008aba:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008abe:	49aa      	ldr	r1, [pc, #680]	@ (8008d68 <__ssvfiscanf_r+0x2bc>)
 8008ac0:	f10d 0804 	add.w	r8, sp, #4
 8008ac4:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008ac6:	49a9      	ldr	r1, [pc, #676]	@ (8008d6c <__ssvfiscanf_r+0x2c0>)
 8008ac8:	4fa9      	ldr	r7, [pc, #676]	@ (8008d70 <__ssvfiscanf_r+0x2c4>)
 8008aca:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008ace:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	7813      	ldrb	r3, [r2, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 8159 	beq.w	8008d8c <__ssvfiscanf_r+0x2e0>
 8008ada:	5cf9      	ldrb	r1, [r7, r3]
 8008adc:	1c55      	adds	r5, r2, #1
 8008ade:	f011 0108 	ands.w	r1, r1, #8
 8008ae2:	d019      	beq.n	8008b18 <__ssvfiscanf_r+0x6c>
 8008ae4:	6863      	ldr	r3, [r4, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	dd0f      	ble.n	8008b0a <__ssvfiscanf_r+0x5e>
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	781a      	ldrb	r2, [r3, #0]
 8008aee:	5cba      	ldrb	r2, [r7, r2]
 8008af0:	0712      	lsls	r2, r2, #28
 8008af2:	d401      	bmi.n	8008af8 <__ssvfiscanf_r+0x4c>
 8008af4:	462a      	mov	r2, r5
 8008af6:	e7ec      	b.n	8008ad2 <__ssvfiscanf_r+0x26>
 8008af8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008afa:	3301      	adds	r3, #1
 8008afc:	3201      	adds	r2, #1
 8008afe:	9245      	str	r2, [sp, #276]	@ 0x114
 8008b00:	6862      	ldr	r2, [r4, #4]
 8008b02:	6023      	str	r3, [r4, #0]
 8008b04:	3a01      	subs	r2, #1
 8008b06:	6062      	str	r2, [r4, #4]
 8008b08:	e7ec      	b.n	8008ae4 <__ssvfiscanf_r+0x38>
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008b10:	4798      	blx	r3
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d0e9      	beq.n	8008aea <__ssvfiscanf_r+0x3e>
 8008b16:	e7ed      	b.n	8008af4 <__ssvfiscanf_r+0x48>
 8008b18:	2b25      	cmp	r3, #37	@ 0x25
 8008b1a:	d012      	beq.n	8008b42 <__ssvfiscanf_r+0x96>
 8008b1c:	4699      	mov	r9, r3
 8008b1e:	6863      	ldr	r3, [r4, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f340 8094 	ble.w	8008c4e <__ssvfiscanf_r+0x1a2>
 8008b26:	6822      	ldr	r2, [r4, #0]
 8008b28:	7813      	ldrb	r3, [r2, #0]
 8008b2a:	454b      	cmp	r3, r9
 8008b2c:	f040 812e 	bne.w	8008d8c <__ssvfiscanf_r+0x2e0>
 8008b30:	6863      	ldr	r3, [r4, #4]
 8008b32:	3201      	adds	r2, #1
 8008b34:	3b01      	subs	r3, #1
 8008b36:	6063      	str	r3, [r4, #4]
 8008b38:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008b3a:	6022      	str	r2, [r4, #0]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	9345      	str	r3, [sp, #276]	@ 0x114
 8008b40:	e7d8      	b.n	8008af4 <__ssvfiscanf_r+0x48>
 8008b42:	9141      	str	r1, [sp, #260]	@ 0x104
 8008b44:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008b46:	7853      	ldrb	r3, [r2, #1]
 8008b48:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b4a:	bf04      	itt	eq
 8008b4c:	2310      	moveq	r3, #16
 8008b4e:	1c95      	addeq	r5, r2, #2
 8008b50:	f04f 020a 	mov.w	r2, #10
 8008b54:	bf08      	it	eq
 8008b56:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008b58:	46a9      	mov	r9, r5
 8008b5a:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008b5e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008b62:	2b09      	cmp	r3, #9
 8008b64:	d91e      	bls.n	8008ba4 <__ssvfiscanf_r+0xf8>
 8008b66:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8008d74 <__ssvfiscanf_r+0x2c8>
 8008b6a:	2203      	movs	r2, #3
 8008b6c:	4650      	mov	r0, sl
 8008b6e:	f7fd fb58 	bl	8006222 <memchr>
 8008b72:	b138      	cbz	r0, 8008b84 <__ssvfiscanf_r+0xd8>
 8008b74:	2301      	movs	r3, #1
 8008b76:	464d      	mov	r5, r9
 8008b78:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008b7a:	eba0 000a 	sub.w	r0, r0, sl
 8008b7e:	4083      	lsls	r3, r0
 8008b80:	4313      	orrs	r3, r2
 8008b82:	9341      	str	r3, [sp, #260]	@ 0x104
 8008b84:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b88:	2b78      	cmp	r3, #120	@ 0x78
 8008b8a:	d806      	bhi.n	8008b9a <__ssvfiscanf_r+0xee>
 8008b8c:	2b57      	cmp	r3, #87	@ 0x57
 8008b8e:	d810      	bhi.n	8008bb2 <__ssvfiscanf_r+0x106>
 8008b90:	2b25      	cmp	r3, #37	@ 0x25
 8008b92:	d0c3      	beq.n	8008b1c <__ssvfiscanf_r+0x70>
 8008b94:	d856      	bhi.n	8008c44 <__ssvfiscanf_r+0x198>
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d064      	beq.n	8008c64 <__ssvfiscanf_r+0x1b8>
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008b9e:	230a      	movs	r3, #10
 8008ba0:	9342      	str	r3, [sp, #264]	@ 0x108
 8008ba2:	e077      	b.n	8008c94 <__ssvfiscanf_r+0x1e8>
 8008ba4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008ba6:	464d      	mov	r5, r9
 8008ba8:	fb02 1103 	mla	r1, r2, r3, r1
 8008bac:	3930      	subs	r1, #48	@ 0x30
 8008bae:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008bb0:	e7d2      	b.n	8008b58 <__ssvfiscanf_r+0xac>
 8008bb2:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008bb6:	2a20      	cmp	r2, #32
 8008bb8:	d8ef      	bhi.n	8008b9a <__ssvfiscanf_r+0xee>
 8008bba:	a101      	add	r1, pc, #4	@ (adr r1, 8008bc0 <__ssvfiscanf_r+0x114>)
 8008bbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008bc0:	08008c73 	.word	0x08008c73
 8008bc4:	08008b9b 	.word	0x08008b9b
 8008bc8:	08008b9b 	.word	0x08008b9b
 8008bcc:	08008ccd 	.word	0x08008ccd
 8008bd0:	08008b9b 	.word	0x08008b9b
 8008bd4:	08008b9b 	.word	0x08008b9b
 8008bd8:	08008b9b 	.word	0x08008b9b
 8008bdc:	08008b9b 	.word	0x08008b9b
 8008be0:	08008b9b 	.word	0x08008b9b
 8008be4:	08008b9b 	.word	0x08008b9b
 8008be8:	08008b9b 	.word	0x08008b9b
 8008bec:	08008ce3 	.word	0x08008ce3
 8008bf0:	08008cc9 	.word	0x08008cc9
 8008bf4:	08008c4b 	.word	0x08008c4b
 8008bf8:	08008c4b 	.word	0x08008c4b
 8008bfc:	08008c4b 	.word	0x08008c4b
 8008c00:	08008b9b 	.word	0x08008b9b
 8008c04:	08008c85 	.word	0x08008c85
 8008c08:	08008b9b 	.word	0x08008b9b
 8008c0c:	08008b9b 	.word	0x08008b9b
 8008c10:	08008b9b 	.word	0x08008b9b
 8008c14:	08008b9b 	.word	0x08008b9b
 8008c18:	08008cf3 	.word	0x08008cf3
 8008c1c:	08008c8d 	.word	0x08008c8d
 8008c20:	08008c6b 	.word	0x08008c6b
 8008c24:	08008b9b 	.word	0x08008b9b
 8008c28:	08008b9b 	.word	0x08008b9b
 8008c2c:	08008cef 	.word	0x08008cef
 8008c30:	08008b9b 	.word	0x08008b9b
 8008c34:	08008cc9 	.word	0x08008cc9
 8008c38:	08008b9b 	.word	0x08008b9b
 8008c3c:	08008b9b 	.word	0x08008b9b
 8008c40:	08008c73 	.word	0x08008c73
 8008c44:	3b45      	subs	r3, #69	@ 0x45
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d8a7      	bhi.n	8008b9a <__ssvfiscanf_r+0xee>
 8008c4a:	2305      	movs	r3, #5
 8008c4c:	e021      	b.n	8008c92 <__ssvfiscanf_r+0x1e6>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4630      	mov	r0, r6
 8008c52:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008c54:	4798      	blx	r3
 8008c56:	2800      	cmp	r0, #0
 8008c58:	f43f af65 	beq.w	8008b26 <__ssvfiscanf_r+0x7a>
 8008c5c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	f040 808c 	bne.w	8008d7c <__ssvfiscanf_r+0x2d0>
 8008c64:	f04f 30ff 	mov.w	r0, #4294967295
 8008c68:	e08c      	b.n	8008d84 <__ssvfiscanf_r+0x2d8>
 8008c6a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008c6c:	f042 0220 	orr.w	r2, r2, #32
 8008c70:	9241      	str	r2, [sp, #260]	@ 0x104
 8008c72:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008c74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c78:	9241      	str	r2, [sp, #260]	@ 0x104
 8008c7a:	2210      	movs	r2, #16
 8008c7c:	2b6e      	cmp	r3, #110	@ 0x6e
 8008c7e:	9242      	str	r2, [sp, #264]	@ 0x108
 8008c80:	d902      	bls.n	8008c88 <__ssvfiscanf_r+0x1dc>
 8008c82:	e005      	b.n	8008c90 <__ssvfiscanf_r+0x1e4>
 8008c84:	2300      	movs	r3, #0
 8008c86:	9342      	str	r3, [sp, #264]	@ 0x108
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e002      	b.n	8008c92 <__ssvfiscanf_r+0x1e6>
 8008c8c:	2308      	movs	r3, #8
 8008c8e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008c90:	2304      	movs	r3, #4
 8008c92:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008c94:	6863      	ldr	r3, [r4, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	dd39      	ble.n	8008d0e <__ssvfiscanf_r+0x262>
 8008c9a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008c9c:	0659      	lsls	r1, r3, #25
 8008c9e:	d404      	bmi.n	8008caa <__ssvfiscanf_r+0x1fe>
 8008ca0:	6823      	ldr	r3, [r4, #0]
 8008ca2:	781a      	ldrb	r2, [r3, #0]
 8008ca4:	5cba      	ldrb	r2, [r7, r2]
 8008ca6:	0712      	lsls	r2, r2, #28
 8008ca8:	d438      	bmi.n	8008d1c <__ssvfiscanf_r+0x270>
 8008caa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	dc47      	bgt.n	8008d40 <__ssvfiscanf_r+0x294>
 8008cb0:	466b      	mov	r3, sp
 8008cb2:	4622      	mov	r2, r4
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	a941      	add	r1, sp, #260	@ 0x104
 8008cb8:	f000 f9aa 	bl	8009010 <_scanf_chars>
 8008cbc:	2801      	cmp	r0, #1
 8008cbe:	d065      	beq.n	8008d8c <__ssvfiscanf_r+0x2e0>
 8008cc0:	2802      	cmp	r0, #2
 8008cc2:	f47f af17 	bne.w	8008af4 <__ssvfiscanf_r+0x48>
 8008cc6:	e7c9      	b.n	8008c5c <__ssvfiscanf_r+0x1b0>
 8008cc8:	220a      	movs	r2, #10
 8008cca:	e7d7      	b.n	8008c7c <__ssvfiscanf_r+0x1d0>
 8008ccc:	4629      	mov	r1, r5
 8008cce:	4640      	mov	r0, r8
 8008cd0:	f000 fb92 	bl	80093f8 <__sccl>
 8008cd4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cdc:	9341      	str	r3, [sp, #260]	@ 0x104
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e7d7      	b.n	8008c92 <__ssvfiscanf_r+0x1e6>
 8008ce2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ce8:	9341      	str	r3, [sp, #260]	@ 0x104
 8008cea:	2300      	movs	r3, #0
 8008cec:	e7d1      	b.n	8008c92 <__ssvfiscanf_r+0x1e6>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e7cf      	b.n	8008c92 <__ssvfiscanf_r+0x1e6>
 8008cf2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008cf4:	06c3      	lsls	r3, r0, #27
 8008cf6:	f53f aefd 	bmi.w	8008af4 <__ssvfiscanf_r+0x48>
 8008cfa:	9b00      	ldr	r3, [sp, #0]
 8008cfc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008cfe:	1d19      	adds	r1, r3, #4
 8008d00:	9100      	str	r1, [sp, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	07c0      	lsls	r0, r0, #31
 8008d06:	bf4c      	ite	mi
 8008d08:	801a      	strhmi	r2, [r3, #0]
 8008d0a:	601a      	strpl	r2, [r3, #0]
 8008d0c:	e6f2      	b.n	8008af4 <__ssvfiscanf_r+0x48>
 8008d0e:	4621      	mov	r1, r4
 8008d10:	4630      	mov	r0, r6
 8008d12:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008d14:	4798      	blx	r3
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d0bf      	beq.n	8008c9a <__ssvfiscanf_r+0x1ee>
 8008d1a:	e79f      	b.n	8008c5c <__ssvfiscanf_r+0x1b0>
 8008d1c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008d1e:	3201      	adds	r2, #1
 8008d20:	9245      	str	r2, [sp, #276]	@ 0x114
 8008d22:	6862      	ldr	r2, [r4, #4]
 8008d24:	3a01      	subs	r2, #1
 8008d26:	2a00      	cmp	r2, #0
 8008d28:	6062      	str	r2, [r4, #4]
 8008d2a:	dd02      	ble.n	8008d32 <__ssvfiscanf_r+0x286>
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	6023      	str	r3, [r4, #0]
 8008d30:	e7b6      	b.n	8008ca0 <__ssvfiscanf_r+0x1f4>
 8008d32:	4621      	mov	r1, r4
 8008d34:	4630      	mov	r0, r6
 8008d36:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008d38:	4798      	blx	r3
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d0b0      	beq.n	8008ca0 <__ssvfiscanf_r+0x1f4>
 8008d3e:	e78d      	b.n	8008c5c <__ssvfiscanf_r+0x1b0>
 8008d40:	2b04      	cmp	r3, #4
 8008d42:	dc06      	bgt.n	8008d52 <__ssvfiscanf_r+0x2a6>
 8008d44:	466b      	mov	r3, sp
 8008d46:	4622      	mov	r2, r4
 8008d48:	4630      	mov	r0, r6
 8008d4a:	a941      	add	r1, sp, #260	@ 0x104
 8008d4c:	f000 f9ba 	bl	80090c4 <_scanf_i>
 8008d50:	e7b4      	b.n	8008cbc <__ssvfiscanf_r+0x210>
 8008d52:	4b09      	ldr	r3, [pc, #36]	@ (8008d78 <__ssvfiscanf_r+0x2cc>)
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f43f aecd 	beq.w	8008af4 <__ssvfiscanf_r+0x48>
 8008d5a:	466b      	mov	r3, sp
 8008d5c:	4622      	mov	r2, r4
 8008d5e:	4630      	mov	r0, r6
 8008d60:	a941      	add	r1, sp, #260	@ 0x104
 8008d62:	f7fc fe17 	bl	8005994 <_scanf_float>
 8008d66:	e7a9      	b.n	8008cbc <__ssvfiscanf_r+0x210>
 8008d68:	080089fd 	.word	0x080089fd
 8008d6c:	08008a73 	.word	0x08008a73
 8008d70:	0800a679 	.word	0x0800a679
 8008d74:	0800a77f 	.word	0x0800a77f
 8008d78:	08005995 	.word	0x08005995
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	065b      	lsls	r3, r3, #25
 8008d80:	f53f af70 	bmi.w	8008c64 <__ssvfiscanf_r+0x1b8>
 8008d84:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008d8e:	e7f9      	b.n	8008d84 <__ssvfiscanf_r+0x2d8>

08008d90 <__sfputc_r>:
 8008d90:	6893      	ldr	r3, [r2, #8]
 8008d92:	b410      	push	{r4}
 8008d94:	3b01      	subs	r3, #1
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	6093      	str	r3, [r2, #8]
 8008d9a:	da07      	bge.n	8008dac <__sfputc_r+0x1c>
 8008d9c:	6994      	ldr	r4, [r2, #24]
 8008d9e:	42a3      	cmp	r3, r4
 8008da0:	db01      	blt.n	8008da6 <__sfputc_r+0x16>
 8008da2:	290a      	cmp	r1, #10
 8008da4:	d102      	bne.n	8008dac <__sfputc_r+0x1c>
 8008da6:	bc10      	pop	{r4}
 8008da8:	f000 bb97 	b.w	80094da <__swbuf_r>
 8008dac:	6813      	ldr	r3, [r2, #0]
 8008dae:	1c58      	adds	r0, r3, #1
 8008db0:	6010      	str	r0, [r2, #0]
 8008db2:	7019      	strb	r1, [r3, #0]
 8008db4:	4608      	mov	r0, r1
 8008db6:	bc10      	pop	{r4}
 8008db8:	4770      	bx	lr

08008dba <__sfputs_r>:
 8008dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbc:	4606      	mov	r6, r0
 8008dbe:	460f      	mov	r7, r1
 8008dc0:	4614      	mov	r4, r2
 8008dc2:	18d5      	adds	r5, r2, r3
 8008dc4:	42ac      	cmp	r4, r5
 8008dc6:	d101      	bne.n	8008dcc <__sfputs_r+0x12>
 8008dc8:	2000      	movs	r0, #0
 8008dca:	e007      	b.n	8008ddc <__sfputs_r+0x22>
 8008dcc:	463a      	mov	r2, r7
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd4:	f7ff ffdc 	bl	8008d90 <__sfputc_r>
 8008dd8:	1c43      	adds	r3, r0, #1
 8008dda:	d1f3      	bne.n	8008dc4 <__sfputs_r+0xa>
 8008ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008de0 <_vfiprintf_r>:
 8008de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de4:	460d      	mov	r5, r1
 8008de6:	4614      	mov	r4, r2
 8008de8:	4698      	mov	r8, r3
 8008dea:	4606      	mov	r6, r0
 8008dec:	b09d      	sub	sp, #116	@ 0x74
 8008dee:	b118      	cbz	r0, 8008df8 <_vfiprintf_r+0x18>
 8008df0:	6a03      	ldr	r3, [r0, #32]
 8008df2:	b90b      	cbnz	r3, 8008df8 <_vfiprintf_r+0x18>
 8008df4:	f7fd f86a 	bl	8005ecc <__sinit>
 8008df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dfa:	07d9      	lsls	r1, r3, #31
 8008dfc:	d405      	bmi.n	8008e0a <_vfiprintf_r+0x2a>
 8008dfe:	89ab      	ldrh	r3, [r5, #12]
 8008e00:	059a      	lsls	r2, r3, #22
 8008e02:	d402      	bmi.n	8008e0a <_vfiprintf_r+0x2a>
 8008e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e06:	f7fd fa0a 	bl	800621e <__retarget_lock_acquire_recursive>
 8008e0a:	89ab      	ldrh	r3, [r5, #12]
 8008e0c:	071b      	lsls	r3, r3, #28
 8008e0e:	d501      	bpl.n	8008e14 <_vfiprintf_r+0x34>
 8008e10:	692b      	ldr	r3, [r5, #16]
 8008e12:	b99b      	cbnz	r3, 8008e3c <_vfiprintf_r+0x5c>
 8008e14:	4629      	mov	r1, r5
 8008e16:	4630      	mov	r0, r6
 8008e18:	f000 fb9e 	bl	8009558 <__swsetup_r>
 8008e1c:	b170      	cbz	r0, 8008e3c <_vfiprintf_r+0x5c>
 8008e1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e20:	07dc      	lsls	r4, r3, #31
 8008e22:	d504      	bpl.n	8008e2e <_vfiprintf_r+0x4e>
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	b01d      	add	sp, #116	@ 0x74
 8008e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e2e:	89ab      	ldrh	r3, [r5, #12]
 8008e30:	0598      	lsls	r0, r3, #22
 8008e32:	d4f7      	bmi.n	8008e24 <_vfiprintf_r+0x44>
 8008e34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e36:	f7fd f9f3 	bl	8006220 <__retarget_lock_release_recursive>
 8008e3a:	e7f3      	b.n	8008e24 <_vfiprintf_r+0x44>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e40:	2320      	movs	r3, #32
 8008e42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e46:	2330      	movs	r3, #48	@ 0x30
 8008e48:	f04f 0901 	mov.w	r9, #1
 8008e4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e50:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008ffc <_vfiprintf_r+0x21c>
 8008e54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e58:	4623      	mov	r3, r4
 8008e5a:	469a      	mov	sl, r3
 8008e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e60:	b10a      	cbz	r2, 8008e66 <_vfiprintf_r+0x86>
 8008e62:	2a25      	cmp	r2, #37	@ 0x25
 8008e64:	d1f9      	bne.n	8008e5a <_vfiprintf_r+0x7a>
 8008e66:	ebba 0b04 	subs.w	fp, sl, r4
 8008e6a:	d00b      	beq.n	8008e84 <_vfiprintf_r+0xa4>
 8008e6c:	465b      	mov	r3, fp
 8008e6e:	4622      	mov	r2, r4
 8008e70:	4629      	mov	r1, r5
 8008e72:	4630      	mov	r0, r6
 8008e74:	f7ff ffa1 	bl	8008dba <__sfputs_r>
 8008e78:	3001      	adds	r0, #1
 8008e7a:	f000 80a7 	beq.w	8008fcc <_vfiprintf_r+0x1ec>
 8008e7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e80:	445a      	add	r2, fp
 8008e82:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e84:	f89a 3000 	ldrb.w	r3, [sl]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 809f 	beq.w	8008fcc <_vfiprintf_r+0x1ec>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f04f 32ff 	mov.w	r2, #4294967295
 8008e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e98:	f10a 0a01 	add.w	sl, sl, #1
 8008e9c:	9304      	str	r3, [sp, #16]
 8008e9e:	9307      	str	r3, [sp, #28]
 8008ea0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ea4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ea6:	4654      	mov	r4, sl
 8008ea8:	2205      	movs	r2, #5
 8008eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eae:	4853      	ldr	r0, [pc, #332]	@ (8008ffc <_vfiprintf_r+0x21c>)
 8008eb0:	f7fd f9b7 	bl	8006222 <memchr>
 8008eb4:	9a04      	ldr	r2, [sp, #16]
 8008eb6:	b9d8      	cbnz	r0, 8008ef0 <_vfiprintf_r+0x110>
 8008eb8:	06d1      	lsls	r1, r2, #27
 8008eba:	bf44      	itt	mi
 8008ebc:	2320      	movmi	r3, #32
 8008ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ec2:	0713      	lsls	r3, r2, #28
 8008ec4:	bf44      	itt	mi
 8008ec6:	232b      	movmi	r3, #43	@ 0x2b
 8008ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ed2:	d015      	beq.n	8008f00 <_vfiprintf_r+0x120>
 8008ed4:	4654      	mov	r4, sl
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	f04f 0c0a 	mov.w	ip, #10
 8008edc:	9a07      	ldr	r2, [sp, #28]
 8008ede:	4621      	mov	r1, r4
 8008ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ee4:	3b30      	subs	r3, #48	@ 0x30
 8008ee6:	2b09      	cmp	r3, #9
 8008ee8:	d94b      	bls.n	8008f82 <_vfiprintf_r+0x1a2>
 8008eea:	b1b0      	cbz	r0, 8008f1a <_vfiprintf_r+0x13a>
 8008eec:	9207      	str	r2, [sp, #28]
 8008eee:	e014      	b.n	8008f1a <_vfiprintf_r+0x13a>
 8008ef0:	eba0 0308 	sub.w	r3, r0, r8
 8008ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	46a2      	mov	sl, r4
 8008efc:	9304      	str	r3, [sp, #16]
 8008efe:	e7d2      	b.n	8008ea6 <_vfiprintf_r+0xc6>
 8008f00:	9b03      	ldr	r3, [sp, #12]
 8008f02:	1d19      	adds	r1, r3, #4
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	9103      	str	r1, [sp, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	bfbb      	ittet	lt
 8008f0c:	425b      	neglt	r3, r3
 8008f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8008f12:	9307      	strge	r3, [sp, #28]
 8008f14:	9307      	strlt	r3, [sp, #28]
 8008f16:	bfb8      	it	lt
 8008f18:	9204      	strlt	r2, [sp, #16]
 8008f1a:	7823      	ldrb	r3, [r4, #0]
 8008f1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f1e:	d10a      	bne.n	8008f36 <_vfiprintf_r+0x156>
 8008f20:	7863      	ldrb	r3, [r4, #1]
 8008f22:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f24:	d132      	bne.n	8008f8c <_vfiprintf_r+0x1ac>
 8008f26:	9b03      	ldr	r3, [sp, #12]
 8008f28:	3402      	adds	r4, #2
 8008f2a:	1d1a      	adds	r2, r3, #4
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	9203      	str	r2, [sp, #12]
 8008f30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f34:	9305      	str	r3, [sp, #20]
 8008f36:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009000 <_vfiprintf_r+0x220>
 8008f3a:	2203      	movs	r2, #3
 8008f3c:	4650      	mov	r0, sl
 8008f3e:	7821      	ldrb	r1, [r4, #0]
 8008f40:	f7fd f96f 	bl	8006222 <memchr>
 8008f44:	b138      	cbz	r0, 8008f56 <_vfiprintf_r+0x176>
 8008f46:	2240      	movs	r2, #64	@ 0x40
 8008f48:	9b04      	ldr	r3, [sp, #16]
 8008f4a:	eba0 000a 	sub.w	r0, r0, sl
 8008f4e:	4082      	lsls	r2, r0
 8008f50:	4313      	orrs	r3, r2
 8008f52:	3401      	adds	r4, #1
 8008f54:	9304      	str	r3, [sp, #16]
 8008f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f5a:	2206      	movs	r2, #6
 8008f5c:	4829      	ldr	r0, [pc, #164]	@ (8009004 <_vfiprintf_r+0x224>)
 8008f5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f62:	f7fd f95e 	bl	8006222 <memchr>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d03f      	beq.n	8008fea <_vfiprintf_r+0x20a>
 8008f6a:	4b27      	ldr	r3, [pc, #156]	@ (8009008 <_vfiprintf_r+0x228>)
 8008f6c:	bb1b      	cbnz	r3, 8008fb6 <_vfiprintf_r+0x1d6>
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	3307      	adds	r3, #7
 8008f72:	f023 0307 	bic.w	r3, r3, #7
 8008f76:	3308      	adds	r3, #8
 8008f78:	9303      	str	r3, [sp, #12]
 8008f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f7c:	443b      	add	r3, r7
 8008f7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f80:	e76a      	b.n	8008e58 <_vfiprintf_r+0x78>
 8008f82:	460c      	mov	r4, r1
 8008f84:	2001      	movs	r0, #1
 8008f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f8a:	e7a8      	b.n	8008ede <_vfiprintf_r+0xfe>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	f04f 0c0a 	mov.w	ip, #10
 8008f92:	4619      	mov	r1, r3
 8008f94:	3401      	adds	r4, #1
 8008f96:	9305      	str	r3, [sp, #20]
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f9e:	3a30      	subs	r2, #48	@ 0x30
 8008fa0:	2a09      	cmp	r2, #9
 8008fa2:	d903      	bls.n	8008fac <_vfiprintf_r+0x1cc>
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0c6      	beq.n	8008f36 <_vfiprintf_r+0x156>
 8008fa8:	9105      	str	r1, [sp, #20]
 8008faa:	e7c4      	b.n	8008f36 <_vfiprintf_r+0x156>
 8008fac:	4604      	mov	r4, r0
 8008fae:	2301      	movs	r3, #1
 8008fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fb4:	e7f0      	b.n	8008f98 <_vfiprintf_r+0x1b8>
 8008fb6:	ab03      	add	r3, sp, #12
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	462a      	mov	r2, r5
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	4b13      	ldr	r3, [pc, #76]	@ (800900c <_vfiprintf_r+0x22c>)
 8008fc0:	a904      	add	r1, sp, #16
 8008fc2:	f7fc f929 	bl	8005218 <_printf_float>
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	1c78      	adds	r0, r7, #1
 8008fca:	d1d6      	bne.n	8008f7a <_vfiprintf_r+0x19a>
 8008fcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fce:	07d9      	lsls	r1, r3, #31
 8008fd0:	d405      	bmi.n	8008fde <_vfiprintf_r+0x1fe>
 8008fd2:	89ab      	ldrh	r3, [r5, #12]
 8008fd4:	059a      	lsls	r2, r3, #22
 8008fd6:	d402      	bmi.n	8008fde <_vfiprintf_r+0x1fe>
 8008fd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fda:	f7fd f921 	bl	8006220 <__retarget_lock_release_recursive>
 8008fde:	89ab      	ldrh	r3, [r5, #12]
 8008fe0:	065b      	lsls	r3, r3, #25
 8008fe2:	f53f af1f 	bmi.w	8008e24 <_vfiprintf_r+0x44>
 8008fe6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fe8:	e71e      	b.n	8008e28 <_vfiprintf_r+0x48>
 8008fea:	ab03      	add	r3, sp, #12
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	462a      	mov	r2, r5
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	4b06      	ldr	r3, [pc, #24]	@ (800900c <_vfiprintf_r+0x22c>)
 8008ff4:	a904      	add	r1, sp, #16
 8008ff6:	f7fc fbad 	bl	8005754 <_printf_i>
 8008ffa:	e7e4      	b.n	8008fc6 <_vfiprintf_r+0x1e6>
 8008ffc:	0800a779 	.word	0x0800a779
 8009000:	0800a77f 	.word	0x0800a77f
 8009004:	0800a783 	.word	0x0800a783
 8009008:	08005219 	.word	0x08005219
 800900c:	08008dbb 	.word	0x08008dbb

08009010 <_scanf_chars>:
 8009010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009014:	4615      	mov	r5, r2
 8009016:	688a      	ldr	r2, [r1, #8]
 8009018:	4680      	mov	r8, r0
 800901a:	460c      	mov	r4, r1
 800901c:	b932      	cbnz	r2, 800902c <_scanf_chars+0x1c>
 800901e:	698a      	ldr	r2, [r1, #24]
 8009020:	2a00      	cmp	r2, #0
 8009022:	bf14      	ite	ne
 8009024:	f04f 32ff 	movne.w	r2, #4294967295
 8009028:	2201      	moveq	r2, #1
 800902a:	608a      	str	r2, [r1, #8]
 800902c:	2700      	movs	r7, #0
 800902e:	6822      	ldr	r2, [r4, #0]
 8009030:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80090c0 <_scanf_chars+0xb0>
 8009034:	06d1      	lsls	r1, r2, #27
 8009036:	bf5f      	itttt	pl
 8009038:	681a      	ldrpl	r2, [r3, #0]
 800903a:	1d11      	addpl	r1, r2, #4
 800903c:	6019      	strpl	r1, [r3, #0]
 800903e:	6816      	ldrpl	r6, [r2, #0]
 8009040:	69a0      	ldr	r0, [r4, #24]
 8009042:	b188      	cbz	r0, 8009068 <_scanf_chars+0x58>
 8009044:	2801      	cmp	r0, #1
 8009046:	d107      	bne.n	8009058 <_scanf_chars+0x48>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	781a      	ldrb	r2, [r3, #0]
 800904c:	6963      	ldr	r3, [r4, #20]
 800904e:	5c9b      	ldrb	r3, [r3, r2]
 8009050:	b953      	cbnz	r3, 8009068 <_scanf_chars+0x58>
 8009052:	2f00      	cmp	r7, #0
 8009054:	d031      	beq.n	80090ba <_scanf_chars+0xaa>
 8009056:	e022      	b.n	800909e <_scanf_chars+0x8e>
 8009058:	2802      	cmp	r0, #2
 800905a:	d120      	bne.n	800909e <_scanf_chars+0x8e>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009064:	071b      	lsls	r3, r3, #28
 8009066:	d41a      	bmi.n	800909e <_scanf_chars+0x8e>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	3701      	adds	r7, #1
 800906c:	06da      	lsls	r2, r3, #27
 800906e:	bf5e      	ittt	pl
 8009070:	682b      	ldrpl	r3, [r5, #0]
 8009072:	781b      	ldrbpl	r3, [r3, #0]
 8009074:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009078:	682a      	ldr	r2, [r5, #0]
 800907a:	686b      	ldr	r3, [r5, #4]
 800907c:	3201      	adds	r2, #1
 800907e:	602a      	str	r2, [r5, #0]
 8009080:	68a2      	ldr	r2, [r4, #8]
 8009082:	3b01      	subs	r3, #1
 8009084:	3a01      	subs	r2, #1
 8009086:	606b      	str	r3, [r5, #4]
 8009088:	60a2      	str	r2, [r4, #8]
 800908a:	b142      	cbz	r2, 800909e <_scanf_chars+0x8e>
 800908c:	2b00      	cmp	r3, #0
 800908e:	dcd7      	bgt.n	8009040 <_scanf_chars+0x30>
 8009090:	4629      	mov	r1, r5
 8009092:	4640      	mov	r0, r8
 8009094:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009098:	4798      	blx	r3
 800909a:	2800      	cmp	r0, #0
 800909c:	d0d0      	beq.n	8009040 <_scanf_chars+0x30>
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	f013 0310 	ands.w	r3, r3, #16
 80090a4:	d105      	bne.n	80090b2 <_scanf_chars+0xa2>
 80090a6:	68e2      	ldr	r2, [r4, #12]
 80090a8:	3201      	adds	r2, #1
 80090aa:	60e2      	str	r2, [r4, #12]
 80090ac:	69a2      	ldr	r2, [r4, #24]
 80090ae:	b102      	cbz	r2, 80090b2 <_scanf_chars+0xa2>
 80090b0:	7033      	strb	r3, [r6, #0]
 80090b2:	2000      	movs	r0, #0
 80090b4:	6923      	ldr	r3, [r4, #16]
 80090b6:	443b      	add	r3, r7
 80090b8:	6123      	str	r3, [r4, #16]
 80090ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090be:	bf00      	nop
 80090c0:	0800a679 	.word	0x0800a679

080090c4 <_scanf_i>:
 80090c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c8:	460c      	mov	r4, r1
 80090ca:	4698      	mov	r8, r3
 80090cc:	4b72      	ldr	r3, [pc, #456]	@ (8009298 <_scanf_i+0x1d4>)
 80090ce:	b087      	sub	sp, #28
 80090d0:	4682      	mov	sl, r0
 80090d2:	4616      	mov	r6, r2
 80090d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090d8:	ab03      	add	r3, sp, #12
 80090da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80090de:	4b6f      	ldr	r3, [pc, #444]	@ (800929c <_scanf_i+0x1d8>)
 80090e0:	69a1      	ldr	r1, [r4, #24]
 80090e2:	4a6f      	ldr	r2, [pc, #444]	@ (80092a0 <_scanf_i+0x1dc>)
 80090e4:	4627      	mov	r7, r4
 80090e6:	2903      	cmp	r1, #3
 80090e8:	bf08      	it	eq
 80090ea:	461a      	moveq	r2, r3
 80090ec:	68a3      	ldr	r3, [r4, #8]
 80090ee:	9201      	str	r2, [sp, #4]
 80090f0:	1e5a      	subs	r2, r3, #1
 80090f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80090f6:	bf81      	itttt	hi
 80090f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80090fc:	eb03 0905 	addhi.w	r9, r3, r5
 8009100:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009104:	60a3      	strhi	r3, [r4, #8]
 8009106:	f857 3b1c 	ldr.w	r3, [r7], #28
 800910a:	bf98      	it	ls
 800910c:	f04f 0900 	movls.w	r9, #0
 8009110:	463d      	mov	r5, r7
 8009112:	f04f 0b00 	mov.w	fp, #0
 8009116:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800911a:	6023      	str	r3, [r4, #0]
 800911c:	6831      	ldr	r1, [r6, #0]
 800911e:	ab03      	add	r3, sp, #12
 8009120:	2202      	movs	r2, #2
 8009122:	7809      	ldrb	r1, [r1, #0]
 8009124:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009128:	f7fd f87b 	bl	8006222 <memchr>
 800912c:	b328      	cbz	r0, 800917a <_scanf_i+0xb6>
 800912e:	f1bb 0f01 	cmp.w	fp, #1
 8009132:	d159      	bne.n	80091e8 <_scanf_i+0x124>
 8009134:	6862      	ldr	r2, [r4, #4]
 8009136:	b92a      	cbnz	r2, 8009144 <_scanf_i+0x80>
 8009138:	2108      	movs	r1, #8
 800913a:	6822      	ldr	r2, [r4, #0]
 800913c:	6061      	str	r1, [r4, #4]
 800913e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009142:	6022      	str	r2, [r4, #0]
 8009144:	6822      	ldr	r2, [r4, #0]
 8009146:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800914a:	6022      	str	r2, [r4, #0]
 800914c:	68a2      	ldr	r2, [r4, #8]
 800914e:	1e51      	subs	r1, r2, #1
 8009150:	60a1      	str	r1, [r4, #8]
 8009152:	b192      	cbz	r2, 800917a <_scanf_i+0xb6>
 8009154:	6832      	ldr	r2, [r6, #0]
 8009156:	1c51      	adds	r1, r2, #1
 8009158:	6031      	str	r1, [r6, #0]
 800915a:	7812      	ldrb	r2, [r2, #0]
 800915c:	f805 2b01 	strb.w	r2, [r5], #1
 8009160:	6872      	ldr	r2, [r6, #4]
 8009162:	3a01      	subs	r2, #1
 8009164:	2a00      	cmp	r2, #0
 8009166:	6072      	str	r2, [r6, #4]
 8009168:	dc07      	bgt.n	800917a <_scanf_i+0xb6>
 800916a:	4631      	mov	r1, r6
 800916c:	4650      	mov	r0, sl
 800916e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009172:	4790      	blx	r2
 8009174:	2800      	cmp	r0, #0
 8009176:	f040 8085 	bne.w	8009284 <_scanf_i+0x1c0>
 800917a:	f10b 0b01 	add.w	fp, fp, #1
 800917e:	f1bb 0f03 	cmp.w	fp, #3
 8009182:	d1cb      	bne.n	800911c <_scanf_i+0x58>
 8009184:	6863      	ldr	r3, [r4, #4]
 8009186:	b90b      	cbnz	r3, 800918c <_scanf_i+0xc8>
 8009188:	230a      	movs	r3, #10
 800918a:	6063      	str	r3, [r4, #4]
 800918c:	6863      	ldr	r3, [r4, #4]
 800918e:	4945      	ldr	r1, [pc, #276]	@ (80092a4 <_scanf_i+0x1e0>)
 8009190:	6960      	ldr	r0, [r4, #20]
 8009192:	1ac9      	subs	r1, r1, r3
 8009194:	f000 f930 	bl	80093f8 <__sccl>
 8009198:	f04f 0b00 	mov.w	fp, #0
 800919c:	68a3      	ldr	r3, [r4, #8]
 800919e:	6822      	ldr	r2, [r4, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d03d      	beq.n	8009220 <_scanf_i+0x15c>
 80091a4:	6831      	ldr	r1, [r6, #0]
 80091a6:	6960      	ldr	r0, [r4, #20]
 80091a8:	f891 c000 	ldrb.w	ip, [r1]
 80091ac:	f810 000c 	ldrb.w	r0, [r0, ip]
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d035      	beq.n	8009220 <_scanf_i+0x15c>
 80091b4:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80091b8:	d124      	bne.n	8009204 <_scanf_i+0x140>
 80091ba:	0510      	lsls	r0, r2, #20
 80091bc:	d522      	bpl.n	8009204 <_scanf_i+0x140>
 80091be:	f10b 0b01 	add.w	fp, fp, #1
 80091c2:	f1b9 0f00 	cmp.w	r9, #0
 80091c6:	d003      	beq.n	80091d0 <_scanf_i+0x10c>
 80091c8:	3301      	adds	r3, #1
 80091ca:	f109 39ff 	add.w	r9, r9, #4294967295
 80091ce:	60a3      	str	r3, [r4, #8]
 80091d0:	6873      	ldr	r3, [r6, #4]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	6073      	str	r3, [r6, #4]
 80091d8:	dd1b      	ble.n	8009212 <_scanf_i+0x14e>
 80091da:	6833      	ldr	r3, [r6, #0]
 80091dc:	3301      	adds	r3, #1
 80091de:	6033      	str	r3, [r6, #0]
 80091e0:	68a3      	ldr	r3, [r4, #8]
 80091e2:	3b01      	subs	r3, #1
 80091e4:	60a3      	str	r3, [r4, #8]
 80091e6:	e7d9      	b.n	800919c <_scanf_i+0xd8>
 80091e8:	f1bb 0f02 	cmp.w	fp, #2
 80091ec:	d1ae      	bne.n	800914c <_scanf_i+0x88>
 80091ee:	6822      	ldr	r2, [r4, #0]
 80091f0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80091f4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80091f8:	d1bf      	bne.n	800917a <_scanf_i+0xb6>
 80091fa:	2110      	movs	r1, #16
 80091fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009200:	6061      	str	r1, [r4, #4]
 8009202:	e7a2      	b.n	800914a <_scanf_i+0x86>
 8009204:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009208:	6022      	str	r2, [r4, #0]
 800920a:	780b      	ldrb	r3, [r1, #0]
 800920c:	f805 3b01 	strb.w	r3, [r5], #1
 8009210:	e7de      	b.n	80091d0 <_scanf_i+0x10c>
 8009212:	4631      	mov	r1, r6
 8009214:	4650      	mov	r0, sl
 8009216:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800921a:	4798      	blx	r3
 800921c:	2800      	cmp	r0, #0
 800921e:	d0df      	beq.n	80091e0 <_scanf_i+0x11c>
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	05d9      	lsls	r1, r3, #23
 8009224:	d50d      	bpl.n	8009242 <_scanf_i+0x17e>
 8009226:	42bd      	cmp	r5, r7
 8009228:	d909      	bls.n	800923e <_scanf_i+0x17a>
 800922a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800922e:	4632      	mov	r2, r6
 8009230:	4650      	mov	r0, sl
 8009232:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009236:	f105 39ff 	add.w	r9, r5, #4294967295
 800923a:	4798      	blx	r3
 800923c:	464d      	mov	r5, r9
 800923e:	42bd      	cmp	r5, r7
 8009240:	d028      	beq.n	8009294 <_scanf_i+0x1d0>
 8009242:	6822      	ldr	r2, [r4, #0]
 8009244:	f012 0210 	ands.w	r2, r2, #16
 8009248:	d113      	bne.n	8009272 <_scanf_i+0x1ae>
 800924a:	702a      	strb	r2, [r5, #0]
 800924c:	4639      	mov	r1, r7
 800924e:	6863      	ldr	r3, [r4, #4]
 8009250:	4650      	mov	r0, sl
 8009252:	9e01      	ldr	r6, [sp, #4]
 8009254:	47b0      	blx	r6
 8009256:	f8d8 3000 	ldr.w	r3, [r8]
 800925a:	6821      	ldr	r1, [r4, #0]
 800925c:	1d1a      	adds	r2, r3, #4
 800925e:	f8c8 2000 	str.w	r2, [r8]
 8009262:	f011 0f20 	tst.w	r1, #32
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	d00f      	beq.n	800928a <_scanf_i+0x1c6>
 800926a:	6018      	str	r0, [r3, #0]
 800926c:	68e3      	ldr	r3, [r4, #12]
 800926e:	3301      	adds	r3, #1
 8009270:	60e3      	str	r3, [r4, #12]
 8009272:	2000      	movs	r0, #0
 8009274:	6923      	ldr	r3, [r4, #16]
 8009276:	1bed      	subs	r5, r5, r7
 8009278:	445d      	add	r5, fp
 800927a:	442b      	add	r3, r5
 800927c:	6123      	str	r3, [r4, #16]
 800927e:	b007      	add	sp, #28
 8009280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009284:	f04f 0b00 	mov.w	fp, #0
 8009288:	e7ca      	b.n	8009220 <_scanf_i+0x15c>
 800928a:	07ca      	lsls	r2, r1, #31
 800928c:	bf4c      	ite	mi
 800928e:	8018      	strhmi	r0, [r3, #0]
 8009290:	6018      	strpl	r0, [r3, #0]
 8009292:	e7eb      	b.n	800926c <_scanf_i+0x1a8>
 8009294:	2001      	movs	r0, #1
 8009296:	e7f2      	b.n	800927e <_scanf_i+0x1ba>
 8009298:	0800a3bc 	.word	0x0800a3bc
 800929c:	08008749 	.word	0x08008749
 80092a0:	08009ebd 	.word	0x08009ebd
 80092a4:	0800a79a 	.word	0x0800a79a

080092a8 <__sflush_r>:
 80092a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	0716      	lsls	r6, r2, #28
 80092b0:	4605      	mov	r5, r0
 80092b2:	460c      	mov	r4, r1
 80092b4:	d454      	bmi.n	8009360 <__sflush_r+0xb8>
 80092b6:	684b      	ldr	r3, [r1, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	dc02      	bgt.n	80092c2 <__sflush_r+0x1a>
 80092bc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80092be:	2b00      	cmp	r3, #0
 80092c0:	dd48      	ble.n	8009354 <__sflush_r+0xac>
 80092c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092c4:	2e00      	cmp	r6, #0
 80092c6:	d045      	beq.n	8009354 <__sflush_r+0xac>
 80092c8:	2300      	movs	r3, #0
 80092ca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80092ce:	682f      	ldr	r7, [r5, #0]
 80092d0:	6a21      	ldr	r1, [r4, #32]
 80092d2:	602b      	str	r3, [r5, #0]
 80092d4:	d030      	beq.n	8009338 <__sflush_r+0x90>
 80092d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	0759      	lsls	r1, r3, #29
 80092dc:	d505      	bpl.n	80092ea <__sflush_r+0x42>
 80092de:	6863      	ldr	r3, [r4, #4]
 80092e0:	1ad2      	subs	r2, r2, r3
 80092e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092e4:	b10b      	cbz	r3, 80092ea <__sflush_r+0x42>
 80092e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80092e8:	1ad2      	subs	r2, r2, r3
 80092ea:	2300      	movs	r3, #0
 80092ec:	4628      	mov	r0, r5
 80092ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092f0:	6a21      	ldr	r1, [r4, #32]
 80092f2:	47b0      	blx	r6
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	89a3      	ldrh	r3, [r4, #12]
 80092f8:	d106      	bne.n	8009308 <__sflush_r+0x60>
 80092fa:	6829      	ldr	r1, [r5, #0]
 80092fc:	291d      	cmp	r1, #29
 80092fe:	d82b      	bhi.n	8009358 <__sflush_r+0xb0>
 8009300:	4a28      	ldr	r2, [pc, #160]	@ (80093a4 <__sflush_r+0xfc>)
 8009302:	410a      	asrs	r2, r1
 8009304:	07d6      	lsls	r6, r2, #31
 8009306:	d427      	bmi.n	8009358 <__sflush_r+0xb0>
 8009308:	2200      	movs	r2, #0
 800930a:	6062      	str	r2, [r4, #4]
 800930c:	6922      	ldr	r2, [r4, #16]
 800930e:	04d9      	lsls	r1, r3, #19
 8009310:	6022      	str	r2, [r4, #0]
 8009312:	d504      	bpl.n	800931e <__sflush_r+0x76>
 8009314:	1c42      	adds	r2, r0, #1
 8009316:	d101      	bne.n	800931c <__sflush_r+0x74>
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	b903      	cbnz	r3, 800931e <__sflush_r+0x76>
 800931c:	6560      	str	r0, [r4, #84]	@ 0x54
 800931e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009320:	602f      	str	r7, [r5, #0]
 8009322:	b1b9      	cbz	r1, 8009354 <__sflush_r+0xac>
 8009324:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009328:	4299      	cmp	r1, r3
 800932a:	d002      	beq.n	8009332 <__sflush_r+0x8a>
 800932c:	4628      	mov	r0, r5
 800932e:	f7fd fdeb 	bl	8006f08 <_free_r>
 8009332:	2300      	movs	r3, #0
 8009334:	6363      	str	r3, [r4, #52]	@ 0x34
 8009336:	e00d      	b.n	8009354 <__sflush_r+0xac>
 8009338:	2301      	movs	r3, #1
 800933a:	4628      	mov	r0, r5
 800933c:	47b0      	blx	r6
 800933e:	4602      	mov	r2, r0
 8009340:	1c50      	adds	r0, r2, #1
 8009342:	d1c9      	bne.n	80092d8 <__sflush_r+0x30>
 8009344:	682b      	ldr	r3, [r5, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d0c6      	beq.n	80092d8 <__sflush_r+0x30>
 800934a:	2b1d      	cmp	r3, #29
 800934c:	d001      	beq.n	8009352 <__sflush_r+0xaa>
 800934e:	2b16      	cmp	r3, #22
 8009350:	d11d      	bne.n	800938e <__sflush_r+0xe6>
 8009352:	602f      	str	r7, [r5, #0]
 8009354:	2000      	movs	r0, #0
 8009356:	e021      	b.n	800939c <__sflush_r+0xf4>
 8009358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800935c:	b21b      	sxth	r3, r3
 800935e:	e01a      	b.n	8009396 <__sflush_r+0xee>
 8009360:	690f      	ldr	r7, [r1, #16]
 8009362:	2f00      	cmp	r7, #0
 8009364:	d0f6      	beq.n	8009354 <__sflush_r+0xac>
 8009366:	0793      	lsls	r3, r2, #30
 8009368:	bf18      	it	ne
 800936a:	2300      	movne	r3, #0
 800936c:	680e      	ldr	r6, [r1, #0]
 800936e:	bf08      	it	eq
 8009370:	694b      	ldreq	r3, [r1, #20]
 8009372:	1bf6      	subs	r6, r6, r7
 8009374:	600f      	str	r7, [r1, #0]
 8009376:	608b      	str	r3, [r1, #8]
 8009378:	2e00      	cmp	r6, #0
 800937a:	ddeb      	ble.n	8009354 <__sflush_r+0xac>
 800937c:	4633      	mov	r3, r6
 800937e:	463a      	mov	r2, r7
 8009380:	4628      	mov	r0, r5
 8009382:	6a21      	ldr	r1, [r4, #32]
 8009384:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009388:	47e0      	blx	ip
 800938a:	2800      	cmp	r0, #0
 800938c:	dc07      	bgt.n	800939e <__sflush_r+0xf6>
 800938e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009396:	f04f 30ff 	mov.w	r0, #4294967295
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800939e:	4407      	add	r7, r0
 80093a0:	1a36      	subs	r6, r6, r0
 80093a2:	e7e9      	b.n	8009378 <__sflush_r+0xd0>
 80093a4:	dfbffffe 	.word	0xdfbffffe

080093a8 <_fflush_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	690b      	ldr	r3, [r1, #16]
 80093ac:	4605      	mov	r5, r0
 80093ae:	460c      	mov	r4, r1
 80093b0:	b913      	cbnz	r3, 80093b8 <_fflush_r+0x10>
 80093b2:	2500      	movs	r5, #0
 80093b4:	4628      	mov	r0, r5
 80093b6:	bd38      	pop	{r3, r4, r5, pc}
 80093b8:	b118      	cbz	r0, 80093c2 <_fflush_r+0x1a>
 80093ba:	6a03      	ldr	r3, [r0, #32]
 80093bc:	b90b      	cbnz	r3, 80093c2 <_fflush_r+0x1a>
 80093be:	f7fc fd85 	bl	8005ecc <__sinit>
 80093c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d0f3      	beq.n	80093b2 <_fflush_r+0xa>
 80093ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80093cc:	07d0      	lsls	r0, r2, #31
 80093ce:	d404      	bmi.n	80093da <_fflush_r+0x32>
 80093d0:	0599      	lsls	r1, r3, #22
 80093d2:	d402      	bmi.n	80093da <_fflush_r+0x32>
 80093d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093d6:	f7fc ff22 	bl	800621e <__retarget_lock_acquire_recursive>
 80093da:	4628      	mov	r0, r5
 80093dc:	4621      	mov	r1, r4
 80093de:	f7ff ff63 	bl	80092a8 <__sflush_r>
 80093e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093e4:	4605      	mov	r5, r0
 80093e6:	07da      	lsls	r2, r3, #31
 80093e8:	d4e4      	bmi.n	80093b4 <_fflush_r+0xc>
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	059b      	lsls	r3, r3, #22
 80093ee:	d4e1      	bmi.n	80093b4 <_fflush_r+0xc>
 80093f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093f2:	f7fc ff15 	bl	8006220 <__retarget_lock_release_recursive>
 80093f6:	e7dd      	b.n	80093b4 <_fflush_r+0xc>

080093f8 <__sccl>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	780b      	ldrb	r3, [r1, #0]
 80093fc:	4604      	mov	r4, r0
 80093fe:	2b5e      	cmp	r3, #94	@ 0x5e
 8009400:	bf0b      	itete	eq
 8009402:	784b      	ldrbeq	r3, [r1, #1]
 8009404:	1c4a      	addne	r2, r1, #1
 8009406:	1c8a      	addeq	r2, r1, #2
 8009408:	2100      	movne	r1, #0
 800940a:	bf08      	it	eq
 800940c:	2101      	moveq	r1, #1
 800940e:	3801      	subs	r0, #1
 8009410:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009414:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009418:	42a8      	cmp	r0, r5
 800941a:	d1fb      	bne.n	8009414 <__sccl+0x1c>
 800941c:	b90b      	cbnz	r3, 8009422 <__sccl+0x2a>
 800941e:	1e50      	subs	r0, r2, #1
 8009420:	bd70      	pop	{r4, r5, r6, pc}
 8009422:	f081 0101 	eor.w	r1, r1, #1
 8009426:	4610      	mov	r0, r2
 8009428:	54e1      	strb	r1, [r4, r3]
 800942a:	4602      	mov	r2, r0
 800942c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009430:	2d2d      	cmp	r5, #45	@ 0x2d
 8009432:	d005      	beq.n	8009440 <__sccl+0x48>
 8009434:	2d5d      	cmp	r5, #93	@ 0x5d
 8009436:	d016      	beq.n	8009466 <__sccl+0x6e>
 8009438:	2d00      	cmp	r5, #0
 800943a:	d0f1      	beq.n	8009420 <__sccl+0x28>
 800943c:	462b      	mov	r3, r5
 800943e:	e7f2      	b.n	8009426 <__sccl+0x2e>
 8009440:	7846      	ldrb	r6, [r0, #1]
 8009442:	2e5d      	cmp	r6, #93	@ 0x5d
 8009444:	d0fa      	beq.n	800943c <__sccl+0x44>
 8009446:	42b3      	cmp	r3, r6
 8009448:	dcf8      	bgt.n	800943c <__sccl+0x44>
 800944a:	461a      	mov	r2, r3
 800944c:	3002      	adds	r0, #2
 800944e:	3201      	adds	r2, #1
 8009450:	4296      	cmp	r6, r2
 8009452:	54a1      	strb	r1, [r4, r2]
 8009454:	dcfb      	bgt.n	800944e <__sccl+0x56>
 8009456:	1af2      	subs	r2, r6, r3
 8009458:	3a01      	subs	r2, #1
 800945a:	42b3      	cmp	r3, r6
 800945c:	bfa8      	it	ge
 800945e:	2200      	movge	r2, #0
 8009460:	1c5d      	adds	r5, r3, #1
 8009462:	18ab      	adds	r3, r5, r2
 8009464:	e7e1      	b.n	800942a <__sccl+0x32>
 8009466:	4610      	mov	r0, r2
 8009468:	e7da      	b.n	8009420 <__sccl+0x28>

0800946a <__submore>:
 800946a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800946e:	460c      	mov	r4, r1
 8009470:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009472:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009476:	4299      	cmp	r1, r3
 8009478:	d11b      	bne.n	80094b2 <__submore+0x48>
 800947a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800947e:	f7fd fdb5 	bl	8006fec <_malloc_r>
 8009482:	b918      	cbnz	r0, 800948c <__submore+0x22>
 8009484:	f04f 30ff 	mov.w	r0, #4294967295
 8009488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800948c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009490:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009492:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009496:	6360      	str	r0, [r4, #52]	@ 0x34
 8009498:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800949c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80094a0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80094a4:	7043      	strb	r3, [r0, #1]
 80094a6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80094aa:	7003      	strb	r3, [r0, #0]
 80094ac:	6020      	str	r0, [r4, #0]
 80094ae:	2000      	movs	r0, #0
 80094b0:	e7ea      	b.n	8009488 <__submore+0x1e>
 80094b2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80094b4:	0077      	lsls	r7, r6, #1
 80094b6:	463a      	mov	r2, r7
 80094b8:	f000 fc63 	bl	8009d82 <_realloc_r>
 80094bc:	4605      	mov	r5, r0
 80094be:	2800      	cmp	r0, #0
 80094c0:	d0e0      	beq.n	8009484 <__submore+0x1a>
 80094c2:	eb00 0806 	add.w	r8, r0, r6
 80094c6:	4601      	mov	r1, r0
 80094c8:	4632      	mov	r2, r6
 80094ca:	4640      	mov	r0, r8
 80094cc:	f7fc feb7 	bl	800623e <memcpy>
 80094d0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80094d4:	f8c4 8000 	str.w	r8, [r4]
 80094d8:	e7e9      	b.n	80094ae <__submore+0x44>

080094da <__swbuf_r>:
 80094da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094dc:	460e      	mov	r6, r1
 80094de:	4614      	mov	r4, r2
 80094e0:	4605      	mov	r5, r0
 80094e2:	b118      	cbz	r0, 80094ec <__swbuf_r+0x12>
 80094e4:	6a03      	ldr	r3, [r0, #32]
 80094e6:	b90b      	cbnz	r3, 80094ec <__swbuf_r+0x12>
 80094e8:	f7fc fcf0 	bl	8005ecc <__sinit>
 80094ec:	69a3      	ldr	r3, [r4, #24]
 80094ee:	60a3      	str	r3, [r4, #8]
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	071a      	lsls	r2, r3, #28
 80094f4:	d501      	bpl.n	80094fa <__swbuf_r+0x20>
 80094f6:	6923      	ldr	r3, [r4, #16]
 80094f8:	b943      	cbnz	r3, 800950c <__swbuf_r+0x32>
 80094fa:	4621      	mov	r1, r4
 80094fc:	4628      	mov	r0, r5
 80094fe:	f000 f82b 	bl	8009558 <__swsetup_r>
 8009502:	b118      	cbz	r0, 800950c <__swbuf_r+0x32>
 8009504:	f04f 37ff 	mov.w	r7, #4294967295
 8009508:	4638      	mov	r0, r7
 800950a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800950c:	6823      	ldr	r3, [r4, #0]
 800950e:	6922      	ldr	r2, [r4, #16]
 8009510:	b2f6      	uxtb	r6, r6
 8009512:	1a98      	subs	r0, r3, r2
 8009514:	6963      	ldr	r3, [r4, #20]
 8009516:	4637      	mov	r7, r6
 8009518:	4283      	cmp	r3, r0
 800951a:	dc05      	bgt.n	8009528 <__swbuf_r+0x4e>
 800951c:	4621      	mov	r1, r4
 800951e:	4628      	mov	r0, r5
 8009520:	f7ff ff42 	bl	80093a8 <_fflush_r>
 8009524:	2800      	cmp	r0, #0
 8009526:	d1ed      	bne.n	8009504 <__swbuf_r+0x2a>
 8009528:	68a3      	ldr	r3, [r4, #8]
 800952a:	3b01      	subs	r3, #1
 800952c:	60a3      	str	r3, [r4, #8]
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	1c5a      	adds	r2, r3, #1
 8009532:	6022      	str	r2, [r4, #0]
 8009534:	701e      	strb	r6, [r3, #0]
 8009536:	6962      	ldr	r2, [r4, #20]
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	429a      	cmp	r2, r3
 800953c:	d004      	beq.n	8009548 <__swbuf_r+0x6e>
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	07db      	lsls	r3, r3, #31
 8009542:	d5e1      	bpl.n	8009508 <__swbuf_r+0x2e>
 8009544:	2e0a      	cmp	r6, #10
 8009546:	d1df      	bne.n	8009508 <__swbuf_r+0x2e>
 8009548:	4621      	mov	r1, r4
 800954a:	4628      	mov	r0, r5
 800954c:	f7ff ff2c 	bl	80093a8 <_fflush_r>
 8009550:	2800      	cmp	r0, #0
 8009552:	d0d9      	beq.n	8009508 <__swbuf_r+0x2e>
 8009554:	e7d6      	b.n	8009504 <__swbuf_r+0x2a>
	...

08009558 <__swsetup_r>:
 8009558:	b538      	push	{r3, r4, r5, lr}
 800955a:	4b29      	ldr	r3, [pc, #164]	@ (8009600 <__swsetup_r+0xa8>)
 800955c:	4605      	mov	r5, r0
 800955e:	6818      	ldr	r0, [r3, #0]
 8009560:	460c      	mov	r4, r1
 8009562:	b118      	cbz	r0, 800956c <__swsetup_r+0x14>
 8009564:	6a03      	ldr	r3, [r0, #32]
 8009566:	b90b      	cbnz	r3, 800956c <__swsetup_r+0x14>
 8009568:	f7fc fcb0 	bl	8005ecc <__sinit>
 800956c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009570:	0719      	lsls	r1, r3, #28
 8009572:	d422      	bmi.n	80095ba <__swsetup_r+0x62>
 8009574:	06da      	lsls	r2, r3, #27
 8009576:	d407      	bmi.n	8009588 <__swsetup_r+0x30>
 8009578:	2209      	movs	r2, #9
 800957a:	602a      	str	r2, [r5, #0]
 800957c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	81a3      	strh	r3, [r4, #12]
 8009586:	e033      	b.n	80095f0 <__swsetup_r+0x98>
 8009588:	0758      	lsls	r0, r3, #29
 800958a:	d512      	bpl.n	80095b2 <__swsetup_r+0x5a>
 800958c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800958e:	b141      	cbz	r1, 80095a2 <__swsetup_r+0x4a>
 8009590:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009594:	4299      	cmp	r1, r3
 8009596:	d002      	beq.n	800959e <__swsetup_r+0x46>
 8009598:	4628      	mov	r0, r5
 800959a:	f7fd fcb5 	bl	8006f08 <_free_r>
 800959e:	2300      	movs	r3, #0
 80095a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80095a8:	81a3      	strh	r3, [r4, #12]
 80095aa:	2300      	movs	r3, #0
 80095ac:	6063      	str	r3, [r4, #4]
 80095ae:	6923      	ldr	r3, [r4, #16]
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	89a3      	ldrh	r3, [r4, #12]
 80095b4:	f043 0308 	orr.w	r3, r3, #8
 80095b8:	81a3      	strh	r3, [r4, #12]
 80095ba:	6923      	ldr	r3, [r4, #16]
 80095bc:	b94b      	cbnz	r3, 80095d2 <__swsetup_r+0x7a>
 80095be:	89a3      	ldrh	r3, [r4, #12]
 80095c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80095c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095c8:	d003      	beq.n	80095d2 <__swsetup_r+0x7a>
 80095ca:	4621      	mov	r1, r4
 80095cc:	4628      	mov	r0, r5
 80095ce:	f000 fcbc 	bl	8009f4a <__smakebuf_r>
 80095d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095d6:	f013 0201 	ands.w	r2, r3, #1
 80095da:	d00a      	beq.n	80095f2 <__swsetup_r+0x9a>
 80095dc:	2200      	movs	r2, #0
 80095de:	60a2      	str	r2, [r4, #8]
 80095e0:	6962      	ldr	r2, [r4, #20]
 80095e2:	4252      	negs	r2, r2
 80095e4:	61a2      	str	r2, [r4, #24]
 80095e6:	6922      	ldr	r2, [r4, #16]
 80095e8:	b942      	cbnz	r2, 80095fc <__swsetup_r+0xa4>
 80095ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095ee:	d1c5      	bne.n	800957c <__swsetup_r+0x24>
 80095f0:	bd38      	pop	{r3, r4, r5, pc}
 80095f2:	0799      	lsls	r1, r3, #30
 80095f4:	bf58      	it	pl
 80095f6:	6962      	ldrpl	r2, [r4, #20]
 80095f8:	60a2      	str	r2, [r4, #8]
 80095fa:	e7f4      	b.n	80095e6 <__swsetup_r+0x8e>
 80095fc:	2000      	movs	r0, #0
 80095fe:	e7f7      	b.n	80095f0 <__swsetup_r+0x98>
 8009600:	2000001c 	.word	0x2000001c

08009604 <memmove>:
 8009604:	4288      	cmp	r0, r1
 8009606:	b510      	push	{r4, lr}
 8009608:	eb01 0402 	add.w	r4, r1, r2
 800960c:	d902      	bls.n	8009614 <memmove+0x10>
 800960e:	4284      	cmp	r4, r0
 8009610:	4623      	mov	r3, r4
 8009612:	d807      	bhi.n	8009624 <memmove+0x20>
 8009614:	1e43      	subs	r3, r0, #1
 8009616:	42a1      	cmp	r1, r4
 8009618:	d008      	beq.n	800962c <memmove+0x28>
 800961a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800961e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009622:	e7f8      	b.n	8009616 <memmove+0x12>
 8009624:	4601      	mov	r1, r0
 8009626:	4402      	add	r2, r0
 8009628:	428a      	cmp	r2, r1
 800962a:	d100      	bne.n	800962e <memmove+0x2a>
 800962c:	bd10      	pop	{r4, pc}
 800962e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009636:	e7f7      	b.n	8009628 <memmove+0x24>

08009638 <strncmp>:
 8009638:	b510      	push	{r4, lr}
 800963a:	b16a      	cbz	r2, 8009658 <strncmp+0x20>
 800963c:	3901      	subs	r1, #1
 800963e:	1884      	adds	r4, r0, r2
 8009640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009644:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009648:	429a      	cmp	r2, r3
 800964a:	d103      	bne.n	8009654 <strncmp+0x1c>
 800964c:	42a0      	cmp	r0, r4
 800964e:	d001      	beq.n	8009654 <strncmp+0x1c>
 8009650:	2a00      	cmp	r2, #0
 8009652:	d1f5      	bne.n	8009640 <strncmp+0x8>
 8009654:	1ad0      	subs	r0, r2, r3
 8009656:	bd10      	pop	{r4, pc}
 8009658:	4610      	mov	r0, r2
 800965a:	e7fc      	b.n	8009656 <strncmp+0x1e>

0800965c <_sbrk_r>:
 800965c:	b538      	push	{r3, r4, r5, lr}
 800965e:	2300      	movs	r3, #0
 8009660:	4d05      	ldr	r5, [pc, #20]	@ (8009678 <_sbrk_r+0x1c>)
 8009662:	4604      	mov	r4, r0
 8009664:	4608      	mov	r0, r1
 8009666:	602b      	str	r3, [r5, #0]
 8009668:	f7f8 ffea 	bl	8002640 <_sbrk>
 800966c:	1c43      	adds	r3, r0, #1
 800966e:	d102      	bne.n	8009676 <_sbrk_r+0x1a>
 8009670:	682b      	ldr	r3, [r5, #0]
 8009672:	b103      	cbz	r3, 8009676 <_sbrk_r+0x1a>
 8009674:	6023      	str	r3, [r4, #0]
 8009676:	bd38      	pop	{r3, r4, r5, pc}
 8009678:	2000083c 	.word	0x2000083c

0800967c <nan>:
 800967c:	2000      	movs	r0, #0
 800967e:	4901      	ldr	r1, [pc, #4]	@ (8009684 <nan+0x8>)
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	7ff80000 	.word	0x7ff80000

08009688 <__assert_func>:
 8009688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800968a:	4614      	mov	r4, r2
 800968c:	461a      	mov	r2, r3
 800968e:	4b09      	ldr	r3, [pc, #36]	@ (80096b4 <__assert_func+0x2c>)
 8009690:	4605      	mov	r5, r0
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68d8      	ldr	r0, [r3, #12]
 8009696:	b954      	cbnz	r4, 80096ae <__assert_func+0x26>
 8009698:	4b07      	ldr	r3, [pc, #28]	@ (80096b8 <__assert_func+0x30>)
 800969a:	461c      	mov	r4, r3
 800969c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096a0:	9100      	str	r1, [sp, #0]
 80096a2:	462b      	mov	r3, r5
 80096a4:	4905      	ldr	r1, [pc, #20]	@ (80096bc <__assert_func+0x34>)
 80096a6:	f000 fc19 	bl	8009edc <fiprintf>
 80096aa:	f000 fcad 	bl	800a008 <abort>
 80096ae:	4b04      	ldr	r3, [pc, #16]	@ (80096c0 <__assert_func+0x38>)
 80096b0:	e7f4      	b.n	800969c <__assert_func+0x14>
 80096b2:	bf00      	nop
 80096b4:	2000001c 	.word	0x2000001c
 80096b8:	0800a7e8 	.word	0x0800a7e8
 80096bc:	0800a7ba 	.word	0x0800a7ba
 80096c0:	0800a7ad 	.word	0x0800a7ad

080096c4 <_calloc_r>:
 80096c4:	b570      	push	{r4, r5, r6, lr}
 80096c6:	fba1 5402 	umull	r5, r4, r1, r2
 80096ca:	b93c      	cbnz	r4, 80096dc <_calloc_r+0x18>
 80096cc:	4629      	mov	r1, r5
 80096ce:	f7fd fc8d 	bl	8006fec <_malloc_r>
 80096d2:	4606      	mov	r6, r0
 80096d4:	b928      	cbnz	r0, 80096e2 <_calloc_r+0x1e>
 80096d6:	2600      	movs	r6, #0
 80096d8:	4630      	mov	r0, r6
 80096da:	bd70      	pop	{r4, r5, r6, pc}
 80096dc:	220c      	movs	r2, #12
 80096de:	6002      	str	r2, [r0, #0]
 80096e0:	e7f9      	b.n	80096d6 <_calloc_r+0x12>
 80096e2:	462a      	mov	r2, r5
 80096e4:	4621      	mov	r1, r4
 80096e6:	f7fc fcfc 	bl	80060e2 <memset>
 80096ea:	e7f5      	b.n	80096d8 <_calloc_r+0x14>

080096ec <rshift>:
 80096ec:	6903      	ldr	r3, [r0, #16]
 80096ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096f2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80096f6:	f100 0414 	add.w	r4, r0, #20
 80096fa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80096fe:	dd46      	ble.n	800978e <rshift+0xa2>
 8009700:	f011 011f 	ands.w	r1, r1, #31
 8009704:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009708:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800970c:	d10c      	bne.n	8009728 <rshift+0x3c>
 800970e:	4629      	mov	r1, r5
 8009710:	f100 0710 	add.w	r7, r0, #16
 8009714:	42b1      	cmp	r1, r6
 8009716:	d335      	bcc.n	8009784 <rshift+0x98>
 8009718:	1a9b      	subs	r3, r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	1eea      	subs	r2, r5, #3
 800971e:	4296      	cmp	r6, r2
 8009720:	bf38      	it	cc
 8009722:	2300      	movcc	r3, #0
 8009724:	4423      	add	r3, r4
 8009726:	e015      	b.n	8009754 <rshift+0x68>
 8009728:	46a1      	mov	r9, r4
 800972a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800972e:	f1c1 0820 	rsb	r8, r1, #32
 8009732:	40cf      	lsrs	r7, r1
 8009734:	f105 0e04 	add.w	lr, r5, #4
 8009738:	4576      	cmp	r6, lr
 800973a:	46f4      	mov	ip, lr
 800973c:	d816      	bhi.n	800976c <rshift+0x80>
 800973e:	1a9a      	subs	r2, r3, r2
 8009740:	0092      	lsls	r2, r2, #2
 8009742:	3a04      	subs	r2, #4
 8009744:	3501      	adds	r5, #1
 8009746:	42ae      	cmp	r6, r5
 8009748:	bf38      	it	cc
 800974a:	2200      	movcc	r2, #0
 800974c:	18a3      	adds	r3, r4, r2
 800974e:	50a7      	str	r7, [r4, r2]
 8009750:	b107      	cbz	r7, 8009754 <rshift+0x68>
 8009752:	3304      	adds	r3, #4
 8009754:	42a3      	cmp	r3, r4
 8009756:	eba3 0204 	sub.w	r2, r3, r4
 800975a:	bf08      	it	eq
 800975c:	2300      	moveq	r3, #0
 800975e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009762:	6102      	str	r2, [r0, #16]
 8009764:	bf08      	it	eq
 8009766:	6143      	streq	r3, [r0, #20]
 8009768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800976c:	f8dc c000 	ldr.w	ip, [ip]
 8009770:	fa0c fc08 	lsl.w	ip, ip, r8
 8009774:	ea4c 0707 	orr.w	r7, ip, r7
 8009778:	f849 7b04 	str.w	r7, [r9], #4
 800977c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009780:	40cf      	lsrs	r7, r1
 8009782:	e7d9      	b.n	8009738 <rshift+0x4c>
 8009784:	f851 cb04 	ldr.w	ip, [r1], #4
 8009788:	f847 cf04 	str.w	ip, [r7, #4]!
 800978c:	e7c2      	b.n	8009714 <rshift+0x28>
 800978e:	4623      	mov	r3, r4
 8009790:	e7e0      	b.n	8009754 <rshift+0x68>

08009792 <__hexdig_fun>:
 8009792:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009796:	2b09      	cmp	r3, #9
 8009798:	d802      	bhi.n	80097a0 <__hexdig_fun+0xe>
 800979a:	3820      	subs	r0, #32
 800979c:	b2c0      	uxtb	r0, r0
 800979e:	4770      	bx	lr
 80097a0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80097a4:	2b05      	cmp	r3, #5
 80097a6:	d801      	bhi.n	80097ac <__hexdig_fun+0x1a>
 80097a8:	3847      	subs	r0, #71	@ 0x47
 80097aa:	e7f7      	b.n	800979c <__hexdig_fun+0xa>
 80097ac:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80097b0:	2b05      	cmp	r3, #5
 80097b2:	d801      	bhi.n	80097b8 <__hexdig_fun+0x26>
 80097b4:	3827      	subs	r0, #39	@ 0x27
 80097b6:	e7f1      	b.n	800979c <__hexdig_fun+0xa>
 80097b8:	2000      	movs	r0, #0
 80097ba:	4770      	bx	lr

080097bc <__gethex>:
 80097bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c0:	468a      	mov	sl, r1
 80097c2:	4690      	mov	r8, r2
 80097c4:	b085      	sub	sp, #20
 80097c6:	9302      	str	r3, [sp, #8]
 80097c8:	680b      	ldr	r3, [r1, #0]
 80097ca:	9001      	str	r0, [sp, #4]
 80097cc:	1c9c      	adds	r4, r3, #2
 80097ce:	46a1      	mov	r9, r4
 80097d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80097d4:	2830      	cmp	r0, #48	@ 0x30
 80097d6:	d0fa      	beq.n	80097ce <__gethex+0x12>
 80097d8:	eba9 0303 	sub.w	r3, r9, r3
 80097dc:	f1a3 0b02 	sub.w	fp, r3, #2
 80097e0:	f7ff ffd7 	bl	8009792 <__hexdig_fun>
 80097e4:	4605      	mov	r5, r0
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d168      	bne.n	80098bc <__gethex+0x100>
 80097ea:	2201      	movs	r2, #1
 80097ec:	4648      	mov	r0, r9
 80097ee:	499f      	ldr	r1, [pc, #636]	@ (8009a6c <__gethex+0x2b0>)
 80097f0:	f7ff ff22 	bl	8009638 <strncmp>
 80097f4:	4607      	mov	r7, r0
 80097f6:	2800      	cmp	r0, #0
 80097f8:	d167      	bne.n	80098ca <__gethex+0x10e>
 80097fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 80097fe:	4626      	mov	r6, r4
 8009800:	f7ff ffc7 	bl	8009792 <__hexdig_fun>
 8009804:	2800      	cmp	r0, #0
 8009806:	d062      	beq.n	80098ce <__gethex+0x112>
 8009808:	4623      	mov	r3, r4
 800980a:	7818      	ldrb	r0, [r3, #0]
 800980c:	4699      	mov	r9, r3
 800980e:	2830      	cmp	r0, #48	@ 0x30
 8009810:	f103 0301 	add.w	r3, r3, #1
 8009814:	d0f9      	beq.n	800980a <__gethex+0x4e>
 8009816:	f7ff ffbc 	bl	8009792 <__hexdig_fun>
 800981a:	fab0 f580 	clz	r5, r0
 800981e:	f04f 0b01 	mov.w	fp, #1
 8009822:	096d      	lsrs	r5, r5, #5
 8009824:	464a      	mov	r2, r9
 8009826:	4616      	mov	r6, r2
 8009828:	7830      	ldrb	r0, [r6, #0]
 800982a:	3201      	adds	r2, #1
 800982c:	f7ff ffb1 	bl	8009792 <__hexdig_fun>
 8009830:	2800      	cmp	r0, #0
 8009832:	d1f8      	bne.n	8009826 <__gethex+0x6a>
 8009834:	2201      	movs	r2, #1
 8009836:	4630      	mov	r0, r6
 8009838:	498c      	ldr	r1, [pc, #560]	@ (8009a6c <__gethex+0x2b0>)
 800983a:	f7ff fefd 	bl	8009638 <strncmp>
 800983e:	2800      	cmp	r0, #0
 8009840:	d13f      	bne.n	80098c2 <__gethex+0x106>
 8009842:	b944      	cbnz	r4, 8009856 <__gethex+0x9a>
 8009844:	1c74      	adds	r4, r6, #1
 8009846:	4622      	mov	r2, r4
 8009848:	4616      	mov	r6, r2
 800984a:	7830      	ldrb	r0, [r6, #0]
 800984c:	3201      	adds	r2, #1
 800984e:	f7ff ffa0 	bl	8009792 <__hexdig_fun>
 8009852:	2800      	cmp	r0, #0
 8009854:	d1f8      	bne.n	8009848 <__gethex+0x8c>
 8009856:	1ba4      	subs	r4, r4, r6
 8009858:	00a7      	lsls	r7, r4, #2
 800985a:	7833      	ldrb	r3, [r6, #0]
 800985c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009860:	2b50      	cmp	r3, #80	@ 0x50
 8009862:	d13e      	bne.n	80098e2 <__gethex+0x126>
 8009864:	7873      	ldrb	r3, [r6, #1]
 8009866:	2b2b      	cmp	r3, #43	@ 0x2b
 8009868:	d033      	beq.n	80098d2 <__gethex+0x116>
 800986a:	2b2d      	cmp	r3, #45	@ 0x2d
 800986c:	d034      	beq.n	80098d8 <__gethex+0x11c>
 800986e:	2400      	movs	r4, #0
 8009870:	1c71      	adds	r1, r6, #1
 8009872:	7808      	ldrb	r0, [r1, #0]
 8009874:	f7ff ff8d 	bl	8009792 <__hexdig_fun>
 8009878:	1e43      	subs	r3, r0, #1
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b18      	cmp	r3, #24
 800987e:	d830      	bhi.n	80098e2 <__gethex+0x126>
 8009880:	f1a0 0210 	sub.w	r2, r0, #16
 8009884:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009888:	f7ff ff83 	bl	8009792 <__hexdig_fun>
 800988c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009890:	fa5f fc8c 	uxtb.w	ip, ip
 8009894:	f1bc 0f18 	cmp.w	ip, #24
 8009898:	f04f 030a 	mov.w	r3, #10
 800989c:	d91e      	bls.n	80098dc <__gethex+0x120>
 800989e:	b104      	cbz	r4, 80098a2 <__gethex+0xe6>
 80098a0:	4252      	negs	r2, r2
 80098a2:	4417      	add	r7, r2
 80098a4:	f8ca 1000 	str.w	r1, [sl]
 80098a8:	b1ed      	cbz	r5, 80098e6 <__gethex+0x12a>
 80098aa:	f1bb 0f00 	cmp.w	fp, #0
 80098ae:	bf0c      	ite	eq
 80098b0:	2506      	moveq	r5, #6
 80098b2:	2500      	movne	r5, #0
 80098b4:	4628      	mov	r0, r5
 80098b6:	b005      	add	sp, #20
 80098b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098bc:	2500      	movs	r5, #0
 80098be:	462c      	mov	r4, r5
 80098c0:	e7b0      	b.n	8009824 <__gethex+0x68>
 80098c2:	2c00      	cmp	r4, #0
 80098c4:	d1c7      	bne.n	8009856 <__gethex+0x9a>
 80098c6:	4627      	mov	r7, r4
 80098c8:	e7c7      	b.n	800985a <__gethex+0x9e>
 80098ca:	464e      	mov	r6, r9
 80098cc:	462f      	mov	r7, r5
 80098ce:	2501      	movs	r5, #1
 80098d0:	e7c3      	b.n	800985a <__gethex+0x9e>
 80098d2:	2400      	movs	r4, #0
 80098d4:	1cb1      	adds	r1, r6, #2
 80098d6:	e7cc      	b.n	8009872 <__gethex+0xb6>
 80098d8:	2401      	movs	r4, #1
 80098da:	e7fb      	b.n	80098d4 <__gethex+0x118>
 80098dc:	fb03 0002 	mla	r0, r3, r2, r0
 80098e0:	e7ce      	b.n	8009880 <__gethex+0xc4>
 80098e2:	4631      	mov	r1, r6
 80098e4:	e7de      	b.n	80098a4 <__gethex+0xe8>
 80098e6:	4629      	mov	r1, r5
 80098e8:	eba6 0309 	sub.w	r3, r6, r9
 80098ec:	3b01      	subs	r3, #1
 80098ee:	2b07      	cmp	r3, #7
 80098f0:	dc0a      	bgt.n	8009908 <__gethex+0x14c>
 80098f2:	9801      	ldr	r0, [sp, #4]
 80098f4:	f7fd fc06 	bl	8007104 <_Balloc>
 80098f8:	4604      	mov	r4, r0
 80098fa:	b940      	cbnz	r0, 800990e <__gethex+0x152>
 80098fc:	4602      	mov	r2, r0
 80098fe:	21e4      	movs	r1, #228	@ 0xe4
 8009900:	4b5b      	ldr	r3, [pc, #364]	@ (8009a70 <__gethex+0x2b4>)
 8009902:	485c      	ldr	r0, [pc, #368]	@ (8009a74 <__gethex+0x2b8>)
 8009904:	f7ff fec0 	bl	8009688 <__assert_func>
 8009908:	3101      	adds	r1, #1
 800990a:	105b      	asrs	r3, r3, #1
 800990c:	e7ef      	b.n	80098ee <__gethex+0x132>
 800990e:	2300      	movs	r3, #0
 8009910:	f100 0a14 	add.w	sl, r0, #20
 8009914:	4655      	mov	r5, sl
 8009916:	469b      	mov	fp, r3
 8009918:	45b1      	cmp	r9, r6
 800991a:	d337      	bcc.n	800998c <__gethex+0x1d0>
 800991c:	f845 bb04 	str.w	fp, [r5], #4
 8009920:	eba5 050a 	sub.w	r5, r5, sl
 8009924:	10ad      	asrs	r5, r5, #2
 8009926:	6125      	str	r5, [r4, #16]
 8009928:	4658      	mov	r0, fp
 800992a:	f7fd fcdd 	bl	80072e8 <__hi0bits>
 800992e:	016d      	lsls	r5, r5, #5
 8009930:	f8d8 6000 	ldr.w	r6, [r8]
 8009934:	1a2d      	subs	r5, r5, r0
 8009936:	42b5      	cmp	r5, r6
 8009938:	dd54      	ble.n	80099e4 <__gethex+0x228>
 800993a:	1bad      	subs	r5, r5, r6
 800993c:	4629      	mov	r1, r5
 800993e:	4620      	mov	r0, r4
 8009940:	f7fe f865 	bl	8007a0e <__any_on>
 8009944:	4681      	mov	r9, r0
 8009946:	b178      	cbz	r0, 8009968 <__gethex+0x1ac>
 8009948:	f04f 0901 	mov.w	r9, #1
 800994c:	1e6b      	subs	r3, r5, #1
 800994e:	1159      	asrs	r1, r3, #5
 8009950:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009954:	f003 021f 	and.w	r2, r3, #31
 8009958:	fa09 f202 	lsl.w	r2, r9, r2
 800995c:	420a      	tst	r2, r1
 800995e:	d003      	beq.n	8009968 <__gethex+0x1ac>
 8009960:	454b      	cmp	r3, r9
 8009962:	dc36      	bgt.n	80099d2 <__gethex+0x216>
 8009964:	f04f 0902 	mov.w	r9, #2
 8009968:	4629      	mov	r1, r5
 800996a:	4620      	mov	r0, r4
 800996c:	f7ff febe 	bl	80096ec <rshift>
 8009970:	442f      	add	r7, r5
 8009972:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009976:	42bb      	cmp	r3, r7
 8009978:	da42      	bge.n	8009a00 <__gethex+0x244>
 800997a:	4621      	mov	r1, r4
 800997c:	9801      	ldr	r0, [sp, #4]
 800997e:	f7fd fc01 	bl	8007184 <_Bfree>
 8009982:	2300      	movs	r3, #0
 8009984:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009986:	25a3      	movs	r5, #163	@ 0xa3
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	e793      	b.n	80098b4 <__gethex+0xf8>
 800998c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009990:	2a2e      	cmp	r2, #46	@ 0x2e
 8009992:	d012      	beq.n	80099ba <__gethex+0x1fe>
 8009994:	2b20      	cmp	r3, #32
 8009996:	d104      	bne.n	80099a2 <__gethex+0x1e6>
 8009998:	f845 bb04 	str.w	fp, [r5], #4
 800999c:	f04f 0b00 	mov.w	fp, #0
 80099a0:	465b      	mov	r3, fp
 80099a2:	7830      	ldrb	r0, [r6, #0]
 80099a4:	9303      	str	r3, [sp, #12]
 80099a6:	f7ff fef4 	bl	8009792 <__hexdig_fun>
 80099aa:	9b03      	ldr	r3, [sp, #12]
 80099ac:	f000 000f 	and.w	r0, r0, #15
 80099b0:	4098      	lsls	r0, r3
 80099b2:	ea4b 0b00 	orr.w	fp, fp, r0
 80099b6:	3304      	adds	r3, #4
 80099b8:	e7ae      	b.n	8009918 <__gethex+0x15c>
 80099ba:	45b1      	cmp	r9, r6
 80099bc:	d8ea      	bhi.n	8009994 <__gethex+0x1d8>
 80099be:	2201      	movs	r2, #1
 80099c0:	4630      	mov	r0, r6
 80099c2:	492a      	ldr	r1, [pc, #168]	@ (8009a6c <__gethex+0x2b0>)
 80099c4:	9303      	str	r3, [sp, #12]
 80099c6:	f7ff fe37 	bl	8009638 <strncmp>
 80099ca:	9b03      	ldr	r3, [sp, #12]
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d1e1      	bne.n	8009994 <__gethex+0x1d8>
 80099d0:	e7a2      	b.n	8009918 <__gethex+0x15c>
 80099d2:	4620      	mov	r0, r4
 80099d4:	1ea9      	subs	r1, r5, #2
 80099d6:	f7fe f81a 	bl	8007a0e <__any_on>
 80099da:	2800      	cmp	r0, #0
 80099dc:	d0c2      	beq.n	8009964 <__gethex+0x1a8>
 80099de:	f04f 0903 	mov.w	r9, #3
 80099e2:	e7c1      	b.n	8009968 <__gethex+0x1ac>
 80099e4:	da09      	bge.n	80099fa <__gethex+0x23e>
 80099e6:	1b75      	subs	r5, r6, r5
 80099e8:	4621      	mov	r1, r4
 80099ea:	462a      	mov	r2, r5
 80099ec:	9801      	ldr	r0, [sp, #4]
 80099ee:	f7fd fddf 	bl	80075b0 <__lshift>
 80099f2:	4604      	mov	r4, r0
 80099f4:	1b7f      	subs	r7, r7, r5
 80099f6:	f100 0a14 	add.w	sl, r0, #20
 80099fa:	f04f 0900 	mov.w	r9, #0
 80099fe:	e7b8      	b.n	8009972 <__gethex+0x1b6>
 8009a00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009a04:	42bd      	cmp	r5, r7
 8009a06:	dd6f      	ble.n	8009ae8 <__gethex+0x32c>
 8009a08:	1bed      	subs	r5, r5, r7
 8009a0a:	42ae      	cmp	r6, r5
 8009a0c:	dc34      	bgt.n	8009a78 <__gethex+0x2bc>
 8009a0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d022      	beq.n	8009a5c <__gethex+0x2a0>
 8009a16:	2b03      	cmp	r3, #3
 8009a18:	d024      	beq.n	8009a64 <__gethex+0x2a8>
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d115      	bne.n	8009a4a <__gethex+0x28e>
 8009a1e:	42ae      	cmp	r6, r5
 8009a20:	d113      	bne.n	8009a4a <__gethex+0x28e>
 8009a22:	2e01      	cmp	r6, #1
 8009a24:	d10b      	bne.n	8009a3e <__gethex+0x282>
 8009a26:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a2a:	9a02      	ldr	r2, [sp, #8]
 8009a2c:	2562      	movs	r5, #98	@ 0x62
 8009a2e:	6013      	str	r3, [r2, #0]
 8009a30:	2301      	movs	r3, #1
 8009a32:	6123      	str	r3, [r4, #16]
 8009a34:	f8ca 3000 	str.w	r3, [sl]
 8009a38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a3a:	601c      	str	r4, [r3, #0]
 8009a3c:	e73a      	b.n	80098b4 <__gethex+0xf8>
 8009a3e:	4620      	mov	r0, r4
 8009a40:	1e71      	subs	r1, r6, #1
 8009a42:	f7fd ffe4 	bl	8007a0e <__any_on>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d1ed      	bne.n	8009a26 <__gethex+0x26a>
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	9801      	ldr	r0, [sp, #4]
 8009a4e:	f7fd fb99 	bl	8007184 <_Bfree>
 8009a52:	2300      	movs	r3, #0
 8009a54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a56:	2550      	movs	r5, #80	@ 0x50
 8009a58:	6013      	str	r3, [r2, #0]
 8009a5a:	e72b      	b.n	80098b4 <__gethex+0xf8>
 8009a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1f3      	bne.n	8009a4a <__gethex+0x28e>
 8009a62:	e7e0      	b.n	8009a26 <__gethex+0x26a>
 8009a64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1dd      	bne.n	8009a26 <__gethex+0x26a>
 8009a6a:	e7ee      	b.n	8009a4a <__gethex+0x28e>
 8009a6c:	0800a620 	.word	0x0800a620
 8009a70:	0800a4b9 	.word	0x0800a4b9
 8009a74:	0800a7e9 	.word	0x0800a7e9
 8009a78:	1e6f      	subs	r7, r5, #1
 8009a7a:	f1b9 0f00 	cmp.w	r9, #0
 8009a7e:	d130      	bne.n	8009ae2 <__gethex+0x326>
 8009a80:	b127      	cbz	r7, 8009a8c <__gethex+0x2d0>
 8009a82:	4639      	mov	r1, r7
 8009a84:	4620      	mov	r0, r4
 8009a86:	f7fd ffc2 	bl	8007a0e <__any_on>
 8009a8a:	4681      	mov	r9, r0
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	4629      	mov	r1, r5
 8009a90:	1b76      	subs	r6, r6, r5
 8009a92:	2502      	movs	r5, #2
 8009a94:	117a      	asrs	r2, r7, #5
 8009a96:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009a9a:	f007 071f 	and.w	r7, r7, #31
 8009a9e:	40bb      	lsls	r3, r7
 8009aa0:	4213      	tst	r3, r2
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	bf18      	it	ne
 8009aa6:	f049 0902 	orrne.w	r9, r9, #2
 8009aaa:	f7ff fe1f 	bl	80096ec <rshift>
 8009aae:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009ab2:	f1b9 0f00 	cmp.w	r9, #0
 8009ab6:	d047      	beq.n	8009b48 <__gethex+0x38c>
 8009ab8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d015      	beq.n	8009aec <__gethex+0x330>
 8009ac0:	2b03      	cmp	r3, #3
 8009ac2:	d017      	beq.n	8009af4 <__gethex+0x338>
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d109      	bne.n	8009adc <__gethex+0x320>
 8009ac8:	f019 0f02 	tst.w	r9, #2
 8009acc:	d006      	beq.n	8009adc <__gethex+0x320>
 8009ace:	f8da 3000 	ldr.w	r3, [sl]
 8009ad2:	ea49 0903 	orr.w	r9, r9, r3
 8009ad6:	f019 0f01 	tst.w	r9, #1
 8009ada:	d10e      	bne.n	8009afa <__gethex+0x33e>
 8009adc:	f045 0510 	orr.w	r5, r5, #16
 8009ae0:	e032      	b.n	8009b48 <__gethex+0x38c>
 8009ae2:	f04f 0901 	mov.w	r9, #1
 8009ae6:	e7d1      	b.n	8009a8c <__gethex+0x2d0>
 8009ae8:	2501      	movs	r5, #1
 8009aea:	e7e2      	b.n	8009ab2 <__gethex+0x2f6>
 8009aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aee:	f1c3 0301 	rsb	r3, r3, #1
 8009af2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009af4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0f0      	beq.n	8009adc <__gethex+0x320>
 8009afa:	f04f 0c00 	mov.w	ip, #0
 8009afe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b02:	f104 0314 	add.w	r3, r4, #20
 8009b06:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b0a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b14:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b18:	d01b      	beq.n	8009b52 <__gethex+0x396>
 8009b1a:	3201      	adds	r2, #1
 8009b1c:	6002      	str	r2, [r0, #0]
 8009b1e:	2d02      	cmp	r5, #2
 8009b20:	f104 0314 	add.w	r3, r4, #20
 8009b24:	d13c      	bne.n	8009ba0 <__gethex+0x3e4>
 8009b26:	f8d8 2000 	ldr.w	r2, [r8]
 8009b2a:	3a01      	subs	r2, #1
 8009b2c:	42b2      	cmp	r2, r6
 8009b2e:	d109      	bne.n	8009b44 <__gethex+0x388>
 8009b30:	2201      	movs	r2, #1
 8009b32:	1171      	asrs	r1, r6, #5
 8009b34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b38:	f006 061f 	and.w	r6, r6, #31
 8009b3c:	fa02 f606 	lsl.w	r6, r2, r6
 8009b40:	421e      	tst	r6, r3
 8009b42:	d13a      	bne.n	8009bba <__gethex+0x3fe>
 8009b44:	f045 0520 	orr.w	r5, r5, #32
 8009b48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b4a:	601c      	str	r4, [r3, #0]
 8009b4c:	9b02      	ldr	r3, [sp, #8]
 8009b4e:	601f      	str	r7, [r3, #0]
 8009b50:	e6b0      	b.n	80098b4 <__gethex+0xf8>
 8009b52:	4299      	cmp	r1, r3
 8009b54:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b58:	d8d9      	bhi.n	8009b0e <__gethex+0x352>
 8009b5a:	68a3      	ldr	r3, [r4, #8]
 8009b5c:	459b      	cmp	fp, r3
 8009b5e:	db17      	blt.n	8009b90 <__gethex+0x3d4>
 8009b60:	6861      	ldr	r1, [r4, #4]
 8009b62:	9801      	ldr	r0, [sp, #4]
 8009b64:	3101      	adds	r1, #1
 8009b66:	f7fd facd 	bl	8007104 <_Balloc>
 8009b6a:	4681      	mov	r9, r0
 8009b6c:	b918      	cbnz	r0, 8009b76 <__gethex+0x3ba>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	2184      	movs	r1, #132	@ 0x84
 8009b72:	4b19      	ldr	r3, [pc, #100]	@ (8009bd8 <__gethex+0x41c>)
 8009b74:	e6c5      	b.n	8009902 <__gethex+0x146>
 8009b76:	6922      	ldr	r2, [r4, #16]
 8009b78:	f104 010c 	add.w	r1, r4, #12
 8009b7c:	3202      	adds	r2, #2
 8009b7e:	0092      	lsls	r2, r2, #2
 8009b80:	300c      	adds	r0, #12
 8009b82:	f7fc fb5c 	bl	800623e <memcpy>
 8009b86:	4621      	mov	r1, r4
 8009b88:	9801      	ldr	r0, [sp, #4]
 8009b8a:	f7fd fafb 	bl	8007184 <_Bfree>
 8009b8e:	464c      	mov	r4, r9
 8009b90:	6923      	ldr	r3, [r4, #16]
 8009b92:	1c5a      	adds	r2, r3, #1
 8009b94:	6122      	str	r2, [r4, #16]
 8009b96:	2201      	movs	r2, #1
 8009b98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b9c:	615a      	str	r2, [r3, #20]
 8009b9e:	e7be      	b.n	8009b1e <__gethex+0x362>
 8009ba0:	6922      	ldr	r2, [r4, #16]
 8009ba2:	455a      	cmp	r2, fp
 8009ba4:	dd0b      	ble.n	8009bbe <__gethex+0x402>
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f7ff fd9f 	bl	80096ec <rshift>
 8009bae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bb2:	3701      	adds	r7, #1
 8009bb4:	42bb      	cmp	r3, r7
 8009bb6:	f6ff aee0 	blt.w	800997a <__gethex+0x1be>
 8009bba:	2501      	movs	r5, #1
 8009bbc:	e7c2      	b.n	8009b44 <__gethex+0x388>
 8009bbe:	f016 061f 	ands.w	r6, r6, #31
 8009bc2:	d0fa      	beq.n	8009bba <__gethex+0x3fe>
 8009bc4:	4453      	add	r3, sl
 8009bc6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009bca:	f7fd fb8d 	bl	80072e8 <__hi0bits>
 8009bce:	f1c6 0620 	rsb	r6, r6, #32
 8009bd2:	42b0      	cmp	r0, r6
 8009bd4:	dbe7      	blt.n	8009ba6 <__gethex+0x3ea>
 8009bd6:	e7f0      	b.n	8009bba <__gethex+0x3fe>
 8009bd8:	0800a4b9 	.word	0x0800a4b9

08009bdc <L_shift>:
 8009bdc:	f1c2 0208 	rsb	r2, r2, #8
 8009be0:	0092      	lsls	r2, r2, #2
 8009be2:	b570      	push	{r4, r5, r6, lr}
 8009be4:	f1c2 0620 	rsb	r6, r2, #32
 8009be8:	6843      	ldr	r3, [r0, #4]
 8009bea:	6804      	ldr	r4, [r0, #0]
 8009bec:	fa03 f506 	lsl.w	r5, r3, r6
 8009bf0:	432c      	orrs	r4, r5
 8009bf2:	40d3      	lsrs	r3, r2
 8009bf4:	6004      	str	r4, [r0, #0]
 8009bf6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009bfa:	4288      	cmp	r0, r1
 8009bfc:	d3f4      	bcc.n	8009be8 <L_shift+0xc>
 8009bfe:	bd70      	pop	{r4, r5, r6, pc}

08009c00 <__match>:
 8009c00:	b530      	push	{r4, r5, lr}
 8009c02:	6803      	ldr	r3, [r0, #0]
 8009c04:	3301      	adds	r3, #1
 8009c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c0a:	b914      	cbnz	r4, 8009c12 <__match+0x12>
 8009c0c:	6003      	str	r3, [r0, #0]
 8009c0e:	2001      	movs	r0, #1
 8009c10:	bd30      	pop	{r4, r5, pc}
 8009c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c16:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009c1a:	2d19      	cmp	r5, #25
 8009c1c:	bf98      	it	ls
 8009c1e:	3220      	addls	r2, #32
 8009c20:	42a2      	cmp	r2, r4
 8009c22:	d0f0      	beq.n	8009c06 <__match+0x6>
 8009c24:	2000      	movs	r0, #0
 8009c26:	e7f3      	b.n	8009c10 <__match+0x10>

08009c28 <__hexnan>:
 8009c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2c:	2500      	movs	r5, #0
 8009c2e:	680b      	ldr	r3, [r1, #0]
 8009c30:	4682      	mov	sl, r0
 8009c32:	115e      	asrs	r6, r3, #5
 8009c34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c38:	f013 031f 	ands.w	r3, r3, #31
 8009c3c:	bf18      	it	ne
 8009c3e:	3604      	addne	r6, #4
 8009c40:	1f37      	subs	r7, r6, #4
 8009c42:	4690      	mov	r8, r2
 8009c44:	46b9      	mov	r9, r7
 8009c46:	463c      	mov	r4, r7
 8009c48:	46ab      	mov	fp, r5
 8009c4a:	b087      	sub	sp, #28
 8009c4c:	6801      	ldr	r1, [r0, #0]
 8009c4e:	9301      	str	r3, [sp, #4]
 8009c50:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c54:	9502      	str	r5, [sp, #8]
 8009c56:	784a      	ldrb	r2, [r1, #1]
 8009c58:	1c4b      	adds	r3, r1, #1
 8009c5a:	9303      	str	r3, [sp, #12]
 8009c5c:	b342      	cbz	r2, 8009cb0 <__hexnan+0x88>
 8009c5e:	4610      	mov	r0, r2
 8009c60:	9105      	str	r1, [sp, #20]
 8009c62:	9204      	str	r2, [sp, #16]
 8009c64:	f7ff fd95 	bl	8009792 <__hexdig_fun>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d151      	bne.n	8009d10 <__hexnan+0xe8>
 8009c6c:	9a04      	ldr	r2, [sp, #16]
 8009c6e:	9905      	ldr	r1, [sp, #20]
 8009c70:	2a20      	cmp	r2, #32
 8009c72:	d818      	bhi.n	8009ca6 <__hexnan+0x7e>
 8009c74:	9b02      	ldr	r3, [sp, #8]
 8009c76:	459b      	cmp	fp, r3
 8009c78:	dd13      	ble.n	8009ca2 <__hexnan+0x7a>
 8009c7a:	454c      	cmp	r4, r9
 8009c7c:	d206      	bcs.n	8009c8c <__hexnan+0x64>
 8009c7e:	2d07      	cmp	r5, #7
 8009c80:	dc04      	bgt.n	8009c8c <__hexnan+0x64>
 8009c82:	462a      	mov	r2, r5
 8009c84:	4649      	mov	r1, r9
 8009c86:	4620      	mov	r0, r4
 8009c88:	f7ff ffa8 	bl	8009bdc <L_shift>
 8009c8c:	4544      	cmp	r4, r8
 8009c8e:	d952      	bls.n	8009d36 <__hexnan+0x10e>
 8009c90:	2300      	movs	r3, #0
 8009c92:	f1a4 0904 	sub.w	r9, r4, #4
 8009c96:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c9a:	461d      	mov	r5, r3
 8009c9c:	464c      	mov	r4, r9
 8009c9e:	f8cd b008 	str.w	fp, [sp, #8]
 8009ca2:	9903      	ldr	r1, [sp, #12]
 8009ca4:	e7d7      	b.n	8009c56 <__hexnan+0x2e>
 8009ca6:	2a29      	cmp	r2, #41	@ 0x29
 8009ca8:	d157      	bne.n	8009d5a <__hexnan+0x132>
 8009caa:	3102      	adds	r1, #2
 8009cac:	f8ca 1000 	str.w	r1, [sl]
 8009cb0:	f1bb 0f00 	cmp.w	fp, #0
 8009cb4:	d051      	beq.n	8009d5a <__hexnan+0x132>
 8009cb6:	454c      	cmp	r4, r9
 8009cb8:	d206      	bcs.n	8009cc8 <__hexnan+0xa0>
 8009cba:	2d07      	cmp	r5, #7
 8009cbc:	dc04      	bgt.n	8009cc8 <__hexnan+0xa0>
 8009cbe:	462a      	mov	r2, r5
 8009cc0:	4649      	mov	r1, r9
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f7ff ff8a 	bl	8009bdc <L_shift>
 8009cc8:	4544      	cmp	r4, r8
 8009cca:	d936      	bls.n	8009d3a <__hexnan+0x112>
 8009ccc:	4623      	mov	r3, r4
 8009cce:	f1a8 0204 	sub.w	r2, r8, #4
 8009cd2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009cd6:	429f      	cmp	r7, r3
 8009cd8:	f842 1f04 	str.w	r1, [r2, #4]!
 8009cdc:	d2f9      	bcs.n	8009cd2 <__hexnan+0xaa>
 8009cde:	1b3b      	subs	r3, r7, r4
 8009ce0:	f023 0303 	bic.w	r3, r3, #3
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	3401      	adds	r4, #1
 8009ce8:	3e03      	subs	r6, #3
 8009cea:	42b4      	cmp	r4, r6
 8009cec:	bf88      	it	hi
 8009cee:	2304      	movhi	r3, #4
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	4443      	add	r3, r8
 8009cf4:	f843 2b04 	str.w	r2, [r3], #4
 8009cf8:	429f      	cmp	r7, r3
 8009cfa:	d2fb      	bcs.n	8009cf4 <__hexnan+0xcc>
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	b91b      	cbnz	r3, 8009d08 <__hexnan+0xe0>
 8009d00:	4547      	cmp	r7, r8
 8009d02:	d128      	bne.n	8009d56 <__hexnan+0x12e>
 8009d04:	2301      	movs	r3, #1
 8009d06:	603b      	str	r3, [r7, #0]
 8009d08:	2005      	movs	r0, #5
 8009d0a:	b007      	add	sp, #28
 8009d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d10:	3501      	adds	r5, #1
 8009d12:	2d08      	cmp	r5, #8
 8009d14:	f10b 0b01 	add.w	fp, fp, #1
 8009d18:	dd06      	ble.n	8009d28 <__hexnan+0x100>
 8009d1a:	4544      	cmp	r4, r8
 8009d1c:	d9c1      	bls.n	8009ca2 <__hexnan+0x7a>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	2501      	movs	r5, #1
 8009d22:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d26:	3c04      	subs	r4, #4
 8009d28:	6822      	ldr	r2, [r4, #0]
 8009d2a:	f000 000f 	and.w	r0, r0, #15
 8009d2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009d32:	6020      	str	r0, [r4, #0]
 8009d34:	e7b5      	b.n	8009ca2 <__hexnan+0x7a>
 8009d36:	2508      	movs	r5, #8
 8009d38:	e7b3      	b.n	8009ca2 <__hexnan+0x7a>
 8009d3a:	9b01      	ldr	r3, [sp, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d0dd      	beq.n	8009cfc <__hexnan+0xd4>
 8009d40:	f04f 32ff 	mov.w	r2, #4294967295
 8009d44:	f1c3 0320 	rsb	r3, r3, #32
 8009d48:	40da      	lsrs	r2, r3
 8009d4a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d4e:	4013      	ands	r3, r2
 8009d50:	f846 3c04 	str.w	r3, [r6, #-4]
 8009d54:	e7d2      	b.n	8009cfc <__hexnan+0xd4>
 8009d56:	3f04      	subs	r7, #4
 8009d58:	e7d0      	b.n	8009cfc <__hexnan+0xd4>
 8009d5a:	2004      	movs	r0, #4
 8009d5c:	e7d5      	b.n	8009d0a <__hexnan+0xe2>

08009d5e <__ascii_mbtowc>:
 8009d5e:	b082      	sub	sp, #8
 8009d60:	b901      	cbnz	r1, 8009d64 <__ascii_mbtowc+0x6>
 8009d62:	a901      	add	r1, sp, #4
 8009d64:	b142      	cbz	r2, 8009d78 <__ascii_mbtowc+0x1a>
 8009d66:	b14b      	cbz	r3, 8009d7c <__ascii_mbtowc+0x1e>
 8009d68:	7813      	ldrb	r3, [r2, #0]
 8009d6a:	600b      	str	r3, [r1, #0]
 8009d6c:	7812      	ldrb	r2, [r2, #0]
 8009d6e:	1e10      	subs	r0, r2, #0
 8009d70:	bf18      	it	ne
 8009d72:	2001      	movne	r0, #1
 8009d74:	b002      	add	sp, #8
 8009d76:	4770      	bx	lr
 8009d78:	4610      	mov	r0, r2
 8009d7a:	e7fb      	b.n	8009d74 <__ascii_mbtowc+0x16>
 8009d7c:	f06f 0001 	mvn.w	r0, #1
 8009d80:	e7f8      	b.n	8009d74 <__ascii_mbtowc+0x16>

08009d82 <_realloc_r>:
 8009d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d86:	4680      	mov	r8, r0
 8009d88:	4615      	mov	r5, r2
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	b921      	cbnz	r1, 8009d98 <_realloc_r+0x16>
 8009d8e:	4611      	mov	r1, r2
 8009d90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d94:	f7fd b92a 	b.w	8006fec <_malloc_r>
 8009d98:	b92a      	cbnz	r2, 8009da6 <_realloc_r+0x24>
 8009d9a:	f7fd f8b5 	bl	8006f08 <_free_r>
 8009d9e:	2400      	movs	r4, #0
 8009da0:	4620      	mov	r0, r4
 8009da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009da6:	f000 f936 	bl	800a016 <_malloc_usable_size_r>
 8009daa:	4285      	cmp	r5, r0
 8009dac:	4606      	mov	r6, r0
 8009dae:	d802      	bhi.n	8009db6 <_realloc_r+0x34>
 8009db0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009db4:	d8f4      	bhi.n	8009da0 <_realloc_r+0x1e>
 8009db6:	4629      	mov	r1, r5
 8009db8:	4640      	mov	r0, r8
 8009dba:	f7fd f917 	bl	8006fec <_malloc_r>
 8009dbe:	4607      	mov	r7, r0
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	d0ec      	beq.n	8009d9e <_realloc_r+0x1c>
 8009dc4:	42b5      	cmp	r5, r6
 8009dc6:	462a      	mov	r2, r5
 8009dc8:	4621      	mov	r1, r4
 8009dca:	bf28      	it	cs
 8009dcc:	4632      	movcs	r2, r6
 8009dce:	f7fc fa36 	bl	800623e <memcpy>
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	4640      	mov	r0, r8
 8009dd6:	f7fd f897 	bl	8006f08 <_free_r>
 8009dda:	463c      	mov	r4, r7
 8009ddc:	e7e0      	b.n	8009da0 <_realloc_r+0x1e>
	...

08009de0 <_strtoul_l.constprop.0>:
 8009de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009de4:	4686      	mov	lr, r0
 8009de6:	460d      	mov	r5, r1
 8009de8:	4e33      	ldr	r6, [pc, #204]	@ (8009eb8 <_strtoul_l.constprop.0+0xd8>)
 8009dea:	4628      	mov	r0, r5
 8009dec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009df0:	5d37      	ldrb	r7, [r6, r4]
 8009df2:	f017 0708 	ands.w	r7, r7, #8
 8009df6:	d1f8      	bne.n	8009dea <_strtoul_l.constprop.0+0xa>
 8009df8:	2c2d      	cmp	r4, #45	@ 0x2d
 8009dfa:	d12f      	bne.n	8009e5c <_strtoul_l.constprop.0+0x7c>
 8009dfc:	2701      	movs	r7, #1
 8009dfe:	782c      	ldrb	r4, [r5, #0]
 8009e00:	1c85      	adds	r5, r0, #2
 8009e02:	f033 0010 	bics.w	r0, r3, #16
 8009e06:	d109      	bne.n	8009e1c <_strtoul_l.constprop.0+0x3c>
 8009e08:	2c30      	cmp	r4, #48	@ 0x30
 8009e0a:	d12c      	bne.n	8009e66 <_strtoul_l.constprop.0+0x86>
 8009e0c:	7828      	ldrb	r0, [r5, #0]
 8009e0e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009e12:	2858      	cmp	r0, #88	@ 0x58
 8009e14:	d127      	bne.n	8009e66 <_strtoul_l.constprop.0+0x86>
 8009e16:	2310      	movs	r3, #16
 8009e18:	786c      	ldrb	r4, [r5, #1]
 8009e1a:	3502      	adds	r5, #2
 8009e1c:	f04f 38ff 	mov.w	r8, #4294967295
 8009e20:	fbb8 f8f3 	udiv	r8, r8, r3
 8009e24:	2600      	movs	r6, #0
 8009e26:	fb03 f908 	mul.w	r9, r3, r8
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	ea6f 0909 	mvn.w	r9, r9
 8009e30:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009e34:	f1bc 0f09 	cmp.w	ip, #9
 8009e38:	d81c      	bhi.n	8009e74 <_strtoul_l.constprop.0+0x94>
 8009e3a:	4664      	mov	r4, ip
 8009e3c:	42a3      	cmp	r3, r4
 8009e3e:	dd2a      	ble.n	8009e96 <_strtoul_l.constprop.0+0xb6>
 8009e40:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009e44:	d007      	beq.n	8009e56 <_strtoul_l.constprop.0+0x76>
 8009e46:	4580      	cmp	r8, r0
 8009e48:	d322      	bcc.n	8009e90 <_strtoul_l.constprop.0+0xb0>
 8009e4a:	d101      	bne.n	8009e50 <_strtoul_l.constprop.0+0x70>
 8009e4c:	45a1      	cmp	r9, r4
 8009e4e:	db1f      	blt.n	8009e90 <_strtoul_l.constprop.0+0xb0>
 8009e50:	2601      	movs	r6, #1
 8009e52:	fb00 4003 	mla	r0, r0, r3, r4
 8009e56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e5a:	e7e9      	b.n	8009e30 <_strtoul_l.constprop.0+0x50>
 8009e5c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e5e:	bf04      	itt	eq
 8009e60:	782c      	ldrbeq	r4, [r5, #0]
 8009e62:	1c85      	addeq	r5, r0, #2
 8009e64:	e7cd      	b.n	8009e02 <_strtoul_l.constprop.0+0x22>
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1d8      	bne.n	8009e1c <_strtoul_l.constprop.0+0x3c>
 8009e6a:	2c30      	cmp	r4, #48	@ 0x30
 8009e6c:	bf0c      	ite	eq
 8009e6e:	2308      	moveq	r3, #8
 8009e70:	230a      	movne	r3, #10
 8009e72:	e7d3      	b.n	8009e1c <_strtoul_l.constprop.0+0x3c>
 8009e74:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009e78:	f1bc 0f19 	cmp.w	ip, #25
 8009e7c:	d801      	bhi.n	8009e82 <_strtoul_l.constprop.0+0xa2>
 8009e7e:	3c37      	subs	r4, #55	@ 0x37
 8009e80:	e7dc      	b.n	8009e3c <_strtoul_l.constprop.0+0x5c>
 8009e82:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009e86:	f1bc 0f19 	cmp.w	ip, #25
 8009e8a:	d804      	bhi.n	8009e96 <_strtoul_l.constprop.0+0xb6>
 8009e8c:	3c57      	subs	r4, #87	@ 0x57
 8009e8e:	e7d5      	b.n	8009e3c <_strtoul_l.constprop.0+0x5c>
 8009e90:	f04f 36ff 	mov.w	r6, #4294967295
 8009e94:	e7df      	b.n	8009e56 <_strtoul_l.constprop.0+0x76>
 8009e96:	1c73      	adds	r3, r6, #1
 8009e98:	d106      	bne.n	8009ea8 <_strtoul_l.constprop.0+0xc8>
 8009e9a:	2322      	movs	r3, #34	@ 0x22
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	f8ce 3000 	str.w	r3, [lr]
 8009ea2:	b932      	cbnz	r2, 8009eb2 <_strtoul_l.constprop.0+0xd2>
 8009ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ea8:	b107      	cbz	r7, 8009eac <_strtoul_l.constprop.0+0xcc>
 8009eaa:	4240      	negs	r0, r0
 8009eac:	2a00      	cmp	r2, #0
 8009eae:	d0f9      	beq.n	8009ea4 <_strtoul_l.constprop.0+0xc4>
 8009eb0:	b106      	cbz	r6, 8009eb4 <_strtoul_l.constprop.0+0xd4>
 8009eb2:	1e69      	subs	r1, r5, #1
 8009eb4:	6011      	str	r1, [r2, #0]
 8009eb6:	e7f5      	b.n	8009ea4 <_strtoul_l.constprop.0+0xc4>
 8009eb8:	0800a679 	.word	0x0800a679

08009ebc <_strtoul_r>:
 8009ebc:	f7ff bf90 	b.w	8009de0 <_strtoul_l.constprop.0>

08009ec0 <__ascii_wctomb>:
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	4608      	mov	r0, r1
 8009ec4:	b141      	cbz	r1, 8009ed8 <__ascii_wctomb+0x18>
 8009ec6:	2aff      	cmp	r2, #255	@ 0xff
 8009ec8:	d904      	bls.n	8009ed4 <__ascii_wctomb+0x14>
 8009eca:	228a      	movs	r2, #138	@ 0x8a
 8009ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	4770      	bx	lr
 8009ed4:	2001      	movs	r0, #1
 8009ed6:	700a      	strb	r2, [r1, #0]
 8009ed8:	4770      	bx	lr
	...

08009edc <fiprintf>:
 8009edc:	b40e      	push	{r1, r2, r3}
 8009ede:	b503      	push	{r0, r1, lr}
 8009ee0:	4601      	mov	r1, r0
 8009ee2:	ab03      	add	r3, sp, #12
 8009ee4:	4805      	ldr	r0, [pc, #20]	@ (8009efc <fiprintf+0x20>)
 8009ee6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eea:	6800      	ldr	r0, [r0, #0]
 8009eec:	9301      	str	r3, [sp, #4]
 8009eee:	f7fe ff77 	bl	8008de0 <_vfiprintf_r>
 8009ef2:	b002      	add	sp, #8
 8009ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ef8:	b003      	add	sp, #12
 8009efa:	4770      	bx	lr
 8009efc:	2000001c 	.word	0x2000001c

08009f00 <__swhatbuf_r>:
 8009f00:	b570      	push	{r4, r5, r6, lr}
 8009f02:	460c      	mov	r4, r1
 8009f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f08:	4615      	mov	r5, r2
 8009f0a:	2900      	cmp	r1, #0
 8009f0c:	461e      	mov	r6, r3
 8009f0e:	b096      	sub	sp, #88	@ 0x58
 8009f10:	da0c      	bge.n	8009f2c <__swhatbuf_r+0x2c>
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	2100      	movs	r1, #0
 8009f16:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f1a:	bf14      	ite	ne
 8009f1c:	2340      	movne	r3, #64	@ 0x40
 8009f1e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f22:	2000      	movs	r0, #0
 8009f24:	6031      	str	r1, [r6, #0]
 8009f26:	602b      	str	r3, [r5, #0]
 8009f28:	b016      	add	sp, #88	@ 0x58
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	466a      	mov	r2, sp
 8009f2e:	f000 f849 	bl	8009fc4 <_fstat_r>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	dbed      	blt.n	8009f12 <__swhatbuf_r+0x12>
 8009f36:	9901      	ldr	r1, [sp, #4]
 8009f38:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f3c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f40:	4259      	negs	r1, r3
 8009f42:	4159      	adcs	r1, r3
 8009f44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f48:	e7eb      	b.n	8009f22 <__swhatbuf_r+0x22>

08009f4a <__smakebuf_r>:
 8009f4a:	898b      	ldrh	r3, [r1, #12]
 8009f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f4e:	079d      	lsls	r5, r3, #30
 8009f50:	4606      	mov	r6, r0
 8009f52:	460c      	mov	r4, r1
 8009f54:	d507      	bpl.n	8009f66 <__smakebuf_r+0x1c>
 8009f56:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	6123      	str	r3, [r4, #16]
 8009f5e:	2301      	movs	r3, #1
 8009f60:	6163      	str	r3, [r4, #20]
 8009f62:	b003      	add	sp, #12
 8009f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f66:	466a      	mov	r2, sp
 8009f68:	ab01      	add	r3, sp, #4
 8009f6a:	f7ff ffc9 	bl	8009f00 <__swhatbuf_r>
 8009f6e:	9f00      	ldr	r7, [sp, #0]
 8009f70:	4605      	mov	r5, r0
 8009f72:	4639      	mov	r1, r7
 8009f74:	4630      	mov	r0, r6
 8009f76:	f7fd f839 	bl	8006fec <_malloc_r>
 8009f7a:	b948      	cbnz	r0, 8009f90 <__smakebuf_r+0x46>
 8009f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f80:	059a      	lsls	r2, r3, #22
 8009f82:	d4ee      	bmi.n	8009f62 <__smakebuf_r+0x18>
 8009f84:	f023 0303 	bic.w	r3, r3, #3
 8009f88:	f043 0302 	orr.w	r3, r3, #2
 8009f8c:	81a3      	strh	r3, [r4, #12]
 8009f8e:	e7e2      	b.n	8009f56 <__smakebuf_r+0xc>
 8009f90:	89a3      	ldrh	r3, [r4, #12]
 8009f92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f9a:	81a3      	strh	r3, [r4, #12]
 8009f9c:	9b01      	ldr	r3, [sp, #4]
 8009f9e:	6020      	str	r0, [r4, #0]
 8009fa0:	b15b      	cbz	r3, 8009fba <__smakebuf_r+0x70>
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fa8:	f000 f81e 	bl	8009fe8 <_isatty_r>
 8009fac:	b128      	cbz	r0, 8009fba <__smakebuf_r+0x70>
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	f023 0303 	bic.w	r3, r3, #3
 8009fb4:	f043 0301 	orr.w	r3, r3, #1
 8009fb8:	81a3      	strh	r3, [r4, #12]
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	431d      	orrs	r5, r3
 8009fbe:	81a5      	strh	r5, [r4, #12]
 8009fc0:	e7cf      	b.n	8009f62 <__smakebuf_r+0x18>
	...

08009fc4 <_fstat_r>:
 8009fc4:	b538      	push	{r3, r4, r5, lr}
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	4d06      	ldr	r5, [pc, #24]	@ (8009fe4 <_fstat_r+0x20>)
 8009fca:	4604      	mov	r4, r0
 8009fcc:	4608      	mov	r0, r1
 8009fce:	4611      	mov	r1, r2
 8009fd0:	602b      	str	r3, [r5, #0]
 8009fd2:	f7f8 fb0f 	bl	80025f4 <_fstat>
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	d102      	bne.n	8009fe0 <_fstat_r+0x1c>
 8009fda:	682b      	ldr	r3, [r5, #0]
 8009fdc:	b103      	cbz	r3, 8009fe0 <_fstat_r+0x1c>
 8009fde:	6023      	str	r3, [r4, #0]
 8009fe0:	bd38      	pop	{r3, r4, r5, pc}
 8009fe2:	bf00      	nop
 8009fe4:	2000083c 	.word	0x2000083c

08009fe8 <_isatty_r>:
 8009fe8:	b538      	push	{r3, r4, r5, lr}
 8009fea:	2300      	movs	r3, #0
 8009fec:	4d05      	ldr	r5, [pc, #20]	@ (800a004 <_isatty_r+0x1c>)
 8009fee:	4604      	mov	r4, r0
 8009ff0:	4608      	mov	r0, r1
 8009ff2:	602b      	str	r3, [r5, #0]
 8009ff4:	f7f8 fb0d 	bl	8002612 <_isatty>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d102      	bne.n	800a002 <_isatty_r+0x1a>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	b103      	cbz	r3, 800a002 <_isatty_r+0x1a>
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	2000083c 	.word	0x2000083c

0800a008 <abort>:
 800a008:	2006      	movs	r0, #6
 800a00a:	b508      	push	{r3, lr}
 800a00c:	f000 f834 	bl	800a078 <raise>
 800a010:	2001      	movs	r0, #1
 800a012:	f7f8 faa0 	bl	8002556 <_exit>

0800a016 <_malloc_usable_size_r>:
 800a016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a01a:	1f18      	subs	r0, r3, #4
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	bfbc      	itt	lt
 800a020:	580b      	ldrlt	r3, [r1, r0]
 800a022:	18c0      	addlt	r0, r0, r3
 800a024:	4770      	bx	lr

0800a026 <_raise_r>:
 800a026:	291f      	cmp	r1, #31
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4605      	mov	r5, r0
 800a02c:	460c      	mov	r4, r1
 800a02e:	d904      	bls.n	800a03a <_raise_r+0x14>
 800a030:	2316      	movs	r3, #22
 800a032:	6003      	str	r3, [r0, #0]
 800a034:	f04f 30ff 	mov.w	r0, #4294967295
 800a038:	bd38      	pop	{r3, r4, r5, pc}
 800a03a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a03c:	b112      	cbz	r2, 800a044 <_raise_r+0x1e>
 800a03e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a042:	b94b      	cbnz	r3, 800a058 <_raise_r+0x32>
 800a044:	4628      	mov	r0, r5
 800a046:	f000 f831 	bl	800a0ac <_getpid_r>
 800a04a:	4622      	mov	r2, r4
 800a04c:	4601      	mov	r1, r0
 800a04e:	4628      	mov	r0, r5
 800a050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a054:	f000 b818 	b.w	800a088 <_kill_r>
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d00a      	beq.n	800a072 <_raise_r+0x4c>
 800a05c:	1c59      	adds	r1, r3, #1
 800a05e:	d103      	bne.n	800a068 <_raise_r+0x42>
 800a060:	2316      	movs	r3, #22
 800a062:	6003      	str	r3, [r0, #0]
 800a064:	2001      	movs	r0, #1
 800a066:	e7e7      	b.n	800a038 <_raise_r+0x12>
 800a068:	2100      	movs	r1, #0
 800a06a:	4620      	mov	r0, r4
 800a06c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a070:	4798      	blx	r3
 800a072:	2000      	movs	r0, #0
 800a074:	e7e0      	b.n	800a038 <_raise_r+0x12>
	...

0800a078 <raise>:
 800a078:	4b02      	ldr	r3, [pc, #8]	@ (800a084 <raise+0xc>)
 800a07a:	4601      	mov	r1, r0
 800a07c:	6818      	ldr	r0, [r3, #0]
 800a07e:	f7ff bfd2 	b.w	800a026 <_raise_r>
 800a082:	bf00      	nop
 800a084:	2000001c 	.word	0x2000001c

0800a088 <_kill_r>:
 800a088:	b538      	push	{r3, r4, r5, lr}
 800a08a:	2300      	movs	r3, #0
 800a08c:	4d06      	ldr	r5, [pc, #24]	@ (800a0a8 <_kill_r+0x20>)
 800a08e:	4604      	mov	r4, r0
 800a090:	4608      	mov	r0, r1
 800a092:	4611      	mov	r1, r2
 800a094:	602b      	str	r3, [r5, #0]
 800a096:	f7f8 fa4e 	bl	8002536 <_kill>
 800a09a:	1c43      	adds	r3, r0, #1
 800a09c:	d102      	bne.n	800a0a4 <_kill_r+0x1c>
 800a09e:	682b      	ldr	r3, [r5, #0]
 800a0a0:	b103      	cbz	r3, 800a0a4 <_kill_r+0x1c>
 800a0a2:	6023      	str	r3, [r4, #0]
 800a0a4:	bd38      	pop	{r3, r4, r5, pc}
 800a0a6:	bf00      	nop
 800a0a8:	2000083c 	.word	0x2000083c

0800a0ac <_getpid_r>:
 800a0ac:	f7f8 ba3c 	b.w	8002528 <_getpid>

0800a0b0 <_init>:
 800a0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b2:	bf00      	nop
 800a0b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0b6:	bc08      	pop	{r3}
 800a0b8:	469e      	mov	lr, r3
 800a0ba:	4770      	bx	lr

0800a0bc <_fini>:
 800a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0be:	bf00      	nop
 800a0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c2:	bc08      	pop	{r3}
 800a0c4:	469e      	mov	lr, r3
 800a0c6:	4770      	bx	lr


configuration final2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac4c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a90  0800ad60  0800ad60  0000bd60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7f0  0800b7f0  0000d294  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7f0  0800b7f0  0000c7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7f8  0800b7f8  0000d294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7f8  0800b7f8  0000c7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b7fc  0800b7fc  0000c7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000294  20000000  0800b800  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  20000294  0800ba94  0000d294  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000be8  0800ba94  0000dbe8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d294  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da4a  00000000  00000000  0000d2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a0  00000000  00000000  0001ad07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0001d6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ed  00000000  00000000  0001e278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c07  00000000  00000000  0001eb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fda8  00000000  00000000  0003876c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba3b  00000000  00000000  00048514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3f4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004944  00000000  00000000  000d3f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d88d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000294 	.word	0x20000294
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ad44 	.word	0x0800ad44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000298 	.word	0x20000298
 800014c:	0800ad44 	.word	0x0800ad44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	2200      	movs	r2, #0
 8001160:	2300      	movs	r3, #0
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f7ff fc29 	bl	80009bc <__aeabi_dcmplt>
 800116a:	b928      	cbnz	r0, 8001178 <__aeabi_d2lz+0x1c>
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001174:	f000 b80a 	b.w	800118c <__aeabi_d2ulz>
 8001178:	4620      	mov	r0, r4
 800117a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800117e:	f000 f805 	bl	800118c <__aeabi_d2ulz>
 8001182:	4240      	negs	r0, r0
 8001184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop

0800118c <__aeabi_d2ulz>:
 800118c:	b5d0      	push	{r4, r6, r7, lr}
 800118e:	2200      	movs	r2, #0
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__aeabi_d2ulz+0x34>)
 8001192:	4606      	mov	r6, r0
 8001194:	460f      	mov	r7, r1
 8001196:	f7ff f99f 	bl	80004d8 <__aeabi_dmul>
 800119a:	f7ff fc75 	bl	8000a88 <__aeabi_d2uiz>
 800119e:	4604      	mov	r4, r0
 80011a0:	f7ff f920 	bl	80003e4 <__aeabi_ui2d>
 80011a4:	2200      	movs	r2, #0
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <__aeabi_d2ulz+0x38>)
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4630      	mov	r0, r6
 80011b2:	4639      	mov	r1, r7
 80011b4:	f7fe ffd8 	bl	8000168 <__aeabi_dsub>
 80011b8:	f7ff fc66 	bl	8000a88 <__aeabi_d2uiz>
 80011bc:	4621      	mov	r1, r4
 80011be:	bdd0      	pop	{r4, r6, r7, pc}
 80011c0:	3df00000 	.word	0x3df00000
 80011c4:	41f00000 	.word	0x41f00000

080011c8 <lireTensionBatterie>:
char buffer1[400];
uint16_t raw_batterie;
uint16_t raw_tension_stable;
int pourcentageBatterie;
// Fonction pour lire la valeur de la batterie
int lireTensionBatterie() {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	@ 0x28
 80011cc:	af02      	add	r7, sp, #8
    GPIO_InitTypeDef GPIO_InitStruct;

    // Activer l'horloge pour le port GPIO de la batterie
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b60      	ldr	r3, [pc, #384]	@ (8001350 <lireTensionBatterie+0x188>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001350 <lireTensionBatterie+0x188>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	6193      	str	r3, [r2, #24]
 80011da:	4b5d      	ldr	r3, [pc, #372]	@ (8001350 <lireTensionBatterie+0x188>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

    // Configurer le pin GPIO de la batterie pour une entrée analogique
    GPIO_InitStruct.Pin = BATTERIE_PIN;
 80011e6:	2301      	movs	r3, #1
 80011e8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ea:	2303      	movs	r3, #3
 80011ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BATTERIE_PORT, &GPIO_InitStruct);
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4619      	mov	r1, r3
 80011f8:	4856      	ldr	r0, [pc, #344]	@ (8001354 <lireTensionBatterie+0x18c>)
 80011fa:	f002 fcef 	bl	8003bdc <HAL_GPIO_Init>

    // Attendre un court instant pour que le GPIO se stabilise
    HAL_Delay(10);
 80011fe:	200a      	movs	r0, #10
 8001200:	f001 ffb8 	bl	8003174 <HAL_Delay>

    // Lecture de la valeur analogique
    HAL_ADC_Start(&hadc1);
 8001204:	4854      	ldr	r0, [pc, #336]	@ (8001358 <lireTensionBatterie+0x190>)
 8001206:	f002 f8b1 	bl	800336c <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800120a:	f04f 31ff 	mov.w	r1, #4294967295
 800120e:	4852      	ldr	r0, [pc, #328]	@ (8001358 <lireTensionBatterie+0x190>)
 8001210:	f002 f95a 	bl	80034c8 <HAL_ADC_PollForConversion>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d17b      	bne.n	8001312 <lireTensionBatterie+0x14a>
        HAL_ADC_PollForConversion(&hadc1, 300);
 800121a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800121e:	484e      	ldr	r0, [pc, #312]	@ (8001358 <lireTensionBatterie+0x190>)
 8001220:	f002 f952 	bl	80034c8 <HAL_ADC_PollForConversion>
        raw_batterie = HAL_ADC_GetValue(&hadc1);
 8001224:	484c      	ldr	r0, [pc, #304]	@ (8001358 <lireTensionBatterie+0x190>)
 8001226:	f002 fa55 	bl	80036d4 <HAL_ADC_GetValue>
 800122a:	4603      	mov	r3, r0
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b4b      	ldr	r3, [pc, #300]	@ (800135c <lireTensionBatterie+0x194>)
 8001230:	801a      	strh	r2, [r3, #0]
        float tensionBatterie = raw_batterie * (3.3 / 4096) * 1.054;
 8001232:	4b4a      	ldr	r3, [pc, #296]	@ (800135c <lireTensionBatterie+0x194>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f8e4 	bl	8000404 <__aeabi_i2d>
 800123c:	a340      	add	r3, pc, #256	@ (adr r3, 8001340 <lireTensionBatterie+0x178>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f949 	bl	80004d8 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	a33e      	add	r3, pc, #248	@ (adr r3, 8001348 <lireTensionBatterie+0x180>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff f940 	bl	80004d8 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc32 	bl	8000ac8 <__aeabi_d2f>
 8001264:	4603      	mov	r3, r0
 8001266:	61bb      	str	r3, [r7, #24]
        tensionBatterie = (tensionBatterie * 37500) / 7500;
 8001268:	493d      	ldr	r1, [pc, #244]	@ (8001360 <lireTensionBatterie+0x198>)
 800126a:	69b8      	ldr	r0, [r7, #24]
 800126c:	f7ff fd8a 	bl	8000d84 <__aeabi_fmul>
 8001270:	4603      	mov	r3, r0
 8001272:	493c      	ldr	r1, [pc, #240]	@ (8001364 <lireTensionBatterie+0x19c>)
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fe39 	bl	8000eec <__aeabi_fdiv>
 800127a:	4603      	mov	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]

        // Calcul du pourcentage de charge de la batterie
        int pourcentageBatterie;
        if (tensionBatterie > 13) {
 800127e:	493a      	ldr	r1, [pc, #232]	@ (8001368 <lireTensionBatterie+0x1a0>)
 8001280:	69b8      	ldr	r0, [r7, #24]
 8001282:	f7ff ff3b 	bl	80010fc <__aeabi_fcmpgt>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <lireTensionBatterie+0xca>
            pourcentageBatterie = 90;
 800128c:	235a      	movs	r3, #90	@ 0x5a
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	e024      	b.n	80012dc <lireTensionBatterie+0x114>
        } else if (tensionBatterie > 10 && tensionBatterie <= 13) {
 8001292:	4936      	ldr	r1, [pc, #216]	@ (800136c <lireTensionBatterie+0x1a4>)
 8001294:	69b8      	ldr	r0, [r7, #24]
 8001296:	f7ff ff31 	bl	80010fc <__aeabi_fcmpgt>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d01b      	beq.n	80012d8 <lireTensionBatterie+0x110>
 80012a0:	4931      	ldr	r1, [pc, #196]	@ (8001368 <lireTensionBatterie+0x1a0>)
 80012a2:	69b8      	ldr	r0, [r7, #24]
 80012a4:	f7ff ff16 	bl	80010d4 <__aeabi_fcmple>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d014      	beq.n	80012d8 <lireTensionBatterie+0x110>
            pourcentageBatterie = ((tensionBatterie - 10) / (13 - 10)) * 100;
 80012ae:	492f      	ldr	r1, [pc, #188]	@ (800136c <lireTensionBatterie+0x1a4>)
 80012b0:	69b8      	ldr	r0, [r7, #24]
 80012b2:	f7ff fc5d 	bl	8000b70 <__aeabi_fsub>
 80012b6:	4603      	mov	r3, r0
 80012b8:	492d      	ldr	r1, [pc, #180]	@ (8001370 <lireTensionBatterie+0x1a8>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fe16 	bl	8000eec <__aeabi_fdiv>
 80012c0:	4603      	mov	r3, r0
 80012c2:	492c      	ldr	r1, [pc, #176]	@ (8001374 <lireTensionBatterie+0x1ac>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fd5d 	bl	8000d84 <__aeabi_fmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff1f 	bl	8001110 <__aeabi_f2iz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	e001      	b.n	80012dc <lireTensionBatterie+0x114>
        } else {
            pourcentageBatterie = 5;
 80012d8:	2305      	movs	r3, #5
 80012da:	61fb      	str	r3, [r7, #28]
        }

        // Affichage de la tension de la batterie via UART
        snprintf(buffer1, sizeof(buffer1), "\nLe pourcentage de la batterie en pourcentage : %d \nLa tension du batterie %.2f", pourcentageBatterie, tensionBatterie);
 80012dc:	69b8      	ldr	r0, [r7, #24]
 80012de:	f7ff f8a3 	bl	8000428 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	e9cd 2300 	strd	r2, r3, [sp]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	4a22      	ldr	r2, [pc, #136]	@ (8001378 <lireTensionBatterie+0x1b0>)
 80012ee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80012f2:	4822      	ldr	r0, [pc, #136]	@ (800137c <lireTensionBatterie+0x1b4>)
 80012f4:	f006 f958 	bl	80075a8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, strlen(buffer1), HAL_MAX_DELAY);
 80012f8:	4820      	ldr	r0, [pc, #128]	@ (800137c <lireTensionBatterie+0x1b4>)
 80012fa:	f7fe ff29 	bl	8000150 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	491d      	ldr	r1, [pc, #116]	@ (800137c <lireTensionBatterie+0x1b4>)
 8001308:	481d      	ldr	r0, [pc, #116]	@ (8001380 <lireTensionBatterie+0x1b8>)
 800130a:	f004 f963 	bl	80055d4 <HAL_UART_Transmit>

        return pourcentageBatterie;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	e012      	b.n	8001338 <lireTensionBatterie+0x170>
    } else {
        // Gestion de l'échec de la conversion ADC
        snprintf(buffer1, sizeof(buffer1), "\nÉchec de la conversion ADC pour la batterie");
 8001312:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <lireTensionBatterie+0x1bc>)
 8001314:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001318:	4818      	ldr	r0, [pc, #96]	@ (800137c <lireTensionBatterie+0x1b4>)
 800131a:	f006 f945 	bl	80075a8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, strlen(buffer1), HAL_MAX_DELAY);
 800131e:	4817      	ldr	r0, [pc, #92]	@ (800137c <lireTensionBatterie+0x1b4>)
 8001320:	f7fe ff16 	bl	8000150 <strlen>
 8001324:	4603      	mov	r3, r0
 8001326:	b29a      	uxth	r2, r3
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	4913      	ldr	r1, [pc, #76]	@ (800137c <lireTensionBatterie+0x1b4>)
 800132e:	4814      	ldr	r0, [pc, #80]	@ (8001380 <lireTensionBatterie+0x1b8>)
 8001330:	f004 f950 	bl	80055d4 <HAL_UART_Transmit>

        return -1.0f; // Valeur d'erreur
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001338:	4618      	mov	r0, r3
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	66666666 	.word	0x66666666
 8001344:	3f4a6666 	.word	0x3f4a6666
 8001348:	1a9fbe77 	.word	0x1a9fbe77
 800134c:	3ff0dd2f 	.word	0x3ff0dd2f
 8001350:	40021000 	.word	0x40021000
 8001354:	40010c00 	.word	0x40010c00
 8001358:	20000444 	.word	0x20000444
 800135c:	20000440 	.word	0x20000440
 8001360:	47127c00 	.word	0x47127c00
 8001364:	45ea6000 	.word	0x45ea6000
 8001368:	41500000 	.word	0x41500000
 800136c:	41200000 	.word	0x41200000
 8001370:	40400000 	.word	0x40400000
 8001374:	42c80000 	.word	0x42c80000
 8001378:	0800ad60 	.word	0x0800ad60
 800137c:	200002b0 	.word	0x200002b0
 8001380:	20000a08 	.word	0x20000a08
 8001384:	0800adb0 	.word	0x0800adb0

08001388 <lireTensionStable>:


// Fonction pour lire la tension stable
int lireTensionStable() {
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    int VoltageState = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    // Activer l'horloge pour le port GPIO de la tension stable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b49      	ldr	r3, [pc, #292]	@ (80014b8 <lireTensionStable+0x130>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	4a48      	ldr	r2, [pc, #288]	@ (80014b8 <lireTensionStable+0x130>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6193      	str	r3, [r2, #24]
 800139e:	4b46      	ldr	r3, [pc, #280]	@ (80014b8 <lireTensionStable+0x130>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]

    // Configurer le pin GPIO de la tension stable pour une entrée analogique
    GPIO_InitStruct.Pin = TENSION_STABLE_PIN;
 80013aa:	2380      	movs	r3, #128	@ 0x80
 80013ac:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ae:	2303      	movs	r3, #3
 80013b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(TENSION_STABLE_PORT, &GPIO_InitStruct);
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	483f      	ldr	r0, [pc, #252]	@ (80014bc <lireTensionStable+0x134>)
 80013be:	f002 fc0d 	bl	8003bdc <HAL_GPIO_Init>

    // Attendre un court instant pour que le GPIO se stabilise
    HAL_Delay(10);
 80013c2:	200a      	movs	r0, #10
 80013c4:	f001 fed6 	bl	8003174 <HAL_Delay>

    // Lecture de la valeur analogique de la tension stable
    HAL_ADC_Start(&hadc2); // Assurez-vous que hadc2 est correctement configuré pour votre tension stable
 80013c8:	483d      	ldr	r0, [pc, #244]	@ (80014c0 <lireTensionStable+0x138>)
 80013ca:	f001 ffcf 	bl	800336c <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK) {
 80013ce:	f04f 31ff 	mov.w	r1, #4294967295
 80013d2:	483b      	ldr	r0, [pc, #236]	@ (80014c0 <lireTensionStable+0x138>)
 80013d4:	f002 f878 	bl	80034c8 <HAL_ADC_PollForConversion>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d150      	bne.n	8001480 <lireTensionStable+0xf8>
        HAL_ADC_PollForConversion(&hadc2, 300);
 80013de:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80013e2:	4837      	ldr	r0, [pc, #220]	@ (80014c0 <lireTensionStable+0x138>)
 80013e4:	f002 f870 	bl	80034c8 <HAL_ADC_PollForConversion>
        raw_tension_stable = HAL_ADC_GetValue(&hadc2);
 80013e8:	4835      	ldr	r0, [pc, #212]	@ (80014c0 <lireTensionStable+0x138>)
 80013ea:	f002 f973 	bl	80036d4 <HAL_ADC_GetValue>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b34      	ldr	r3, [pc, #208]	@ (80014c4 <lireTensionStable+0x13c>)
 80013f4:	801a      	strh	r2, [r3, #0]
        float tensionStable = raw_tension_stable * (3.3 / 4096);
 80013f6:	4b33      	ldr	r3, [pc, #204]	@ (80014c4 <lireTensionStable+0x13c>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f802 	bl	8000404 <__aeabi_i2d>
 8001400:	a32b      	add	r3, pc, #172	@ (adr r3, 80014b0 <lireTensionStable+0x128>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7ff f867 	bl	80004d8 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff fb59 	bl	8000ac8 <__aeabi_d2f>
 8001416:	4603      	mov	r3, r0
 8001418:	61bb      	str	r3, [r7, #24]
        tensionStable = (tensionStable * 37500) / 7500;
 800141a:	492b      	ldr	r1, [pc, #172]	@ (80014c8 <lireTensionStable+0x140>)
 800141c:	69b8      	ldr	r0, [r7, #24]
 800141e:	f7ff fcb1 	bl	8000d84 <__aeabi_fmul>
 8001422:	4603      	mov	r3, r0
 8001424:	4929      	ldr	r1, [pc, #164]	@ (80014cc <lireTensionStable+0x144>)
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fd60 	bl	8000eec <__aeabi_fdiv>
 800142c:	4603      	mov	r3, r0
 800142e:	61bb      	str	r3, [r7, #24]
        // Affichage de la tension stable via UART
        if (tensionStable > 1)
 8001430:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001434:	69b8      	ldr	r0, [r7, #24]
 8001436:	f7ff fe61 	bl	80010fc <__aeabi_fcmpgt>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <lireTensionStable+0xbc>
        {
        	return 1;
 8001440:	2301      	movs	r3, #1
 8001442:	e030      	b.n	80014a6 <lireTensionStable+0x11e>
        }
        else if (tensionStable < 1)
 8001444:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001448:	69b8      	ldr	r0, [r7, #24]
 800144a:	f7ff fe39 	bl	80010c0 <__aeabi_fcmplt>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <lireTensionStable+0xd0>
        {
        	return 0;
 8001454:	2300      	movs	r3, #0
 8001456:	e026      	b.n	80014a6 <lireTensionStable+0x11e>
        }
        snprintf(buffer1, sizeof(buffer1), "\nLa tension stable est : %d", VoltageState);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <lireTensionStable+0x148>)
 800145c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001460:	481c      	ldr	r0, [pc, #112]	@ (80014d4 <lireTensionStable+0x14c>)
 8001462:	f006 f8a1 	bl	80075a8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, strlen(buffer1), HAL_MAX_DELAY);
 8001466:	481b      	ldr	r0, [pc, #108]	@ (80014d4 <lireTensionStable+0x14c>)
 8001468:	f7fe fe72 	bl	8000150 <strlen>
 800146c:	4603      	mov	r3, r0
 800146e:	b29a      	uxth	r2, r3
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
 8001474:	4917      	ldr	r1, [pc, #92]	@ (80014d4 <lireTensionStable+0x14c>)
 8001476:	4818      	ldr	r0, [pc, #96]	@ (80014d8 <lireTensionStable+0x150>)
 8001478:	f004 f8ac 	bl	80055d4 <HAL_UART_Transmit>

        return VoltageState;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	e012      	b.n	80014a6 <lireTensionStable+0x11e>
        //return VoltageState;
    } else {
        // Gestion de l'échec de la conversion ADC
        snprintf(buffer1, sizeof(buffer1), "\nÉchec de la conversion ADC pour la tension stable");
 8001480:	4a16      	ldr	r2, [pc, #88]	@ (80014dc <lireTensionStable+0x154>)
 8001482:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001486:	4813      	ldr	r0, [pc, #76]	@ (80014d4 <lireTensionStable+0x14c>)
 8001488:	f006 f88e 	bl	80075a8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, strlen(buffer1), HAL_MAX_DELAY);
 800148c:	4811      	ldr	r0, [pc, #68]	@ (80014d4 <lireTensionStable+0x14c>)
 800148e:	f7fe fe5f 	bl	8000150 <strlen>
 8001492:	4603      	mov	r3, r0
 8001494:	b29a      	uxth	r2, r3
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	490e      	ldr	r1, [pc, #56]	@ (80014d4 <lireTensionStable+0x14c>)
 800149c:	480e      	ldr	r0, [pc, #56]	@ (80014d8 <lireTensionStable+0x150>)
 800149e:	f004 f899 	bl	80055d4 <HAL_UART_Transmit>

        return -1.0f; // Valeur d'erreur
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	66666666 	.word	0x66666666
 80014b4:	3f4a6666 	.word	0x3f4a6666
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010800 	.word	0x40010800
 80014c0:	20000474 	.word	0x20000474
 80014c4:	20000442 	.word	0x20000442
 80014c8:	47127c00 	.word	0x47127c00
 80014cc:	45ea6000 	.word	0x45ea6000
 80014d0:	0800ade0 	.word	0x0800ade0
 80014d4:	200002b0 	.word	0x200002b0
 80014d8:	20000a08 	.word	0x20000a08
 80014dc:	0800adfc 	.word	0x0800adfc

080014e0 <newLoRa>:
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */


LoRa newLoRa(){
 80014e0:	b4b0      	push	{r4, r5, r7}
 80014e2:	b08f      	sub	sp, #60	@ 0x3c
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 868       ;
 80014e8:	f44f 7359 	mov.w	r3, #868	@ 0x364
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_9      ;
 80014ee:	2309      	movs	r3, #9
 80014f0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_250KHz ;
 80014f4:	2308      	movs	r3, #8
 80014f6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_8    ;
 80014fa:	2304      	movs	r3, #4
 80014fc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_17db;
 8001500:	23fc      	movs	r3, #252	@ 0xfc
 8001502:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 130       ;
 8001506:	2382      	movs	r3, #130	@ 0x82
 8001508:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 800150c:	2308      	movs	r3, #8
 800150e:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	461d      	mov	r5, r3
 8001514:	f107 040c 	add.w	r4, r7, #12
 8001518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001520:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001524:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	373c      	adds	r7, #60	@ 0x3c
 800152c:	46bd      	mov	sp, r7
 800152e:	bcb0      	pop	{r4, r5, r7}
 8001530:	4770      	bx	lr

08001532 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 800153c:	2101      	movs	r1, #1
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f9ff 	bl	8001942 <LoRa_read>
 8001544:	4603      	mov	r3, r0
 8001546:	73bb      	strb	r3, [r7, #14]
	data = read;
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d107      	bne.n	8001562 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001552:	7bbb      	ldrb	r3, [r7, #14]
 8001554:	f023 0307 	bic.w	r3, r3, #7
 8001558:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
 8001560:	e03e      	b.n	80015e0 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d10c      	bne.n	8001582 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800156c:	f023 0307 	bic.w	r3, r3, #7
 8001570:	b25b      	sxtb	r3, r3
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	b25b      	sxtb	r3, r3
 8001578:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	61da      	str	r2, [r3, #28]
 8001580:	e02e      	b.n	80015e0 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d10c      	bne.n	80015a2 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8001588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800158c:	f023 0307 	bic.w	r3, r3, #7
 8001590:	b25b      	sxtb	r3, r3
 8001592:	f043 0303 	orr.w	r3, r3, #3
 8001596:	b25b      	sxtb	r3, r3
 8001598:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2203      	movs	r2, #3
 800159e:	61da      	str	r2, [r3, #28]
 80015a0:	e01e      	b.n	80015e0 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d10c      	bne.n	80015c2 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80015a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015ac:	f023 0307 	bic.w	r3, r3, #7
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	f043 0305 	orr.w	r3, r3, #5
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2205      	movs	r2, #5
 80015be:	61da      	str	r2, [r3, #28]
 80015c0:	e00e      	b.n	80015e0 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	2b06      	cmp	r3, #6
 80015c6:	d10b      	bne.n	80015e0 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80015c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015cc:	f023 0307 	bic.w	r3, r3, #7
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	f043 0306 	orr.w	r3, r3, #6
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2206      	movs	r2, #6
 80015de:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	461a      	mov	r2, r3
 80015e4:	2101      	movs	r1, #1
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f9c5 	bl	8001976 <LoRa_write>
	//HAL_Delay(10);
}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	4613      	mov	r3, r2
 8001602:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	889b      	ldrh	r3, [r3, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	4619      	mov	r1, r3
 8001610:	f002 fc68 	bl	8003ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6998      	ldr	r0, [r3, #24]
 8001618:	88fa      	ldrh	r2, [r7, #6]
 800161a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	f003 fa78 	bl	8004b14 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001624:	bf00      	nop
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4618      	mov	r0, r3
 800162c:	f003 fe7d 	bl	800532a <HAL_SPI_GetState>
 8001630:	4603      	mov	r3, r0
 8001632:	2b01      	cmp	r3, #1
 8001634:	d1f7      	bne.n	8001626 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6998      	ldr	r0, [r3, #24]
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001640:	6839      	ldr	r1, [r7, #0]
 8001642:	f003 fbaa 	bl	8004d9a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001646:	bf00      	nop
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4618      	mov	r0, r3
 800164e:	f003 fe6c 	bl	800532a <HAL_SPI_GetState>
 8001652:	4603      	mov	r3, r0
 8001654:	2b01      	cmp	r3, #1
 8001656:	d1f7      	bne.n	8001648 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	889b      	ldrh	r3, [r3, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	4619      	mov	r1, r3
 8001664:	f002 fc3e 	bl	8003ee4 <HAL_GPIO_WritePin>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	4613      	mov	r3, r2
 800167e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	889b      	ldrh	r3, [r3, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	f002 fc2a 	bl	8003ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6998      	ldr	r0, [r3, #24]
 8001694:	88fa      	ldrh	r2, [r7, #6]
 8001696:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	f003 fa3a 	bl	8004b14 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80016a0:	bf00      	nop
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 fe3f 	bl	800532a <HAL_SPI_GetState>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d1f7      	bne.n	80016a2 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6998      	ldr	r0, [r3, #24]
 80016b6:	8b3a      	ldrh	r2, [r7, #24]
 80016b8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016bc:	6839      	ldr	r1, [r7, #0]
 80016be:	f003 fa29 	bl	8004b14 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80016c2:	bf00      	nop
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fe2e 	bl	800532a <HAL_SPI_GetState>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d1f7      	bne.n	80016c4 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	889b      	ldrh	r3, [r3, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	4619      	mov	r1, r3
 80016e0:	f002 fc00 	bl	8003ee4 <HAL_GPIO_WritePin>
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 80016f8:	2126      	movs	r1, #38	@ 0x26
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f921 	bl	8001942 <LoRa_read>
 8001700:	4603      	mov	r3, r0
 8001702:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d004      	beq.n	8001714 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e003      	b.n	800171c <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001714:	7bbb      	ldrb	r3, [r7, #14]
 8001716:	f023 0308 	bic.w	r3, r3, #8
 800171a:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	461a      	mov	r2, r3
 8001720:	2126      	movs	r1, #38	@ 0x26
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f927 	bl	8001976 <LoRa_write>
	HAL_Delay(10);
 8001728:	200a      	movs	r0, #10
 800172a:	f001 fd23 	bl	8003174 <HAL_Delay>
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8001738:	b580      	push	{r7, lr}
 800173a:	b096      	sub	sp, #88	@ 0x58
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001740:	4a17      	ldr	r2, [pc, #92]	@ (80017a0 <LoRa_setAutoLDO+0x68>)
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	4611      	mov	r1, r2
 8001748:	2250      	movs	r2, #80	@ 0x50
 800174a:	4618      	mov	r0, r3
 800174c:	f006 f929 	bl	80079a2 <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001756:	461a      	mov	r2, r3
 8001758:	2301      	movs	r3, #1
 800175a:	4093      	lsls	r3, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fe51 	bl	8000404 <__aeabi_i2d>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	3358      	adds	r3, #88	@ 0x58
 800176c:	443b      	add	r3, r7
 800176e:	3b50      	subs	r3, #80	@ 0x50
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7fe ffda 	bl	800072c <__aeabi_ddiv>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f7ff f95a 	bl	8000a38 <__aeabi_d2iz>
 8001784:	4603      	mov	r3, r0
 8001786:	2b10      	cmp	r3, #16
 8001788:	bfcc      	ite	gt
 800178a:	2301      	movgt	r3, #1
 800178c:	2300      	movle	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4619      	mov	r1, r3
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ffaa 	bl	80016ec <LoRa_setLowDaraRateOptimization>
}
 8001798:	bf00      	nop
 800179a:	3758      	adds	r7, #88	@ 0x58
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	0800ae30 	.word	0x0800ae30

080017a4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	04db      	lsls	r3, r3, #19
 80017b2:	115b      	asrs	r3, r3, #5
 80017b4:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	0c1b      	lsrs	r3, r3, #16
 80017ba:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80017bc:	7afb      	ldrb	r3, [r7, #11]
 80017be:	461a      	mov	r2, r3
 80017c0:	2106      	movs	r1, #6
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f8d7 	bl	8001976 <LoRa_write>
	HAL_Delay(5);
 80017c8:	2005      	movs	r0, #5
 80017ca:	f001 fcd3 	bl	8003174 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80017d4:	7afb      	ldrb	r3, [r7, #11]
 80017d6:	461a      	mov	r2, r3
 80017d8:	2107      	movs	r1, #7
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f8cb 	bl	8001976 <LoRa_write>
	HAL_Delay(5);
 80017e0:	2005      	movs	r0, #5
 80017e2:	f001 fcc7 	bl	8003174 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	461a      	mov	r2, r3
 80017ee:	2108      	movs	r1, #8
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f8c0 	bl	8001976 <LoRa_write>
	HAL_Delay(5);
 80017f6:	2005      	movs	r0, #5
 80017f8:	f001 fcbc 	bl	8003174 <HAL_Delay>
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b0c      	cmp	r3, #12
 8001812:	dd01      	ble.n	8001818 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001814:	230c      	movs	r3, #12
 8001816:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2b06      	cmp	r3, #6
 800181c:	dc01      	bgt.n	8001822 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800181e:	2307      	movs	r3, #7
 8001820:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001822:	211e      	movs	r1, #30
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f88c 	bl	8001942 <LoRa_read>
 800182a:	4603      	mov	r3, r0
 800182c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800182e:	200a      	movs	r0, #10
 8001830:	f001 fca0 	bl	8003174 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	b2da      	uxtb	r2, r3
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	b2db      	uxtb	r3, r3
 8001844:	4413      	add	r3, r2
 8001846:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001848:	7bbb      	ldrb	r3, [r7, #14]
 800184a:	461a      	mov	r2, r3
 800184c:	211e      	movs	r1, #30
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f891 	bl	8001976 <LoRa_write>
	HAL_Delay(10);
 8001854:	200a      	movs	r0, #10
 8001856:	f001 fc8d 	bl	8003174 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ff6c 	bl	8001738 <LoRa_setAutoLDO>
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	461a      	mov	r2, r3
 8001878:	2109      	movs	r1, #9
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f87b 	bl	8001976 <LoRa_write>
	HAL_Delay(10);
 8001880:	200a      	movs	r0, #10
 8001882:	f001 fc77 	bl	8003174 <HAL_Delay>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	2b2c      	cmp	r3, #44	@ 0x2c
 80018a4:	d801      	bhi.n	80018aa <LoRa_setOCP+0x1a>
		current = 45;
 80018a6:	232d      	movs	r3, #45	@ 0x2d
 80018a8:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	2bf0      	cmp	r3, #240	@ 0xf0
 80018ae:	d901      	bls.n	80018b4 <LoRa_setOCP+0x24>
		current = 240;
 80018b0:	23f0      	movs	r3, #240	@ 0xf0
 80018b2:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	2b78      	cmp	r3, #120	@ 0x78
 80018b8:	d809      	bhi.n	80018ce <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	3b2d      	subs	r3, #45	@ 0x2d
 80018be:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <LoRa_setOCP+0x78>)
 80018c0:	fb82 1203 	smull	r1, r2, r2, r3
 80018c4:	1052      	asrs	r2, r2, #1
 80018c6:	17db      	asrs	r3, r3, #31
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e00b      	b.n	80018e6 <LoRa_setOCP+0x56>
	else if(current <= 240)
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	2bf0      	cmp	r3, #240	@ 0xf0
 80018d2:	d808      	bhi.n	80018e6 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	331e      	adds	r3, #30
 80018d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001908 <LoRa_setOCP+0x78>)
 80018da:	fb82 1203 	smull	r1, r2, r2, r3
 80018de:	1092      	asrs	r2, r2, #2
 80018e0:	17db      	asrs	r3, r3, #31
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	3320      	adds	r3, #32
 80018ea:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	461a      	mov	r2, r3
 80018f0:	210b      	movs	r1, #11
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f83f 	bl	8001976 <LoRa_write>
	HAL_Delay(10);
 80018f8:	200a      	movs	r0, #10
 80018fa:	f001 fc3b 	bl	8003174 <HAL_Delay>
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	66666667 	.word	0x66666667

0800190c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001914:	211e      	movs	r1, #30
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f813 	bl	8001942 <LoRa_read>
 800191c:	4603      	mov	r3, r0
 800191e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	f043 0307 	orr.w	r3, r3, #7
 8001926:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	461a      	mov	r2, r3
 800192c:	211e      	movs	r1, #30
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f821 	bl	8001976 <LoRa_write>
	HAL_Delay(10);
 8001934:	200a      	movs	r0, #10
 8001936:	f001 fc1d 	bl	8003174 <HAL_Delay>
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af02      	add	r7, sp, #8
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001954:	b2db      	uxtb	r3, r3
 8001956:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001958:	f107 030f 	add.w	r3, r7, #15
 800195c:	f107 010e 	add.w	r1, r7, #14
 8001960:	2201      	movs	r2, #1
 8001962:	9200      	str	r2, [sp, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fe44 	bl	80015f4 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af02      	add	r7, sp, #8
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	70fb      	strb	r3, [r7, #3]
 8001982:	4613      	mov	r3, r2
 8001984:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800198c:	b2db      	uxtb	r3, r3
 800198e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001990:	78bb      	ldrb	r3, [r7, #2]
 8001992:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001994:	f107 030f 	add.w	r3, r7, #15
 8001998:	f107 010e 	add.w	r1, r7, #14
 800199c:	2201      	movs	r2, #1
 800199e:	9200      	str	r2, [sp, #0]
 80019a0:	2201      	movs	r2, #1
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fe64 	bl	8001670 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

	return 1;
 80019b8:	2301      	movs	r3, #1
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b089      	sub	sp, #36	@ 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	4613      	mov	r3, r2
 80019d0:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	e007      	b.n	80019ec <LoRa_receive+0x28>
		data[i]=0;
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	4413      	add	r3, r2
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	3301      	adds	r3, #1
 80019ea:	61bb      	str	r3, [r7, #24]
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dbf3      	blt.n	80019dc <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80019f4:	2101      	movs	r1, #1
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fd9b 	bl	8001532 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80019fc:	2112      	movs	r1, #18
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f7ff ff9f 	bl	8001942 <LoRa_read>
 8001a04:	4603      	mov	r3, r0
 8001a06:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001a08:	7cfb      	ldrb	r3, [r7, #19]
 8001a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d02f      	beq.n	8001a72 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001a12:	22ff      	movs	r2, #255	@ 0xff
 8001a14:	2112      	movs	r1, #18
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f7ff ffad 	bl	8001976 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001a1c:	2113      	movs	r1, #19
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f7ff ff8f 	bl	8001942 <LoRa_read>
 8001a24:	4603      	mov	r3, r0
 8001a26:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001a28:	2110      	movs	r1, #16
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff ff89 	bl	8001942 <LoRa_read>
 8001a30:	4603      	mov	r3, r0
 8001a32:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001a34:	7cfb      	ldrb	r3, [r7, #19]
 8001a36:	461a      	mov	r2, r3
 8001a38:	210d      	movs	r1, #13
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff ff9b 	bl	8001976 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001a40:	7cba      	ldrb	r2, [r7, #18]
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	4293      	cmp	r3, r2
 8001a46:	bf28      	it	cs
 8001a48:	4613      	movcs	r3, r2
 8001a4a:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e00b      	b.n	8001a6a <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	18d4      	adds	r4, r2, r3
 8001a58:	2100      	movs	r1, #0
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff ff71 	bl	8001942 <LoRa_read>
 8001a60:	4603      	mov	r3, r0
 8001a62:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	7ffb      	ldrb	r3, [r7, #31]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	dbef      	blt.n	8001a52 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001a72:	2105      	movs	r1, #5
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fd5c 	bl	8001532 <LoRa_gotoMode>
    return min;
 8001a7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3724      	adds	r7, #36	@ 0x24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd90      	pop	{r4, r7, pc}

08001a84 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff8f 	bl	80019b0 <LoRa_isvalid>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8096 	beq.w	8001bc6 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fd48 	bl	8001532 <LoRa_gotoMode>
			HAL_Delay(10);
 8001aa2:	200a      	movs	r0, #10
 8001aa4:	f001 fb66 	bl	8003174 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ff49 	bl	8001942 <LoRa_read>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001ab4:	200a      	movs	r0, #10
 8001ab6:	f001 fb5d 	bl	8003174 <HAL_Delay>
			data = read | 0x80;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ac0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001ac2:	7bbb      	ldrb	r3, [r7, #14]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff54 	bl	8001976 <LoRa_write>
			HAL_Delay(100);
 8001ace:	2064      	movs	r0, #100	@ 0x64
 8001ad0:	f001 fb50 	bl	8003174 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fe62 	bl	80017a4 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff febd 	bl	8001868 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001af4:	4619      	mov	r1, r3
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff feca 	bl	8001890 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001afc:	2223      	movs	r2, #35	@ 0x23
 8001afe:	210c      	movs	r1, #12
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff38 	bl	8001976 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ff00 	bl	800190c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b12:	4619      	mov	r1, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff fe75 	bl	8001804 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001b1a:	22ff      	movs	r2, #255	@ 0xff
 8001b1c:	211f      	movs	r1, #31
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff29 	bl	8001976 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	461a      	mov	r2, r3
 8001b44:	211d      	movs	r1, #29
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff15 	bl	8001976 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fdf3 	bl	8001738 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2120      	movs	r1, #32
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff08 	bl	8001976 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2121      	movs	r1, #33	@ 0x21
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff00 	bl	8001976 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001b76:	2140      	movs	r1, #64	@ 0x40
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff fee2 	bl	8001942 <LoRa_read>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001b88:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001b8a:	7bbb      	ldrb	r3, [r7, #14]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2140      	movs	r1, #64	@ 0x40
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fef0 	bl	8001976 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001b96:	2101      	movs	r1, #1
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff fcca 	bl	8001532 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001ba4:	200a      	movs	r0, #10
 8001ba6:	f001 fae5 	bl	8003174 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001baa:	2142      	movs	r1, #66	@ 0x42
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff fec8 	bl	8001942 <LoRa_read>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	2b12      	cmp	r3, #18
 8001bba:	d101      	bne.n	8001bc0 <LoRa_init+0x13c>
				return LORA_OK;
 8001bbc:	23c8      	movs	r3, #200	@ 0xc8
 8001bbe:	e004      	b.n	8001bca <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001bc0:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001bc4:	e001      	b.n	8001bca <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001bc6:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <separateData>:
/////////////////////////ADDED BY LAFDIL SOUFIANE////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

void separateData(uint8_t *dataReceived, float *dataArray, int size) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b094      	sub	sp, #80	@ 0x50
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
    char *ptr;
    int i = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    char tempBuffer[50]; // Augmentez la taille du tampon temporaire si nécessaire

    // Copie des données reçues dans un tampon temporaire pour éviter de les modifier
    strncpy(tempBuffer, dataReceived, sizeof(tempBuffer) - 1);
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	2231      	movs	r2, #49	@ 0x31
 8001bea:	68f9      	ldr	r1, [r7, #12]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f005 fdc5 	bl	800777c <strncpy>
    tempBuffer[sizeof(tempBuffer) - 1] = '\0'; // Assurer la terminaison du tampon temporaire
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

    // Utiliser sscanf pour extraire les valeurs flottantes
    while ((sscanf(tempBuffer, "%f,", &dataArray[i])) == 1 && i < size) {
 8001bf8:	e019      	b.n	8001c2e <separateData+0x5a>
        // Rechercher la virgule suivante dans la chaîne
        ptr = strchr(tempBuffer, ',');
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	212c      	movs	r1, #44	@ 0x2c
 8001c00:	4618      	mov	r0, r3
 8001c02:	f005 fd9c 	bl	800773e <strchr>
 8001c06:	6478      	str	r0, [r7, #68]	@ 0x44
        if (ptr != NULL) {
 8001c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d021      	beq.n	8001c52 <separateData+0x7e>
            // Avancer le pointeur pour sauter la virgule
            ptr++;
 8001c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c10:	3301      	adds	r3, #1
 8001c12:	647b      	str	r3, [r7, #68]	@ 0x44
            // Mettre à jour le tampon temporaire pour contenir le reste de la chaîne
            strncpy(tempBuffer, ptr, sizeof(tempBuffer) - 1);
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	2231      	movs	r2, #49	@ 0x31
 8001c1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f005 fdad 	bl	800777c <strncpy>
            tempBuffer[sizeof(tempBuffer) - 1] = '\0'; // Assurer la terminaison du tampon temporaire
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
        } else {
            // Si aucune virgule n'est trouvée, sortir de la boucle
            break;
        }
        i++;
 8001c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while ((sscanf(tempBuffer, "%f,", &dataArray[i])) == 1 && i < size) {
 8001c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	441a      	add	r2, r3
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	4917      	ldr	r1, [pc, #92]	@ (8001c98 <separateData+0xc4>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f005 fd07 	bl	8007650 <siscanf>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d105      	bne.n	8001c54 <separateData+0x80>
 8001c48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbd4      	blt.n	8001bfa <separateData+0x26>
 8001c50:	e000      	b.n	8001c54 <separateData+0x80>
            break;
 8001c52:	bf00      	nop
    }

    // Débogage : imprimer les valeurs intermédiaires et les tokens extraits
    printf("Nombre de valeurs trouvées : %d\n", i);
 8001c54:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001c56:	4811      	ldr	r0, [pc, #68]	@ (8001c9c <separateData+0xc8>)
 8001c58:	f005 fc94 	bl	8007584 <iprintf>
    for (int j = 0; j < i; j++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c60:	e010      	b.n	8001c84 <separateData+0xb0>
        printf("Valeur %d : %f\n", j, dataArray[j]);
 8001c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	4413      	add	r3, r2
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fbdb 	bl	8000428 <__aeabi_f2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001c78:	4809      	ldr	r0, [pc, #36]	@ (8001ca0 <separateData+0xcc>)
 8001c7a:	f005 fc83 	bl	8007584 <iprintf>
    for (int j = 0; j < i; j++) {
 8001c7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c80:	3301      	adds	r3, #1
 8001c82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbea      	blt.n	8001c62 <separateData+0x8e>
    }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3750      	adds	r7, #80	@ 0x50
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	0800ae80 	.word	0x0800ae80
 8001c9c:	0800ae84 	.word	0x0800ae84
 8001ca0:	0800aea8 	.word	0x0800aea8

08001ca4 <receiveAndProcessLoRaFrame>:

void receiveAndProcessLoRaFrame(int bytes_received, uint8_t *read_data, float *DataArray, int size) {
 8001ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca8:	b0c8      	sub	sp, #288	@ 0x120
 8001caa:	af0a      	add	r7, sp, #40	@ 0x28
 8001cac:	6178      	str	r0, [r7, #20]
 8001cae:	6139      	str	r1, [r7, #16]
 8001cb0:	60fa      	str	r2, [r7, #12]
 8001cb2:	60bb      	str	r3, [r7, #8]

    char buffer[200];
    if (bytes_received > 0) {
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	dd7c      	ble.n	8001db4 <receiveAndProcessLoRaFrame+0x110>
        read_data[bytes_received] = '\0'; // Assurez-vous que la chaîne est terminée par un caractère nul
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]

        snprintf(buffer, sizeof(buffer), "\nData received: %s\r\n", read_data);
 8001cc4:	f107 001c 	add.w	r0, r7, #28
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4a40      	ldr	r2, [pc, #256]	@ (8001dcc <receiveAndProcessLoRaFrame+0x128>)
 8001ccc:	21c8      	movs	r1, #200	@ 0xc8
 8001cce:	f005 fc6b 	bl	80075a8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fa3a 	bl	8000150 <strlen>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	f107 011c 	add.w	r1, r7, #28
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce8:	4839      	ldr	r0, [pc, #228]	@ (8001dd0 <receiveAndProcessLoRaFrame+0x12c>)
 8001cea:	f003 fc73 	bl	80055d4 <HAL_UART_Transmit>

        separateData(read_data, DataArray, size);
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	68f9      	ldr	r1, [r7, #12]
 8001cf2:	6938      	ldr	r0, [r7, #16]
 8001cf4:	f7ff ff6e 	bl	8001bd4 <separateData>

        float Temperature = DataArray[0] / 100;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4935      	ldr	r1, [pc, #212]	@ (8001dd4 <receiveAndProcessLoRaFrame+0x130>)
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f8f4 	bl	8000eec <__aeabi_fdiv>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        float Conductivity = DataArray[1];
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        float Salinity = DataArray[2];
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        float TDS = DataArray[3];
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        float PH = DataArray[4]/100;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3310      	adds	r3, #16
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	492a      	ldr	r1, [pc, #168]	@ (8001dd4 <receiveAndProcessLoRaFrame+0x130>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f8de 	bl	8000eec <__aeabi_fdiv>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

        snprintf(buffer, sizeof(buffer), "\nTemperature : %.2f °C\nConductivity : %.2f us/cm\nSalinity: %.2f mg/L\nTDS: %.2f mg/L\nPH: %.2f ph \r\n", Temperature, Conductivity, Salinity, TDS, PH);
 8001d36:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8001d3a:	f7fe fb75 	bl	8000428 <__aeabi_f2d>
 8001d3e:	4604      	mov	r4, r0
 8001d40:	460d      	mov	r5, r1
 8001d42:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8001d46:	f7fe fb6f 	bl	8000428 <__aeabi_f2d>
 8001d4a:	4680      	mov	r8, r0
 8001d4c:	4689      	mov	r9, r1
 8001d4e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001d52:	f7fe fb69 	bl	8000428 <__aeabi_f2d>
 8001d56:	4682      	mov	sl, r0
 8001d58:	468b      	mov	fp, r1
 8001d5a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8001d5e:	f7fe fb63 	bl	8000428 <__aeabi_f2d>
 8001d62:	e9c7 0100 	strd	r0, r1, [r7]
 8001d66:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8001d6a:	f7fe fb5d 	bl	8000428 <__aeabi_f2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	f107 001c 	add.w	r0, r7, #28
 8001d76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001d82:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001d86:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d8a:	e9cd 4500 	strd	r4, r5, [sp]
 8001d8e:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <receiveAndProcessLoRaFrame+0x134>)
 8001d90:	21c8      	movs	r1, #200	@ 0xc8
 8001d92:	f005 fc09 	bl	80075a8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d96:	f107 031c 	add.w	r3, r7, #28
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe f9d8 	bl	8000150 <strlen>
 8001da0:	4603      	mov	r3, r0
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f107 011c 	add.w	r1, r7, #28
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dac:	4808      	ldr	r0, [pc, #32]	@ (8001dd0 <receiveAndProcessLoRaFrame+0x12c>)
 8001dae:	f003 fc11 	bl	80055d4 <HAL_UART_Transmit>

    } else {
        HAL_UART_Transmit(&huart2, (uint8_t *)"\nAucune donnée reçue", strlen("Aucune donnée reçue\n"), HAL_MAX_DELAY);
    }
}
 8001db2:	e006      	b.n	8001dc2 <receiveAndProcessLoRaFrame+0x11e>
        HAL_UART_Transmit(&huart2, (uint8_t *)"\nAucune donnée reçue", strlen("Aucune donnée reçue\n"), HAL_MAX_DELAY);
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	2216      	movs	r2, #22
 8001dba:	4908      	ldr	r1, [pc, #32]	@ (8001ddc <receiveAndProcessLoRaFrame+0x138>)
 8001dbc:	4804      	ldr	r0, [pc, #16]	@ (8001dd0 <receiveAndProcessLoRaFrame+0x12c>)
 8001dbe:	f003 fc09 	bl	80055d4 <HAL_UART_Transmit>
}
 8001dc2:	bf00      	nop
 8001dc4:	37f8      	adds	r7, #248	@ 0xf8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dcc:	0800aeb8 	.word	0x0800aeb8
 8001dd0:	20000a08 	.word	0x20000a08
 8001dd4:	42c80000 	.word	0x42c80000
 8001dd8:	0800aed0 	.word	0x0800aed0
 8001ddc:	0800af34 	.word	0x0800af34

08001de0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001df0:	4b18      	ldr	r3, [pc, #96]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001df2:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <MX_ADC1_Init+0x78>)
 8001df4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001df6:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001dfc:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e02:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001e0a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001e0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e10:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001e16:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e1c:	480d      	ldr	r0, [pc, #52]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001e1e:	f001 f9cd 	bl	80031bc <HAL_ADC_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001e28:	f000 fb69 	bl	80024fe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001e3e:	f001 fc55 	bl	80036ec <HAL_ADC_ConfigChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001e48:	f000 fb59 	bl	80024fe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000444 	.word	0x20000444
 8001e58:	40012400 	.word	0x40012400

08001e5c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001e6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e6e:	4a19      	ldr	r2, [pc, #100]	@ (8001ed4 <MX_ADC2_Init+0x78>)
 8001e70:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e72:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001e78:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e84:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e86:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001e8a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001e92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e98:	480d      	ldr	r0, [pc, #52]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e9a:	f001 f98f 	bl	80031bc <HAL_ADC_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001ea4:	f000 fb2b 	bl	80024fe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ea8:	2307      	movs	r3, #7
 8001eaa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eac:	2301      	movs	r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001eba:	f001 fc17 	bl	80036ec <HAL_ADC_ConfigChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001ec4:	f000 fb1b 	bl	80024fe <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000474 	.word	0x20000474
 8001ed4:	40012800 	.word	0x40012800

08001ed8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	@ 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a28      	ldr	r2, [pc, #160]	@ (8001f94 <HAL_ADC_MspInit+0xbc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d122      	bne.n	8001f3e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ef8:	4b27      	ldr	r3, [pc, #156]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a26      	ldr	r2, [pc, #152]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f10:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a20      	ldr	r2, [pc, #128]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f16:	f043 0308 	orr.w	r3, r3, #8
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	f107 0318 	add.w	r3, r7, #24
 8001f34:	4619      	mov	r1, r3
 8001f36:	4819      	ldr	r0, [pc, #100]	@ (8001f9c <HAL_ADC_MspInit+0xc4>)
 8001f38:	f001 fe50 	bl	8003bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001f3c:	e026      	b.n	8001f8c <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a17      	ldr	r2, [pc, #92]	@ (8001fa0 <HAL_ADC_MspInit+0xc8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d121      	bne.n	8001f8c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f48:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a12      	ldr	r2, [pc, #72]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f60:	4b0d      	ldr	r3, [pc, #52]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4a0c      	ldr	r2, [pc, #48]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f66:	f043 0304 	orr.w	r3, r3, #4
 8001f6a:	6193      	str	r3, [r2, #24]
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f78:	2380      	movs	r3, #128	@ 0x80
 8001f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 0318 	add.w	r3, r7, #24
 8001f84:	4619      	mov	r1, r3
 8001f86:	4807      	ldr	r0, [pc, #28]	@ (8001fa4 <HAL_ADC_MspInit+0xcc>)
 8001f88:	f001 fe28 	bl	8003bdc <HAL_GPIO_Init>
}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	@ 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40012400 	.word	0x40012400
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010c00 	.word	0x40010c00
 8001fa0:	40012800 	.word	0x40012800
 8001fa4:	40010800 	.word	0x40010800

08001fa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbc:	4b27      	ldr	r3, [pc, #156]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a26      	ldr	r2, [pc, #152]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001fc2:	f043 0310 	orr.w	r3, r3, #16
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b24      	ldr	r3, [pc, #144]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	4b21      	ldr	r3, [pc, #132]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a20      	ldr	r2, [pc, #128]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fec:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001ff2:	f043 0308 	orr.w	r3, r3, #8
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b18      	ldr	r3, [pc, #96]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RLY_3_Pin|RLY_2_Pin|RLY_1_Pin, GPIO_PIN_RESET);
 8002004:	2200      	movs	r2, #0
 8002006:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800200a:	4815      	ldr	r0, [pc, #84]	@ (8002060 <MX_GPIO_Init+0xb8>)
 800200c:	f001 ff6a 	bl	8003ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	2140      	movs	r1, #64	@ 0x40
 8002014:	4813      	ldr	r0, [pc, #76]	@ (8002064 <MX_GPIO_Init+0xbc>)
 8002016:	f001 ff65 	bl	8003ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RLY_3_Pin|RLY_2_Pin|RLY_1_Pin;
 800201a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800201e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002020:	2301      	movs	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2302      	movs	r3, #2
 800202a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202c:	f107 0310 	add.w	r3, r7, #16
 8002030:	4619      	mov	r1, r3
 8002032:	480b      	ldr	r0, [pc, #44]	@ (8002060 <MX_GPIO_Init+0xb8>)
 8002034:	f001 fdd2 	bl	8003bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002038:	2340      	movs	r3, #64	@ 0x40
 800203a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203c:	2301      	movs	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2302      	movs	r3, #2
 8002046:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	4619      	mov	r1, r3
 800204e:	4805      	ldr	r0, [pc, #20]	@ (8002064 <MX_GPIO_Init+0xbc>)
 8002050:	f001 fdc4 	bl	8003bdc <HAL_GPIO_Init>

}
 8002054:	bf00      	nop
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000
 8002060:	40011000 	.word	0x40011000
 8002064:	40010c00 	.word	0x40010c00

08002068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800206c:	b0b9      	sub	sp, #228	@ 0xe4
 800206e:	af12      	add	r7, sp, #72	@ 0x48

  /* USER CODE BEGIN 1 */
	memset(LoRa_Data, 0, sizeof(LoRa_Data)); // Initialise tous les éléments avec des zéros
 8002070:	2228      	movs	r2, #40	@ 0x28
 8002072:	2100      	movs	r1, #0
 8002074:	485b      	ldr	r0, [pc, #364]	@ (80021e4 <main+0x17c>)
 8002076:	f005 fb5a 	bl	800772e <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800207a:	f001 f819 	bl	80030b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800207e:	f000 f9e7 	bl	8002450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002082:	f7ff ff91 	bl	8001fa8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002086:	f7ff feab 	bl	8001de0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800208a:	f7ff fee7 	bl	8001e5c <MX_ADC2_Init>
  MX_SPI1_Init();
 800208e:	f000 fd3b 	bl	8002b08 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002092:	f000 feef 	bl	8002e74 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002096:	f000 ff17 	bl	8002ec8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  myLoRa = newLoRa();
 800209a:	4c53      	ldr	r4, [pc, #332]	@ (80021e8 <main+0x180>)
 800209c:	f107 0320 	add.w	r3, r7, #32
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fa1d 	bl	80014e0 <newLoRa>
 80020a6:	4625      	mov	r5, r4
 80020a8:	f107 0420 	add.w	r4, r7, #32
 80020ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  LoRa new_LoRa;
  myLoRa.CS_port         = GPIOB;
 80020bc:	4b4a      	ldr	r3, [pc, #296]	@ (80021e8 <main+0x180>)
 80020be:	4a4b      	ldr	r2, [pc, #300]	@ (80021ec <main+0x184>)
 80020c0:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = GPIO_PIN_6;
 80020c2:	4b49      	ldr	r3, [pc, #292]	@ (80021e8 <main+0x180>)
 80020c4:	2240      	movs	r2, #64	@ 0x40
 80020c6:	809a      	strh	r2, [r3, #4]
  myLoRa.hSPIx           = &hspi1;
 80020c8:	4b47      	ldr	r3, [pc, #284]	@ (80021e8 <main+0x180>)
 80020ca:	4a49      	ldr	r2, [pc, #292]	@ (80021f0 <main+0x188>)
 80020cc:	619a      	str	r2, [r3, #24]

  if(LoRa_init(&myLoRa)==LORA_OK){
 80020ce:	4846      	ldr	r0, [pc, #280]	@ (80021e8 <main+0x180>)
 80020d0:	f7ff fcd8 	bl	8001a84 <LoRa_init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2bc8      	cmp	r3, #200	@ 0xc8
 80020d8:	d103      	bne.n	80020e2 <main+0x7a>
	  LoRa_stat = 1;
 80020da:	4b46      	ldr	r3, [pc, #280]	@ (80021f4 <main+0x18c>)
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e002      	b.n	80020e8 <main+0x80>
  }else {
      LoRa_stat = 0; // Échec de l'initialisation
 80020e2:	4b44      	ldr	r3, [pc, #272]	@ (80021f4 <main+0x18c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  debugPrintln("------------------------------------------------------ SMART ALGAE CTRL ------------------------------------------------------");
 80020e8:	4843      	ldr	r0, [pc, #268]	@ (80021f8 <main+0x190>)
 80020ea:	f000 ff9d 	bl	8003028 <debugPrintln>
  HAL_Delay(30000);
 80020ee:	f247 5030 	movw	r0, #30000	@ 0x7530
 80020f2:	f001 f83f 	bl	8003174 <HAL_Delay>
  SIM_INIT();
 80020f6:	f000 fb8d 	bl	8002814 <SIM_INIT>
  /*extractData(nmea, data_gps);
  Coordinates coords = parseNMEA(data_gps);
  float latitudeDecimal = convertDMSToDecimal(coords.latitude, coords.latDirection);
  float longitudeDecimal = convertDMSToDecimal(coords.longitude, coords.lonDirection);*/
  sendATCommandAndWaitForResponse_gps("AT+CGPSINFO\r\n", "OK", 3000, buffer_gps);
 80020fa:	4b40      	ldr	r3, [pc, #256]	@ (80021fc <main+0x194>)
 80020fc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002100:	493f      	ldr	r1, [pc, #252]	@ (8002200 <main+0x198>)
 8002102:	4840      	ldr	r0, [pc, #256]	@ (8002204 <main+0x19c>)
 8002104:	f000 fac0 	bl	8002688 <sendATCommandAndWaitForResponse_gps>
  HAL_Delay(1000);
 8002108:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800210c:	f001 f832 	bl	8003174 <HAL_Delay>
  extractData(buffer_gps, data_gps);
 8002110:	493d      	ldr	r1, [pc, #244]	@ (8002208 <main+0x1a0>)
 8002112:	483a      	ldr	r0, [pc, #232]	@ (80021fc <main+0x194>)
 8002114:	f000 fc1a 	bl	800294c <extractData>
  Coordinates coords = parseNMEA(data_gps);
 8002118:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800211c:	493a      	ldr	r1, [pc, #232]	@ (8002208 <main+0x1a0>)
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fbc0 	bl	80028a4 <parseNMEA>
  latitudeDecimal = convertDMSToDecimal(coords.latitude, coords.latDirection);
 8002124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002126:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fc29 	bl	8002984 <convertDMSToDecimal>
 8002132:	4603      	mov	r3, r0
 8002134:	4a35      	ldr	r2, [pc, #212]	@ (800220c <main+0x1a4>)
 8002136:	6013      	str	r3, [r2, #0]
  longitudeDecimal = convertDMSToDecimal(coords.longitude, coords.lonDirection);
 8002138:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800213a:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f000 fc1f 	bl	8002984 <convertDMSToDecimal>
 8002146:	4603      	mov	r3, r0
 8002148:	4a31      	ldr	r2, [pc, #196]	@ (8002210 <main+0x1a8>)
 800214a:	6013      	str	r3, [r2, #0]
  sendATCommandAndWaitForResponse("AT+CGPS=0\r\n", "OK", 3000);
 800214c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002150:	492b      	ldr	r1, [pc, #172]	@ (8002200 <main+0x198>)
 8002152:	4830      	ldr	r0, [pc, #192]	@ (8002214 <main+0x1ac>)
 8002154:	f000 fa14 	bl	8002580 <sendATCommandAndWaitForResponse>
  HAL_Delay(500);
 8002158:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800215c:	f001 f80a 	bl	8003174 <HAL_Delay>

  while (1)
  {
    /* USER CODE END WHILE */
	  uint32_t startTime = HAL_GetTick();
 8002160:	f000 fffe 	bl	8003160 <HAL_GetTick>
 8002164:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
	    while ((HAL_GetTick() - startTime) < DURATION_MS)
 8002168:	e0d7      	b.n	800231a <main+0x2b2>
	    {
	        // Appel de la fonction pour recevoir des données via LoRa
	    	//HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
	     	  int bytes_received = LoRa_receive(&myLoRa, read_data, sizeof(read_data));
 800216a:	2228      	movs	r2, #40	@ 0x28
 800216c:	492a      	ldr	r1, [pc, #168]	@ (8002218 <main+0x1b0>)
 800216e:	481e      	ldr	r0, [pc, #120]	@ (80021e8 <main+0x180>)
 8002170:	f7ff fc28 	bl	80019c4 <LoRa_receive>
 8002174:	4603      	mov	r3, r0
 8002176:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	     	  if (LoRa_stat == 1) {
 800217a:	4b1e      	ldr	r3, [pc, #120]	@ (80021f4 <main+0x18c>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d160      	bne.n	8002244 <main+0x1dc>
	     	              receiveAndProcessLoRaFrame(bytes_received, read_data, DataArray, size);
 8002182:	4b26      	ldr	r3, [pc, #152]	@ (800221c <main+0x1b4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a26      	ldr	r2, [pc, #152]	@ (8002220 <main+0x1b8>)
 8002188:	4923      	ldr	r1, [pc, #140]	@ (8002218 <main+0x1b0>)
 800218a:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800218e:	f7ff fd89 	bl	8001ca4 <receiveAndProcessLoRaFrame>
	     	              Previous_Temperature = DataArray[0] / 100;
 8002192:	4b23      	ldr	r3, [pc, #140]	@ (8002220 <main+0x1b8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4923      	ldr	r1, [pc, #140]	@ (8002224 <main+0x1bc>)
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe fea7 	bl	8000eec <__aeabi_fdiv>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b21      	ldr	r3, [pc, #132]	@ (8002228 <main+0x1c0>)
 80021a4:	601a      	str	r2, [r3, #0]
	     	              Previous_Conductivity = DataArray[1];
 80021a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002220 <main+0x1b8>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4a20      	ldr	r2, [pc, #128]	@ (800222c <main+0x1c4>)
 80021ac:	6013      	str	r3, [r2, #0]
	     	              Previous_Salinity = DataArray[2];
 80021ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002220 <main+0x1b8>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002230 <main+0x1c8>)
 80021b4:	6013      	str	r3, [r2, #0]
	     	              Previous_TDS = DataArray[3];
 80021b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <main+0x1b8>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002234 <main+0x1cc>)
 80021bc:	6013      	str	r3, [r2, #0]
	     	              Previous_PH = DataArray[4]/100;
 80021be:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <main+0x1b8>)
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	4918      	ldr	r1, [pc, #96]	@ (8002224 <main+0x1bc>)
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe fe91 	bl	8000eec <__aeabi_fdiv>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <main+0x1d0>)
 80021d0:	601a      	str	r2, [r3, #0]
	     	              strcpy(LoRa_Status, "LoRa is Ok");
 80021d2:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <main+0x1d4>)
 80021d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002240 <main+0x1d8>)
 80021d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80021d8:	c303      	stmia	r3!, {r0, r1}
 80021da:	801a      	strh	r2, [r3, #0]
 80021dc:	3302      	adds	r3, #2
 80021de:	0c12      	lsrs	r2, r2, #16
 80021e0:	701a      	strb	r2, [r3, #0]
 80021e2:	e03f      	b.n	8002264 <main+0x1fc>
 80021e4:	200004f8 	.word	0x200004f8
 80021e8:	200004a4 	.word	0x200004a4
 80021ec:	40010c00 	.word	0x40010c00
 80021f0:	200009ac 	.word	0x200009ac
 80021f4:	2000053e 	.word	0x2000053e
 80021f8:	0800af4c 	.word	0x0800af4c
 80021fc:	200008a8 	.word	0x200008a8
 8002200:	0800afcc 	.word	0x0800afcc
 8002204:	0800afd0 	.word	0x0800afd0
 8002208:	2000090c 	.word	0x2000090c
 800220c:	200008a0 	.word	0x200008a0
 8002210:	200008a4 	.word	0x200008a4
 8002214:	0800afe0 	.word	0x0800afe0
 8002218:	200004d0 	.word	0x200004d0
 800221c:	20000000 	.word	0x20000000
 8002220:	20000608 	.word	0x20000608
 8002224:	42c80000 	.word	0x42c80000
 8002228:	20000004 	.word	0x20000004
 800222c:	20000008 	.word	0x20000008
 8002230:	2000000c 	.word	0x2000000c
 8002234:	20000010 	.word	0x20000010
 8002238:	20000014 	.word	0x20000014
 800223c:	20000520 	.word	0x20000520
 8002240:	0800afec 	.word	0x0800afec
	              } else {
	    	              HAL_UART_Transmit(&huart2, (uint8_t *)"LoRa n'est pas initialisé\n", strlen("LoRa n'est pas initialisé\n"), HAL_MAX_DELAY);
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
 8002248:	221b      	movs	r2, #27
 800224a:	496a      	ldr	r1, [pc, #424]	@ (80023f4 <main+0x38c>)
 800224c:	486a      	ldr	r0, [pc, #424]	@ (80023f8 <main+0x390>)
 800224e:	f003 f9c1 	bl	80055d4 <HAL_UART_Transmit>
	    	              strcpy(LoRa_Status, "LoRa is not Ok");
 8002252:	4a6a      	ldr	r2, [pc, #424]	@ (80023fc <main+0x394>)
 8002254:	4b6a      	ldr	r3, [pc, #424]	@ (8002400 <main+0x398>)
 8002256:	4614      	mov	r4, r2
 8002258:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800225a:	c407      	stmia	r4!, {r0, r1, r2}
 800225c:	8023      	strh	r3, [r4, #0]
 800225e:	3402      	adds	r4, #2
 8002260:	0c1b      	lsrs	r3, r3, #16
 8002262:	7023      	strb	r3, [r4, #0]
	              }

	           HAL_UART_Transmit(&huart2, (uint8_t *)"\n______________________ Les valeurs stocké ________________________\n", strlen("______________________ Les valeurs stocké ________________________\n"), HAL_MAX_DELAY);
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	2244      	movs	r2, #68	@ 0x44
 800226a:	4966      	ldr	r1, [pc, #408]	@ (8002404 <main+0x39c>)
 800226c:	4862      	ldr	r0, [pc, #392]	@ (80023f8 <main+0x390>)
 800226e:	f003 f9b1 	bl	80055d4 <HAL_UART_Transmit>
	           snprintf(buffer, sizeof(buffer), "\nTemperature : %.2f °C\nConductivity : %.2f us/cm\nSalinity: %.2f mg/L\nTDS: %.2f mg/L\nPH: %.2f ph \r\n", Previous_Temperature, Previous_Conductivity, Previous_Salinity, Previous_TDS, Previous_PH);
 8002272:	4b65      	ldr	r3, [pc, #404]	@ (8002408 <main+0x3a0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f8d6 	bl	8000428 <__aeabi_f2d>
 800227c:	4604      	mov	r4, r0
 800227e:	460d      	mov	r5, r1
 8002280:	4b62      	ldr	r3, [pc, #392]	@ (800240c <main+0x3a4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f8cf 	bl	8000428 <__aeabi_f2d>
 800228a:	4680      	mov	r8, r0
 800228c:	4689      	mov	r9, r1
 800228e:	4b60      	ldr	r3, [pc, #384]	@ (8002410 <main+0x3a8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f8c8 	bl	8000428 <__aeabi_f2d>
 8002298:	4682      	mov	sl, r0
 800229a:	468b      	mov	fp, r1
 800229c:	4b5d      	ldr	r3, [pc, #372]	@ (8002414 <main+0x3ac>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe f8c1 	bl	8000428 <__aeabi_f2d>
 80022a6:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80022aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002418 <main+0x3b0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe f8ba 	bl	8000428 <__aeabi_f2d>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80022bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80022c4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80022c8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80022cc:	e9cd 4500 	strd	r4, r5, [sp]
 80022d0:	4a52      	ldr	r2, [pc, #328]	@ (800241c <main+0x3b4>)
 80022d2:	21c8      	movs	r1, #200	@ 0xc8
 80022d4:	4852      	ldr	r0, [pc, #328]	@ (8002420 <main+0x3b8>)
 80022d6:	f005 f967 	bl	80075a8 <sniprintf>
	           HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80022da:	4851      	ldr	r0, [pc, #324]	@ (8002420 <main+0x3b8>)
 80022dc:	f7fd ff38 	bl	8000150 <strlen>
 80022e0:	4603      	mov	r3, r0
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295
 80022e8:	494d      	ldr	r1, [pc, #308]	@ (8002420 <main+0x3b8>)
 80022ea:	4843      	ldr	r0, [pc, #268]	@ (80023f8 <main+0x390>)
 80022ec:	f003 f972 	bl	80055d4 <HAL_UART_Transmit>
	           HAL_UART_Transmit(&huart2, (uint8_t *)"______________________________________________\n", strlen("______________________________________________\n"), HAL_MAX_DELAY);
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295
 80022f4:	222f      	movs	r2, #47	@ 0x2f
 80022f6:	494b      	ldr	r1, [pc, #300]	@ (8002424 <main+0x3bc>)
 80022f8:	483f      	ldr	r0, [pc, #252]	@ (80023f8 <main+0x390>)
 80022fa:	f003 f96b 	bl	80055d4 <HAL_UART_Transmit>

	     	  TensionBatt = lireTensionBatterie();
 80022fe:	f7fe ff63 	bl	80011c8 <lireTensionBatterie>
 8002302:	4603      	mov	r3, r0
 8002304:	4a48      	ldr	r2, [pc, #288]	@ (8002428 <main+0x3c0>)
 8002306:	6013      	str	r3, [r2, #0]
	     	  TensionStable = lireTensionStable();
 8002308:	f7ff f83e 	bl	8001388 <lireTensionStable>
 800230c:	4603      	mov	r3, r0
 800230e:	4a47      	ldr	r2, [pc, #284]	@ (800242c <main+0x3c4>)
 8002310:	6013      	str	r3, [r2, #0]

	     	  HAL_Delay(1000);
 8002312:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002316:	f000 ff2d 	bl	8003174 <HAL_Delay>
	    while ((HAL_GetTick() - startTime) < DURATION_MS)
 800231a:	f000 ff21 	bl	8003160 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	4a42      	ldr	r2, [pc, #264]	@ (8002430 <main+0x3c8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	f67f af1e 	bls.w	800216a <main+0x102>
	    }


 	  //******************************************************************* SIM *******************************************************
 	  rssi = sendATCommandAndWaitForResponse_signalquality("AT+CSQ\r\n", "OK", 3000);
 800232e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002332:	4940      	ldr	r1, [pc, #256]	@ (8002434 <main+0x3cc>)
 8002334:	4840      	ldr	r0, [pc, #256]	@ (8002438 <main+0x3d0>)
 8002336:	f000 fa1f 	bl	8002778 <sendATCommandAndWaitForResponse_signalquality>
 800233a:	4603      	mov	r3, r0
 800233c:	4a3f      	ldr	r2, [pc, #252]	@ (800243c <main+0x3d4>)
 800233e:	6013      	str	r3, [r2, #0]
 	  snprintf(data_json, sizeof(data_json), "{\"temperature\":%.2f, \"Conductivity\":%.2f, \"Salinity\":%.2f, \"TDS\":%.2f, \"PH\":%.2f, \"TensionBatt\":%d, \"TensionStable\":%d, \"latitude\":%.8f, \"longitude\":%.8f, \"rssi\":%d, \"LoRa_Status\":\"%s\"}", Previous_Temperature, Previous_Conductivity, Previous_Salinity, Previous_TDS, Previous_PH, TensionBatt, TensionStable, latitudeDecimal, longitudeDecimal, rssi, LoRa_Status);
 8002340:	4b31      	ldr	r3, [pc, #196]	@ (8002408 <main+0x3a0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f86f 	bl	8000428 <__aeabi_f2d>
 800234a:	4680      	mov	r8, r0
 800234c:	4689      	mov	r9, r1
 800234e:	4b2f      	ldr	r3, [pc, #188]	@ (800240c <main+0x3a4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe f868 	bl	8000428 <__aeabi_f2d>
 8002358:	4682      	mov	sl, r0
 800235a:	468b      	mov	fp, r1
 800235c:	4b2c      	ldr	r3, [pc, #176]	@ (8002410 <main+0x3a8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe f861 	bl	8000428 <__aeabi_f2d>
 8002366:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800236a:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <main+0x3ac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe f85a 	bl	8000428 <__aeabi_f2d>
 8002374:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002378:	4b27      	ldr	r3, [pc, #156]	@ (8002418 <main+0x3b0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f853 	bl	8000428 <__aeabi_f2d>
 8002382:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002386:	4b28      	ldr	r3, [pc, #160]	@ (8002428 <main+0x3c0>)
 8002388:	681e      	ldr	r6, [r3, #0]
 800238a:	4b28      	ldr	r3, [pc, #160]	@ (800242c <main+0x3c4>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	4b2b      	ldr	r3, [pc, #172]	@ (8002440 <main+0x3d8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe f847 	bl	8000428 <__aeabi_f2d>
 800239a:	4604      	mov	r4, r0
 800239c:	460d      	mov	r5, r1
 800239e:	4b29      	ldr	r3, [pc, #164]	@ (8002444 <main+0x3dc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe f840 	bl	8000428 <__aeabi_f2d>
 80023a8:	4b24      	ldr	r3, [pc, #144]	@ (800243c <main+0x3d4>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b13      	ldr	r3, [pc, #76]	@ (80023fc <main+0x394>)
 80023ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80023b0:	9210      	str	r2, [sp, #64]	@ 0x40
 80023b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80023b6:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	920b      	str	r2, [sp, #44]	@ 0x2c
 80023be:	960a      	str	r6, [sp, #40]	@ 0x28
 80023c0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80023c4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80023c8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80023cc:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80023d0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80023d4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80023d8:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80023dc:	e9cd 8900 	strd	r8, r9, [sp]
 80023e0:	4a19      	ldr	r2, [pc, #100]	@ (8002448 <main+0x3e0>)
 80023e2:	21fa      	movs	r1, #250	@ 0xfa
 80023e4:	4819      	ldr	r0, [pc, #100]	@ (800244c <main+0x3e4>)
 80023e6:	f005 f8df 	bl	80075a8 <sniprintf>
 	  HTTPConnect(data_json);
 80023ea:	4818      	ldr	r0, [pc, #96]	@ (800244c <main+0x3e4>)
 80023ec:	f000 fb1a 	bl	8002a24 <HTTPConnect>
  {
 80023f0:	e6b6      	b.n	8002160 <main+0xf8>
 80023f2:	bf00      	nop
 80023f4:	0800aff8 	.word	0x0800aff8
 80023f8:	20000a08 	.word	0x20000a08
 80023fc:	20000520 	.word	0x20000520
 8002400:	0800b014 	.word	0x0800b014
 8002404:	0800b024 	.word	0x0800b024
 8002408:	20000004 	.word	0x20000004
 800240c:	20000008 	.word	0x20000008
 8002410:	2000000c 	.word	0x2000000c
 8002414:	20000010 	.word	0x20000010
 8002418:	20000014 	.word	0x20000014
 800241c:	0800b06c 	.word	0x0800b06c
 8002420:	20000540 	.word	0x20000540
 8002424:	0800b0d0 	.word	0x0800b0d0
 8002428:	20000798 	.word	0x20000798
 800242c:	2000079c 	.word	0x2000079c
 8002430:	000927bf 	.word	0x000927bf
 8002434:	0800afcc 	.word	0x0800afcc
 8002438:	0800b100 	.word	0x0800b100
 800243c:	2000089c 	.word	0x2000089c
 8002440:	200008a0 	.word	0x200008a0
 8002444:	200008a4 	.word	0x200008a4
 8002448:	0800b10c 	.word	0x0800b10c
 800244c:	200007a0 	.word	0x200007a0

08002450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b094      	sub	sp, #80	@ 0x50
 8002454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002456:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800245a:	2228      	movs	r2, #40	@ 0x28
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f005 f965 	bl	800772e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002480:	2302      	movs	r3, #2
 8002482:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002484:	2301      	movs	r3, #1
 8002486:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002488:	2310      	movs	r3, #16
 800248a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800248c:	2302      	movs	r3, #2
 800248e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002490:	2300      	movs	r3, #0
 8002492:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002494:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8002498:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800249a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800249e:	4618      	mov	r0, r3
 80024a0:	f001 fd38 	bl	8003f14 <HAL_RCC_OscConfig>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80024aa:	f000 f828 	bl	80024fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ae:	230f      	movs	r3, #15
 80024b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024b2:	2302      	movs	r3, #2
 80024b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	2102      	movs	r1, #2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f001 ffa4 	bl	8004418 <HAL_RCC_ClockConfig>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80024d6:	f000 f812 	bl	80024fe <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80024da:	2302      	movs	r3, #2
 80024dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80024de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024e2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 f924 	bl	8004734 <HAL_RCCEx_PeriphCLKConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80024f2:	f000 f804 	bl	80024fe <Error_Handler>
  }
}
 80024f6:	bf00      	nop
 80024f8:	3750      	adds	r7, #80	@ 0x50
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002502:	b672      	cpsid	i
}
 8002504:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002506:	bf00      	nop
 8002508:	e7fd      	b.n	8002506 <Error_Handler+0x8>
	...

0800250c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002510:	f3bf 8f4f 	dsb	sy
}
 8002514:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <__NVIC_SystemReset+0x24>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800251e:	4904      	ldr	r1, [pc, #16]	@ (8002530 <__NVIC_SystemReset+0x24>)
 8002520:	4b04      	ldr	r3, [pc, #16]	@ (8002534 <__NVIC_SystemReset+0x28>)
 8002522:	4313      	orrs	r3, r2
 8002524:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002526:	f3bf 8f4f 	dsb	sy
}
 800252a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <__NVIC_SystemReset+0x20>
 8002530:	e000ed00 	.word	0xe000ed00
 8002534:	05fa0004 	.word	0x05fa0004

08002538 <SIMTransmit>:
    -57,  // index 28 corresponds to value 28
    -55   // index 29 corresponds to value 29
};

void SIMTransmit(char *cmd)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  memset(buffer_sim,0,sizeof(buffer_sim));
 8002540:	2264      	movs	r2, #100	@ 0x64
 8002542:	2100      	movs	r1, #0
 8002544:	480c      	ldr	r0, [pc, #48]	@ (8002578 <SIMTransmit+0x40>)
 8002546:	f005 f8f2 	bl	800772e <memset>
  HAL_UART_Transmit(&huart3,(uint8_t *)cmd,strlen(cmd),1000);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7fd fe00 	bl	8000150 <strlen>
 8002550:	4603      	mov	r3, r0
 8002552:	b29a      	uxth	r2, r3
 8002554:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4808      	ldr	r0, [pc, #32]	@ (800257c <SIMTransmit+0x44>)
 800255c:	f003 f83a 	bl	80055d4 <HAL_UART_Transmit>
  HAL_UART_Receive (&huart3, buffer_sim, 100, 1000);
 8002560:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002564:	2264      	movs	r2, #100	@ 0x64
 8002566:	4904      	ldr	r1, [pc, #16]	@ (8002578 <SIMTransmit+0x40>)
 8002568:	4804      	ldr	r0, [pc, #16]	@ (800257c <SIMTransmit+0x44>)
 800256a:	f003 f8b6 	bl	80056da <HAL_UART_Receive>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000948 	.word	0x20000948
 800257c:	20000a50 	.word	0x20000a50

08002580 <sendATCommandAndWaitForResponse>:


void sendATCommandAndWaitForResponse(const char* command, const char* expectedResponse, uint32_t responseTimeout_ms) {
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
    int responseReceived = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
    uint32_t previousTick = HAL_GetTick();
 8002590:	f000 fde6 	bl	8003160 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

    while (!responseReceived && (previousTick + responseTimeout_ms > HAL_GetTick())) {
 8002596:	e015      	b.n	80025c4 <sendATCommandAndWaitForResponse+0x44>
        // Envoyer la commande AT
        SIMTransmit(command);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff ffcd 	bl	8002538 <SIMTransmit>
        debugPrintln(command);
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fd42 	bl	8003028 <debugPrintln>

        // Attendre un court délai pour la réponse
        HAL_Delay(1000);
 80025a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025a8:	f000 fde4 	bl	8003174 <HAL_Delay>

        // Vérifier si la réponse contient la réponse attendue
        if (strstr((char *)buffer_sim, expectedResponse)) {
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	4810      	ldr	r0, [pc, #64]	@ (80025f0 <sendATCommandAndWaitForResponse+0x70>)
 80025b0:	f005 f954 	bl	800785c <strstr>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d004      	beq.n	80025c4 <sendATCommandAndWaitForResponse+0x44>
            responseReceived = 1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
            debugPrintln(buffer_sim);
 80025be:	480c      	ldr	r0, [pc, #48]	@ (80025f0 <sendATCommandAndWaitForResponse+0x70>)
 80025c0:	f000 fd32 	bl	8003028 <debugPrintln>
    while (!responseReceived && (previousTick + responseTimeout_ms > HAL_GetTick())) {
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d107      	bne.n	80025da <sendATCommandAndWaitForResponse+0x5a>
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	18d4      	adds	r4, r2, r3
 80025d0:	f000 fdc6 	bl	8003160 <HAL_GetTick>
 80025d4:	4603      	mov	r3, r0
 80025d6:	429c      	cmp	r4, r3
 80025d8:	d8de      	bhi.n	8002598 <sendATCommandAndWaitForResponse+0x18>
        }
    }

    if (!responseReceived) {
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <sendATCommandAndWaitForResponse+0x66>
        debugPrintln("Timeout waiting for response.");
 80025e0:	4804      	ldr	r0, [pc, #16]	@ (80025f4 <sendATCommandAndWaitForResponse+0x74>)
 80025e2:	f000 fd21 	bl	8003028 <debugPrintln>
    }
}
 80025e6:	bf00      	nop
 80025e8:	371c      	adds	r7, #28
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd90      	pop	{r4, r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000948 	.word	0x20000948
 80025f4:	0800b1c8 	.word	0x0800b1c8

080025f8 <sendATCommandAndWaitForResponse_AT_Action>:
void sendATCommandAndWaitForResponse_AT_Action(const char* command, const char* expectedResponse, uint32_t responseTimeout_ms) {
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
    int responseReceived = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
    uint32_t previousTick = HAL_GetTick();
 8002608:	f000 fdaa 	bl	8003160 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

    while (!responseReceived && (previousTick + responseTimeout_ms > HAL_GetTick())) {
 800260e:	e015      	b.n	800263c <sendATCommandAndWaitForResponse_AT_Action+0x44>
        // Envoyer la commande AT
        SIMTransmit(command);
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff ff91 	bl	8002538 <SIMTransmit>
        debugPrintln(command);
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fd06 	bl	8003028 <debugPrintln>

        // Attendre un court délai pour la réponse
        HAL_Delay(1000);
 800261c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002620:	f000 fda8 	bl	8003174 <HAL_Delay>

        // Vérifier si la réponse contient la réponse attendue
        if (strstr((char *)buffer_sim, expectedResponse)) {
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	4814      	ldr	r0, [pc, #80]	@ (8002678 <sendATCommandAndWaitForResponse_AT_Action+0x80>)
 8002628:	f005 f918 	bl	800785c <strstr>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <sendATCommandAndWaitForResponse_AT_Action+0x44>
            responseReceived = 1;
 8002632:	2301      	movs	r3, #1
 8002634:	617b      	str	r3, [r7, #20]
            debugPrintln(buffer_sim);
 8002636:	4810      	ldr	r0, [pc, #64]	@ (8002678 <sendATCommandAndWaitForResponse_AT_Action+0x80>)
 8002638:	f000 fcf6 	bl	8003028 <debugPrintln>
    while (!responseReceived && (previousTick + responseTimeout_ms > HAL_GetTick())) {
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d107      	bne.n	8002652 <sendATCommandAndWaitForResponse_AT_Action+0x5a>
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	18d4      	adds	r4, r2, r3
 8002648:	f000 fd8a 	bl	8003160 <HAL_GetTick>
 800264c:	4603      	mov	r3, r0
 800264e:	429c      	cmp	r4, r3
 8002650:	d8de      	bhi.n	8002610 <sendATCommandAndWaitForResponse_AT_Action+0x18>
        }
    }

    if (!responseReceived) {
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10a      	bne.n	800266e <sendATCommandAndWaitForResponse_AT_Action+0x76>
        debugPrintln("Timeout waiting for response.");
 8002658:	4808      	ldr	r0, [pc, #32]	@ (800267c <sendATCommandAndWaitForResponse_AT_Action+0x84>)
 800265a:	f000 fce5 	bl	8003028 <debugPrintln>
        sendATCommandAndWaitForResponse("AT+CRESET\r\n", "OK", 3000);
 800265e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002662:	4907      	ldr	r1, [pc, #28]	@ (8002680 <sendATCommandAndWaitForResponse_AT_Action+0x88>)
 8002664:	4807      	ldr	r0, [pc, #28]	@ (8002684 <sendATCommandAndWaitForResponse_AT_Action+0x8c>)
 8002666:	f7ff ff8b 	bl	8002580 <sendATCommandAndWaitForResponse>
        NVIC_SystemReset();
 800266a:	f7ff ff4f 	bl	800250c <__NVIC_SystemReset>
    }
}
 800266e:	bf00      	nop
 8002670:	371c      	adds	r7, #28
 8002672:	46bd      	mov	sp, r7
 8002674:	bd90      	pop	{r4, r7, pc}
 8002676:	bf00      	nop
 8002678:	20000948 	.word	0x20000948
 800267c:	0800b1c8 	.word	0x0800b1c8
 8002680:	0800b1e8 	.word	0x0800b1e8
 8002684:	0800b1ec 	.word	0x0800b1ec

08002688 <sendATCommandAndWaitForResponse_gps>:
void sendATCommandAndWaitForResponse_gps(const char* command, const char* expectedResponse, uint32_t responseTimeout_ms, char* buffer_gps) {
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
    int responseReceived = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
    uint32_t previousTick = HAL_GetTick();
 800269a:	f000 fd61 	bl	8003160 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]
    //char data_gps [100];

    while (!responseReceived && (previousTick + responseTimeout_ms > HAL_GetTick())) {
 80026a0:	e019      	b.n	80026d6 <sendATCommandAndWaitForResponse_gps+0x4e>
        // Envoyer la commande AT
        SIMTransmit(command);
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f7ff ff48 	bl	8002538 <SIMTransmit>
        debugPrintln(command);
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 fcbd 	bl	8003028 <debugPrintln>

        // Attendre un court délai pour la réponse
        HAL_Delay(10000);
 80026ae:	f242 7010 	movw	r0, #10000	@ 0x2710
 80026b2:	f000 fd5f 	bl	8003174 <HAL_Delay>

        // Vérifier si la réponse contient la réponse attendue
        if (strstr((char *)buffer_sim, expectedResponse)) {
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	4811      	ldr	r0, [pc, #68]	@ (8002700 <sendATCommandAndWaitForResponse_gps+0x78>)
 80026ba:	f005 f8cf 	bl	800785c <strstr>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <sendATCommandAndWaitForResponse_gps+0x4e>
            responseReceived = 1;
 80026c4:	2301      	movs	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
            debugPrintln(buffer_sim);
 80026c8:	480d      	ldr	r0, [pc, #52]	@ (8002700 <sendATCommandAndWaitForResponse_gps+0x78>)
 80026ca:	f000 fcad 	bl	8003028 <debugPrintln>
            strcpy(buffer_gps, buffer_sim);
 80026ce:	490c      	ldr	r1, [pc, #48]	@ (8002700 <sendATCommandAndWaitForResponse_gps+0x78>)
 80026d0:	6838      	ldr	r0, [r7, #0]
 80026d2:	f005 f950 	bl	8007976 <strcpy>
    while (!responseReceived && (previousTick + responseTimeout_ms > HAL_GetTick())) {
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <sendATCommandAndWaitForResponse_gps+0x64>
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	18d4      	adds	r4, r2, r3
 80026e2:	f000 fd3d 	bl	8003160 <HAL_GetTick>
 80026e6:	4603      	mov	r3, r0
 80026e8:	429c      	cmp	r4, r3
 80026ea:	d8da      	bhi.n	80026a2 <sendATCommandAndWaitForResponse_gps+0x1a>

        }
    }

    if (!responseReceived) {
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d102      	bne.n	80026f8 <sendATCommandAndWaitForResponse_gps+0x70>
        debugPrintln("Timeout waiting for response.");
 80026f2:	4804      	ldr	r0, [pc, #16]	@ (8002704 <sendATCommandAndWaitForResponse_gps+0x7c>)
 80026f4:	f000 fc98 	bl	8003028 <debugPrintln>
    }
}
 80026f8:	bf00      	nop
 80026fa:	371c      	adds	r7, #28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd90      	pop	{r4, r7, pc}
 8002700:	20000948 	.word	0x20000948
 8002704:	0800b1c8 	.word	0x0800b1c8

08002708 <extractRSSIValue>:

// Fonction pour extraire la valeur RSSI
int extractRSSIValue(const char* response) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
    int rssi = -1;  // Initialisation à une valeur par défaut
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
 8002714:	60fb      	str	r3, [r7, #12]
    char* token = strstr(response, "+CSQ: ");
 8002716:	490a      	ldr	r1, [pc, #40]	@ (8002740 <extractRSSIValue+0x38>)
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f005 f89f 	bl	800785c <strstr>
 800271e:	60b8      	str	r0, [r7, #8]
    if (token != NULL) {
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d006      	beq.n	8002734 <extractRSSIValue+0x2c>
        token += 6;  // Avance le pointeur pour ignorer "+CSQ: "
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	3306      	adds	r3, #6
 800272a:	60bb      	str	r3, [r7, #8]
        rssi = atoi(token);  // Convertit la chaîne en entier
 800272c:	68b8      	ldr	r0, [r7, #8]
 800272e:	f003 f966 	bl	80059fe <atoi>
 8002732:	60f8      	str	r0, [r7, #12]
    }
    return rssi;
 8002734:	68fb      	ldr	r3, [r7, #12]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	0800b1f8 	.word	0x0800b1f8

08002744 <getRSSI>:

// Fonction pour convertir la valeur en RSSI
int getRSSI(int value) {
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
    if (value >= 2 && value <= 30) {
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b01      	cmp	r3, #1
 8002750:	dd08      	ble.n	8002764 <getRSSI+0x20>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b1e      	cmp	r3, #30
 8002756:	dc05      	bgt.n	8002764 <getRSSI+0x20>
        return valueToRSSI[value - 2]; // Ajuste l'index pour accéder au bon élément
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b02      	subs	r3, #2
 800275c:	4a04      	ldr	r2, [pc, #16]	@ (8002770 <getRSSI+0x2c>)
 800275e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002762:	e000      	b.n	8002766 <getRSSI+0x22>
    } else {
        return -999; // Valeur d'erreur pour les valeurs en dehors de la plage
 8002764:	4b03      	ldr	r3, [pc, #12]	@ (8002774 <getRSSI+0x30>)
    }
}
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	20000050 	.word	0x20000050
 8002774:	fffffc19 	.word	0xfffffc19

08002778 <sendATCommandAndWaitForResponse_signalquality>:

int sendATCommandAndWaitForResponse_signalquality(char* command, char* expectedResponse, uint32_t responseTimeout_ms) {
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b089      	sub	sp, #36	@ 0x24
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
    int responseReceived = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
    uint32_t previousTick = HAL_GetTick();
 8002788:	f000 fcea 	bl	8003160 <HAL_GetTick>
 800278c:	61b8      	str	r0, [r7, #24]

    while (!responseReceived && (previousTick + responseTimeout_ms > HAL_GetTick())) {
 800278e:	e026      	b.n	80027de <sendATCommandAndWaitForResponse_signalquality+0x66>
        // Envoyer la commande AT
        SIMTransmit(command);
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f7ff fed1 	bl	8002538 <SIMTransmit>
        debugPrintln(command);
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fc46 	bl	8003028 <debugPrintln>

        // Attendre un court délai pour la réponse
        HAL_Delay(1000);
 800279c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027a0:	f000 fce8 	bl	8003174 <HAL_Delay>

        // Vérifier si la réponse contient la réponse attendue
        if (strstr((char *)buffer_sim, expectedResponse)) {
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	4818      	ldr	r0, [pc, #96]	@ (8002808 <sendATCommandAndWaitForResponse_signalquality+0x90>)
 80027a8:	f005 f858 	bl	800785c <strstr>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d015      	beq.n	80027de <sendATCommandAndWaitForResponse_signalquality+0x66>
            responseReceived = 1;
 80027b2:	2301      	movs	r3, #1
 80027b4:	61fb      	str	r3, [r7, #28]
            debugPrintln(buffer_sim);
 80027b6:	4814      	ldr	r0, [pc, #80]	@ (8002808 <sendATCommandAndWaitForResponse_signalquality+0x90>)
 80027b8:	f000 fc36 	bl	8003028 <debugPrintln>
            int rssi = extractRSSIValue(buffer_sim);
 80027bc:	4812      	ldr	r0, [pc, #72]	@ (8002808 <sendATCommandAndWaitForResponse_signalquality+0x90>)
 80027be:	f7ff ffa3 	bl	8002708 <extractRSSIValue>
 80027c2:	6178      	str	r0, [r7, #20]
            int RSSI = getRSSI(rssi);
 80027c4:	6978      	ldr	r0, [r7, #20]
 80027c6:	f7ff ffbd 	bl	8002744 <getRSSI>
 80027ca:	6138      	str	r0, [r7, #16]
                if (rssi != -999) {
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	4a0f      	ldr	r2, [pc, #60]	@ (800280c <sendATCommandAndWaitForResponse_signalquality+0x94>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d001      	beq.n	80027d8 <sendATCommandAndWaitForResponse_signalquality+0x60>
                	return RSSI;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	e013      	b.n	8002800 <sendATCommandAndWaitForResponse_signalquality+0x88>
                } else {
                    return -111;
 80027d8:	f06f 036e 	mvn.w	r3, #110	@ 0x6e
 80027dc:	e010      	b.n	8002800 <sendATCommandAndWaitForResponse_signalquality+0x88>
    while (!responseReceived && (previousTick + responseTimeout_ms > HAL_GetTick())) {
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <sendATCommandAndWaitForResponse_signalquality+0x7c>
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	18d4      	adds	r4, r2, r3
 80027ea:	f000 fcb9 	bl	8003160 <HAL_GetTick>
 80027ee:	4603      	mov	r3, r0
 80027f0:	429c      	cmp	r4, r3
 80027f2:	d8cd      	bhi.n	8002790 <sendATCommandAndWaitForResponse_signalquality+0x18>
            HAL_UART_Transmit(&huart2, (uint8_t *)buffer_sim, strlen(buffer_sim), HAL_MAX_DELAY);

        }
    }

    if (!responseReceived) {
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d102      	bne.n	8002800 <sendATCommandAndWaitForResponse_signalquality+0x88>
        debugPrintln("Timeout waiting for response.");
 80027fa:	4805      	ldr	r0, [pc, #20]	@ (8002810 <sendATCommandAndWaitForResponse_signalquality+0x98>)
 80027fc:	f000 fc14 	bl	8003028 <debugPrintln>
    }
}
 8002800:	4618      	mov	r0, r3
 8002802:	3724      	adds	r7, #36	@ 0x24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd90      	pop	{r4, r7, pc}
 8002808:	20000948 	.word	0x20000948
 800280c:	fffffc19 	.word	0xfffffc19
 8002810:	0800b1c8 	.word	0x0800b1c8

08002814 <SIM_INIT>:

void SIM_INIT(){
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0

	  sendATCommandAndWaitForResponse_AT_Action("AT\r\n", "OK", 3000);
 8002818:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800281c:	491a      	ldr	r1, [pc, #104]	@ (8002888 <SIM_INIT+0x74>)
 800281e:	481b      	ldr	r0, [pc, #108]	@ (800288c <SIM_INIT+0x78>)
 8002820:	f7ff feea 	bl	80025f8 <sendATCommandAndWaitForResponse_AT_Action>
	  HAL_Delay(500);
 8002824:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002828:	f000 fca4 	bl	8003174 <HAL_Delay>
	  sendATCommandAndWaitForResponse("AT+CGPS=1\r\n", "OK", 3000);
 800282c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002830:	4915      	ldr	r1, [pc, #84]	@ (8002888 <SIM_INIT+0x74>)
 8002832:	4817      	ldr	r0, [pc, #92]	@ (8002890 <SIM_INIT+0x7c>)
 8002834:	f7ff fea4 	bl	8002580 <sendATCommandAndWaitForResponse>
	  HAL_Delay(500);
 8002838:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800283c:	f000 fc9a 	bl	8003174 <HAL_Delay>
	  sendATCommandAndWaitForResponse("AT+CREG?\r\n", "OK", 3000);
 8002840:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002844:	4910      	ldr	r1, [pc, #64]	@ (8002888 <SIM_INIT+0x74>)
 8002846:	4813      	ldr	r0, [pc, #76]	@ (8002894 <SIM_INIT+0x80>)
 8002848:	f7ff fe9a 	bl	8002580 <sendATCommandAndWaitForResponse>
	  HAL_Delay(500);
 800284c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002850:	f000 fc90 	bl	8003174 <HAL_Delay>
	  sendATCommandAndWaitForResponse("AT+CNMP=2\r\n", "OK", 3000);
 8002854:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002858:	490b      	ldr	r1, [pc, #44]	@ (8002888 <SIM_INIT+0x74>)
 800285a:	480f      	ldr	r0, [pc, #60]	@ (8002898 <SIM_INIT+0x84>)
 800285c:	f7ff fe90 	bl	8002580 <sendATCommandAndWaitForResponse>
	  HAL_Delay(500);
 8002860:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002864:	f000 fc86 	bl	8003174 <HAL_Delay>
	  sprintf(ATcommand,"AT+CGDCONT=1,\"IP\",\"iot.telenet.be\"\r\n");
 8002868:	490c      	ldr	r1, [pc, #48]	@ (800289c <SIM_INIT+0x88>)
 800286a:	480d      	ldr	r0, [pc, #52]	@ (80028a0 <SIM_INIT+0x8c>)
 800286c:	f004 fed0 	bl	8007610 <siprintf>
	  sendATCommandAndWaitForResponse(ATcommand, "OK", 3000);
 8002870:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002874:	4904      	ldr	r1, [pc, #16]	@ (8002888 <SIM_INIT+0x74>)
 8002876:	480a      	ldr	r0, [pc, #40]	@ (80028a0 <SIM_INIT+0x8c>)
 8002878:	f7ff fe82 	bl	8002580 <sendATCommandAndWaitForResponse>
	  HAL_Delay(500);
 800287c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002880:	f000 fc78 	bl	8003174 <HAL_Delay>

}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	0800b1e8 	.word	0x0800b1e8
 800288c:	0800b200 	.word	0x0800b200
 8002890:	0800b208 	.word	0x0800b208
 8002894:	0800b214 	.word	0x0800b214
 8002898:	0800b220 	.word	0x0800b220
 800289c:	0800b22c 	.word	0x0800b22c
 80028a0:	200006d0 	.word	0x200006d0

080028a4 <parseNMEA>:

Coordinates parseNMEA(char* nmea) {
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b089      	sub	sp, #36	@ 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
    Coordinates coords;
    char* token = strtok(nmea, ",");
 80028ae:	4926      	ldr	r1, [pc, #152]	@ (8002948 <parseNMEA+0xa4>)
 80028b0:	6838      	ldr	r0, [r7, #0]
 80028b2:	f004 ff77 	bl	80077a4 <strtok>
 80028b6:	61f8      	str	r0, [r7, #28]

    // Extract latitude
    if (token != NULL) {
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00f      	beq.n	80028de <parseNMEA+0x3a>
        coords.latitude = atof(token);
 80028be:	69f8      	ldr	r0, [r7, #28]
 80028c0:	f003 f89a 	bl	80059f8 <atof>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4610      	mov	r0, r2
 80028ca:	4619      	mov	r1, r3
 80028cc:	f7fe f8fc 	bl	8000ac8 <__aeabi_d2f>
 80028d0:	4603      	mov	r3, r0
 80028d2:	60fb      	str	r3, [r7, #12]
        token = strtok(NULL, ",");
 80028d4:	491c      	ldr	r1, [pc, #112]	@ (8002948 <parseNMEA+0xa4>)
 80028d6:	2000      	movs	r0, #0
 80028d8:	f004 ff64 	bl	80077a4 <strtok>
 80028dc:	61f8      	str	r0, [r7, #28]
    }

    // Extract latitude direction
    if (token != NULL) {
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d007      	beq.n	80028f4 <parseNMEA+0x50>
        coords.latDirection = token[0];
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	743b      	strb	r3, [r7, #16]
        token = strtok(NULL, ",");
 80028ea:	4917      	ldr	r1, [pc, #92]	@ (8002948 <parseNMEA+0xa4>)
 80028ec:	2000      	movs	r0, #0
 80028ee:	f004 ff59 	bl	80077a4 <strtok>
 80028f2:	61f8      	str	r0, [r7, #28]
    }

    // Extract longitude
    if (token != NULL) {
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00f      	beq.n	800291a <parseNMEA+0x76>
        coords.longitude = atof(token);
 80028fa:	69f8      	ldr	r0, [r7, #28]
 80028fc:	f003 f87c 	bl	80059f8 <atof>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	f7fe f8de 	bl	8000ac8 <__aeabi_d2f>
 800290c:	4603      	mov	r3, r0
 800290e:	617b      	str	r3, [r7, #20]
        token = strtok(NULL, ",");
 8002910:	490d      	ldr	r1, [pc, #52]	@ (8002948 <parseNMEA+0xa4>)
 8002912:	2000      	movs	r0, #0
 8002914:	f004 ff46 	bl	80077a4 <strtok>
 8002918:	61f8      	str	r0, [r7, #28]
    }

    // Extract longitude direction
    if (token != NULL) {
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <parseNMEA+0x8c>
        coords.lonDirection = token[0];
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	763b      	strb	r3, [r7, #24]
        token = strtok(NULL, ",");
 8002926:	4908      	ldr	r1, [pc, #32]	@ (8002948 <parseNMEA+0xa4>)
 8002928:	2000      	movs	r0, #0
 800292a:	f004 ff3b 	bl	80077a4 <strtok>
 800292e:	61f8      	str	r0, [r7, #28]
    }

    return coords;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	461c      	mov	r4, r3
 8002934:	f107 030c 	add.w	r3, r7, #12
 8002938:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800293a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	3724      	adds	r7, #36	@ 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	bf00      	nop
 8002948:	0800b254 	.word	0x0800b254

0800294c <extractData>:

void extractData(const char* input, char* output) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
    // Find the position of the colon
    const char* colonPos = strchr(input, ':');
 8002956:	213a      	movs	r1, #58	@ 0x3a
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f004 fef0 	bl	800773e <strchr>
 800295e:	60f8      	str	r0, [r7, #12]

    // Check if colon was found
    if (colonPos != NULL) {
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <extractData+0x2a>
        // Move the pointer to the next character after the colon
        colonPos++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3301      	adds	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]

        // Copy the data after the colon to the output buffer
        strcpy(output, colonPos);
 800296c:	68f9      	ldr	r1, [r7, #12]
 800296e:	6838      	ldr	r0, [r7, #0]
 8002970:	f005 f801 	bl	8007976 <strcpy>
    } else {
        // Handle error case where colon is not found
        strcpy(output, "");
    }
}
 8002974:	e002      	b.n	800297c <extractData+0x30>
        strcpy(output, "");
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <convertDMSToDecimal>:

float convertDMSToDecimal(float dms, char direction) {
 8002984:	b5b0      	push	{r4, r5, r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	70fb      	strb	r3, [r7, #3]
    int degrees = (int)(dms / 100);   // Extract degrees
 8002990:	4921      	ldr	r1, [pc, #132]	@ (8002a18 <convertDMSToDecimal+0x94>)
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7fe faaa 	bl	8000eec <__aeabi_fdiv>
 8002998:	4603      	mov	r3, r0
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fbb8 	bl	8001110 <__aeabi_f2iz>
 80029a0:	4603      	mov	r3, r0
 80029a2:	613b      	str	r3, [r7, #16]
    float minutes = fmod(dms, 100);   // Extract minutes
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7fd fd3f 	bl	8000428 <__aeabi_f2d>
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <convertDMSToDecimal+0x98>)
 80029b0:	f008 f89c 	bl	800aaec <fmod>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f7fe f884 	bl	8000ac8 <__aeabi_d2f>
 80029c0:	4603      	mov	r3, r0
 80029c2:	60fb      	str	r3, [r7, #12]
    float decimal = degrees + (minutes / 60.0);
 80029c4:	6938      	ldr	r0, [r7, #16]
 80029c6:	f7fd fd1d 	bl	8000404 <__aeabi_i2d>
 80029ca:	4604      	mov	r4, r0
 80029cc:	460d      	mov	r5, r1
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f7fd fd2a 	bl	8000428 <__aeabi_f2d>
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	4b11      	ldr	r3, [pc, #68]	@ (8002a20 <convertDMSToDecimal+0x9c>)
 80029da:	f7fd fea7 	bl	800072c <__aeabi_ddiv>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4620      	mov	r0, r4
 80029e4:	4629      	mov	r1, r5
 80029e6:	f7fd fbc1 	bl	800016c <__adddf3>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4610      	mov	r0, r2
 80029f0:	4619      	mov	r1, r3
 80029f2:	f7fe f869 	bl	8000ac8 <__aeabi_d2f>
 80029f6:	4603      	mov	r3, r0
 80029f8:	617b      	str	r3, [r7, #20]
    if (direction == 'S' || direction == 'W') {
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	2b53      	cmp	r3, #83	@ 0x53
 80029fe:	d002      	beq.n	8002a06 <convertDMSToDecimal+0x82>
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	2b57      	cmp	r3, #87	@ 0x57
 8002a04:	d103      	bne.n	8002a0e <convertDMSToDecimal+0x8a>
        decimal = -decimal;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002a0c:	617b      	str	r3, [r7, #20]
    }
    return decimal;
 8002a0e:	697b      	ldr	r3, [r7, #20]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bdb0      	pop	{r4, r5, r7, pc}
 8002a18:	42c80000 	.word	0x42c80000
 8002a1c:	40590000 	.word	0x40590000
 8002a20:	404e0000 	.word	0x404e0000

08002a24 <HTTPConnect>:
void HTTPConnect(char* data_Json){
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	sendATCommandAndWaitForResponse("AT+HTTPINIT\r\n", "OK", 3000);
 8002a2c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002a30:	492b      	ldr	r1, [pc, #172]	@ (8002ae0 <HTTPConnect+0xbc>)
 8002a32:	482c      	ldr	r0, [pc, #176]	@ (8002ae4 <HTTPConnect+0xc0>)
 8002a34:	f7ff fda4 	bl	8002580 <sendATCommandAndWaitForResponse>
	HAL_Delay(500);
 8002a38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a3c:	f000 fb9a 	bl	8003174 <HAL_Delay>
	snprintf(ATcommand, sizeof(ATcommand), "AT+HTTPPARA=\"URL\",\"%s\"\r\n", url);
 8002a40:	4b29      	ldr	r3, [pc, #164]	@ (8002ae8 <HTTPConnect+0xc4>)
 8002a42:	4a2a      	ldr	r2, [pc, #168]	@ (8002aec <HTTPConnect+0xc8>)
 8002a44:	21c8      	movs	r1, #200	@ 0xc8
 8002a46:	482a      	ldr	r0, [pc, #168]	@ (8002af0 <HTTPConnect+0xcc>)
 8002a48:	f004 fdae 	bl	80075a8 <sniprintf>
	sendATCommandAndWaitForResponse(ATcommand, "OK", 3000);
 8002a4c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002a50:	4923      	ldr	r1, [pc, #140]	@ (8002ae0 <HTTPConnect+0xbc>)
 8002a52:	4827      	ldr	r0, [pc, #156]	@ (8002af0 <HTTPConnect+0xcc>)
 8002a54:	f7ff fd94 	bl	8002580 <sendATCommandAndWaitForResponse>
	HAL_Delay(500);
 8002a58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a5c:	f000 fb8a 	bl	8003174 <HAL_Delay>
	sprintf(ATcommand,"AT+HTTPPARA=\"CONTENT\",\"application/json\"\r\n");
 8002a60:	4924      	ldr	r1, [pc, #144]	@ (8002af4 <HTTPConnect+0xd0>)
 8002a62:	4823      	ldr	r0, [pc, #140]	@ (8002af0 <HTTPConnect+0xcc>)
 8002a64:	f004 fdd4 	bl	8007610 <siprintf>
	sendATCommandAndWaitForResponse(ATcommand, "OK", 3000);
 8002a68:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002a6c:	491c      	ldr	r1, [pc, #112]	@ (8002ae0 <HTTPConnect+0xbc>)
 8002a6e:	4820      	ldr	r0, [pc, #128]	@ (8002af0 <HTTPConnect+0xcc>)
 8002a70:	f7ff fd86 	bl	8002580 <sendATCommandAndWaitForResponse>
	HAL_Delay(500);
 8002a74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a78:	f000 fb7c 	bl	8003174 <HAL_Delay>
	snprintf(ATcommand, sizeof(ATcommand), "AT+HTTPDATA=%d,10000\r\n", strlen(data_Json));
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7fd fb67 	bl	8000150 <strlen>
 8002a82:	4603      	mov	r3, r0
 8002a84:	4a1c      	ldr	r2, [pc, #112]	@ (8002af8 <HTTPConnect+0xd4>)
 8002a86:	21c8      	movs	r1, #200	@ 0xc8
 8002a88:	4819      	ldr	r0, [pc, #100]	@ (8002af0 <HTTPConnect+0xcc>)
 8002a8a:	f004 fd8d 	bl	80075a8 <sniprintf>
	sendATCommandAndWaitForResponse(ATcommand, "DOWNLOAD", 6000);
 8002a8e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002a92:	491a      	ldr	r1, [pc, #104]	@ (8002afc <HTTPConnect+0xd8>)
 8002a94:	4816      	ldr	r0, [pc, #88]	@ (8002af0 <HTTPConnect+0xcc>)
 8002a96:	f7ff fd73 	bl	8002580 <sendATCommandAndWaitForResponse>
	HAL_Delay(500);
 8002a9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a9e:	f000 fb69 	bl	8003174 <HAL_Delay>
	sendATCommandAndWaitForResponse(data_Json, "OK", 6000);
 8002aa2:	f241 7270 	movw	r2, #6000	@ 0x1770
 8002aa6:	490e      	ldr	r1, [pc, #56]	@ (8002ae0 <HTTPConnect+0xbc>)
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff fd69 	bl	8002580 <sendATCommandAndWaitForResponse>
	sendATCommandAndWaitForResponse_AT_Action("AT+HTTPACTION=1\r\n", "OK", 3000);
 8002aae:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002ab2:	490b      	ldr	r1, [pc, #44]	@ (8002ae0 <HTTPConnect+0xbc>)
 8002ab4:	4812      	ldr	r0, [pc, #72]	@ (8002b00 <HTTPConnect+0xdc>)
 8002ab6:	f7ff fd9f 	bl	80025f8 <sendATCommandAndWaitForResponse_AT_Action>
	HAL_Delay(3000);
 8002aba:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002abe:	f000 fb59 	bl	8003174 <HAL_Delay>
	sendATCommandAndWaitForResponse("AT+HTTPTERM\r\n", "OK", 3000);
 8002ac2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002ac6:	4906      	ldr	r1, [pc, #24]	@ (8002ae0 <HTTPConnect+0xbc>)
 8002ac8:	480e      	ldr	r0, [pc, #56]	@ (8002b04 <HTTPConnect+0xe0>)
 8002aca:	f7ff fd59 	bl	8002580 <sendATCommandAndWaitForResponse>
	HAL_Delay(500);
 8002ace:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ad2:	f000 fb4f 	bl	8003174 <HAL_Delay>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	0800b1e8 	.word	0x0800b1e8
 8002ae4:	0800b258 	.word	0x0800b258
 8002ae8:	20000018 	.word	0x20000018
 8002aec:	0800b268 	.word	0x0800b268
 8002af0:	200006d0 	.word	0x200006d0
 8002af4:	0800b284 	.word	0x0800b284
 8002af8:	0800b2b0 	.word	0x0800b2b0
 8002afc:	0800b2c8 	.word	0x0800b2c8
 8002b00:	0800b2d4 	.word	0x0800b2d4
 8002b04:	0800b2e8 	.word	0x0800b2e8

08002b08 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b0c:	4b17      	ldr	r3, [pc, #92]	@ (8002b6c <MX_SPI1_Init+0x64>)
 8002b0e:	4a18      	ldr	r2, [pc, #96]	@ (8002b70 <MX_SPI1_Init+0x68>)
 8002b10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b12:	4b16      	ldr	r3, [pc, #88]	@ (8002b6c <MX_SPI1_Init+0x64>)
 8002b14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b1a:	4b14      	ldr	r3, [pc, #80]	@ (8002b6c <MX_SPI1_Init+0x64>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b20:	4b12      	ldr	r3, [pc, #72]	@ (8002b6c <MX_SPI1_Init+0x64>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b26:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <MX_SPI1_Init+0x64>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b6c <MX_SPI1_Init+0x64>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <MX_SPI1_Init+0x64>)
 8002b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <MX_SPI1_Init+0x64>)
 8002b3c:	2228      	movs	r2, #40	@ 0x28
 8002b3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b40:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <MX_SPI1_Init+0x64>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b46:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <MX_SPI1_Init+0x64>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b4c:	4b07      	ldr	r3, [pc, #28]	@ (8002b6c <MX_SPI1_Init+0x64>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <MX_SPI1_Init+0x64>)
 8002b54:	220a      	movs	r2, #10
 8002b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b58:	4804      	ldr	r0, [pc, #16]	@ (8002b6c <MX_SPI1_Init+0x64>)
 8002b5a:	f001 ff57 	bl	8004a0c <HAL_SPI_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b64:	f7ff fccb 	bl	80024fe <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	200009ac 	.word	0x200009ac
 8002b70:	40013000 	.word	0x40013000

08002b74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08a      	sub	sp, #40	@ 0x28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a22      	ldr	r2, [pc, #136]	@ (8002c18 <HAL_SPI_MspInit+0xa4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d13d      	bne.n	8002c10 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b94:	4b21      	ldr	r3, [pc, #132]	@ (8002c1c <HAL_SPI_MspInit+0xa8>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	4a20      	ldr	r2, [pc, #128]	@ (8002c1c <HAL_SPI_MspInit+0xa8>)
 8002b9a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b9e:	6193      	str	r3, [r2, #24]
 8002ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c1c <HAL_SPI_MspInit+0xa8>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_SPI_MspInit+0xa8>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c1c <HAL_SPI_MspInit+0xa8>)
 8002bb2:	f043 0308 	orr.w	r3, r3, #8
 8002bb6:	6193      	str	r3, [r2, #24]
 8002bb8:	4b18      	ldr	r3, [pc, #96]	@ (8002c1c <HAL_SPI_MspInit+0xa8>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002bc4:	2328      	movs	r3, #40	@ 0x28
 8002bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4812      	ldr	r0, [pc, #72]	@ (8002c20 <HAL_SPI_MspInit+0xac>)
 8002bd8:	f001 f800 	bl	8003bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002bdc:	2310      	movs	r3, #16
 8002bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	4619      	mov	r1, r3
 8002bee:	480c      	ldr	r0, [pc, #48]	@ (8002c20 <HAL_SPI_MspInit+0xac>)
 8002bf0:	f000 fff4 	bl	8003bdc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_SPI_MspInit+0xb0>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c0a:	4a06      	ldr	r2, [pc, #24]	@ (8002c24 <HAL_SPI_MspInit+0xb0>)
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002c10:	bf00      	nop
 8002c12:	3728      	adds	r7, #40	@ 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40013000 	.word	0x40013000
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40010c00 	.word	0x40010c00
 8002c24:	40010000 	.word	0x40010000

08002c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c2e:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <HAL_MspInit+0x5c>)
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	4a14      	ldr	r2, [pc, #80]	@ (8002c84 <HAL_MspInit+0x5c>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6193      	str	r3, [r2, #24]
 8002c3a:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <HAL_MspInit+0x5c>)
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	4b0f      	ldr	r3, [pc, #60]	@ (8002c84 <HAL_MspInit+0x5c>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c84 <HAL_MspInit+0x5c>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c50:	61d3      	str	r3, [r2, #28]
 8002c52:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <HAL_MspInit+0x5c>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <HAL_MspInit+0x60>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	4a04      	ldr	r2, [pc, #16]	@ (8002c88 <HAL_MspInit+0x60>)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40010000 	.word	0x40010000

08002c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <NMI_Handler+0x4>

08002c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <HardFault_Handler+0x4>

08002c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <MemManage_Handler+0x4>

08002ca4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <BusFault_Handler+0x4>

08002cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <UsageFault_Handler+0x4>

08002cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cdc:	f000 fa2e 	bl	800313c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return 1;
 8002ce8:	2301      	movs	r3, #1
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <_kill>:

int _kill(int pid, int sig)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cfc:	f004 fe0e 	bl	800791c <__errno>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2216      	movs	r2, #22
 8002d04:	601a      	str	r2, [r3, #0]
  return -1;
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <_exit>:

void _exit (int status)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d1a:	f04f 31ff 	mov.w	r1, #4294967295
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ffe7 	bl	8002cf2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <_exit+0x12>

08002d28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	e00a      	b.n	8002d50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d3a:	f3af 8000 	nop.w
 8002d3e:	4601      	mov	r1, r0
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	60ba      	str	r2, [r7, #8]
 8002d46:	b2ca      	uxtb	r2, r1
 8002d48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	dbf0      	blt.n	8002d3a <_read+0x12>
  }

  return len;
 8002d58:	687b      	ldr	r3, [r7, #4]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	e009      	b.n	8002d88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	60ba      	str	r2, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	3301      	adds	r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	dbf1      	blt.n	8002d74 <_write+0x12>
  }
  return len;
 8002d90:	687b      	ldr	r3, [r7, #4]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <_close>:

int _close(int file)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dc0:	605a      	str	r2, [r3, #4]
  return 0;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <_isatty>:

int _isatty(int file)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dd6:	2301      	movs	r3, #1
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b085      	sub	sp, #20
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
	...

08002dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e04:	4a14      	ldr	r2, [pc, #80]	@ (8002e58 <_sbrk+0x5c>)
 8002e06:	4b15      	ldr	r3, [pc, #84]	@ (8002e5c <_sbrk+0x60>)
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e10:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <_sbrk+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e18:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <_sbrk+0x64>)
 8002e1a:	4a12      	ldr	r2, [pc, #72]	@ (8002e64 <_sbrk+0x68>)
 8002e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e1e:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d207      	bcs.n	8002e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e2c:	f004 fd76 	bl	800791c <__errno>
 8002e30:	4603      	mov	r3, r0
 8002e32:	220c      	movs	r2, #12
 8002e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3a:	e009      	b.n	8002e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e3c:	4b08      	ldr	r3, [pc, #32]	@ (8002e60 <_sbrk+0x64>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e42:	4b07      	ldr	r3, [pc, #28]	@ (8002e60 <_sbrk+0x64>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	4a05      	ldr	r2, [pc, #20]	@ (8002e60 <_sbrk+0x64>)
 8002e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20005000 	.word	0x20005000
 8002e5c:	00000400 	.word	0x00000400
 8002e60:	20000a04 	.word	0x20000a04
 8002e64:	20000be8 	.word	0x20000be8

08002e68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e78:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002e7a:	4a12      	ldr	r2, [pc, #72]	@ (8002ec4 <MX_USART2_UART_Init+0x50>)
 8002e7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e7e:	4b10      	ldr	r3, [pc, #64]	@ (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002e80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e98:	4b09      	ldr	r3, [pc, #36]	@ (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002e9a:	220c      	movs	r2, #12
 8002e9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e9e:	4b08      	ldr	r3, [pc, #32]	@ (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eaa:	4805      	ldr	r0, [pc, #20]	@ (8002ec0 <MX_USART2_UART_Init+0x4c>)
 8002eac:	f002 fb42 	bl	8005534 <HAL_UART_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002eb6:	f7ff fb22 	bl	80024fe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000a08 	.word	0x20000a08
 8002ec4:	40004400 	.word	0x40004400

08002ec8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ecc:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <MX_USART3_UART_Init+0x4c>)
 8002ece:	4a12      	ldr	r2, [pc, #72]	@ (8002f18 <MX_USART3_UART_Init+0x50>)
 8002ed0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ed2:	4b10      	ldr	r3, [pc, #64]	@ (8002f14 <MX_USART3_UART_Init+0x4c>)
 8002ed4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ed8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002eda:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <MX_USART3_UART_Init+0x4c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <MX_USART3_UART_Init+0x4c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <MX_USART3_UART_Init+0x4c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002eec:	4b09      	ldr	r3, [pc, #36]	@ (8002f14 <MX_USART3_UART_Init+0x4c>)
 8002eee:	220c      	movs	r2, #12
 8002ef0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ef2:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <MX_USART3_UART_Init+0x4c>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef8:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <MX_USART3_UART_Init+0x4c>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002efe:	4805      	ldr	r0, [pc, #20]	@ (8002f14 <MX_USART3_UART_Init+0x4c>)
 8002f00:	f002 fb18 	bl	8005534 <HAL_UART_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f0a:	f7ff faf8 	bl	80024fe <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000a50 	.word	0x20000a50
 8002f18:	40004800 	.word	0x40004800

08002f1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	@ 0x28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	f107 0318 	add.w	r3, r7, #24
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a37      	ldr	r2, [pc, #220]	@ (8003014 <HAL_UART_MspInit+0xf8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d130      	bne.n	8002f9e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f3c:	4b36      	ldr	r3, [pc, #216]	@ (8003018 <HAL_UART_MspInit+0xfc>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	4a35      	ldr	r2, [pc, #212]	@ (8003018 <HAL_UART_MspInit+0xfc>)
 8002f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f46:	61d3      	str	r3, [r2, #28]
 8002f48:	4b33      	ldr	r3, [pc, #204]	@ (8003018 <HAL_UART_MspInit+0xfc>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f54:	4b30      	ldr	r3, [pc, #192]	@ (8003018 <HAL_UART_MspInit+0xfc>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	4a2f      	ldr	r2, [pc, #188]	@ (8003018 <HAL_UART_MspInit+0xfc>)
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	6193      	str	r3, [r2, #24]
 8002f60:	4b2d      	ldr	r3, [pc, #180]	@ (8003018 <HAL_UART_MspInit+0xfc>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f74:	2303      	movs	r3, #3
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f78:	f107 0318 	add.w	r3, r7, #24
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4827      	ldr	r0, [pc, #156]	@ (800301c <HAL_UART_MspInit+0x100>)
 8002f80:	f000 fe2c 	bl	8003bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f84:	2308      	movs	r3, #8
 8002f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f90:	f107 0318 	add.w	r3, r7, #24
 8002f94:	4619      	mov	r1, r3
 8002f96:	4821      	ldr	r0, [pc, #132]	@ (800301c <HAL_UART_MspInit+0x100>)
 8002f98:	f000 fe20 	bl	8003bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f9c:	e036      	b.n	800300c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8003020 <HAL_UART_MspInit+0x104>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d131      	bne.n	800300c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8003018 <HAL_UART_MspInit+0xfc>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	4a1a      	ldr	r2, [pc, #104]	@ (8003018 <HAL_UART_MspInit+0xfc>)
 8002fae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fb2:	61d3      	str	r3, [r2, #28]
 8002fb4:	4b18      	ldr	r3, [pc, #96]	@ (8003018 <HAL_UART_MspInit+0xfc>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc0:	4b15      	ldr	r3, [pc, #84]	@ (8003018 <HAL_UART_MspInit+0xfc>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	4a14      	ldr	r2, [pc, #80]	@ (8003018 <HAL_UART_MspInit+0xfc>)
 8002fc6:	f043 0308 	orr.w	r3, r3, #8
 8002fca:	6193      	str	r3, [r2, #24]
 8002fcc:	4b12      	ldr	r3, [pc, #72]	@ (8003018 <HAL_UART_MspInit+0xfc>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe6:	f107 0318 	add.w	r3, r7, #24
 8002fea:	4619      	mov	r1, r3
 8002fec:	480d      	ldr	r0, [pc, #52]	@ (8003024 <HAL_UART_MspInit+0x108>)
 8002fee:	f000 fdf5 	bl	8003bdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ff2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003000:	f107 0318 	add.w	r3, r7, #24
 8003004:	4619      	mov	r1, r3
 8003006:	4807      	ldr	r0, [pc, #28]	@ (8003024 <HAL_UART_MspInit+0x108>)
 8003008:	f000 fde8 	bl	8003bdc <HAL_GPIO_Init>
}
 800300c:	bf00      	nop
 800300e:	3728      	adds	r7, #40	@ 0x28
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40004400 	.word	0x40004400
 8003018:	40021000 	.word	0x40021000
 800301c:	40010800 	.word	0x40010800
 8003020:	40004800 	.word	0x40004800
 8003024:	40010c00 	.word	0x40010c00

08003028 <debugPrintln>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void debugPrintln(char _out[]){
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) _out, strlen(_out), 50);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fd f88d 	bl	8000150 <strlen>
 8003036:	4603      	mov	r3, r0
 8003038:	b29a      	uxth	r2, r3
 800303a:	2332      	movs	r3, #50	@ 0x32
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4808      	ldr	r0, [pc, #32]	@ (8003060 <debugPrintln+0x38>)
 8003040:	f002 fac8 	bl	80055d4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003044:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8003048:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 1);
 800304a:	f107 010c 	add.w	r1, r7, #12
 800304e:	2301      	movs	r3, #1
 8003050:	2202      	movs	r2, #2
 8003052:	4803      	ldr	r0, [pc, #12]	@ (8003060 <debugPrintln+0x38>)
 8003054:	f002 fabe 	bl	80055d4 <HAL_UART_Transmit>
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000a08 	.word	0x20000a08

08003064 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003064:	f7ff ff00 	bl	8002e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003068:	480b      	ldr	r0, [pc, #44]	@ (8003098 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800306a:	490c      	ldr	r1, [pc, #48]	@ (800309c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800306c:	4a0c      	ldr	r2, [pc, #48]	@ (80030a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003070:	e002      	b.n	8003078 <LoopCopyDataInit>

08003072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003076:	3304      	adds	r3, #4

08003078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800307a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800307c:	d3f9      	bcc.n	8003072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800307e:	4a09      	ldr	r2, [pc, #36]	@ (80030a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003080:	4c09      	ldr	r4, [pc, #36]	@ (80030a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003084:	e001      	b.n	800308a <LoopFillZerobss>

08003086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003088:	3204      	adds	r2, #4

0800308a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800308a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800308c:	d3fb      	bcc.n	8003086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800308e:	f004 fc4b 	bl	8007928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003092:	f7fe ffe9 	bl	8002068 <main>
  bx lr
 8003096:	4770      	bx	lr
  ldr r0, =_sdata
 8003098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800309c:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 80030a0:	0800b800 	.word	0x0800b800
  ldr r2, =_sbss
 80030a4:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 80030a8:	20000be8 	.word	0x20000be8

080030ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030ac:	e7fe      	b.n	80030ac <ADC1_2_IRQHandler>
	...

080030b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030b4:	4b08      	ldr	r3, [pc, #32]	@ (80030d8 <HAL_Init+0x28>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a07      	ldr	r2, [pc, #28]	@ (80030d8 <HAL_Init+0x28>)
 80030ba:	f043 0310 	orr.w	r3, r3, #16
 80030be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030c0:	2003      	movs	r0, #3
 80030c2:	f000 fd57 	bl	8003b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030c6:	200f      	movs	r0, #15
 80030c8:	f000 f808 	bl	80030dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030cc:	f7ff fdac 	bl	8002c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40022000 	.word	0x40022000

080030dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030e4:	4b12      	ldr	r3, [pc, #72]	@ (8003130 <HAL_InitTick+0x54>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b12      	ldr	r3, [pc, #72]	@ (8003134 <HAL_InitTick+0x58>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4619      	mov	r1, r3
 80030ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fd61 	bl	8003bc2 <HAL_SYSTICK_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e00e      	b.n	8003128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b0f      	cmp	r3, #15
 800310e:	d80a      	bhi.n	8003126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003110:	2200      	movs	r2, #0
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	f04f 30ff 	mov.w	r0, #4294967295
 8003118:	f000 fd37 	bl	8003b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800311c:	4a06      	ldr	r2, [pc, #24]	@ (8003138 <HAL_InitTick+0x5c>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	e000      	b.n	8003128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	200000c0 	.word	0x200000c0
 8003134:	200000c8 	.word	0x200000c8
 8003138:	200000c4 	.word	0x200000c4

0800313c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003140:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <HAL_IncTick+0x1c>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	4b05      	ldr	r3, [pc, #20]	@ (800315c <HAL_IncTick+0x20>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4413      	add	r3, r2
 800314c:	4a03      	ldr	r2, [pc, #12]	@ (800315c <HAL_IncTick+0x20>)
 800314e:	6013      	str	r3, [r2, #0]
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	200000c8 	.word	0x200000c8
 800315c:	20000a98 	.word	0x20000a98

08003160 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return uwTick;
 8003164:	4b02      	ldr	r3, [pc, #8]	@ (8003170 <HAL_GetTick+0x10>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr
 8003170:	20000a98 	.word	0x20000a98

08003174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800317c:	f7ff fff0 	bl	8003160 <HAL_GetTick>
 8003180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d005      	beq.n	800319a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800318e:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <HAL_Delay+0x44>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800319a:	bf00      	nop
 800319c:	f7ff ffe0 	bl	8003160 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d8f7      	bhi.n	800319c <HAL_Delay+0x28>
  {
  }
}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	200000c8 	.word	0x200000c8

080031bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e0be      	b.n	800335c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fe fe6c 	bl	8001ed8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fbc5 	bl	8003990 <ADC_ConversionStop_Disable>
 8003206:	4603      	mov	r3, r0
 8003208:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b00      	cmp	r3, #0
 8003214:	f040 8099 	bne.w	800334a <HAL_ADC_Init+0x18e>
 8003218:	7dfb      	ldrb	r3, [r7, #23]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f040 8095 	bne.w	800334a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003228:	f023 0302 	bic.w	r3, r3, #2
 800322c:	f043 0202 	orr.w	r2, r3, #2
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800323c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	7b1b      	ldrb	r3, [r3, #12]
 8003242:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003244:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	4313      	orrs	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003254:	d003      	beq.n	800325e <HAL_ADC_Init+0xa2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d102      	bne.n	8003264 <HAL_ADC_Init+0xa8>
 800325e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003262:	e000      	b.n	8003266 <HAL_ADC_Init+0xaa>
 8003264:	2300      	movs	r3, #0
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7d1b      	ldrb	r3, [r3, #20]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d119      	bne.n	80032a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7b1b      	ldrb	r3, [r3, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	3b01      	subs	r3, #1
 8003282:	035a      	lsls	r2, r3, #13
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	e00b      	b.n	80032a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	f043 0220 	orr.w	r2, r3, #32
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	4b28      	ldr	r3, [pc, #160]	@ (8003364 <HAL_ADC_Init+0x1a8>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	430b      	orrs	r3, r1
 80032ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032d8:	d003      	beq.n	80032e2 <HAL_ADC_Init+0x126>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d104      	bne.n	80032ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	051b      	lsls	r3, r3, #20
 80032ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	4b18      	ldr	r3, [pc, #96]	@ (8003368 <HAL_ADC_Init+0x1ac>)
 8003308:	4013      	ands	r3, r2
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	429a      	cmp	r2, r3
 800330e:	d10b      	bne.n	8003328 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331a:	f023 0303 	bic.w	r3, r3, #3
 800331e:	f043 0201 	orr.w	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003326:	e018      	b.n	800335a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332c:	f023 0312 	bic.w	r3, r3, #18
 8003330:	f043 0210 	orr.w	r2, r3, #16
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333c:	f043 0201 	orr.w	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003348:	e007      	b.n	800335a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334e:	f043 0210 	orr.w	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800335a:	7dfb      	ldrb	r3, [r7, #23]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	ffe1f7fd 	.word	0xffe1f7fd
 8003368:	ff1f0efe 	.word	0xff1f0efe

0800336c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_ADC_Start+0x1a>
 8003382:	2302      	movs	r3, #2
 8003384:	e098      	b.n	80034b8 <HAL_ADC_Start+0x14c>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 faa4 	bl	80038dc <ADC_Enable>
 8003394:	4603      	mov	r3, r0
 8003396:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003398:	7bfb      	ldrb	r3, [r7, #15]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f040 8087 	bne.w	80034ae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a41      	ldr	r2, [pc, #260]	@ (80034c0 <HAL_ADC_Start+0x154>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d105      	bne.n	80033ca <HAL_ADC_Start+0x5e>
 80033be:	4b41      	ldr	r3, [pc, #260]	@ (80034c4 <HAL_ADC_Start+0x158>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d115      	bne.n	80033f6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d026      	beq.n	8003432 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80033ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033f4:	e01d      	b.n	8003432 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a2f      	ldr	r2, [pc, #188]	@ (80034c4 <HAL_ADC_Start+0x158>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_ADC_Start+0xaa>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a2b      	ldr	r2, [pc, #172]	@ (80034c0 <HAL_ADC_Start+0x154>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d10d      	bne.n	8003432 <HAL_ADC_Start+0xc6>
 8003416:	4b2b      	ldr	r3, [pc, #172]	@ (80034c4 <HAL_ADC_Start+0x158>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003426:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800342a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003436:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d006      	beq.n	800344c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003442:	f023 0206 	bic.w	r2, r3, #6
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	62da      	str	r2, [r3, #44]	@ 0x2c
 800344a:	e002      	b.n	8003452 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f06f 0202 	mvn.w	r2, #2
 8003462:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800346e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003472:	d113      	bne.n	800349c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003478:	4a11      	ldr	r2, [pc, #68]	@ (80034c0 <HAL_ADC_Start+0x154>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d105      	bne.n	800348a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800347e:	4b11      	ldr	r3, [pc, #68]	@ (80034c4 <HAL_ADC_Start+0x158>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003486:	2b00      	cmp	r3, #0
 8003488:	d108      	bne.n	800349c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	e00c      	b.n	80034b6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	e003      	b.n	80034b6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40012800 	.word	0x40012800
 80034c4:	40012400 	.word	0x40012400

080034c8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80034c8:	b590      	push	{r4, r7, lr}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80034de:	f7ff fe3f 	bl	8003160 <HAL_GetTick>
 80034e2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f6:	f043 0220 	orr.w	r2, r3, #32
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0d3      	b.n	80036b2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d131      	bne.n	800357c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003522:	2b00      	cmp	r3, #0
 8003524:	d12a      	bne.n	800357c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003526:	e021      	b.n	800356c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352e:	d01d      	beq.n	800356c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <HAL_ADC_PollForConversion+0x7e>
 8003536:	f7ff fe13 	bl	8003160 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d212      	bcs.n	800356c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003558:	f043 0204 	orr.w	r2, r3, #4
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e0a2      	b.n	80036b2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0d6      	beq.n	8003528 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800357a:	e070      	b.n	800365e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800357c:	4b4f      	ldr	r3, [pc, #316]	@ (80036bc <HAL_ADC_PollForConversion+0x1f4>)
 800357e:	681c      	ldr	r4, [r3, #0]
 8003580:	2002      	movs	r0, #2
 8003582:	f001 f98d 	bl	80048a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003586:	4603      	mov	r3, r0
 8003588:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6919      	ldr	r1, [r3, #16]
 8003592:	4b4b      	ldr	r3, [pc, #300]	@ (80036c0 <HAL_ADC_PollForConversion+0x1f8>)
 8003594:	400b      	ands	r3, r1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d118      	bne.n	80035cc <HAL_ADC_PollForConversion+0x104>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68d9      	ldr	r1, [r3, #12]
 80035a0:	4b48      	ldr	r3, [pc, #288]	@ (80036c4 <HAL_ADC_PollForConversion+0x1fc>)
 80035a2:	400b      	ands	r3, r1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d111      	bne.n	80035cc <HAL_ADC_PollForConversion+0x104>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6919      	ldr	r1, [r3, #16]
 80035ae:	4b46      	ldr	r3, [pc, #280]	@ (80036c8 <HAL_ADC_PollForConversion+0x200>)
 80035b0:	400b      	ands	r3, r1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d108      	bne.n	80035c8 <HAL_ADC_PollForConversion+0x100>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68d9      	ldr	r1, [r3, #12]
 80035bc:	4b43      	ldr	r3, [pc, #268]	@ (80036cc <HAL_ADC_PollForConversion+0x204>)
 80035be:	400b      	ands	r3, r1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_PollForConversion+0x100>
 80035c4:	2314      	movs	r3, #20
 80035c6:	e020      	b.n	800360a <HAL_ADC_PollForConversion+0x142>
 80035c8:	2329      	movs	r3, #41	@ 0x29
 80035ca:	e01e      	b.n	800360a <HAL_ADC_PollForConversion+0x142>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6919      	ldr	r1, [r3, #16]
 80035d2:	4b3d      	ldr	r3, [pc, #244]	@ (80036c8 <HAL_ADC_PollForConversion+0x200>)
 80035d4:	400b      	ands	r3, r1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_ADC_PollForConversion+0x120>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68d9      	ldr	r1, [r3, #12]
 80035e0:	4b3a      	ldr	r3, [pc, #232]	@ (80036cc <HAL_ADC_PollForConversion+0x204>)
 80035e2:	400b      	ands	r3, r1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00d      	beq.n	8003604 <HAL_ADC_PollForConversion+0x13c>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6919      	ldr	r1, [r3, #16]
 80035ee:	4b38      	ldr	r3, [pc, #224]	@ (80036d0 <HAL_ADC_PollForConversion+0x208>)
 80035f0:	400b      	ands	r3, r1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <HAL_ADC_PollForConversion+0x140>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68d9      	ldr	r1, [r3, #12]
 80035fc:	4b34      	ldr	r3, [pc, #208]	@ (80036d0 <HAL_ADC_PollForConversion+0x208>)
 80035fe:	400b      	ands	r3, r1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_ADC_PollForConversion+0x140>
 8003604:	2354      	movs	r3, #84	@ 0x54
 8003606:	e000      	b.n	800360a <HAL_ADC_PollForConversion+0x142>
 8003608:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003610:	e021      	b.n	8003656 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d01a      	beq.n	8003650 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <HAL_ADC_PollForConversion+0x168>
 8003620:	f7ff fd9e 	bl	8003160 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d20f      	bcs.n	8003650 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	429a      	cmp	r2, r3
 8003636:	d90b      	bls.n	8003650 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	f043 0204 	orr.w	r2, r3, #4
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e030      	b.n	80036b2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3301      	adds	r3, #1
 8003654:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	429a      	cmp	r2, r3
 800365c:	d8d9      	bhi.n	8003612 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f06f 0212 	mvn.w	r2, #18
 8003666:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800367e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003682:	d115      	bne.n	80036b0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003688:	2b00      	cmp	r3, #0
 800368a:	d111      	bne.n	80036b0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003690:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a8:	f043 0201 	orr.w	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd90      	pop	{r4, r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200000c0 	.word	0x200000c0
 80036c0:	24924924 	.word	0x24924924
 80036c4:	00924924 	.word	0x00924924
 80036c8:	12492492 	.word	0x12492492
 80036cc:	00492492 	.word	0x00492492
 80036d0:	00249249 	.word	0x00249249

080036d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_ADC_ConfigChannel+0x20>
 8003708:	2302      	movs	r3, #2
 800370a:	e0dc      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x1da>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b06      	cmp	r3, #6
 800371a:	d81c      	bhi.n	8003756 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	3b05      	subs	r3, #5
 800372e:	221f      	movs	r2, #31
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	4019      	ands	r1, r3
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	3b05      	subs	r3, #5
 8003748:	fa00 f203 	lsl.w	r2, r0, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	635a      	str	r2, [r3, #52]	@ 0x34
 8003754:	e03c      	b.n	80037d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b0c      	cmp	r3, #12
 800375c:	d81c      	bhi.n	8003798 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	3b23      	subs	r3, #35	@ 0x23
 8003770:	221f      	movs	r2, #31
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	4019      	ands	r1, r3
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	3b23      	subs	r3, #35	@ 0x23
 800378a:	fa00 f203 	lsl.w	r2, r0, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	631a      	str	r2, [r3, #48]	@ 0x30
 8003796:	e01b      	b.n	80037d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	3b41      	subs	r3, #65	@ 0x41
 80037aa:	221f      	movs	r2, #31
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	4019      	ands	r1, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	3b41      	subs	r3, #65	@ 0x41
 80037c4:	fa00 f203 	lsl.w	r2, r0, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b09      	cmp	r3, #9
 80037d6:	d91c      	bls.n	8003812 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68d9      	ldr	r1, [r3, #12]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4613      	mov	r3, r2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4413      	add	r3, r2
 80037e8:	3b1e      	subs	r3, #30
 80037ea:	2207      	movs	r2, #7
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	4019      	ands	r1, r3
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	6898      	ldr	r0, [r3, #8]
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	3b1e      	subs	r3, #30
 8003804:	fa00 f203 	lsl.w	r2, r0, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	60da      	str	r2, [r3, #12]
 8003810:	e019      	b.n	8003846 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6919      	ldr	r1, [r3, #16]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	2207      	movs	r2, #7
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	4019      	ands	r1, r3
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	6898      	ldr	r0, [r3, #8]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	fa00 f203 	lsl.w	r2, r0, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b10      	cmp	r3, #16
 800384c:	d003      	beq.n	8003856 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003852:	2b11      	cmp	r3, #17
 8003854:	d132      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1d      	ldr	r2, [pc, #116]	@ (80038d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d125      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d126      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800387c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b10      	cmp	r3, #16
 8003884:	d11a      	bne.n	80038bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003886:	4b13      	ldr	r3, [pc, #76]	@ (80038d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a13      	ldr	r2, [pc, #76]	@ (80038d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	0c9a      	lsrs	r2, r3, #18
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800389c:	e002      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f9      	bne.n	800389e <HAL_ADC_ConfigChannel+0x1b2>
 80038aa:	e007      	b.n	80038bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	40012400 	.word	0x40012400
 80038d4:	200000c0 	.word	0x200000c0
 80038d8:	431bde83 	.word	0x431bde83

080038dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d040      	beq.n	800397c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 0201 	orr.w	r2, r2, #1
 8003908:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800390a:	4b1f      	ldr	r3, [pc, #124]	@ (8003988 <ADC_Enable+0xac>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1f      	ldr	r2, [pc, #124]	@ (800398c <ADC_Enable+0xb0>)
 8003910:	fba2 2303 	umull	r2, r3, r2, r3
 8003914:	0c9b      	lsrs	r3, r3, #18
 8003916:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003918:	e002      	b.n	8003920 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	3b01      	subs	r3, #1
 800391e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f9      	bne.n	800391a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003926:	f7ff fc1b 	bl	8003160 <HAL_GetTick>
 800392a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800392c:	e01f      	b.n	800396e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800392e:	f7ff fc17 	bl	8003160 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d918      	bls.n	800396e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b01      	cmp	r3, #1
 8003948:	d011      	beq.n	800396e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394e:	f043 0210 	orr.w	r2, r3, #16
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395a:	f043 0201 	orr.w	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e007      	b.n	800397e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b01      	cmp	r3, #1
 800397a:	d1d8      	bne.n	800392e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	200000c0 	.word	0x200000c0
 800398c:	431bde83 	.word	0x431bde83

08003990 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d12e      	bne.n	8003a08 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039ba:	f7ff fbd1 	bl	8003160 <HAL_GetTick>
 80039be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80039c0:	e01b      	b.n	80039fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039c2:	f7ff fbcd 	bl	8003160 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d914      	bls.n	80039fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d10d      	bne.n	80039fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e2:	f043 0210 	orr.w	r2, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e007      	b.n	8003a0a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d0dc      	beq.n	80039c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a24:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a30:	4013      	ands	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a46:	4a04      	ldr	r2, [pc, #16]	@ (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	60d3      	str	r3, [r2, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a60:	4b04      	ldr	r3, [pc, #16]	@ (8003a74 <__NVIC_GetPriorityGrouping+0x18>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	0a1b      	lsrs	r3, r3, #8
 8003a66:	f003 0307 	and.w	r3, r3, #7
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	6039      	str	r1, [r7, #0]
 8003a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	db0a      	blt.n	8003aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	490c      	ldr	r1, [pc, #48]	@ (8003ac4 <__NVIC_SetPriority+0x4c>)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	0112      	lsls	r2, r2, #4
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aa0:	e00a      	b.n	8003ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	4908      	ldr	r1, [pc, #32]	@ (8003ac8 <__NVIC_SetPriority+0x50>)
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	3b04      	subs	r3, #4
 8003ab0:	0112      	lsls	r2, r2, #4
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	761a      	strb	r2, [r3, #24]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	e000e100 	.word	0xe000e100
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b089      	sub	sp, #36	@ 0x24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f1c3 0307 	rsb	r3, r3, #7
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	bf28      	it	cs
 8003aea:	2304      	movcs	r3, #4
 8003aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	3304      	adds	r3, #4
 8003af2:	2b06      	cmp	r3, #6
 8003af4:	d902      	bls.n	8003afc <NVIC_EncodePriority+0x30>
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3b03      	subs	r3, #3
 8003afa:	e000      	b.n	8003afe <NVIC_EncodePriority+0x32>
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b00:	f04f 32ff 	mov.w	r2, #4294967295
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	43da      	mvns	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	401a      	ands	r2, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b14:	f04f 31ff 	mov.w	r1, #4294967295
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1e:	43d9      	mvns	r1, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b24:	4313      	orrs	r3, r2
         );
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3724      	adds	r7, #36	@ 0x24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b40:	d301      	bcc.n	8003b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b42:	2301      	movs	r3, #1
 8003b44:	e00f      	b.n	8003b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b46:	4a0a      	ldr	r2, [pc, #40]	@ (8003b70 <SysTick_Config+0x40>)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b4e:	210f      	movs	r1, #15
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295
 8003b54:	f7ff ff90 	bl	8003a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b58:	4b05      	ldr	r3, [pc, #20]	@ (8003b70 <SysTick_Config+0x40>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b5e:	4b04      	ldr	r3, [pc, #16]	@ (8003b70 <SysTick_Config+0x40>)
 8003b60:	2207      	movs	r2, #7
 8003b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	e000e010 	.word	0xe000e010

08003b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ff49 	bl	8003a14 <__NVIC_SetPriorityGrouping>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b086      	sub	sp, #24
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	4603      	mov	r3, r0
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b9c:	f7ff ff5e 	bl	8003a5c <__NVIC_GetPriorityGrouping>
 8003ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	6978      	ldr	r0, [r7, #20]
 8003ba8:	f7ff ff90 	bl	8003acc <NVIC_EncodePriority>
 8003bac:	4602      	mov	r2, r0
 8003bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff ff5f 	bl	8003a78 <__NVIC_SetPriority>
}
 8003bba:	bf00      	nop
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff ffb0 	bl	8003b30 <SysTick_Config>
 8003bd0:	4603      	mov	r3, r0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b08b      	sub	sp, #44	@ 0x2c
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bea:	2300      	movs	r3, #0
 8003bec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bee:	e169      	b.n	8003ec4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	f040 8158 	bne.w	8003ebe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4a9a      	ldr	r2, [pc, #616]	@ (8003e7c <HAL_GPIO_Init+0x2a0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d05e      	beq.n	8003cd6 <HAL_GPIO_Init+0xfa>
 8003c18:	4a98      	ldr	r2, [pc, #608]	@ (8003e7c <HAL_GPIO_Init+0x2a0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d875      	bhi.n	8003d0a <HAL_GPIO_Init+0x12e>
 8003c1e:	4a98      	ldr	r2, [pc, #608]	@ (8003e80 <HAL_GPIO_Init+0x2a4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d058      	beq.n	8003cd6 <HAL_GPIO_Init+0xfa>
 8003c24:	4a96      	ldr	r2, [pc, #600]	@ (8003e80 <HAL_GPIO_Init+0x2a4>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d86f      	bhi.n	8003d0a <HAL_GPIO_Init+0x12e>
 8003c2a:	4a96      	ldr	r2, [pc, #600]	@ (8003e84 <HAL_GPIO_Init+0x2a8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d052      	beq.n	8003cd6 <HAL_GPIO_Init+0xfa>
 8003c30:	4a94      	ldr	r2, [pc, #592]	@ (8003e84 <HAL_GPIO_Init+0x2a8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d869      	bhi.n	8003d0a <HAL_GPIO_Init+0x12e>
 8003c36:	4a94      	ldr	r2, [pc, #592]	@ (8003e88 <HAL_GPIO_Init+0x2ac>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d04c      	beq.n	8003cd6 <HAL_GPIO_Init+0xfa>
 8003c3c:	4a92      	ldr	r2, [pc, #584]	@ (8003e88 <HAL_GPIO_Init+0x2ac>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d863      	bhi.n	8003d0a <HAL_GPIO_Init+0x12e>
 8003c42:	4a92      	ldr	r2, [pc, #584]	@ (8003e8c <HAL_GPIO_Init+0x2b0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d046      	beq.n	8003cd6 <HAL_GPIO_Init+0xfa>
 8003c48:	4a90      	ldr	r2, [pc, #576]	@ (8003e8c <HAL_GPIO_Init+0x2b0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d85d      	bhi.n	8003d0a <HAL_GPIO_Init+0x12e>
 8003c4e:	2b12      	cmp	r3, #18
 8003c50:	d82a      	bhi.n	8003ca8 <HAL_GPIO_Init+0xcc>
 8003c52:	2b12      	cmp	r3, #18
 8003c54:	d859      	bhi.n	8003d0a <HAL_GPIO_Init+0x12e>
 8003c56:	a201      	add	r2, pc, #4	@ (adr r2, 8003c5c <HAL_GPIO_Init+0x80>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003cd7 	.word	0x08003cd7
 8003c60:	08003cb1 	.word	0x08003cb1
 8003c64:	08003cc3 	.word	0x08003cc3
 8003c68:	08003d05 	.word	0x08003d05
 8003c6c:	08003d0b 	.word	0x08003d0b
 8003c70:	08003d0b 	.word	0x08003d0b
 8003c74:	08003d0b 	.word	0x08003d0b
 8003c78:	08003d0b 	.word	0x08003d0b
 8003c7c:	08003d0b 	.word	0x08003d0b
 8003c80:	08003d0b 	.word	0x08003d0b
 8003c84:	08003d0b 	.word	0x08003d0b
 8003c88:	08003d0b 	.word	0x08003d0b
 8003c8c:	08003d0b 	.word	0x08003d0b
 8003c90:	08003d0b 	.word	0x08003d0b
 8003c94:	08003d0b 	.word	0x08003d0b
 8003c98:	08003d0b 	.word	0x08003d0b
 8003c9c:	08003d0b 	.word	0x08003d0b
 8003ca0:	08003cb9 	.word	0x08003cb9
 8003ca4:	08003ccd 	.word	0x08003ccd
 8003ca8:	4a79      	ldr	r2, [pc, #484]	@ (8003e90 <HAL_GPIO_Init+0x2b4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003cae:	e02c      	b.n	8003d0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	623b      	str	r3, [r7, #32]
          break;
 8003cb6:	e029      	b.n	8003d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	623b      	str	r3, [r7, #32]
          break;
 8003cc0:	e024      	b.n	8003d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	623b      	str	r3, [r7, #32]
          break;
 8003cca:	e01f      	b.n	8003d0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	623b      	str	r3, [r7, #32]
          break;
 8003cd4:	e01a      	b.n	8003d0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003cde:	2304      	movs	r3, #4
 8003ce0:	623b      	str	r3, [r7, #32]
          break;
 8003ce2:	e013      	b.n	8003d0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d105      	bne.n	8003cf8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cec:	2308      	movs	r3, #8
 8003cee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	611a      	str	r2, [r3, #16]
          break;
 8003cf6:	e009      	b.n	8003d0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	615a      	str	r2, [r3, #20]
          break;
 8003d02:	e003      	b.n	8003d0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d04:	2300      	movs	r3, #0
 8003d06:	623b      	str	r3, [r7, #32]
          break;
 8003d08:	e000      	b.n	8003d0c <HAL_GPIO_Init+0x130>
          break;
 8003d0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	2bff      	cmp	r3, #255	@ 0xff
 8003d10:	d801      	bhi.n	8003d16 <HAL_GPIO_Init+0x13a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	e001      	b.n	8003d1a <HAL_GPIO_Init+0x13e>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2bff      	cmp	r3, #255	@ 0xff
 8003d20:	d802      	bhi.n	8003d28 <HAL_GPIO_Init+0x14c>
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	e002      	b.n	8003d2e <HAL_GPIO_Init+0x152>
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	3b08      	subs	r3, #8
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	210f      	movs	r1, #15
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	401a      	ands	r2, r3
 8003d40:	6a39      	ldr	r1, [r7, #32]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	fa01 f303 	lsl.w	r3, r1, r3
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80b1 	beq.w	8003ebe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	4a4c      	ldr	r2, [pc, #304]	@ (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6193      	str	r3, [r2, #24]
 8003d68:	4b4a      	ldr	r3, [pc, #296]	@ (8003e94 <HAL_GPIO_Init+0x2b8>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003d74:	4a48      	ldr	r2, [pc, #288]	@ (8003e98 <HAL_GPIO_Init+0x2bc>)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	220f      	movs	r2, #15
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4013      	ands	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a40      	ldr	r2, [pc, #256]	@ (8003e9c <HAL_GPIO_Init+0x2c0>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d013      	beq.n	8003dc8 <HAL_GPIO_Init+0x1ec>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ea0 <HAL_GPIO_Init+0x2c4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00d      	beq.n	8003dc4 <HAL_GPIO_Init+0x1e8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a3e      	ldr	r2, [pc, #248]	@ (8003ea4 <HAL_GPIO_Init+0x2c8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d007      	beq.n	8003dc0 <HAL_GPIO_Init+0x1e4>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a3d      	ldr	r2, [pc, #244]	@ (8003ea8 <HAL_GPIO_Init+0x2cc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d101      	bne.n	8003dbc <HAL_GPIO_Init+0x1e0>
 8003db8:	2303      	movs	r3, #3
 8003dba:	e006      	b.n	8003dca <HAL_GPIO_Init+0x1ee>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	e004      	b.n	8003dca <HAL_GPIO_Init+0x1ee>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e002      	b.n	8003dca <HAL_GPIO_Init+0x1ee>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_GPIO_Init+0x1ee>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dcc:	f002 0203 	and.w	r2, r2, #3
 8003dd0:	0092      	lsls	r2, r2, #2
 8003dd2:	4093      	lsls	r3, r2
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003dda:	492f      	ldr	r1, [pc, #188]	@ (8003e98 <HAL_GPIO_Init+0x2bc>)
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	3302      	adds	r3, #2
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d006      	beq.n	8003e02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003df4:	4b2d      	ldr	r3, [pc, #180]	@ (8003eac <HAL_GPIO_Init+0x2d0>)
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	492c      	ldr	r1, [pc, #176]	@ (8003eac <HAL_GPIO_Init+0x2d0>)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	608b      	str	r3, [r1, #8]
 8003e00:	e006      	b.n	8003e10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e02:	4b2a      	ldr	r3, [pc, #168]	@ (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	4928      	ldr	r1, [pc, #160]	@ (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d006      	beq.n	8003e2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e1c:	4b23      	ldr	r3, [pc, #140]	@ (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	4922      	ldr	r1, [pc, #136]	@ (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60cb      	str	r3, [r1, #12]
 8003e28:	e006      	b.n	8003e38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e2a:	4b20      	ldr	r3, [pc, #128]	@ (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	43db      	mvns	r3, r3
 8003e32:	491e      	ldr	r1, [pc, #120]	@ (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d006      	beq.n	8003e52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e44:	4b19      	ldr	r3, [pc, #100]	@ (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	4918      	ldr	r1, [pc, #96]	@ (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
 8003e50:	e006      	b.n	8003e60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e52:	4b16      	ldr	r3, [pc, #88]	@ (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	4914      	ldr	r1, [pc, #80]	@ (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d021      	beq.n	8003eb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	490e      	ldr	r1, [pc, #56]	@ (8003eac <HAL_GPIO_Init+0x2d0>)
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	600b      	str	r3, [r1, #0]
 8003e78:	e021      	b.n	8003ebe <HAL_GPIO_Init+0x2e2>
 8003e7a:	bf00      	nop
 8003e7c:	10320000 	.word	0x10320000
 8003e80:	10310000 	.word	0x10310000
 8003e84:	10220000 	.word	0x10220000
 8003e88:	10210000 	.word	0x10210000
 8003e8c:	10120000 	.word	0x10120000
 8003e90:	10110000 	.word	0x10110000
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40010800 	.word	0x40010800
 8003ea0:	40010c00 	.word	0x40010c00
 8003ea4:	40011000 	.word	0x40011000
 8003ea8:	40011400 	.word	0x40011400
 8003eac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <HAL_GPIO_Init+0x304>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	4909      	ldr	r1, [pc, #36]	@ (8003ee0 <HAL_GPIO_Init+0x304>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f47f ae8e 	bne.w	8003bf0 <HAL_GPIO_Init+0x14>
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	372c      	adds	r7, #44	@ 0x2c
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	40010400 	.word	0x40010400

08003ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ef4:	787b      	ldrb	r3, [r7, #1]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003efa:	887a      	ldrh	r2, [r7, #2]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f00:	e003      	b.n	8003f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f02:	887b      	ldrh	r3, [r7, #2]
 8003f04:	041a      	lsls	r2, r3, #16
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	611a      	str	r2, [r3, #16]
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e272      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8087 	beq.w	8004042 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f34:	4b92      	ldr	r3, [pc, #584]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 030c 	and.w	r3, r3, #12
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d00c      	beq.n	8003f5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f40:	4b8f      	ldr	r3, [pc, #572]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 030c 	and.w	r3, r3, #12
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d112      	bne.n	8003f72 <HAL_RCC_OscConfig+0x5e>
 8003f4c:	4b8c      	ldr	r3, [pc, #560]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f58:	d10b      	bne.n	8003f72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5a:	4b89      	ldr	r3, [pc, #548]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d06c      	beq.n	8004040 <HAL_RCC_OscConfig+0x12c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d168      	bne.n	8004040 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e24c      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f7a:	d106      	bne.n	8003f8a <HAL_RCC_OscConfig+0x76>
 8003f7c:	4b80      	ldr	r3, [pc, #512]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a7f      	ldr	r2, [pc, #508]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	e02e      	b.n	8003fe8 <HAL_RCC_OscConfig+0xd4>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10c      	bne.n	8003fac <HAL_RCC_OscConfig+0x98>
 8003f92:	4b7b      	ldr	r3, [pc, #492]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a7a      	ldr	r2, [pc, #488]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003f98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	4b78      	ldr	r3, [pc, #480]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a77      	ldr	r2, [pc, #476]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fa4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e01d      	b.n	8003fe8 <HAL_RCC_OscConfig+0xd4>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0xbc>
 8003fb6:	4b72      	ldr	r3, [pc, #456]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a71      	ldr	r2, [pc, #452]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	4b6f      	ldr	r3, [pc, #444]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6e      	ldr	r2, [pc, #440]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	e00b      	b.n	8003fe8 <HAL_RCC_OscConfig+0xd4>
 8003fd0:	4b6b      	ldr	r3, [pc, #428]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a6a      	ldr	r2, [pc, #424]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	4b68      	ldr	r3, [pc, #416]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a67      	ldr	r2, [pc, #412]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8003fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fe6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d013      	beq.n	8004018 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff0:	f7ff f8b6 	bl	8003160 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff8:	f7ff f8b2 	bl	8003160 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	@ 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e200      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400a:	4b5d      	ldr	r3, [pc, #372]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f0      	beq.n	8003ff8 <HAL_RCC_OscConfig+0xe4>
 8004016:	e014      	b.n	8004042 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7ff f8a2 	bl	8003160 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004020:	f7ff f89e 	bl	8003160 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	@ 0x64
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e1ec      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004032:	4b53      	ldr	r3, [pc, #332]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x10c>
 800403e:	e000      	b.n	8004042 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d063      	beq.n	8004116 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800404e:	4b4c      	ldr	r3, [pc, #304]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00b      	beq.n	8004072 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800405a:	4b49      	ldr	r3, [pc, #292]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b08      	cmp	r3, #8
 8004064:	d11c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x18c>
 8004066:	4b46      	ldr	r3, [pc, #280]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d116      	bne.n	80040a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004072:	4b43      	ldr	r3, [pc, #268]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d005      	beq.n	800408a <HAL_RCC_OscConfig+0x176>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d001      	beq.n	800408a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e1c0      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408a:	4b3d      	ldr	r3, [pc, #244]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4939      	ldr	r1, [pc, #228]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 800409a:	4313      	orrs	r3, r2
 800409c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409e:	e03a      	b.n	8004116 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d020      	beq.n	80040ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a8:	4b36      	ldr	r3, [pc, #216]	@ (8004184 <HAL_RCC_OscConfig+0x270>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ae:	f7ff f857 	bl	8003160 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b6:	f7ff f853 	bl	8003160 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e1a1      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4927      	ldr	r1, [pc, #156]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	600b      	str	r3, [r1, #0]
 80040e8:	e015      	b.n	8004116 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ea:	4b26      	ldr	r3, [pc, #152]	@ (8004184 <HAL_RCC_OscConfig+0x270>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7ff f836 	bl	8003160 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f8:	f7ff f832 	bl	8003160 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e180      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410a:	4b1d      	ldr	r3, [pc, #116]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d03a      	beq.n	8004198 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d019      	beq.n	800415e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800412a:	4b17      	ldr	r3, [pc, #92]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 800412c:	2201      	movs	r2, #1
 800412e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004130:	f7ff f816 	bl	8003160 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004138:	f7ff f812 	bl	8003160 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e160      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414a:	4b0d      	ldr	r3, [pc, #52]	@ (8004180 <HAL_RCC_OscConfig+0x26c>)
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004156:	2001      	movs	r0, #1
 8004158:	f000 face 	bl	80046f8 <RCC_Delay>
 800415c:	e01c      	b.n	8004198 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800415e:	4b0a      	ldr	r3, [pc, #40]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004164:	f7fe fffc 	bl	8003160 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800416a:	e00f      	b.n	800418c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800416c:	f7fe fff8 	bl	8003160 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d908      	bls.n	800418c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e146      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000
 8004184:	42420000 	.word	0x42420000
 8004188:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800418c:	4b92      	ldr	r3, [pc, #584]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e9      	bne.n	800416c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 80a6 	beq.w	80042f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a6:	2300      	movs	r3, #0
 80041a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041aa:	4b8b      	ldr	r3, [pc, #556]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10d      	bne.n	80041d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b6:	4b88      	ldr	r3, [pc, #544]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	4a87      	ldr	r2, [pc, #540]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041c0:	61d3      	str	r3, [r2, #28]
 80041c2:	4b85      	ldr	r3, [pc, #532]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ca:	60bb      	str	r3, [r7, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ce:	2301      	movs	r3, #1
 80041d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d2:	4b82      	ldr	r3, [pc, #520]	@ (80043dc <HAL_RCC_OscConfig+0x4c8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d118      	bne.n	8004210 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041de:	4b7f      	ldr	r3, [pc, #508]	@ (80043dc <HAL_RCC_OscConfig+0x4c8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a7e      	ldr	r2, [pc, #504]	@ (80043dc <HAL_RCC_OscConfig+0x4c8>)
 80041e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ea:	f7fe ffb9 	bl	8003160 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f2:	f7fe ffb5 	bl	8003160 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b64      	cmp	r3, #100	@ 0x64
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e103      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004204:	4b75      	ldr	r3, [pc, #468]	@ (80043dc <HAL_RCC_OscConfig+0x4c8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d106      	bne.n	8004226 <HAL_RCC_OscConfig+0x312>
 8004218:	4b6f      	ldr	r3, [pc, #444]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	4a6e      	ldr	r2, [pc, #440]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6213      	str	r3, [r2, #32]
 8004224:	e02d      	b.n	8004282 <HAL_RCC_OscConfig+0x36e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10c      	bne.n	8004248 <HAL_RCC_OscConfig+0x334>
 800422e:	4b6a      	ldr	r3, [pc, #424]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	4a69      	ldr	r2, [pc, #420]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	6213      	str	r3, [r2, #32]
 800423a:	4b67      	ldr	r3, [pc, #412]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	4a66      	ldr	r2, [pc, #408]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 8004240:	f023 0304 	bic.w	r3, r3, #4
 8004244:	6213      	str	r3, [r2, #32]
 8004246:	e01c      	b.n	8004282 <HAL_RCC_OscConfig+0x36e>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	2b05      	cmp	r3, #5
 800424e:	d10c      	bne.n	800426a <HAL_RCC_OscConfig+0x356>
 8004250:	4b61      	ldr	r3, [pc, #388]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	4a60      	ldr	r2, [pc, #384]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 8004256:	f043 0304 	orr.w	r3, r3, #4
 800425a:	6213      	str	r3, [r2, #32]
 800425c:	4b5e      	ldr	r3, [pc, #376]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	4a5d      	ldr	r2, [pc, #372]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6213      	str	r3, [r2, #32]
 8004268:	e00b      	b.n	8004282 <HAL_RCC_OscConfig+0x36e>
 800426a:	4b5b      	ldr	r3, [pc, #364]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4a5a      	ldr	r2, [pc, #360]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	6213      	str	r3, [r2, #32]
 8004276:	4b58      	ldr	r3, [pc, #352]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	4a57      	ldr	r2, [pc, #348]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 800427c:	f023 0304 	bic.w	r3, r3, #4
 8004280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d015      	beq.n	80042b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428a:	f7fe ff69 	bl	8003160 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fe ff65 	bl	8003160 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e0b1      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a8:	4b4b      	ldr	r3, [pc, #300]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ee      	beq.n	8004292 <HAL_RCC_OscConfig+0x37e>
 80042b4:	e014      	b.n	80042e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b6:	f7fe ff53 	bl	8003160 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fe ff4f 	bl	8003160 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e09b      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d4:	4b40      	ldr	r3, [pc, #256]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ee      	bne.n	80042be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d105      	bne.n	80042f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e6:	4b3c      	ldr	r3, [pc, #240]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	4a3b      	ldr	r2, [pc, #236]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 80042ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 8087 	beq.w	800440a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042fc:	4b36      	ldr	r3, [pc, #216]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 030c 	and.w	r3, r3, #12
 8004304:	2b08      	cmp	r3, #8
 8004306:	d061      	beq.n	80043cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d146      	bne.n	800439e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004310:	4b33      	ldr	r3, [pc, #204]	@ (80043e0 <HAL_RCC_OscConfig+0x4cc>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004316:	f7fe ff23 	bl	8003160 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800431e:	f7fe ff1f 	bl	8003160 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e06d      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004330:	4b29      	ldr	r3, [pc, #164]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f0      	bne.n	800431e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004344:	d108      	bne.n	8004358 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004346:	4b24      	ldr	r3, [pc, #144]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	4921      	ldr	r1, [pc, #132]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004358:	4b1f      	ldr	r3, [pc, #124]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a19      	ldr	r1, [r3, #32]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	430b      	orrs	r3, r1
 800436a:	491b      	ldr	r1, [pc, #108]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 800436c:	4313      	orrs	r3, r2
 800436e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004370:	4b1b      	ldr	r3, [pc, #108]	@ (80043e0 <HAL_RCC_OscConfig+0x4cc>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004376:	f7fe fef3 	bl	8003160 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437e:	f7fe feef 	bl	8003160 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e03d      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004390:	4b11      	ldr	r3, [pc, #68]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x46a>
 800439c:	e035      	b.n	800440a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b10      	ldr	r3, [pc, #64]	@ (80043e0 <HAL_RCC_OscConfig+0x4cc>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fe fedc 	bl	8003160 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fe fed8 	bl	8003160 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e026      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043be:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x498>
 80043ca:	e01e      	b.n	800440a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d107      	bne.n	80043e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e019      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
 80043d8:	40021000 	.word	0x40021000
 80043dc:	40007000 	.word	0x40007000
 80043e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004414 <HAL_RCC_OscConfig+0x500>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d001      	beq.n	800440a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3718      	adds	r7, #24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40021000 	.word	0x40021000

08004418 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0d0      	b.n	80045ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800442c:	4b6a      	ldr	r3, [pc, #424]	@ (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d910      	bls.n	800445c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443a:	4b67      	ldr	r3, [pc, #412]	@ (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 0207 	bic.w	r2, r3, #7
 8004442:	4965      	ldr	r1, [pc, #404]	@ (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800444a:	4b63      	ldr	r3, [pc, #396]	@ (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d001      	beq.n	800445c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e0b8      	b.n	80045ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d020      	beq.n	80044aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004474:	4b59      	ldr	r3, [pc, #356]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	4a58      	ldr	r2, [pc, #352]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 800447a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800447e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800448c:	4b53      	ldr	r3, [pc, #332]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4a52      	ldr	r2, [pc, #328]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 8004492:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004496:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004498:	4b50      	ldr	r3, [pc, #320]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	494d      	ldr	r1, [pc, #308]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d040      	beq.n	8004538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d107      	bne.n	80044ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044be:	4b47      	ldr	r3, [pc, #284]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d115      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e07f      	b.n	80045ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d107      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044d6:	4b41      	ldr	r3, [pc, #260]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e073      	b.n	80045ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e6:	4b3d      	ldr	r3, [pc, #244]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e06b      	b.n	80045ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044f6:	4b39      	ldr	r3, [pc, #228]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f023 0203 	bic.w	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	4936      	ldr	r1, [pc, #216]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004508:	f7fe fe2a 	bl	8003160 <HAL_GetTick>
 800450c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450e:	e00a      	b.n	8004526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004510:	f7fe fe26 	bl	8003160 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e053      	b.n	80045ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004526:	4b2d      	ldr	r3, [pc, #180]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 020c 	and.w	r2, r3, #12
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	429a      	cmp	r2, r3
 8004536:	d1eb      	bne.n	8004510 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004538:	4b27      	ldr	r3, [pc, #156]	@ (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	429a      	cmp	r2, r3
 8004544:	d210      	bcs.n	8004568 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004546:	4b24      	ldr	r3, [pc, #144]	@ (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 0207 	bic.w	r2, r3, #7
 800454e:	4922      	ldr	r1, [pc, #136]	@ (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	4313      	orrs	r3, r2
 8004554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	4b20      	ldr	r3, [pc, #128]	@ (80045d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e032      	b.n	80045ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004574:	4b19      	ldr	r3, [pc, #100]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	4916      	ldr	r1, [pc, #88]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 8004582:	4313      	orrs	r3, r2
 8004584:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d009      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004592:	4b12      	ldr	r3, [pc, #72]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	490e      	ldr	r1, [pc, #56]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045a6:	f000 f821 	bl	80045ec <HAL_RCC_GetSysClockFreq>
 80045aa:	4602      	mov	r2, r0
 80045ac:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <HAL_RCC_ClockConfig+0x1c4>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	091b      	lsrs	r3, r3, #4
 80045b2:	f003 030f 	and.w	r3, r3, #15
 80045b6:	490a      	ldr	r1, [pc, #40]	@ (80045e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045b8:	5ccb      	ldrb	r3, [r1, r3]
 80045ba:	fa22 f303 	lsr.w	r3, r2, r3
 80045be:	4a09      	ldr	r2, [pc, #36]	@ (80045e4 <HAL_RCC_ClockConfig+0x1cc>)
 80045c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045c2:	4b09      	ldr	r3, [pc, #36]	@ (80045e8 <HAL_RCC_ClockConfig+0x1d0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fe fd88 	bl	80030dc <HAL_InitTick>

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40022000 	.word	0x40022000
 80045dc:	40021000 	.word	0x40021000
 80045e0:	0800b304 	.word	0x0800b304
 80045e4:	200000c0 	.word	0x200000c0
 80045e8:	200000c4 	.word	0x200000c4

080045ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	2300      	movs	r3, #0
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	2300      	movs	r3, #0
 8004600:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004606:	4b1e      	ldr	r3, [pc, #120]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x94>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b04      	cmp	r3, #4
 8004614:	d002      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0x30>
 8004616:	2b08      	cmp	r3, #8
 8004618:	d003      	beq.n	8004622 <HAL_RCC_GetSysClockFreq+0x36>
 800461a:	e027      	b.n	800466c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800461c:	4b19      	ldr	r3, [pc, #100]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x98>)
 800461e:	613b      	str	r3, [r7, #16]
      break;
 8004620:	e027      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	0c9b      	lsrs	r3, r3, #18
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	4a17      	ldr	r2, [pc, #92]	@ (8004688 <HAL_RCC_GetSysClockFreq+0x9c>)
 800462c:	5cd3      	ldrb	r3, [r2, r3]
 800462e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d010      	beq.n	800465c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800463a:	4b11      	ldr	r3, [pc, #68]	@ (8004680 <HAL_RCC_GetSysClockFreq+0x94>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	0c5b      	lsrs	r3, r3, #17
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	4a11      	ldr	r2, [pc, #68]	@ (800468c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004646:	5cd3      	ldrb	r3, [r2, r3]
 8004648:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a0d      	ldr	r2, [pc, #52]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x98>)
 800464e:	fb03 f202 	mul.w	r2, r3, r2
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	fbb2 f3f3 	udiv	r3, r2, r3
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	e004      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a0c      	ldr	r2, [pc, #48]	@ (8004690 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004660:	fb02 f303 	mul.w	r3, r2, r3
 8004664:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	613b      	str	r3, [r7, #16]
      break;
 800466a:	e002      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800466c:	4b05      	ldr	r3, [pc, #20]	@ (8004684 <HAL_RCC_GetSysClockFreq+0x98>)
 800466e:	613b      	str	r3, [r7, #16]
      break;
 8004670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004672:	693b      	ldr	r3, [r7, #16]
}
 8004674:	4618      	mov	r0, r3
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000
 8004684:	007a1200 	.word	0x007a1200
 8004688:	0800b31c 	.word	0x0800b31c
 800468c:	0800b32c 	.word	0x0800b32c
 8004690:	003d0900 	.word	0x003d0900

08004694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004698:	4b02      	ldr	r3, [pc, #8]	@ (80046a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800469a:	681b      	ldr	r3, [r3, #0]
}
 800469c:	4618      	mov	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr
 80046a4:	200000c0 	.word	0x200000c0

080046a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046ac:	f7ff fff2 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 80046b0:	4602      	mov	r2, r0
 80046b2:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	4903      	ldr	r1, [pc, #12]	@ (80046cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046be:	5ccb      	ldrb	r3, [r1, r3]
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40021000 	.word	0x40021000
 80046cc:	0800b314 	.word	0x0800b314

080046d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046d4:	f7ff ffde 	bl	8004694 <HAL_RCC_GetHCLKFreq>
 80046d8:	4602      	mov	r2, r0
 80046da:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	0adb      	lsrs	r3, r3, #11
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	4903      	ldr	r1, [pc, #12]	@ (80046f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046e6:	5ccb      	ldrb	r3, [r1, r3]
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000
 80046f4:	0800b314 	.word	0x0800b314

080046f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004700:	4b0a      	ldr	r3, [pc, #40]	@ (800472c <RCC_Delay+0x34>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a0a      	ldr	r2, [pc, #40]	@ (8004730 <RCC_Delay+0x38>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	0a5b      	lsrs	r3, r3, #9
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004714:	bf00      	nop
  }
  while (Delay --);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	1e5a      	subs	r2, r3, #1
 800471a:	60fa      	str	r2, [r7, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f9      	bne.n	8004714 <RCC_Delay+0x1c>
}
 8004720:	bf00      	nop
 8004722:	bf00      	nop
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr
 800472c:	200000c0 	.word	0x200000c0
 8004730:	10624dd3 	.word	0x10624dd3

08004734 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d07d      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004750:	2300      	movs	r3, #0
 8004752:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004754:	4b4f      	ldr	r3, [pc, #316]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10d      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004760:	4b4c      	ldr	r3, [pc, #304]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	4a4b      	ldr	r2, [pc, #300]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800476a:	61d3      	str	r3, [r2, #28]
 800476c:	4b49      	ldr	r3, [pc, #292]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004778:	2301      	movs	r3, #1
 800477a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477c:	4b46      	ldr	r3, [pc, #280]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d118      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004788:	4b43      	ldr	r3, [pc, #268]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a42      	ldr	r2, [pc, #264]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800478e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004792:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004794:	f7fe fce4 	bl	8003160 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479a:	e008      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479c:	f7fe fce0 	bl	8003160 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	@ 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e06d      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ae:	4b3a      	ldr	r3, [pc, #232]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047ba:	4b36      	ldr	r3, [pc, #216]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d02e      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d027      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e2:	4b2e      	ldr	r3, [pc, #184]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047e8:	4b2c      	ldr	r3, [pc, #176]	@ (800489c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047ee:	4a29      	ldr	r2, [pc, #164]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d014      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fe:	f7fe fcaf 	bl	8003160 <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004804:	e00a      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004806:	f7fe fcab 	bl	8003160 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e036      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481c:	4b1d      	ldr	r3, [pc, #116]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0ee      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004828:	4b1a      	ldr	r3, [pc, #104]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4917      	ldr	r1, [pc, #92]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004836:	4313      	orrs	r3, r2
 8004838:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800483a:	7dfb      	ldrb	r3, [r7, #23]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d105      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004840:	4b14      	ldr	r3, [pc, #80]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	4a13      	ldr	r2, [pc, #76]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800484a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004858:	4b0e      	ldr	r3, [pc, #56]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	490b      	ldr	r1, [pc, #44]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004866:	4313      	orrs	r3, r2
 8004868:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004876:	4b07      	ldr	r3, [pc, #28]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	4904      	ldr	r1, [pc, #16]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004884:	4313      	orrs	r3, r2
 8004886:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40021000 	.word	0x40021000
 8004898:	40007000 	.word	0x40007000
 800489c:	42420440 	.word	0x42420440

080048a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
 80048ac:	2300      	movs	r3, #0
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	2300      	movs	r3, #0
 80048b2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	2300      	movs	r3, #0
 80048ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b10      	cmp	r3, #16
 80048c0:	d00a      	beq.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	f200 808a 	bhi.w	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d045      	beq.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d075      	beq.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80048d6:	e082      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80048d8:	4b46      	ldr	r3, [pc, #280]	@ (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80048de:	4b45      	ldr	r3, [pc, #276]	@ (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d07b      	beq.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	0c9b      	lsrs	r3, r3, #18
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	4a41      	ldr	r2, [pc, #260]	@ (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80048f4:	5cd3      	ldrb	r3, [r2, r3]
 80048f6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d015      	beq.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004902:	4b3c      	ldr	r3, [pc, #240]	@ (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	0c5b      	lsrs	r3, r3, #17
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	4a3b      	ldr	r2, [pc, #236]	@ (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800490e:	5cd3      	ldrb	r3, [r2, r3]
 8004910:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00d      	beq.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800491c:	4a38      	ldr	r2, [pc, #224]	@ (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	fbb2 f2f3 	udiv	r2, r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	fb02 f303 	mul.w	r3, r2, r3
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	e004      	b.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	4a34      	ldr	r2, [pc, #208]	@ (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004938:	4b2e      	ldr	r3, [pc, #184]	@ (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004940:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004944:	d102      	bne.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	61bb      	str	r3, [r7, #24]
      break;
 800494a:	e04a      	b.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	4a2d      	ldr	r2, [pc, #180]	@ (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	61bb      	str	r3, [r7, #24]
      break;
 800495a:	e042      	b.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800495c:	4b25      	ldr	r3, [pc, #148]	@ (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800496c:	d108      	bne.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004978:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	e01f      	b.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004986:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800498a:	d109      	bne.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800498c:	4b19      	ldr	r3, [pc, #100]	@ (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800498e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004998:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	e00f      	b.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049aa:	d11c      	bne.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80049ac:	4b11      	ldr	r3, [pc, #68]	@ (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d016      	beq.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80049b8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80049bc:	61bb      	str	r3, [r7, #24]
      break;
 80049be:	e012      	b.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80049c0:	e011      	b.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80049c2:	f7ff fe85 	bl	80046d0 <HAL_RCC_GetPCLK2Freq>
 80049c6:	4602      	mov	r2, r0
 80049c8:	4b0a      	ldr	r3, [pc, #40]	@ (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	0b9b      	lsrs	r3, r3, #14
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	3301      	adds	r3, #1
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049da:	61bb      	str	r3, [r7, #24]
      break;
 80049dc:	e004      	b.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049de:	bf00      	nop
 80049e0:	e002      	b.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049e2:	bf00      	nop
 80049e4:	e000      	b.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049e6:	bf00      	nop
    }
  }
  return (frequency);
 80049e8:	69bb      	ldr	r3, [r7, #24]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40021000 	.word	0x40021000
 80049f8:	0800b330 	.word	0x0800b330
 80049fc:	0800b340 	.word	0x0800b340
 8004a00:	007a1200 	.word	0x007a1200
 8004a04:	003d0900 	.word	0x003d0900
 8004a08:	aaaaaaab 	.word	0xaaaaaaab

08004a0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e076      	b.n	8004b0c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d108      	bne.n	8004a38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a2e:	d009      	beq.n	8004a44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	61da      	str	r2, [r3, #28]
 8004a36:	e005      	b.n	8004a44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fe f888 	bl	8002b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac8:	ea42 0103 	orr.w	r1, r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	0c1a      	lsrs	r2, r3, #16
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f002 0204 	and.w	r2, r2, #4
 8004aea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69da      	ldr	r2, [r3, #28]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004afa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_SPI_Transmit+0x22>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e12d      	b.n	8004d92 <HAL_SPI_Transmit+0x27e>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b3e:	f7fe fb0f 	bl	8003160 <HAL_GetTick>
 8004b42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d002      	beq.n	8004b5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b54:	2302      	movs	r3, #2
 8004b56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b58:	e116      	b.n	8004d88 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_SPI_Transmit+0x52>
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b6a:	e10d      	b.n	8004d88 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2203      	movs	r2, #3
 8004b70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	88fa      	ldrh	r2, [r7, #6]
 8004b84:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	88fa      	ldrh	r2, [r7, #6]
 8004b8a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bb2:	d10f      	bne.n	8004bd4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bd2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bde:	2b40      	cmp	r3, #64	@ 0x40
 8004be0:	d007      	beq.n	8004bf2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bfa:	d14f      	bne.n	8004c9c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_SPI_Transmit+0xf6>
 8004c04:	8afb      	ldrh	r3, [r7, #22]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d142      	bne.n	8004c90 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	881a      	ldrh	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1a:	1c9a      	adds	r2, r3, #2
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c2e:	e02f      	b.n	8004c90 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d112      	bne.n	8004c64 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c42:	881a      	ldrh	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4e:	1c9a      	adds	r2, r3, #2
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004c62:	e015      	b.n	8004c90 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c64:	f7fe fa7c 	bl	8003160 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d803      	bhi.n	8004c7c <HAL_SPI_Transmit+0x168>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d102      	bne.n	8004c82 <HAL_SPI_Transmit+0x16e>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004c8e:	e07b      	b.n	8004d88 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1ca      	bne.n	8004c30 <HAL_SPI_Transmit+0x11c>
 8004c9a:	e050      	b.n	8004d3e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_SPI_Transmit+0x196>
 8004ca4:	8afb      	ldrh	r3, [r7, #22]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d144      	bne.n	8004d34 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	330c      	adds	r3, #12
 8004cb4:	7812      	ldrb	r2, [r2, #0]
 8004cb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cd0:	e030      	b.n	8004d34 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d113      	bne.n	8004d08 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d06:	e015      	b.n	8004d34 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d08:	f7fe fa2a 	bl	8003160 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d803      	bhi.n	8004d20 <HAL_SPI_Transmit+0x20c>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d102      	bne.n	8004d26 <HAL_SPI_Transmit+0x212>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d106      	bne.n	8004d34 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004d32:	e029      	b.n	8004d88 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1c9      	bne.n	8004cd2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	6839      	ldr	r1, [r7, #0]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 fbd8 	bl	80054f8 <SPI_EndRxTxTransaction>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2220      	movs	r2, #32
 8004d52:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	613b      	str	r3, [r7, #16]
 8004d70:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e003      	b.n	8004d88 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004d90:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3720      	adds	r7, #32
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b088      	sub	sp, #32
 8004d9e:	af02      	add	r7, sp, #8
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	4613      	mov	r3, r2
 8004da8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d002      	beq.n	8004dc0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dbe:	e0fb      	b.n	8004fb8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dc8:	d112      	bne.n	8004df0 <HAL_SPI_Receive+0x56>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10e      	bne.n	8004df0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004dda:	88fa      	ldrh	r2, [r7, #6]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f8ef 	bl	8004fca <HAL_SPI_TransmitReceive>
 8004dec:	4603      	mov	r3, r0
 8004dee:	e0e8      	b.n	8004fc2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_SPI_Receive+0x64>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e0e1      	b.n	8004fc2 <HAL_SPI_Receive+0x228>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e06:	f7fe f9ab 	bl	8003160 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_SPI_Receive+0x7e>
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d102      	bne.n	8004e1e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e1c:	e0cc      	b.n	8004fb8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2204      	movs	r2, #4
 8004e22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	88fa      	ldrh	r2, [r7, #6]
 8004e36:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	88fa      	ldrh	r2, [r7, #6]
 8004e3c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e64:	d10f      	bne.n	8004e86 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e84:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e90:	2b40      	cmp	r3, #64	@ 0x40
 8004e92:	d007      	beq.n	8004ea4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ea2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d16a      	bne.n	8004f82 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004eac:	e032      	b.n	8004f14 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d115      	bne.n	8004ee8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f103 020c 	add.w	r2, r3, #12
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec8:	7812      	ldrb	r2, [r2, #0]
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ee6:	e015      	b.n	8004f14 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ee8:	f7fe f93a 	bl	8003160 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d803      	bhi.n	8004f00 <HAL_SPI_Receive+0x166>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	d102      	bne.n	8004f06 <HAL_SPI_Receive+0x16c>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004f12:	e051      	b.n	8004fb8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1c7      	bne.n	8004eae <HAL_SPI_Receive+0x114>
 8004f1e:	e035      	b.n	8004f8c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d113      	bne.n	8004f56 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f38:	b292      	uxth	r2, r2
 8004f3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f40:	1c9a      	adds	r2, r3, #2
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004f54:	e015      	b.n	8004f82 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f56:	f7fe f903 	bl	8003160 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d803      	bhi.n	8004f6e <HAL_SPI_Receive+0x1d4>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d102      	bne.n	8004f74 <HAL_SPI_Receive+0x1da>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004f80:	e01a      	b.n	8004fb8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1c9      	bne.n	8004f20 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	6839      	ldr	r1, [r7, #0]
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fa5f 	bl	8005454 <SPI_EndRxTransaction>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	75fb      	strb	r3, [r7, #23]
 8004fae:	e003      	b.n	8004fb8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b08c      	sub	sp, #48	@ 0x30
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
 8004fd6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_SPI_TransmitReceive+0x26>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e198      	b.n	8005322 <HAL_SPI_TransmitReceive+0x358>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ff8:	f7fe f8b2 	bl	8003160 <HAL_GetTick>
 8004ffc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005004:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800500e:	887b      	ldrh	r3, [r7, #2]
 8005010:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005012:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005016:	2b01      	cmp	r3, #1
 8005018:	d00f      	beq.n	800503a <HAL_SPI_TransmitReceive+0x70>
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005020:	d107      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x68>
 800502a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800502e:	2b04      	cmp	r3, #4
 8005030:	d003      	beq.n	800503a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005032:	2302      	movs	r3, #2
 8005034:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005038:	e16d      	b.n	8005316 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_SPI_TransmitReceive+0x82>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_SPI_TransmitReceive+0x82>
 8005046:	887b      	ldrh	r3, [r7, #2]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005052:	e160      	b.n	8005316 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b04      	cmp	r3, #4
 800505e:	d003      	beq.n	8005068 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2205      	movs	r2, #5
 8005064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	887a      	ldrh	r2, [r7, #2]
 8005078:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	887a      	ldrh	r2, [r7, #2]
 800507e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	887a      	ldrh	r2, [r7, #2]
 800508a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	887a      	ldrh	r2, [r7, #2]
 8005090:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a8:	2b40      	cmp	r3, #64	@ 0x40
 80050aa:	d007      	beq.n	80050bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050c4:	d17c      	bne.n	80051c0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_SPI_TransmitReceive+0x10a>
 80050ce:	8b7b      	ldrh	r3, [r7, #26]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d16a      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d8:	881a      	ldrh	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e4:	1c9a      	adds	r2, r3, #2
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f8:	e057      	b.n	80051aa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b02      	cmp	r3, #2
 8005106:	d11b      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x176>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <HAL_SPI_TransmitReceive+0x176>
 8005112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d113      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511c:	881a      	ldrh	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005128:	1c9a      	adds	r2, r3, #2
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b01      	cmp	r3, #1
 800514c:	d119      	bne.n	8005182 <HAL_SPI_TransmitReceive+0x1b8>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d014      	beq.n	8005182 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	b292      	uxth	r2, r2
 8005164:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516a:	1c9a      	adds	r2, r3, #2
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800517e:	2301      	movs	r3, #1
 8005180:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005182:	f7fd ffed 	bl	8003160 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800518e:	429a      	cmp	r2, r3
 8005190:	d80b      	bhi.n	80051aa <HAL_SPI_TransmitReceive+0x1e0>
 8005192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d007      	beq.n	80051aa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80051a8:	e0b5      	b.n	8005316 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1a2      	bne.n	80050fa <HAL_SPI_TransmitReceive+0x130>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d19d      	bne.n	80050fa <HAL_SPI_TransmitReceive+0x130>
 80051be:	e080      	b.n	80052c2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_SPI_TransmitReceive+0x204>
 80051c8:	8b7b      	ldrh	r3, [r7, #26]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d16f      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	330c      	adds	r3, #12
 80051d8:	7812      	ldrb	r2, [r2, #0]
 80051da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f4:	e05b      	b.n	80052ae <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b02      	cmp	r3, #2
 8005202:	d11c      	bne.n	800523e <HAL_SPI_TransmitReceive+0x274>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d017      	beq.n	800523e <HAL_SPI_TransmitReceive+0x274>
 800520e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d114      	bne.n	800523e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	330c      	adds	r3, #12
 800521e:	7812      	ldrb	r2, [r2, #0]
 8005220:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b01      	cmp	r3, #1
 800524a:	d119      	bne.n	8005280 <HAL_SPI_TransmitReceive+0x2b6>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d014      	beq.n	8005280 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800527c:	2301      	movs	r3, #1
 800527e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005280:	f7fd ff6e 	bl	8003160 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800528c:	429a      	cmp	r2, r3
 800528e:	d803      	bhi.n	8005298 <HAL_SPI_TransmitReceive+0x2ce>
 8005290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d102      	bne.n	800529e <HAL_SPI_TransmitReceive+0x2d4>
 8005298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529a:	2b00      	cmp	r3, #0
 800529c:	d107      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80052ac:	e033      	b.n	8005316 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d19e      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x22c>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d199      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 f916 	bl	80054f8 <SPI_EndRxTxTransaction>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d006      	beq.n	80052e0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2220      	movs	r2, #32
 80052dc:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80052de:	e01a      	b.n	8005316 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052e8:	2300      	movs	r3, #0
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800530c:	e003      	b.n	8005316 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800531e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005322:	4618      	mov	r0, r3
 8005324:	3730      	adds	r7, #48	@ 0x30
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005338:	b2db      	uxtb	r3, r3
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005354:	f7fd ff04 	bl	8003160 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535c:	1a9b      	subs	r3, r3, r2
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	4413      	add	r3, r2
 8005362:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005364:	f7fd fefc 	bl	8003160 <HAL_GetTick>
 8005368:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800536a:	4b39      	ldr	r3, [pc, #228]	@ (8005450 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	015b      	lsls	r3, r3, #5
 8005370:	0d1b      	lsrs	r3, r3, #20
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	fb02 f303 	mul.w	r3, r2, r3
 8005378:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800537a:	e054      	b.n	8005426 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005382:	d050      	beq.n	8005426 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005384:	f7fd feec 	bl	8003160 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	429a      	cmp	r2, r3
 8005392:	d902      	bls.n	800539a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d13d      	bne.n	8005416 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053b2:	d111      	bne.n	80053d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053bc:	d004      	beq.n	80053c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053c6:	d107      	bne.n	80053d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e0:	d10f      	bne.n	8005402 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005400:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e017      	b.n	8005446 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	3b01      	subs	r3, #1
 8005424:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4013      	ands	r3, r2
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	429a      	cmp	r2, r3
 8005434:	bf0c      	ite	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	2300      	movne	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	461a      	mov	r2, r3
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	429a      	cmp	r2, r3
 8005442:	d19b      	bne.n	800537c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3720      	adds	r7, #32
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	200000c0 	.word	0x200000c0

08005454 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af02      	add	r7, sp, #8
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005468:	d111      	bne.n	800548e <SPI_EndRxTransaction+0x3a>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005472:	d004      	beq.n	800547e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800547c:	d107      	bne.n	800548e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800548c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005496:	d117      	bne.n	80054c8 <SPI_EndRxTransaction+0x74>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a0:	d112      	bne.n	80054c8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2200      	movs	r2, #0
 80054aa:	2101      	movs	r1, #1
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f7ff ff49 	bl	8005344 <SPI_WaitFlagStateUntilTimeout>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01a      	beq.n	80054ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054bc:	f043 0220 	orr.w	r2, r3, #32
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e013      	b.n	80054f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2200      	movs	r2, #0
 80054d0:	2180      	movs	r1, #128	@ 0x80
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f7ff ff36 	bl	8005344 <SPI_WaitFlagStateUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e2:	f043 0220 	orr.w	r2, r3, #32
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e000      	b.n	80054f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2200      	movs	r2, #0
 800550c:	2180      	movs	r1, #128	@ 0x80
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f7ff ff18 	bl	8005344 <SPI_WaitFlagStateUntilTimeout>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800551e:	f043 0220 	orr.w	r2, r3, #32
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e000      	b.n	800552c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e042      	b.n	80055cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fd fcde 	bl	8002f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2224      	movs	r2, #36	@ 0x24
 8005564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f9af 	bl	80058dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800558c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800559c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	@ 0x28
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	4613      	mov	r3, r2
 80055e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d16d      	bne.n	80056d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_UART_Transmit+0x2c>
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e066      	b.n	80056d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2221      	movs	r2, #33	@ 0x21
 800560e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005612:	f7fd fda5 	bl	8003160 <HAL_GetTick>
 8005616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	88fa      	ldrh	r2, [r7, #6]
 800561c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	88fa      	ldrh	r2, [r7, #6]
 8005622:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800562c:	d108      	bne.n	8005640 <HAL_UART_Transmit+0x6c>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d104      	bne.n	8005640 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005636:	2300      	movs	r3, #0
 8005638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	61bb      	str	r3, [r7, #24]
 800563e:	e003      	b.n	8005648 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005644:	2300      	movs	r3, #0
 8005646:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005648:	e02a      	b.n	80056a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2200      	movs	r2, #0
 8005652:	2180      	movs	r1, #128	@ 0x80
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f8d2 	bl	80057fe <UART_WaitOnFlagUntilTimeout>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e036      	b.n	80056d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10b      	bne.n	8005682 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005678:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	3302      	adds	r3, #2
 800567e:	61bb      	str	r3, [r7, #24]
 8005680:	e007      	b.n	8005692 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	781a      	ldrb	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	3301      	adds	r3, #1
 8005690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005696:	b29b      	uxth	r3, r3
 8005698:	3b01      	subs	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1cf      	bne.n	800564a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2200      	movs	r2, #0
 80056b2:	2140      	movs	r1, #64	@ 0x40
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f8a2 	bl	80057fe <UART_WaitOnFlagUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e006      	b.n	80056d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2220      	movs	r2, #32
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	e000      	b.n	80056d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80056d0:	2302      	movs	r3, #2
  }
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3720      	adds	r7, #32
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b08a      	sub	sp, #40	@ 0x28
 80056de:	af02      	add	r7, sp, #8
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	603b      	str	r3, [r7, #0]
 80056e6:	4613      	mov	r3, r2
 80056e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	d17c      	bne.n	80057f4 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <HAL_UART_Receive+0x2c>
 8005700:	88fb      	ldrh	r3, [r7, #6]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e075      	b.n	80057f6 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2222      	movs	r2, #34	@ 0x22
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800571e:	f7fd fd1f 	bl	8003160 <HAL_GetTick>
 8005722:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	88fa      	ldrh	r2, [r7, #6]
 8005728:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	88fa      	ldrh	r2, [r7, #6]
 800572e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005738:	d108      	bne.n	800574c <HAL_UART_Receive+0x72>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d104      	bne.n	800574c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	61bb      	str	r3, [r7, #24]
 800574a:	e003      	b.n	8005754 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005750:	2300      	movs	r3, #0
 8005752:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005754:	e043      	b.n	80057de <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2200      	movs	r2, #0
 800575e:	2120      	movs	r1, #32
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 f84c 	bl	80057fe <UART_WaitOnFlagUntilTimeout>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e042      	b.n	80057f6 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10c      	bne.n	8005790 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005782:	b29a      	uxth	r2, r3
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	3302      	adds	r3, #2
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	e01f      	b.n	80057d0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005798:	d007      	beq.n	80057aa <HAL_UART_Receive+0xd0>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <HAL_UART_Receive+0xde>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d106      	bne.n	80057b8 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	e008      	b.n	80057ca <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	3301      	adds	r3, #1
 80057ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1b6      	bne.n	8005756 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e000      	b.n	80057f6 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
  }
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b090      	sub	sp, #64	@ 0x40
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	603b      	str	r3, [r7, #0]
 800580a:	4613      	mov	r3, r2
 800580c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800580e:	e050      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005816:	d04c      	beq.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <UART_WaitOnFlagUntilTimeout+0x30>
 800581e:	f7fd fc9f 	bl	8003160 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800582a:	429a      	cmp	r2, r3
 800582c:	d241      	bcs.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	330c      	adds	r3, #12
 8005834:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	330c      	adds	r3, #12
 800584c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800584e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005850:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005854:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800585c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e5      	bne.n	800582e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3314      	adds	r3, #20
 8005868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	613b      	str	r3, [r7, #16]
   return(result);
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f023 0301 	bic.w	r3, r3, #1
 8005878:	63bb      	str	r3, [r7, #56]	@ 0x38
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3314      	adds	r3, #20
 8005880:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005882:	623a      	str	r2, [r7, #32]
 8005884:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	69f9      	ldr	r1, [r7, #28]
 8005888:	6a3a      	ldr	r2, [r7, #32]
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e5      	bne.n	8005862 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2220      	movs	r2, #32
 800589a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e00f      	b.n	80058d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4013      	ands	r3, r2
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	429a      	cmp	r2, r3
 80058c0:	bf0c      	ite	eq
 80058c2:	2301      	moveq	r3, #1
 80058c4:	2300      	movne	r3, #0
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d09f      	beq.n	8005810 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3740      	adds	r7, #64	@ 0x40
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005916:	f023 030c 	bic.w	r3, r3, #12
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6812      	ldr	r2, [r2, #0]
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	430b      	orrs	r3, r1
 8005922:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a2c      	ldr	r2, [pc, #176]	@ (80059f0 <UART_SetConfig+0x114>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d103      	bne.n	800594c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005944:	f7fe fec4 	bl	80046d0 <HAL_RCC_GetPCLK2Freq>
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	e002      	b.n	8005952 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800594c:	f7fe feac 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 8005950:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009a      	lsls	r2, r3, #2
 800595c:	441a      	add	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	4a22      	ldr	r2, [pc, #136]	@ (80059f4 <UART_SetConfig+0x118>)
 800596a:	fba2 2303 	umull	r2, r3, r2, r3
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	0119      	lsls	r1, r3, #4
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	009a      	lsls	r2, r3, #2
 800597c:	441a      	add	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	fbb2 f2f3 	udiv	r2, r2, r3
 8005988:	4b1a      	ldr	r3, [pc, #104]	@ (80059f4 <UART_SetConfig+0x118>)
 800598a:	fba3 0302 	umull	r0, r3, r3, r2
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	2064      	movs	r0, #100	@ 0x64
 8005992:	fb00 f303 	mul.w	r3, r0, r3
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	3332      	adds	r3, #50	@ 0x32
 800599c:	4a15      	ldr	r2, [pc, #84]	@ (80059f4 <UART_SetConfig+0x118>)
 800599e:	fba2 2303 	umull	r2, r3, r2, r3
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059a8:	4419      	add	r1, r3
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009a      	lsls	r2, r3, #2
 80059b4:	441a      	add	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80059c0:	4b0c      	ldr	r3, [pc, #48]	@ (80059f4 <UART_SetConfig+0x118>)
 80059c2:	fba3 0302 	umull	r0, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	2064      	movs	r0, #100	@ 0x64
 80059ca:	fb00 f303 	mul.w	r3, r0, r3
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	3332      	adds	r3, #50	@ 0x32
 80059d4:	4a07      	ldr	r2, [pc, #28]	@ (80059f4 <UART_SetConfig+0x118>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	f003 020f 	and.w	r2, r3, #15
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	440a      	add	r2, r1
 80059e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80059e8:	bf00      	nop
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	40013800 	.word	0x40013800
 80059f4:	51eb851f 	.word	0x51eb851f

080059f8 <atof>:
 80059f8:	2100      	movs	r1, #0
 80059fa:	f000 be03 	b.w	8006604 <strtod>

080059fe <atoi>:
 80059fe:	220a      	movs	r2, #10
 8005a00:	2100      	movs	r1, #0
 8005a02:	f000 be87 	b.w	8006714 <strtol>

08005a06 <sulp>:
 8005a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0a:	460f      	mov	r7, r1
 8005a0c:	4690      	mov	r8, r2
 8005a0e:	f003 fe0b 	bl	8009628 <__ulp>
 8005a12:	4604      	mov	r4, r0
 8005a14:	460d      	mov	r5, r1
 8005a16:	f1b8 0f00 	cmp.w	r8, #0
 8005a1a:	d011      	beq.n	8005a40 <sulp+0x3a>
 8005a1c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005a20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	dd0b      	ble.n	8005a40 <sulp+0x3a>
 8005a28:	2400      	movs	r4, #0
 8005a2a:	051b      	lsls	r3, r3, #20
 8005a2c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005a30:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005a34:	4622      	mov	r2, r4
 8005a36:	462b      	mov	r3, r5
 8005a38:	f7fa fd4e 	bl	80004d8 <__aeabi_dmul>
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	460d      	mov	r5, r1
 8005a40:	4620      	mov	r0, r4
 8005a42:	4629      	mov	r1, r5
 8005a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a48 <_strtod_l>:
 8005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	b09f      	sub	sp, #124	@ 0x7c
 8005a4e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005a50:	2200      	movs	r2, #0
 8005a52:	460c      	mov	r4, r1
 8005a54:	921a      	str	r2, [sp, #104]	@ 0x68
 8005a56:	f04f 0a00 	mov.w	sl, #0
 8005a5a:	f04f 0b00 	mov.w	fp, #0
 8005a5e:	460a      	mov	r2, r1
 8005a60:	9005      	str	r0, [sp, #20]
 8005a62:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a64:	7811      	ldrb	r1, [r2, #0]
 8005a66:	292b      	cmp	r1, #43	@ 0x2b
 8005a68:	d048      	beq.n	8005afc <_strtod_l+0xb4>
 8005a6a:	d836      	bhi.n	8005ada <_strtod_l+0x92>
 8005a6c:	290d      	cmp	r1, #13
 8005a6e:	d830      	bhi.n	8005ad2 <_strtod_l+0x8a>
 8005a70:	2908      	cmp	r1, #8
 8005a72:	d830      	bhi.n	8005ad6 <_strtod_l+0x8e>
 8005a74:	2900      	cmp	r1, #0
 8005a76:	d039      	beq.n	8005aec <_strtod_l+0xa4>
 8005a78:	2200      	movs	r2, #0
 8005a7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005a7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005a7e:	782a      	ldrb	r2, [r5, #0]
 8005a80:	2a30      	cmp	r2, #48	@ 0x30
 8005a82:	f040 80b1 	bne.w	8005be8 <_strtod_l+0x1a0>
 8005a86:	786a      	ldrb	r2, [r5, #1]
 8005a88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a8c:	2a58      	cmp	r2, #88	@ 0x58
 8005a8e:	d16c      	bne.n	8005b6a <_strtod_l+0x122>
 8005a90:	9302      	str	r3, [sp, #8]
 8005a92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a94:	4a8e      	ldr	r2, [pc, #568]	@ (8005cd0 <_strtod_l+0x288>)
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	ab1a      	add	r3, sp, #104	@ 0x68
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	9805      	ldr	r0, [sp, #20]
 8005a9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005aa0:	a919      	add	r1, sp, #100	@ 0x64
 8005aa2:	f002 feb5 	bl	8008810 <__gethex>
 8005aa6:	f010 060f 	ands.w	r6, r0, #15
 8005aaa:	4604      	mov	r4, r0
 8005aac:	d005      	beq.n	8005aba <_strtod_l+0x72>
 8005aae:	2e06      	cmp	r6, #6
 8005ab0:	d126      	bne.n	8005b00 <_strtod_l+0xb8>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	9519      	str	r5, [sp, #100]	@ 0x64
 8005ab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005aba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f040 8584 	bne.w	80065ca <_strtod_l+0xb82>
 8005ac2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ac4:	b1bb      	cbz	r3, 8005af6 <_strtod_l+0xae>
 8005ac6:	4650      	mov	r0, sl
 8005ac8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005acc:	b01f      	add	sp, #124	@ 0x7c
 8005ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad2:	2920      	cmp	r1, #32
 8005ad4:	d1d0      	bne.n	8005a78 <_strtod_l+0x30>
 8005ad6:	3201      	adds	r2, #1
 8005ad8:	e7c3      	b.n	8005a62 <_strtod_l+0x1a>
 8005ada:	292d      	cmp	r1, #45	@ 0x2d
 8005adc:	d1cc      	bne.n	8005a78 <_strtod_l+0x30>
 8005ade:	2101      	movs	r1, #1
 8005ae0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005ae2:	1c51      	adds	r1, r2, #1
 8005ae4:	9119      	str	r1, [sp, #100]	@ 0x64
 8005ae6:	7852      	ldrb	r2, [r2, #1]
 8005ae8:	2a00      	cmp	r2, #0
 8005aea:	d1c7      	bne.n	8005a7c <_strtod_l+0x34>
 8005aec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005aee:	9419      	str	r4, [sp, #100]	@ 0x64
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f040 8568 	bne.w	80065c6 <_strtod_l+0xb7e>
 8005af6:	4650      	mov	r0, sl
 8005af8:	4659      	mov	r1, fp
 8005afa:	e7e7      	b.n	8005acc <_strtod_l+0x84>
 8005afc:	2100      	movs	r1, #0
 8005afe:	e7ef      	b.n	8005ae0 <_strtod_l+0x98>
 8005b00:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005b02:	b13a      	cbz	r2, 8005b14 <_strtod_l+0xcc>
 8005b04:	2135      	movs	r1, #53	@ 0x35
 8005b06:	a81c      	add	r0, sp, #112	@ 0x70
 8005b08:	f003 fe7e 	bl	8009808 <__copybits>
 8005b0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b0e:	9805      	ldr	r0, [sp, #20]
 8005b10:	f003 fa58 	bl	8008fc4 <_Bfree>
 8005b14:	3e01      	subs	r6, #1
 8005b16:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005b18:	2e04      	cmp	r6, #4
 8005b1a:	d806      	bhi.n	8005b2a <_strtod_l+0xe2>
 8005b1c:	e8df f006 	tbb	[pc, r6]
 8005b20:	201d0314 	.word	0x201d0314
 8005b24:	14          	.byte	0x14
 8005b25:	00          	.byte	0x00
 8005b26:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005b2a:	05e1      	lsls	r1, r4, #23
 8005b2c:	bf48      	it	mi
 8005b2e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005b32:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b36:	0d1b      	lsrs	r3, r3, #20
 8005b38:	051b      	lsls	r3, r3, #20
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1bd      	bne.n	8005aba <_strtod_l+0x72>
 8005b3e:	f001 feed 	bl	800791c <__errno>
 8005b42:	2322      	movs	r3, #34	@ 0x22
 8005b44:	6003      	str	r3, [r0, #0]
 8005b46:	e7b8      	b.n	8005aba <_strtod_l+0x72>
 8005b48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005b4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005b50:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005b54:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005b58:	e7e7      	b.n	8005b2a <_strtod_l+0xe2>
 8005b5a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005cd4 <_strtod_l+0x28c>
 8005b5e:	e7e4      	b.n	8005b2a <_strtod_l+0xe2>
 8005b60:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005b64:	f04f 3aff 	mov.w	sl, #4294967295
 8005b68:	e7df      	b.n	8005b2a <_strtod_l+0xe2>
 8005b6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	2b30      	cmp	r3, #48	@ 0x30
 8005b74:	d0f9      	beq.n	8005b6a <_strtod_l+0x122>
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d09f      	beq.n	8005aba <_strtod_l+0x72>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b80:	220a      	movs	r2, #10
 8005b82:	930c      	str	r3, [sp, #48]	@ 0x30
 8005b84:	2300      	movs	r3, #0
 8005b86:	461f      	mov	r7, r3
 8005b88:	9308      	str	r3, [sp, #32]
 8005b8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b8c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005b8e:	7805      	ldrb	r5, [r0, #0]
 8005b90:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005b94:	b2d9      	uxtb	r1, r3
 8005b96:	2909      	cmp	r1, #9
 8005b98:	d928      	bls.n	8005bec <_strtod_l+0x1a4>
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	494e      	ldr	r1, [pc, #312]	@ (8005cd8 <_strtod_l+0x290>)
 8005b9e:	f001 fddb 	bl	8007758 <strncmp>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d032      	beq.n	8005c0c <_strtod_l+0x1c4>
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	462a      	mov	r2, r5
 8005baa:	4681      	mov	r9, r0
 8005bac:	463d      	mov	r5, r7
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2a65      	cmp	r2, #101	@ 0x65
 8005bb2:	d001      	beq.n	8005bb8 <_strtod_l+0x170>
 8005bb4:	2a45      	cmp	r2, #69	@ 0x45
 8005bb6:	d114      	bne.n	8005be2 <_strtod_l+0x19a>
 8005bb8:	b91d      	cbnz	r5, 8005bc2 <_strtod_l+0x17a>
 8005bba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bbc:	4302      	orrs	r2, r0
 8005bbe:	d095      	beq.n	8005aec <_strtod_l+0xa4>
 8005bc0:	2500      	movs	r5, #0
 8005bc2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005bc4:	1c62      	adds	r2, r4, #1
 8005bc6:	9219      	str	r2, [sp, #100]	@ 0x64
 8005bc8:	7862      	ldrb	r2, [r4, #1]
 8005bca:	2a2b      	cmp	r2, #43	@ 0x2b
 8005bcc:	d077      	beq.n	8005cbe <_strtod_l+0x276>
 8005bce:	2a2d      	cmp	r2, #45	@ 0x2d
 8005bd0:	d07b      	beq.n	8005cca <_strtod_l+0x282>
 8005bd2:	f04f 0c00 	mov.w	ip, #0
 8005bd6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005bda:	2909      	cmp	r1, #9
 8005bdc:	f240 8082 	bls.w	8005ce4 <_strtod_l+0x29c>
 8005be0:	9419      	str	r4, [sp, #100]	@ 0x64
 8005be2:	f04f 0800 	mov.w	r8, #0
 8005be6:	e0a2      	b.n	8005d2e <_strtod_l+0x2e6>
 8005be8:	2300      	movs	r3, #0
 8005bea:	e7c7      	b.n	8005b7c <_strtod_l+0x134>
 8005bec:	2f08      	cmp	r7, #8
 8005bee:	bfd5      	itete	le
 8005bf0:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005bf2:	9908      	ldrgt	r1, [sp, #32]
 8005bf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8005bf8:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005bfc:	f100 0001 	add.w	r0, r0, #1
 8005c00:	bfd4      	ite	le
 8005c02:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005c04:	9308      	strgt	r3, [sp, #32]
 8005c06:	3701      	adds	r7, #1
 8005c08:	9019      	str	r0, [sp, #100]	@ 0x64
 8005c0a:	e7bf      	b.n	8005b8c <_strtod_l+0x144>
 8005c0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c12:	785a      	ldrb	r2, [r3, #1]
 8005c14:	b37f      	cbz	r7, 8005c76 <_strtod_l+0x22e>
 8005c16:	4681      	mov	r9, r0
 8005c18:	463d      	mov	r5, r7
 8005c1a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005c1e:	2b09      	cmp	r3, #9
 8005c20:	d912      	bls.n	8005c48 <_strtod_l+0x200>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e7c4      	b.n	8005bb0 <_strtod_l+0x168>
 8005c26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c28:	3001      	adds	r0, #1
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c2e:	785a      	ldrb	r2, [r3, #1]
 8005c30:	2a30      	cmp	r2, #48	@ 0x30
 8005c32:	d0f8      	beq.n	8005c26 <_strtod_l+0x1de>
 8005c34:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	f200 84cb 	bhi.w	80065d4 <_strtod_l+0xb8c>
 8005c3e:	4681      	mov	r9, r0
 8005c40:	2000      	movs	r0, #0
 8005c42:	4605      	mov	r5, r0
 8005c44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c46:	930c      	str	r3, [sp, #48]	@ 0x30
 8005c48:	3a30      	subs	r2, #48	@ 0x30
 8005c4a:	f100 0301 	add.w	r3, r0, #1
 8005c4e:	d02a      	beq.n	8005ca6 <_strtod_l+0x25e>
 8005c50:	4499      	add	r9, r3
 8005c52:	210a      	movs	r1, #10
 8005c54:	462b      	mov	r3, r5
 8005c56:	eb00 0c05 	add.w	ip, r0, r5
 8005c5a:	4563      	cmp	r3, ip
 8005c5c:	d10d      	bne.n	8005c7a <_strtod_l+0x232>
 8005c5e:	1c69      	adds	r1, r5, #1
 8005c60:	4401      	add	r1, r0
 8005c62:	4428      	add	r0, r5
 8005c64:	2808      	cmp	r0, #8
 8005c66:	dc16      	bgt.n	8005c96 <_strtod_l+0x24e>
 8005c68:	230a      	movs	r3, #10
 8005c6a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005c6c:	fb03 2300 	mla	r3, r3, r0, r2
 8005c70:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c72:	2300      	movs	r3, #0
 8005c74:	e018      	b.n	8005ca8 <_strtod_l+0x260>
 8005c76:	4638      	mov	r0, r7
 8005c78:	e7da      	b.n	8005c30 <_strtod_l+0x1e8>
 8005c7a:	2b08      	cmp	r3, #8
 8005c7c:	f103 0301 	add.w	r3, r3, #1
 8005c80:	dc03      	bgt.n	8005c8a <_strtod_l+0x242>
 8005c82:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005c84:	434e      	muls	r6, r1
 8005c86:	960a      	str	r6, [sp, #40]	@ 0x28
 8005c88:	e7e7      	b.n	8005c5a <_strtod_l+0x212>
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	bfde      	ittt	le
 8005c8e:	9e08      	ldrle	r6, [sp, #32]
 8005c90:	434e      	mulle	r6, r1
 8005c92:	9608      	strle	r6, [sp, #32]
 8005c94:	e7e1      	b.n	8005c5a <_strtod_l+0x212>
 8005c96:	280f      	cmp	r0, #15
 8005c98:	dceb      	bgt.n	8005c72 <_strtod_l+0x22a>
 8005c9a:	230a      	movs	r3, #10
 8005c9c:	9808      	ldr	r0, [sp, #32]
 8005c9e:	fb03 2300 	mla	r3, r3, r0, r2
 8005ca2:	9308      	str	r3, [sp, #32]
 8005ca4:	e7e5      	b.n	8005c72 <_strtod_l+0x22a>
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005caa:	460d      	mov	r5, r1
 8005cac:	1c50      	adds	r0, r2, #1
 8005cae:	9019      	str	r0, [sp, #100]	@ 0x64
 8005cb0:	7852      	ldrb	r2, [r2, #1]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	e7b1      	b.n	8005c1a <_strtod_l+0x1d2>
 8005cb6:	f04f 0900 	mov.w	r9, #0
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e77d      	b.n	8005bba <_strtod_l+0x172>
 8005cbe:	f04f 0c00 	mov.w	ip, #0
 8005cc2:	1ca2      	adds	r2, r4, #2
 8005cc4:	9219      	str	r2, [sp, #100]	@ 0x64
 8005cc6:	78a2      	ldrb	r2, [r4, #2]
 8005cc8:	e785      	b.n	8005bd6 <_strtod_l+0x18e>
 8005cca:	f04f 0c01 	mov.w	ip, #1
 8005cce:	e7f8      	b.n	8005cc2 <_strtod_l+0x27a>
 8005cd0:	0800b358 	.word	0x0800b358
 8005cd4:	7ff00000 	.word	0x7ff00000
 8005cd8:	0800b342 	.word	0x0800b342
 8005cdc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005cde:	1c51      	adds	r1, r2, #1
 8005ce0:	9119      	str	r1, [sp, #100]	@ 0x64
 8005ce2:	7852      	ldrb	r2, [r2, #1]
 8005ce4:	2a30      	cmp	r2, #48	@ 0x30
 8005ce6:	d0f9      	beq.n	8005cdc <_strtod_l+0x294>
 8005ce8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005cec:	2908      	cmp	r1, #8
 8005cee:	f63f af78 	bhi.w	8005be2 <_strtod_l+0x19a>
 8005cf2:	f04f 080a 	mov.w	r8, #10
 8005cf6:	3a30      	subs	r2, #48	@ 0x30
 8005cf8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005cfa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005cfc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005cfe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d00:	1c56      	adds	r6, r2, #1
 8005d02:	9619      	str	r6, [sp, #100]	@ 0x64
 8005d04:	7852      	ldrb	r2, [r2, #1]
 8005d06:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005d0a:	f1be 0f09 	cmp.w	lr, #9
 8005d0e:	d939      	bls.n	8005d84 <_strtod_l+0x33c>
 8005d10:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005d12:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005d16:	1a76      	subs	r6, r6, r1
 8005d18:	2e08      	cmp	r6, #8
 8005d1a:	dc03      	bgt.n	8005d24 <_strtod_l+0x2dc>
 8005d1c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005d1e:	4588      	cmp	r8, r1
 8005d20:	bfa8      	it	ge
 8005d22:	4688      	movge	r8, r1
 8005d24:	f1bc 0f00 	cmp.w	ip, #0
 8005d28:	d001      	beq.n	8005d2e <_strtod_l+0x2e6>
 8005d2a:	f1c8 0800 	rsb	r8, r8, #0
 8005d2e:	2d00      	cmp	r5, #0
 8005d30:	d14e      	bne.n	8005dd0 <_strtod_l+0x388>
 8005d32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d34:	4308      	orrs	r0, r1
 8005d36:	f47f aec0 	bne.w	8005aba <_strtod_l+0x72>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f47f aed6 	bne.w	8005aec <_strtod_l+0xa4>
 8005d40:	2a69      	cmp	r2, #105	@ 0x69
 8005d42:	d028      	beq.n	8005d96 <_strtod_l+0x34e>
 8005d44:	dc25      	bgt.n	8005d92 <_strtod_l+0x34a>
 8005d46:	2a49      	cmp	r2, #73	@ 0x49
 8005d48:	d025      	beq.n	8005d96 <_strtod_l+0x34e>
 8005d4a:	2a4e      	cmp	r2, #78	@ 0x4e
 8005d4c:	f47f aece 	bne.w	8005aec <_strtod_l+0xa4>
 8005d50:	499a      	ldr	r1, [pc, #616]	@ (8005fbc <_strtod_l+0x574>)
 8005d52:	a819      	add	r0, sp, #100	@ 0x64
 8005d54:	f002 ff7e 	bl	8008c54 <__match>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	f43f aec7 	beq.w	8005aec <_strtod_l+0xa4>
 8005d5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2b28      	cmp	r3, #40	@ 0x28
 8005d64:	d12e      	bne.n	8005dc4 <_strtod_l+0x37c>
 8005d66:	4996      	ldr	r1, [pc, #600]	@ (8005fc0 <_strtod_l+0x578>)
 8005d68:	aa1c      	add	r2, sp, #112	@ 0x70
 8005d6a:	a819      	add	r0, sp, #100	@ 0x64
 8005d6c:	f002 ff86 	bl	8008c7c <__hexnan>
 8005d70:	2805      	cmp	r0, #5
 8005d72:	d127      	bne.n	8005dc4 <_strtod_l+0x37c>
 8005d74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005d76:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005d7a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005d7e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005d82:	e69a      	b.n	8005aba <_strtod_l+0x72>
 8005d84:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005d86:	fb08 2101 	mla	r1, r8, r1, r2
 8005d8a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005d8e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d90:	e7b5      	b.n	8005cfe <_strtod_l+0x2b6>
 8005d92:	2a6e      	cmp	r2, #110	@ 0x6e
 8005d94:	e7da      	b.n	8005d4c <_strtod_l+0x304>
 8005d96:	498b      	ldr	r1, [pc, #556]	@ (8005fc4 <_strtod_l+0x57c>)
 8005d98:	a819      	add	r0, sp, #100	@ 0x64
 8005d9a:	f002 ff5b 	bl	8008c54 <__match>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	f43f aea4 	beq.w	8005aec <_strtod_l+0xa4>
 8005da4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005da6:	4988      	ldr	r1, [pc, #544]	@ (8005fc8 <_strtod_l+0x580>)
 8005da8:	3b01      	subs	r3, #1
 8005daa:	a819      	add	r0, sp, #100	@ 0x64
 8005dac:	9319      	str	r3, [sp, #100]	@ 0x64
 8005dae:	f002 ff51 	bl	8008c54 <__match>
 8005db2:	b910      	cbnz	r0, 8005dba <_strtod_l+0x372>
 8005db4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005db6:	3301      	adds	r3, #1
 8005db8:	9319      	str	r3, [sp, #100]	@ 0x64
 8005dba:	f04f 0a00 	mov.w	sl, #0
 8005dbe:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005fcc <_strtod_l+0x584>
 8005dc2:	e67a      	b.n	8005aba <_strtod_l+0x72>
 8005dc4:	4882      	ldr	r0, [pc, #520]	@ (8005fd0 <_strtod_l+0x588>)
 8005dc6:	f001 fdfb 	bl	80079c0 <nan>
 8005dca:	4682      	mov	sl, r0
 8005dcc:	468b      	mov	fp, r1
 8005dce:	e674      	b.n	8005aba <_strtod_l+0x72>
 8005dd0:	eba8 0309 	sub.w	r3, r8, r9
 8005dd4:	2f00      	cmp	r7, #0
 8005dd6:	bf08      	it	eq
 8005dd8:	462f      	moveq	r7, r5
 8005dda:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005ddc:	2d10      	cmp	r5, #16
 8005dde:	462c      	mov	r4, r5
 8005de0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005de2:	bfa8      	it	ge
 8005de4:	2410      	movge	r4, #16
 8005de6:	f7fa fafd 	bl	80003e4 <__aeabi_ui2d>
 8005dea:	2d09      	cmp	r5, #9
 8005dec:	4682      	mov	sl, r0
 8005dee:	468b      	mov	fp, r1
 8005df0:	dc11      	bgt.n	8005e16 <_strtod_l+0x3ce>
 8005df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f43f ae60 	beq.w	8005aba <_strtod_l+0x72>
 8005dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dfc:	dd76      	ble.n	8005eec <_strtod_l+0x4a4>
 8005dfe:	2b16      	cmp	r3, #22
 8005e00:	dc5d      	bgt.n	8005ebe <_strtod_l+0x476>
 8005e02:	4974      	ldr	r1, [pc, #464]	@ (8005fd4 <_strtod_l+0x58c>)
 8005e04:	4652      	mov	r2, sl
 8005e06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e0a:	465b      	mov	r3, fp
 8005e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e10:	f7fa fb62 	bl	80004d8 <__aeabi_dmul>
 8005e14:	e7d9      	b.n	8005dca <_strtod_l+0x382>
 8005e16:	4b6f      	ldr	r3, [pc, #444]	@ (8005fd4 <_strtod_l+0x58c>)
 8005e18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005e20:	f7fa fb5a 	bl	80004d8 <__aeabi_dmul>
 8005e24:	4682      	mov	sl, r0
 8005e26:	9808      	ldr	r0, [sp, #32]
 8005e28:	468b      	mov	fp, r1
 8005e2a:	f7fa fadb 	bl	80003e4 <__aeabi_ui2d>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	4650      	mov	r0, sl
 8005e34:	4659      	mov	r1, fp
 8005e36:	f7fa f999 	bl	800016c <__adddf3>
 8005e3a:	2d0f      	cmp	r5, #15
 8005e3c:	4682      	mov	sl, r0
 8005e3e:	468b      	mov	fp, r1
 8005e40:	ddd7      	ble.n	8005df2 <_strtod_l+0x3aa>
 8005e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e44:	1b2c      	subs	r4, r5, r4
 8005e46:	441c      	add	r4, r3
 8005e48:	2c00      	cmp	r4, #0
 8005e4a:	f340 8096 	ble.w	8005f7a <_strtod_l+0x532>
 8005e4e:	f014 030f 	ands.w	r3, r4, #15
 8005e52:	d00a      	beq.n	8005e6a <_strtod_l+0x422>
 8005e54:	495f      	ldr	r1, [pc, #380]	@ (8005fd4 <_strtod_l+0x58c>)
 8005e56:	4652      	mov	r2, sl
 8005e58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e60:	465b      	mov	r3, fp
 8005e62:	f7fa fb39 	bl	80004d8 <__aeabi_dmul>
 8005e66:	4682      	mov	sl, r0
 8005e68:	468b      	mov	fp, r1
 8005e6a:	f034 040f 	bics.w	r4, r4, #15
 8005e6e:	d073      	beq.n	8005f58 <_strtod_l+0x510>
 8005e70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005e74:	dd48      	ble.n	8005f08 <_strtod_l+0x4c0>
 8005e76:	2400      	movs	r4, #0
 8005e78:	46a0      	mov	r8, r4
 8005e7a:	46a1      	mov	r9, r4
 8005e7c:	940a      	str	r4, [sp, #40]	@ 0x28
 8005e7e:	2322      	movs	r3, #34	@ 0x22
 8005e80:	f04f 0a00 	mov.w	sl, #0
 8005e84:	9a05      	ldr	r2, [sp, #20]
 8005e86:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005fcc <_strtod_l+0x584>
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f43f ae13 	beq.w	8005aba <_strtod_l+0x72>
 8005e94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e96:	9805      	ldr	r0, [sp, #20]
 8005e98:	f003 f894 	bl	8008fc4 <_Bfree>
 8005e9c:	4649      	mov	r1, r9
 8005e9e:	9805      	ldr	r0, [sp, #20]
 8005ea0:	f003 f890 	bl	8008fc4 <_Bfree>
 8005ea4:	4641      	mov	r1, r8
 8005ea6:	9805      	ldr	r0, [sp, #20]
 8005ea8:	f003 f88c 	bl	8008fc4 <_Bfree>
 8005eac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005eae:	9805      	ldr	r0, [sp, #20]
 8005eb0:	f003 f888 	bl	8008fc4 <_Bfree>
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	9805      	ldr	r0, [sp, #20]
 8005eb8:	f003 f884 	bl	8008fc4 <_Bfree>
 8005ebc:	e5fd      	b.n	8005aba <_strtod_l+0x72>
 8005ebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ec0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	dbbc      	blt.n	8005e42 <_strtod_l+0x3fa>
 8005ec8:	4c42      	ldr	r4, [pc, #264]	@ (8005fd4 <_strtod_l+0x58c>)
 8005eca:	f1c5 050f 	rsb	r5, r5, #15
 8005ece:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005ed2:	4652      	mov	r2, sl
 8005ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ed8:	465b      	mov	r3, fp
 8005eda:	f7fa fafd 	bl	80004d8 <__aeabi_dmul>
 8005ede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ee0:	1b5d      	subs	r5, r3, r5
 8005ee2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005ee6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005eea:	e791      	b.n	8005e10 <_strtod_l+0x3c8>
 8005eec:	3316      	adds	r3, #22
 8005eee:	dba8      	blt.n	8005e42 <_strtod_l+0x3fa>
 8005ef0:	4b38      	ldr	r3, [pc, #224]	@ (8005fd4 <_strtod_l+0x58c>)
 8005ef2:	eba9 0808 	sub.w	r8, r9, r8
 8005ef6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005efa:	4650      	mov	r0, sl
 8005efc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005f00:	4659      	mov	r1, fp
 8005f02:	f7fa fc13 	bl	800072c <__aeabi_ddiv>
 8005f06:	e760      	b.n	8005dca <_strtod_l+0x382>
 8005f08:	4b33      	ldr	r3, [pc, #204]	@ (8005fd8 <_strtod_l+0x590>)
 8005f0a:	4650      	mov	r0, sl
 8005f0c:	9308      	str	r3, [sp, #32]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	4659      	mov	r1, fp
 8005f12:	461e      	mov	r6, r3
 8005f14:	1124      	asrs	r4, r4, #4
 8005f16:	2c01      	cmp	r4, #1
 8005f18:	dc21      	bgt.n	8005f5e <_strtod_l+0x516>
 8005f1a:	b10b      	cbz	r3, 8005f20 <_strtod_l+0x4d8>
 8005f1c:	4682      	mov	sl, r0
 8005f1e:	468b      	mov	fp, r1
 8005f20:	492d      	ldr	r1, [pc, #180]	@ (8005fd8 <_strtod_l+0x590>)
 8005f22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005f26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005f2a:	4652      	mov	r2, sl
 8005f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f30:	465b      	mov	r3, fp
 8005f32:	f7fa fad1 	bl	80004d8 <__aeabi_dmul>
 8005f36:	4b25      	ldr	r3, [pc, #148]	@ (8005fcc <_strtod_l+0x584>)
 8005f38:	460a      	mov	r2, r1
 8005f3a:	400b      	ands	r3, r1
 8005f3c:	4927      	ldr	r1, [pc, #156]	@ (8005fdc <_strtod_l+0x594>)
 8005f3e:	4682      	mov	sl, r0
 8005f40:	428b      	cmp	r3, r1
 8005f42:	d898      	bhi.n	8005e76 <_strtod_l+0x42e>
 8005f44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005f48:	428b      	cmp	r3, r1
 8005f4a:	bf86      	itte	hi
 8005f4c:	f04f 3aff 	movhi.w	sl, #4294967295
 8005f50:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005fe0 <_strtod_l+0x598>
 8005f54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9308      	str	r3, [sp, #32]
 8005f5c:	e07a      	b.n	8006054 <_strtod_l+0x60c>
 8005f5e:	07e2      	lsls	r2, r4, #31
 8005f60:	d505      	bpl.n	8005f6e <_strtod_l+0x526>
 8005f62:	9b08      	ldr	r3, [sp, #32]
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f7fa fab6 	bl	80004d8 <__aeabi_dmul>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	9a08      	ldr	r2, [sp, #32]
 8005f70:	3601      	adds	r6, #1
 8005f72:	3208      	adds	r2, #8
 8005f74:	1064      	asrs	r4, r4, #1
 8005f76:	9208      	str	r2, [sp, #32]
 8005f78:	e7cd      	b.n	8005f16 <_strtod_l+0x4ce>
 8005f7a:	d0ed      	beq.n	8005f58 <_strtod_l+0x510>
 8005f7c:	4264      	negs	r4, r4
 8005f7e:	f014 020f 	ands.w	r2, r4, #15
 8005f82:	d00a      	beq.n	8005f9a <_strtod_l+0x552>
 8005f84:	4b13      	ldr	r3, [pc, #76]	@ (8005fd4 <_strtod_l+0x58c>)
 8005f86:	4650      	mov	r0, sl
 8005f88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f8c:	4659      	mov	r1, fp
 8005f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f92:	f7fa fbcb 	bl	800072c <__aeabi_ddiv>
 8005f96:	4682      	mov	sl, r0
 8005f98:	468b      	mov	fp, r1
 8005f9a:	1124      	asrs	r4, r4, #4
 8005f9c:	d0dc      	beq.n	8005f58 <_strtod_l+0x510>
 8005f9e:	2c1f      	cmp	r4, #31
 8005fa0:	dd20      	ble.n	8005fe4 <_strtod_l+0x59c>
 8005fa2:	2400      	movs	r4, #0
 8005fa4:	46a0      	mov	r8, r4
 8005fa6:	46a1      	mov	r9, r4
 8005fa8:	940a      	str	r4, [sp, #40]	@ 0x28
 8005faa:	2322      	movs	r3, #34	@ 0x22
 8005fac:	9a05      	ldr	r2, [sp, #20]
 8005fae:	f04f 0a00 	mov.w	sl, #0
 8005fb2:	f04f 0b00 	mov.w	fp, #0
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	e768      	b.n	8005e8c <_strtod_l+0x444>
 8005fba:	bf00      	nop
 8005fbc:	0800b4a6 	.word	0x0800b4a6
 8005fc0:	0800b344 	.word	0x0800b344
 8005fc4:	0800b49e 	.word	0x0800b49e
 8005fc8:	0800b588 	.word	0x0800b588
 8005fcc:	7ff00000 	.word	0x7ff00000
 8005fd0:	0800b584 	.word	0x0800b584
 8005fd4:	0800b6e8 	.word	0x0800b6e8
 8005fd8:	0800b6c0 	.word	0x0800b6c0
 8005fdc:	7ca00000 	.word	0x7ca00000
 8005fe0:	7fefffff 	.word	0x7fefffff
 8005fe4:	f014 0310 	ands.w	r3, r4, #16
 8005fe8:	bf18      	it	ne
 8005fea:	236a      	movne	r3, #106	@ 0x6a
 8005fec:	4650      	mov	r0, sl
 8005fee:	9308      	str	r3, [sp, #32]
 8005ff0:	4659      	mov	r1, fp
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	4ea9      	ldr	r6, [pc, #676]	@ (800629c <_strtod_l+0x854>)
 8005ff6:	07e2      	lsls	r2, r4, #31
 8005ff8:	d504      	bpl.n	8006004 <_strtod_l+0x5bc>
 8005ffa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ffe:	f7fa fa6b 	bl	80004d8 <__aeabi_dmul>
 8006002:	2301      	movs	r3, #1
 8006004:	1064      	asrs	r4, r4, #1
 8006006:	f106 0608 	add.w	r6, r6, #8
 800600a:	d1f4      	bne.n	8005ff6 <_strtod_l+0x5ae>
 800600c:	b10b      	cbz	r3, 8006012 <_strtod_l+0x5ca>
 800600e:	4682      	mov	sl, r0
 8006010:	468b      	mov	fp, r1
 8006012:	9b08      	ldr	r3, [sp, #32]
 8006014:	b1b3      	cbz	r3, 8006044 <_strtod_l+0x5fc>
 8006016:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800601a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800601e:	2b00      	cmp	r3, #0
 8006020:	4659      	mov	r1, fp
 8006022:	dd0f      	ble.n	8006044 <_strtod_l+0x5fc>
 8006024:	2b1f      	cmp	r3, #31
 8006026:	dd57      	ble.n	80060d8 <_strtod_l+0x690>
 8006028:	2b34      	cmp	r3, #52	@ 0x34
 800602a:	bfd8      	it	le
 800602c:	f04f 33ff 	movle.w	r3, #4294967295
 8006030:	f04f 0a00 	mov.w	sl, #0
 8006034:	bfcf      	iteee	gt
 8006036:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800603a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800603e:	4093      	lslle	r3, r2
 8006040:	ea03 0b01 	andle.w	fp, r3, r1
 8006044:	2200      	movs	r2, #0
 8006046:	2300      	movs	r3, #0
 8006048:	4650      	mov	r0, sl
 800604a:	4659      	mov	r1, fp
 800604c:	f7fa fcac 	bl	80009a8 <__aeabi_dcmpeq>
 8006050:	2800      	cmp	r0, #0
 8006052:	d1a6      	bne.n	8005fa2 <_strtod_l+0x55a>
 8006054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006056:	463a      	mov	r2, r7
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800605c:	462b      	mov	r3, r5
 800605e:	9805      	ldr	r0, [sp, #20]
 8006060:	f003 f818 	bl	8009094 <__s2b>
 8006064:	900a      	str	r0, [sp, #40]	@ 0x28
 8006066:	2800      	cmp	r0, #0
 8006068:	f43f af05 	beq.w	8005e76 <_strtod_l+0x42e>
 800606c:	2400      	movs	r4, #0
 800606e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006070:	eba9 0308 	sub.w	r3, r9, r8
 8006074:	2a00      	cmp	r2, #0
 8006076:	bfa8      	it	ge
 8006078:	2300      	movge	r3, #0
 800607a:	46a0      	mov	r8, r4
 800607c:	9312      	str	r3, [sp, #72]	@ 0x48
 800607e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006082:	9316      	str	r3, [sp, #88]	@ 0x58
 8006084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006086:	9805      	ldr	r0, [sp, #20]
 8006088:	6859      	ldr	r1, [r3, #4]
 800608a:	f002 ff5b 	bl	8008f44 <_Balloc>
 800608e:	4681      	mov	r9, r0
 8006090:	2800      	cmp	r0, #0
 8006092:	f43f aef4 	beq.w	8005e7e <_strtod_l+0x436>
 8006096:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006098:	300c      	adds	r0, #12
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	f103 010c 	add.w	r1, r3, #12
 80060a0:	3202      	adds	r2, #2
 80060a2:	0092      	lsls	r2, r2, #2
 80060a4:	f001 fc7d 	bl	80079a2 <memcpy>
 80060a8:	ab1c      	add	r3, sp, #112	@ 0x70
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	ab1b      	add	r3, sp, #108	@ 0x6c
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	4652      	mov	r2, sl
 80060b2:	465b      	mov	r3, fp
 80060b4:	9805      	ldr	r0, [sp, #20]
 80060b6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80060ba:	f003 fb1d 	bl	80096f8 <__d2b>
 80060be:	901a      	str	r0, [sp, #104]	@ 0x68
 80060c0:	2800      	cmp	r0, #0
 80060c2:	f43f aedc 	beq.w	8005e7e <_strtod_l+0x436>
 80060c6:	2101      	movs	r1, #1
 80060c8:	9805      	ldr	r0, [sp, #20]
 80060ca:	f003 f879 	bl	80091c0 <__i2b>
 80060ce:	4680      	mov	r8, r0
 80060d0:	b948      	cbnz	r0, 80060e6 <_strtod_l+0x69e>
 80060d2:	f04f 0800 	mov.w	r8, #0
 80060d6:	e6d2      	b.n	8005e7e <_strtod_l+0x436>
 80060d8:	f04f 32ff 	mov.w	r2, #4294967295
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	ea03 0a0a 	and.w	sl, r3, sl
 80060e4:	e7ae      	b.n	8006044 <_strtod_l+0x5fc>
 80060e6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80060e8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80060ea:	2d00      	cmp	r5, #0
 80060ec:	bfab      	itete	ge
 80060ee:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80060f0:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80060f2:	18ef      	addge	r7, r5, r3
 80060f4:	1b5e      	sublt	r6, r3, r5
 80060f6:	9b08      	ldr	r3, [sp, #32]
 80060f8:	bfa8      	it	ge
 80060fa:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80060fc:	eba5 0503 	sub.w	r5, r5, r3
 8006100:	4415      	add	r5, r2
 8006102:	4b67      	ldr	r3, [pc, #412]	@ (80062a0 <_strtod_l+0x858>)
 8006104:	f105 35ff 	add.w	r5, r5, #4294967295
 8006108:	bfb8      	it	lt
 800610a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800610c:	429d      	cmp	r5, r3
 800610e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006112:	da50      	bge.n	80061b6 <_strtod_l+0x76e>
 8006114:	1b5b      	subs	r3, r3, r5
 8006116:	2b1f      	cmp	r3, #31
 8006118:	f04f 0101 	mov.w	r1, #1
 800611c:	eba2 0203 	sub.w	r2, r2, r3
 8006120:	dc3d      	bgt.n	800619e <_strtod_l+0x756>
 8006122:	fa01 f303 	lsl.w	r3, r1, r3
 8006126:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006128:	2300      	movs	r3, #0
 800612a:	9310      	str	r3, [sp, #64]	@ 0x40
 800612c:	18bd      	adds	r5, r7, r2
 800612e:	9b08      	ldr	r3, [sp, #32]
 8006130:	42af      	cmp	r7, r5
 8006132:	4416      	add	r6, r2
 8006134:	441e      	add	r6, r3
 8006136:	463b      	mov	r3, r7
 8006138:	bfa8      	it	ge
 800613a:	462b      	movge	r3, r5
 800613c:	42b3      	cmp	r3, r6
 800613e:	bfa8      	it	ge
 8006140:	4633      	movge	r3, r6
 8006142:	2b00      	cmp	r3, #0
 8006144:	bfc2      	ittt	gt
 8006146:	1aed      	subgt	r5, r5, r3
 8006148:	1af6      	subgt	r6, r6, r3
 800614a:	1aff      	subgt	r7, r7, r3
 800614c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800614e:	2b00      	cmp	r3, #0
 8006150:	dd16      	ble.n	8006180 <_strtod_l+0x738>
 8006152:	4641      	mov	r1, r8
 8006154:	461a      	mov	r2, r3
 8006156:	9805      	ldr	r0, [sp, #20]
 8006158:	f003 f8f0 	bl	800933c <__pow5mult>
 800615c:	4680      	mov	r8, r0
 800615e:	2800      	cmp	r0, #0
 8006160:	d0b7      	beq.n	80060d2 <_strtod_l+0x68a>
 8006162:	4601      	mov	r1, r0
 8006164:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006166:	9805      	ldr	r0, [sp, #20]
 8006168:	f003 f840 	bl	80091ec <__multiply>
 800616c:	900e      	str	r0, [sp, #56]	@ 0x38
 800616e:	2800      	cmp	r0, #0
 8006170:	f43f ae85 	beq.w	8005e7e <_strtod_l+0x436>
 8006174:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006176:	9805      	ldr	r0, [sp, #20]
 8006178:	f002 ff24 	bl	8008fc4 <_Bfree>
 800617c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800617e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006180:	2d00      	cmp	r5, #0
 8006182:	dc1d      	bgt.n	80061c0 <_strtod_l+0x778>
 8006184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006186:	2b00      	cmp	r3, #0
 8006188:	dd23      	ble.n	80061d2 <_strtod_l+0x78a>
 800618a:	4649      	mov	r1, r9
 800618c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800618e:	9805      	ldr	r0, [sp, #20]
 8006190:	f003 f8d4 	bl	800933c <__pow5mult>
 8006194:	4681      	mov	r9, r0
 8006196:	b9e0      	cbnz	r0, 80061d2 <_strtod_l+0x78a>
 8006198:	f04f 0900 	mov.w	r9, #0
 800619c:	e66f      	b.n	8005e7e <_strtod_l+0x436>
 800619e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80061a2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80061a6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80061aa:	35e2      	adds	r5, #226	@ 0xe2
 80061ac:	fa01 f305 	lsl.w	r3, r1, r5
 80061b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80061b2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80061b4:	e7ba      	b.n	800612c <_strtod_l+0x6e4>
 80061b6:	2300      	movs	r3, #0
 80061b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80061ba:	2301      	movs	r3, #1
 80061bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80061be:	e7b5      	b.n	800612c <_strtod_l+0x6e4>
 80061c0:	462a      	mov	r2, r5
 80061c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80061c4:	9805      	ldr	r0, [sp, #20]
 80061c6:	f003 f913 	bl	80093f0 <__lshift>
 80061ca:	901a      	str	r0, [sp, #104]	@ 0x68
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d1d9      	bne.n	8006184 <_strtod_l+0x73c>
 80061d0:	e655      	b.n	8005e7e <_strtod_l+0x436>
 80061d2:	2e00      	cmp	r6, #0
 80061d4:	dd07      	ble.n	80061e6 <_strtod_l+0x79e>
 80061d6:	4649      	mov	r1, r9
 80061d8:	4632      	mov	r2, r6
 80061da:	9805      	ldr	r0, [sp, #20]
 80061dc:	f003 f908 	bl	80093f0 <__lshift>
 80061e0:	4681      	mov	r9, r0
 80061e2:	2800      	cmp	r0, #0
 80061e4:	d0d8      	beq.n	8006198 <_strtod_l+0x750>
 80061e6:	2f00      	cmp	r7, #0
 80061e8:	dd08      	ble.n	80061fc <_strtod_l+0x7b4>
 80061ea:	4641      	mov	r1, r8
 80061ec:	463a      	mov	r2, r7
 80061ee:	9805      	ldr	r0, [sp, #20]
 80061f0:	f003 f8fe 	bl	80093f0 <__lshift>
 80061f4:	4680      	mov	r8, r0
 80061f6:	2800      	cmp	r0, #0
 80061f8:	f43f ae41 	beq.w	8005e7e <_strtod_l+0x436>
 80061fc:	464a      	mov	r2, r9
 80061fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006200:	9805      	ldr	r0, [sp, #20]
 8006202:	f003 f97d 	bl	8009500 <__mdiff>
 8006206:	4604      	mov	r4, r0
 8006208:	2800      	cmp	r0, #0
 800620a:	f43f ae38 	beq.w	8005e7e <_strtod_l+0x436>
 800620e:	68c3      	ldr	r3, [r0, #12]
 8006210:	4641      	mov	r1, r8
 8006212:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006214:	2300      	movs	r3, #0
 8006216:	60c3      	str	r3, [r0, #12]
 8006218:	f003 f956 	bl	80094c8 <__mcmp>
 800621c:	2800      	cmp	r0, #0
 800621e:	da45      	bge.n	80062ac <_strtod_l+0x864>
 8006220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006222:	ea53 030a 	orrs.w	r3, r3, sl
 8006226:	d16b      	bne.n	8006300 <_strtod_l+0x8b8>
 8006228:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800622c:	2b00      	cmp	r3, #0
 800622e:	d167      	bne.n	8006300 <_strtod_l+0x8b8>
 8006230:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006234:	0d1b      	lsrs	r3, r3, #20
 8006236:	051b      	lsls	r3, r3, #20
 8006238:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800623c:	d960      	bls.n	8006300 <_strtod_l+0x8b8>
 800623e:	6963      	ldr	r3, [r4, #20]
 8006240:	b913      	cbnz	r3, 8006248 <_strtod_l+0x800>
 8006242:	6923      	ldr	r3, [r4, #16]
 8006244:	2b01      	cmp	r3, #1
 8006246:	dd5b      	ble.n	8006300 <_strtod_l+0x8b8>
 8006248:	4621      	mov	r1, r4
 800624a:	2201      	movs	r2, #1
 800624c:	9805      	ldr	r0, [sp, #20]
 800624e:	f003 f8cf 	bl	80093f0 <__lshift>
 8006252:	4641      	mov	r1, r8
 8006254:	4604      	mov	r4, r0
 8006256:	f003 f937 	bl	80094c8 <__mcmp>
 800625a:	2800      	cmp	r0, #0
 800625c:	dd50      	ble.n	8006300 <_strtod_l+0x8b8>
 800625e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006262:	9a08      	ldr	r2, [sp, #32]
 8006264:	0d1b      	lsrs	r3, r3, #20
 8006266:	051b      	lsls	r3, r3, #20
 8006268:	2a00      	cmp	r2, #0
 800626a:	d06a      	beq.n	8006342 <_strtod_l+0x8fa>
 800626c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006270:	d867      	bhi.n	8006342 <_strtod_l+0x8fa>
 8006272:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006276:	f67f ae98 	bls.w	8005faa <_strtod_l+0x562>
 800627a:	4650      	mov	r0, sl
 800627c:	4659      	mov	r1, fp
 800627e:	4b09      	ldr	r3, [pc, #36]	@ (80062a4 <_strtod_l+0x85c>)
 8006280:	2200      	movs	r2, #0
 8006282:	f7fa f929 	bl	80004d8 <__aeabi_dmul>
 8006286:	4b08      	ldr	r3, [pc, #32]	@ (80062a8 <_strtod_l+0x860>)
 8006288:	4682      	mov	sl, r0
 800628a:	400b      	ands	r3, r1
 800628c:	468b      	mov	fp, r1
 800628e:	2b00      	cmp	r3, #0
 8006290:	f47f ae00 	bne.w	8005e94 <_strtod_l+0x44c>
 8006294:	2322      	movs	r3, #34	@ 0x22
 8006296:	9a05      	ldr	r2, [sp, #20]
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	e5fb      	b.n	8005e94 <_strtod_l+0x44c>
 800629c:	0800b370 	.word	0x0800b370
 80062a0:	fffffc02 	.word	0xfffffc02
 80062a4:	39500000 	.word	0x39500000
 80062a8:	7ff00000 	.word	0x7ff00000
 80062ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80062b0:	d165      	bne.n	800637e <_strtod_l+0x936>
 80062b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80062b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062b8:	b35a      	cbz	r2, 8006312 <_strtod_l+0x8ca>
 80062ba:	4a99      	ldr	r2, [pc, #612]	@ (8006520 <_strtod_l+0xad8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d12b      	bne.n	8006318 <_strtod_l+0x8d0>
 80062c0:	9b08      	ldr	r3, [sp, #32]
 80062c2:	4651      	mov	r1, sl
 80062c4:	b303      	cbz	r3, 8006308 <_strtod_l+0x8c0>
 80062c6:	465a      	mov	r2, fp
 80062c8:	4b96      	ldr	r3, [pc, #600]	@ (8006524 <_strtod_l+0xadc>)
 80062ca:	4013      	ands	r3, r2
 80062cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80062d0:	f04f 32ff 	mov.w	r2, #4294967295
 80062d4:	d81b      	bhi.n	800630e <_strtod_l+0x8c6>
 80062d6:	0d1b      	lsrs	r3, r3, #20
 80062d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	4299      	cmp	r1, r3
 80062e2:	d119      	bne.n	8006318 <_strtod_l+0x8d0>
 80062e4:	4b90      	ldr	r3, [pc, #576]	@ (8006528 <_strtod_l+0xae0>)
 80062e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d102      	bne.n	80062f2 <_strtod_l+0x8aa>
 80062ec:	3101      	adds	r1, #1
 80062ee:	f43f adc6 	beq.w	8005e7e <_strtod_l+0x436>
 80062f2:	f04f 0a00 	mov.w	sl, #0
 80062f6:	4b8b      	ldr	r3, [pc, #556]	@ (8006524 <_strtod_l+0xadc>)
 80062f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062fa:	401a      	ands	r2, r3
 80062fc:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006300:	9b08      	ldr	r3, [sp, #32]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1b9      	bne.n	800627a <_strtod_l+0x832>
 8006306:	e5c5      	b.n	8005e94 <_strtod_l+0x44c>
 8006308:	f04f 33ff 	mov.w	r3, #4294967295
 800630c:	e7e8      	b.n	80062e0 <_strtod_l+0x898>
 800630e:	4613      	mov	r3, r2
 8006310:	e7e6      	b.n	80062e0 <_strtod_l+0x898>
 8006312:	ea53 030a 	orrs.w	r3, r3, sl
 8006316:	d0a2      	beq.n	800625e <_strtod_l+0x816>
 8006318:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800631a:	b1db      	cbz	r3, 8006354 <_strtod_l+0x90c>
 800631c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800631e:	4213      	tst	r3, r2
 8006320:	d0ee      	beq.n	8006300 <_strtod_l+0x8b8>
 8006322:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006324:	4650      	mov	r0, sl
 8006326:	4659      	mov	r1, fp
 8006328:	9a08      	ldr	r2, [sp, #32]
 800632a:	b1bb      	cbz	r3, 800635c <_strtod_l+0x914>
 800632c:	f7ff fb6b 	bl	8005a06 <sulp>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006338:	f7f9 ff18 	bl	800016c <__adddf3>
 800633c:	4682      	mov	sl, r0
 800633e:	468b      	mov	fp, r1
 8006340:	e7de      	b.n	8006300 <_strtod_l+0x8b8>
 8006342:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006346:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800634a:	f04f 3aff 	mov.w	sl, #4294967295
 800634e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006352:	e7d5      	b.n	8006300 <_strtod_l+0x8b8>
 8006354:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006356:	ea13 0f0a 	tst.w	r3, sl
 800635a:	e7e1      	b.n	8006320 <_strtod_l+0x8d8>
 800635c:	f7ff fb53 	bl	8005a06 <sulp>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006368:	f7f9 fefe 	bl	8000168 <__aeabi_dsub>
 800636c:	2200      	movs	r2, #0
 800636e:	2300      	movs	r3, #0
 8006370:	4682      	mov	sl, r0
 8006372:	468b      	mov	fp, r1
 8006374:	f7fa fb18 	bl	80009a8 <__aeabi_dcmpeq>
 8006378:	2800      	cmp	r0, #0
 800637a:	d0c1      	beq.n	8006300 <_strtod_l+0x8b8>
 800637c:	e615      	b.n	8005faa <_strtod_l+0x562>
 800637e:	4641      	mov	r1, r8
 8006380:	4620      	mov	r0, r4
 8006382:	f003 fa11 	bl	80097a8 <__ratio>
 8006386:	2200      	movs	r2, #0
 8006388:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800638c:	4606      	mov	r6, r0
 800638e:	460f      	mov	r7, r1
 8006390:	f7fa fb1e 	bl	80009d0 <__aeabi_dcmple>
 8006394:	2800      	cmp	r0, #0
 8006396:	d06d      	beq.n	8006474 <_strtod_l+0xa2c>
 8006398:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d178      	bne.n	8006490 <_strtod_l+0xa48>
 800639e:	f1ba 0f00 	cmp.w	sl, #0
 80063a2:	d156      	bne.n	8006452 <_strtod_l+0xa0a>
 80063a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d158      	bne.n	8006460 <_strtod_l+0xa18>
 80063ae:	2200      	movs	r2, #0
 80063b0:	4630      	mov	r0, r6
 80063b2:	4639      	mov	r1, r7
 80063b4:	4b5d      	ldr	r3, [pc, #372]	@ (800652c <_strtod_l+0xae4>)
 80063b6:	f7fa fb01 	bl	80009bc <__aeabi_dcmplt>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d157      	bne.n	800646e <_strtod_l+0xa26>
 80063be:	4630      	mov	r0, r6
 80063c0:	4639      	mov	r1, r7
 80063c2:	2200      	movs	r2, #0
 80063c4:	4b5a      	ldr	r3, [pc, #360]	@ (8006530 <_strtod_l+0xae8>)
 80063c6:	f7fa f887 	bl	80004d8 <__aeabi_dmul>
 80063ca:	4606      	mov	r6, r0
 80063cc:	460f      	mov	r7, r1
 80063ce:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80063d2:	9606      	str	r6, [sp, #24]
 80063d4:	9307      	str	r3, [sp, #28]
 80063d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063da:	4d52      	ldr	r5, [pc, #328]	@ (8006524 <_strtod_l+0xadc>)
 80063dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80063e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063e2:	401d      	ands	r5, r3
 80063e4:	4b53      	ldr	r3, [pc, #332]	@ (8006534 <_strtod_l+0xaec>)
 80063e6:	429d      	cmp	r5, r3
 80063e8:	f040 80aa 	bne.w	8006540 <_strtod_l+0xaf8>
 80063ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063ee:	4650      	mov	r0, sl
 80063f0:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80063f4:	4659      	mov	r1, fp
 80063f6:	f003 f917 	bl	8009628 <__ulp>
 80063fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063fe:	f7fa f86b 	bl	80004d8 <__aeabi_dmul>
 8006402:	4652      	mov	r2, sl
 8006404:	465b      	mov	r3, fp
 8006406:	f7f9 feb1 	bl	800016c <__adddf3>
 800640a:	460b      	mov	r3, r1
 800640c:	4945      	ldr	r1, [pc, #276]	@ (8006524 <_strtod_l+0xadc>)
 800640e:	4a4a      	ldr	r2, [pc, #296]	@ (8006538 <_strtod_l+0xaf0>)
 8006410:	4019      	ands	r1, r3
 8006412:	4291      	cmp	r1, r2
 8006414:	4682      	mov	sl, r0
 8006416:	d942      	bls.n	800649e <_strtod_l+0xa56>
 8006418:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800641a:	4b43      	ldr	r3, [pc, #268]	@ (8006528 <_strtod_l+0xae0>)
 800641c:	429a      	cmp	r2, r3
 800641e:	d103      	bne.n	8006428 <_strtod_l+0x9e0>
 8006420:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006422:	3301      	adds	r3, #1
 8006424:	f43f ad2b 	beq.w	8005e7e <_strtod_l+0x436>
 8006428:	f04f 3aff 	mov.w	sl, #4294967295
 800642c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006528 <_strtod_l+0xae0>
 8006430:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006432:	9805      	ldr	r0, [sp, #20]
 8006434:	f002 fdc6 	bl	8008fc4 <_Bfree>
 8006438:	4649      	mov	r1, r9
 800643a:	9805      	ldr	r0, [sp, #20]
 800643c:	f002 fdc2 	bl	8008fc4 <_Bfree>
 8006440:	4641      	mov	r1, r8
 8006442:	9805      	ldr	r0, [sp, #20]
 8006444:	f002 fdbe 	bl	8008fc4 <_Bfree>
 8006448:	4621      	mov	r1, r4
 800644a:	9805      	ldr	r0, [sp, #20]
 800644c:	f002 fdba 	bl	8008fc4 <_Bfree>
 8006450:	e618      	b.n	8006084 <_strtod_l+0x63c>
 8006452:	f1ba 0f01 	cmp.w	sl, #1
 8006456:	d103      	bne.n	8006460 <_strtod_l+0xa18>
 8006458:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800645a:	2b00      	cmp	r3, #0
 800645c:	f43f ada5 	beq.w	8005faa <_strtod_l+0x562>
 8006460:	2200      	movs	r2, #0
 8006462:	4b36      	ldr	r3, [pc, #216]	@ (800653c <_strtod_l+0xaf4>)
 8006464:	2600      	movs	r6, #0
 8006466:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800646a:	4f30      	ldr	r7, [pc, #192]	@ (800652c <_strtod_l+0xae4>)
 800646c:	e7b3      	b.n	80063d6 <_strtod_l+0x98e>
 800646e:	2600      	movs	r6, #0
 8006470:	4f2f      	ldr	r7, [pc, #188]	@ (8006530 <_strtod_l+0xae8>)
 8006472:	e7ac      	b.n	80063ce <_strtod_l+0x986>
 8006474:	4630      	mov	r0, r6
 8006476:	4639      	mov	r1, r7
 8006478:	4b2d      	ldr	r3, [pc, #180]	@ (8006530 <_strtod_l+0xae8>)
 800647a:	2200      	movs	r2, #0
 800647c:	f7fa f82c 	bl	80004d8 <__aeabi_dmul>
 8006480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006482:	4606      	mov	r6, r0
 8006484:	460f      	mov	r7, r1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0a1      	beq.n	80063ce <_strtod_l+0x986>
 800648a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800648e:	e7a2      	b.n	80063d6 <_strtod_l+0x98e>
 8006490:	2200      	movs	r2, #0
 8006492:	4b26      	ldr	r3, [pc, #152]	@ (800652c <_strtod_l+0xae4>)
 8006494:	4616      	mov	r6, r2
 8006496:	461f      	mov	r7, r3
 8006498:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800649c:	e79b      	b.n	80063d6 <_strtod_l+0x98e>
 800649e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80064a2:	9b08      	ldr	r3, [sp, #32]
 80064a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1c1      	bne.n	8006430 <_strtod_l+0x9e8>
 80064ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80064b0:	0d1b      	lsrs	r3, r3, #20
 80064b2:	051b      	lsls	r3, r3, #20
 80064b4:	429d      	cmp	r5, r3
 80064b6:	d1bb      	bne.n	8006430 <_strtod_l+0x9e8>
 80064b8:	4630      	mov	r0, r6
 80064ba:	4639      	mov	r1, r7
 80064bc:	f7fa fe4e 	bl	800115c <__aeabi_d2lz>
 80064c0:	f7f9 ffdc 	bl	800047c <__aeabi_l2d>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4630      	mov	r0, r6
 80064ca:	4639      	mov	r1, r7
 80064cc:	f7f9 fe4c 	bl	8000168 <__aeabi_dsub>
 80064d0:	460b      	mov	r3, r1
 80064d2:	4602      	mov	r2, r0
 80064d4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80064d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80064dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064de:	ea46 060a 	orr.w	r6, r6, sl
 80064e2:	431e      	orrs	r6, r3
 80064e4:	d069      	beq.n	80065ba <_strtod_l+0xb72>
 80064e6:	a30a      	add	r3, pc, #40	@ (adr r3, 8006510 <_strtod_l+0xac8>)
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	f7fa fa66 	bl	80009bc <__aeabi_dcmplt>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	f47f accf 	bne.w	8005e94 <_strtod_l+0x44c>
 80064f6:	a308      	add	r3, pc, #32	@ (adr r3, 8006518 <_strtod_l+0xad0>)
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006500:	f7fa fa7a 	bl	80009f8 <__aeabi_dcmpgt>
 8006504:	2800      	cmp	r0, #0
 8006506:	d093      	beq.n	8006430 <_strtod_l+0x9e8>
 8006508:	e4c4      	b.n	8005e94 <_strtod_l+0x44c>
 800650a:	bf00      	nop
 800650c:	f3af 8000 	nop.w
 8006510:	94a03595 	.word	0x94a03595
 8006514:	3fdfffff 	.word	0x3fdfffff
 8006518:	35afe535 	.word	0x35afe535
 800651c:	3fe00000 	.word	0x3fe00000
 8006520:	000fffff 	.word	0x000fffff
 8006524:	7ff00000 	.word	0x7ff00000
 8006528:	7fefffff 	.word	0x7fefffff
 800652c:	3ff00000 	.word	0x3ff00000
 8006530:	3fe00000 	.word	0x3fe00000
 8006534:	7fe00000 	.word	0x7fe00000
 8006538:	7c9fffff 	.word	0x7c9fffff
 800653c:	bff00000 	.word	0xbff00000
 8006540:	9b08      	ldr	r3, [sp, #32]
 8006542:	b323      	cbz	r3, 800658e <_strtod_l+0xb46>
 8006544:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006548:	d821      	bhi.n	800658e <_strtod_l+0xb46>
 800654a:	a327      	add	r3, pc, #156	@ (adr r3, 80065e8 <_strtod_l+0xba0>)
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	4630      	mov	r0, r6
 8006552:	4639      	mov	r1, r7
 8006554:	f7fa fa3c 	bl	80009d0 <__aeabi_dcmple>
 8006558:	b1a0      	cbz	r0, 8006584 <_strtod_l+0xb3c>
 800655a:	4639      	mov	r1, r7
 800655c:	4630      	mov	r0, r6
 800655e:	f7fa fa93 	bl	8000a88 <__aeabi_d2uiz>
 8006562:	2801      	cmp	r0, #1
 8006564:	bf38      	it	cc
 8006566:	2001      	movcc	r0, #1
 8006568:	f7f9 ff3c 	bl	80003e4 <__aeabi_ui2d>
 800656c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800656e:	4606      	mov	r6, r0
 8006570:	460f      	mov	r7, r1
 8006572:	b9fb      	cbnz	r3, 80065b4 <_strtod_l+0xb6c>
 8006574:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006578:	9014      	str	r0, [sp, #80]	@ 0x50
 800657a:	9315      	str	r3, [sp, #84]	@ 0x54
 800657c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006580:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006584:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006586:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800658a:	1b5b      	subs	r3, r3, r5
 800658c:	9311      	str	r3, [sp, #68]	@ 0x44
 800658e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006592:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006596:	f003 f847 	bl	8009628 <__ulp>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4650      	mov	r0, sl
 80065a0:	4659      	mov	r1, fp
 80065a2:	f7f9 ff99 	bl	80004d8 <__aeabi_dmul>
 80065a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80065aa:	f7f9 fddf 	bl	800016c <__adddf3>
 80065ae:	4682      	mov	sl, r0
 80065b0:	468b      	mov	fp, r1
 80065b2:	e776      	b.n	80064a2 <_strtod_l+0xa5a>
 80065b4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80065b8:	e7e0      	b.n	800657c <_strtod_l+0xb34>
 80065ba:	a30d      	add	r3, pc, #52	@ (adr r3, 80065f0 <_strtod_l+0xba8>)
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	f7fa f9fc 	bl	80009bc <__aeabi_dcmplt>
 80065c4:	e79e      	b.n	8006504 <_strtod_l+0xabc>
 80065c6:	2300      	movs	r3, #0
 80065c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065cc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80065ce:	6013      	str	r3, [r2, #0]
 80065d0:	f7ff ba77 	b.w	8005ac2 <_strtod_l+0x7a>
 80065d4:	2a65      	cmp	r2, #101	@ 0x65
 80065d6:	f43f ab6e 	beq.w	8005cb6 <_strtod_l+0x26e>
 80065da:	2a45      	cmp	r2, #69	@ 0x45
 80065dc:	f43f ab6b 	beq.w	8005cb6 <_strtod_l+0x26e>
 80065e0:	2301      	movs	r3, #1
 80065e2:	f7ff bba6 	b.w	8005d32 <_strtod_l+0x2ea>
 80065e6:	bf00      	nop
 80065e8:	ffc00000 	.word	0xffc00000
 80065ec:	41dfffff 	.word	0x41dfffff
 80065f0:	94a03595 	.word	0x94a03595
 80065f4:	3fcfffff 	.word	0x3fcfffff

080065f8 <_strtod_r>:
 80065f8:	4b01      	ldr	r3, [pc, #4]	@ (8006600 <_strtod_r+0x8>)
 80065fa:	f7ff ba25 	b.w	8005a48 <_strtod_l>
 80065fe:	bf00      	nop
 8006600:	200000d8 	.word	0x200000d8

08006604 <strtod>:
 8006604:	460a      	mov	r2, r1
 8006606:	4601      	mov	r1, r0
 8006608:	4802      	ldr	r0, [pc, #8]	@ (8006614 <strtod+0x10>)
 800660a:	4b03      	ldr	r3, [pc, #12]	@ (8006618 <strtod+0x14>)
 800660c:	6800      	ldr	r0, [r0, #0]
 800660e:	f7ff ba1b 	b.w	8005a48 <_strtod_l>
 8006612:	bf00      	nop
 8006614:	20000244 	.word	0x20000244
 8006618:	200000d8 	.word	0x200000d8

0800661c <_strtol_l.constprop.0>:
 800661c:	2b24      	cmp	r3, #36	@ 0x24
 800661e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006622:	4686      	mov	lr, r0
 8006624:	4690      	mov	r8, r2
 8006626:	d801      	bhi.n	800662c <_strtol_l.constprop.0+0x10>
 8006628:	2b01      	cmp	r3, #1
 800662a:	d106      	bne.n	800663a <_strtol_l.constprop.0+0x1e>
 800662c:	f001 f976 	bl	800791c <__errno>
 8006630:	2316      	movs	r3, #22
 8006632:	6003      	str	r3, [r0, #0]
 8006634:	2000      	movs	r0, #0
 8006636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663a:	460d      	mov	r5, r1
 800663c:	4833      	ldr	r0, [pc, #204]	@ (800670c <_strtol_l.constprop.0+0xf0>)
 800663e:	462a      	mov	r2, r5
 8006640:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006644:	5d06      	ldrb	r6, [r0, r4]
 8006646:	f016 0608 	ands.w	r6, r6, #8
 800664a:	d1f8      	bne.n	800663e <_strtol_l.constprop.0+0x22>
 800664c:	2c2d      	cmp	r4, #45	@ 0x2d
 800664e:	d12d      	bne.n	80066ac <_strtol_l.constprop.0+0x90>
 8006650:	2601      	movs	r6, #1
 8006652:	782c      	ldrb	r4, [r5, #0]
 8006654:	1c95      	adds	r5, r2, #2
 8006656:	f033 0210 	bics.w	r2, r3, #16
 800665a:	d109      	bne.n	8006670 <_strtol_l.constprop.0+0x54>
 800665c:	2c30      	cmp	r4, #48	@ 0x30
 800665e:	d12a      	bne.n	80066b6 <_strtol_l.constprop.0+0x9a>
 8006660:	782a      	ldrb	r2, [r5, #0]
 8006662:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006666:	2a58      	cmp	r2, #88	@ 0x58
 8006668:	d125      	bne.n	80066b6 <_strtol_l.constprop.0+0x9a>
 800666a:	2310      	movs	r3, #16
 800666c:	786c      	ldrb	r4, [r5, #1]
 800666e:	3502      	adds	r5, #2
 8006670:	2200      	movs	r2, #0
 8006672:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006676:	f10c 3cff 	add.w	ip, ip, #4294967295
 800667a:	fbbc f9f3 	udiv	r9, ip, r3
 800667e:	4610      	mov	r0, r2
 8006680:	fb03 ca19 	mls	sl, r3, r9, ip
 8006684:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006688:	2f09      	cmp	r7, #9
 800668a:	d81b      	bhi.n	80066c4 <_strtol_l.constprop.0+0xa8>
 800668c:	463c      	mov	r4, r7
 800668e:	42a3      	cmp	r3, r4
 8006690:	dd27      	ble.n	80066e2 <_strtol_l.constprop.0+0xc6>
 8006692:	1c57      	adds	r7, r2, #1
 8006694:	d007      	beq.n	80066a6 <_strtol_l.constprop.0+0x8a>
 8006696:	4581      	cmp	r9, r0
 8006698:	d320      	bcc.n	80066dc <_strtol_l.constprop.0+0xc0>
 800669a:	d101      	bne.n	80066a0 <_strtol_l.constprop.0+0x84>
 800669c:	45a2      	cmp	sl, r4
 800669e:	db1d      	blt.n	80066dc <_strtol_l.constprop.0+0xc0>
 80066a0:	2201      	movs	r2, #1
 80066a2:	fb00 4003 	mla	r0, r0, r3, r4
 80066a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066aa:	e7eb      	b.n	8006684 <_strtol_l.constprop.0+0x68>
 80066ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80066ae:	bf04      	itt	eq
 80066b0:	782c      	ldrbeq	r4, [r5, #0]
 80066b2:	1c95      	addeq	r5, r2, #2
 80066b4:	e7cf      	b.n	8006656 <_strtol_l.constprop.0+0x3a>
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1da      	bne.n	8006670 <_strtol_l.constprop.0+0x54>
 80066ba:	2c30      	cmp	r4, #48	@ 0x30
 80066bc:	bf0c      	ite	eq
 80066be:	2308      	moveq	r3, #8
 80066c0:	230a      	movne	r3, #10
 80066c2:	e7d5      	b.n	8006670 <_strtol_l.constprop.0+0x54>
 80066c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80066c8:	2f19      	cmp	r7, #25
 80066ca:	d801      	bhi.n	80066d0 <_strtol_l.constprop.0+0xb4>
 80066cc:	3c37      	subs	r4, #55	@ 0x37
 80066ce:	e7de      	b.n	800668e <_strtol_l.constprop.0+0x72>
 80066d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80066d4:	2f19      	cmp	r7, #25
 80066d6:	d804      	bhi.n	80066e2 <_strtol_l.constprop.0+0xc6>
 80066d8:	3c57      	subs	r4, #87	@ 0x57
 80066da:	e7d8      	b.n	800668e <_strtol_l.constprop.0+0x72>
 80066dc:	f04f 32ff 	mov.w	r2, #4294967295
 80066e0:	e7e1      	b.n	80066a6 <_strtol_l.constprop.0+0x8a>
 80066e2:	1c53      	adds	r3, r2, #1
 80066e4:	d108      	bne.n	80066f8 <_strtol_l.constprop.0+0xdc>
 80066e6:	2322      	movs	r3, #34	@ 0x22
 80066e8:	4660      	mov	r0, ip
 80066ea:	f8ce 3000 	str.w	r3, [lr]
 80066ee:	f1b8 0f00 	cmp.w	r8, #0
 80066f2:	d0a0      	beq.n	8006636 <_strtol_l.constprop.0+0x1a>
 80066f4:	1e69      	subs	r1, r5, #1
 80066f6:	e006      	b.n	8006706 <_strtol_l.constprop.0+0xea>
 80066f8:	b106      	cbz	r6, 80066fc <_strtol_l.constprop.0+0xe0>
 80066fa:	4240      	negs	r0, r0
 80066fc:	f1b8 0f00 	cmp.w	r8, #0
 8006700:	d099      	beq.n	8006636 <_strtol_l.constprop.0+0x1a>
 8006702:	2a00      	cmp	r2, #0
 8006704:	d1f6      	bne.n	80066f4 <_strtol_l.constprop.0+0xd8>
 8006706:	f8c8 1000 	str.w	r1, [r8]
 800670a:	e794      	b.n	8006636 <_strtol_l.constprop.0+0x1a>
 800670c:	0800b399 	.word	0x0800b399

08006710 <_strtol_r>:
 8006710:	f7ff bf84 	b.w	800661c <_strtol_l.constprop.0>

08006714 <strtol>:
 8006714:	4613      	mov	r3, r2
 8006716:	460a      	mov	r2, r1
 8006718:	4601      	mov	r1, r0
 800671a:	4802      	ldr	r0, [pc, #8]	@ (8006724 <strtol+0x10>)
 800671c:	6800      	ldr	r0, [r0, #0]
 800671e:	f7ff bf7d 	b.w	800661c <_strtol_l.constprop.0>
 8006722:	bf00      	nop
 8006724:	20000244 	.word	0x20000244

08006728 <__cvt>:
 8006728:	2b00      	cmp	r3, #0
 800672a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800672e:	461d      	mov	r5, r3
 8006730:	bfbb      	ittet	lt
 8006732:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006736:	461d      	movlt	r5, r3
 8006738:	2300      	movge	r3, #0
 800673a:	232d      	movlt	r3, #45	@ 0x2d
 800673c:	b088      	sub	sp, #32
 800673e:	4614      	mov	r4, r2
 8006740:	bfb8      	it	lt
 8006742:	4614      	movlt	r4, r2
 8006744:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006746:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006748:	7013      	strb	r3, [r2, #0]
 800674a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800674c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006750:	f023 0820 	bic.w	r8, r3, #32
 8006754:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006758:	d005      	beq.n	8006766 <__cvt+0x3e>
 800675a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800675e:	d100      	bne.n	8006762 <__cvt+0x3a>
 8006760:	3601      	adds	r6, #1
 8006762:	2302      	movs	r3, #2
 8006764:	e000      	b.n	8006768 <__cvt+0x40>
 8006766:	2303      	movs	r3, #3
 8006768:	aa07      	add	r2, sp, #28
 800676a:	9204      	str	r2, [sp, #16]
 800676c:	aa06      	add	r2, sp, #24
 800676e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006772:	e9cd 3600 	strd	r3, r6, [sp]
 8006776:	4622      	mov	r2, r4
 8006778:	462b      	mov	r3, r5
 800677a:	f001 f9d1 	bl	8007b20 <_dtoa_r>
 800677e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006782:	4607      	mov	r7, r0
 8006784:	d119      	bne.n	80067ba <__cvt+0x92>
 8006786:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006788:	07db      	lsls	r3, r3, #31
 800678a:	d50e      	bpl.n	80067aa <__cvt+0x82>
 800678c:	eb00 0906 	add.w	r9, r0, r6
 8006790:	2200      	movs	r2, #0
 8006792:	2300      	movs	r3, #0
 8006794:	4620      	mov	r0, r4
 8006796:	4629      	mov	r1, r5
 8006798:	f7fa f906 	bl	80009a8 <__aeabi_dcmpeq>
 800679c:	b108      	cbz	r0, 80067a2 <__cvt+0x7a>
 800679e:	f8cd 901c 	str.w	r9, [sp, #28]
 80067a2:	2230      	movs	r2, #48	@ 0x30
 80067a4:	9b07      	ldr	r3, [sp, #28]
 80067a6:	454b      	cmp	r3, r9
 80067a8:	d31e      	bcc.n	80067e8 <__cvt+0xc0>
 80067aa:	4638      	mov	r0, r7
 80067ac:	9b07      	ldr	r3, [sp, #28]
 80067ae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80067b0:	1bdb      	subs	r3, r3, r7
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	b008      	add	sp, #32
 80067b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067be:	eb00 0906 	add.w	r9, r0, r6
 80067c2:	d1e5      	bne.n	8006790 <__cvt+0x68>
 80067c4:	7803      	ldrb	r3, [r0, #0]
 80067c6:	2b30      	cmp	r3, #48	@ 0x30
 80067c8:	d10a      	bne.n	80067e0 <__cvt+0xb8>
 80067ca:	2200      	movs	r2, #0
 80067cc:	2300      	movs	r3, #0
 80067ce:	4620      	mov	r0, r4
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7fa f8e9 	bl	80009a8 <__aeabi_dcmpeq>
 80067d6:	b918      	cbnz	r0, 80067e0 <__cvt+0xb8>
 80067d8:	f1c6 0601 	rsb	r6, r6, #1
 80067dc:	f8ca 6000 	str.w	r6, [sl]
 80067e0:	f8da 3000 	ldr.w	r3, [sl]
 80067e4:	4499      	add	r9, r3
 80067e6:	e7d3      	b.n	8006790 <__cvt+0x68>
 80067e8:	1c59      	adds	r1, r3, #1
 80067ea:	9107      	str	r1, [sp, #28]
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	e7d9      	b.n	80067a4 <__cvt+0x7c>

080067f0 <__exponent>:
 80067f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067f2:	2900      	cmp	r1, #0
 80067f4:	bfb6      	itet	lt
 80067f6:	232d      	movlt	r3, #45	@ 0x2d
 80067f8:	232b      	movge	r3, #43	@ 0x2b
 80067fa:	4249      	neglt	r1, r1
 80067fc:	2909      	cmp	r1, #9
 80067fe:	7002      	strb	r2, [r0, #0]
 8006800:	7043      	strb	r3, [r0, #1]
 8006802:	dd29      	ble.n	8006858 <__exponent+0x68>
 8006804:	f10d 0307 	add.w	r3, sp, #7
 8006808:	461d      	mov	r5, r3
 800680a:	270a      	movs	r7, #10
 800680c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006810:	461a      	mov	r2, r3
 8006812:	fb07 1416 	mls	r4, r7, r6, r1
 8006816:	3430      	adds	r4, #48	@ 0x30
 8006818:	f802 4c01 	strb.w	r4, [r2, #-1]
 800681c:	460c      	mov	r4, r1
 800681e:	2c63      	cmp	r4, #99	@ 0x63
 8006820:	4631      	mov	r1, r6
 8006822:	f103 33ff 	add.w	r3, r3, #4294967295
 8006826:	dcf1      	bgt.n	800680c <__exponent+0x1c>
 8006828:	3130      	adds	r1, #48	@ 0x30
 800682a:	1e94      	subs	r4, r2, #2
 800682c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006830:	4623      	mov	r3, r4
 8006832:	1c41      	adds	r1, r0, #1
 8006834:	42ab      	cmp	r3, r5
 8006836:	d30a      	bcc.n	800684e <__exponent+0x5e>
 8006838:	f10d 0309 	add.w	r3, sp, #9
 800683c:	1a9b      	subs	r3, r3, r2
 800683e:	42ac      	cmp	r4, r5
 8006840:	bf88      	it	hi
 8006842:	2300      	movhi	r3, #0
 8006844:	3302      	adds	r3, #2
 8006846:	4403      	add	r3, r0
 8006848:	1a18      	subs	r0, r3, r0
 800684a:	b003      	add	sp, #12
 800684c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006852:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006856:	e7ed      	b.n	8006834 <__exponent+0x44>
 8006858:	2330      	movs	r3, #48	@ 0x30
 800685a:	3130      	adds	r1, #48	@ 0x30
 800685c:	7083      	strb	r3, [r0, #2]
 800685e:	70c1      	strb	r1, [r0, #3]
 8006860:	1d03      	adds	r3, r0, #4
 8006862:	e7f1      	b.n	8006848 <__exponent+0x58>

08006864 <_printf_float>:
 8006864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006868:	b091      	sub	sp, #68	@ 0x44
 800686a:	460c      	mov	r4, r1
 800686c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006870:	4616      	mov	r6, r2
 8006872:	461f      	mov	r7, r3
 8006874:	4605      	mov	r5, r0
 8006876:	f001 f807 	bl	8007888 <_localeconv_r>
 800687a:	6803      	ldr	r3, [r0, #0]
 800687c:	4618      	mov	r0, r3
 800687e:	9308      	str	r3, [sp, #32]
 8006880:	f7f9 fc66 	bl	8000150 <strlen>
 8006884:	2300      	movs	r3, #0
 8006886:	930e      	str	r3, [sp, #56]	@ 0x38
 8006888:	f8d8 3000 	ldr.w	r3, [r8]
 800688c:	9009      	str	r0, [sp, #36]	@ 0x24
 800688e:	3307      	adds	r3, #7
 8006890:	f023 0307 	bic.w	r3, r3, #7
 8006894:	f103 0208 	add.w	r2, r3, #8
 8006898:	f894 a018 	ldrb.w	sl, [r4, #24]
 800689c:	f8d4 b000 	ldr.w	fp, [r4]
 80068a0:	f8c8 2000 	str.w	r2, [r8]
 80068a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80068ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068ae:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80068b2:	f04f 32ff 	mov.w	r2, #4294967295
 80068b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80068ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80068be:	4b9c      	ldr	r3, [pc, #624]	@ (8006b30 <_printf_float+0x2cc>)
 80068c0:	f7fa f8a4 	bl	8000a0c <__aeabi_dcmpun>
 80068c4:	bb70      	cbnz	r0, 8006924 <_printf_float+0xc0>
 80068c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80068ca:	f04f 32ff 	mov.w	r2, #4294967295
 80068ce:	4b98      	ldr	r3, [pc, #608]	@ (8006b30 <_printf_float+0x2cc>)
 80068d0:	f7fa f87e 	bl	80009d0 <__aeabi_dcmple>
 80068d4:	bb30      	cbnz	r0, 8006924 <_printf_float+0xc0>
 80068d6:	2200      	movs	r2, #0
 80068d8:	2300      	movs	r3, #0
 80068da:	4640      	mov	r0, r8
 80068dc:	4649      	mov	r1, r9
 80068de:	f7fa f86d 	bl	80009bc <__aeabi_dcmplt>
 80068e2:	b110      	cbz	r0, 80068ea <_printf_float+0x86>
 80068e4:	232d      	movs	r3, #45	@ 0x2d
 80068e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068ea:	4a92      	ldr	r2, [pc, #584]	@ (8006b34 <_printf_float+0x2d0>)
 80068ec:	4b92      	ldr	r3, [pc, #584]	@ (8006b38 <_printf_float+0x2d4>)
 80068ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80068f2:	bf94      	ite	ls
 80068f4:	4690      	movls	r8, r2
 80068f6:	4698      	movhi	r8, r3
 80068f8:	2303      	movs	r3, #3
 80068fa:	f04f 0900 	mov.w	r9, #0
 80068fe:	6123      	str	r3, [r4, #16]
 8006900:	f02b 0304 	bic.w	r3, fp, #4
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	4633      	mov	r3, r6
 8006908:	4621      	mov	r1, r4
 800690a:	4628      	mov	r0, r5
 800690c:	9700      	str	r7, [sp, #0]
 800690e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006910:	f000 f9d4 	bl	8006cbc <_printf_common>
 8006914:	3001      	adds	r0, #1
 8006916:	f040 8090 	bne.w	8006a3a <_printf_float+0x1d6>
 800691a:	f04f 30ff 	mov.w	r0, #4294967295
 800691e:	b011      	add	sp, #68	@ 0x44
 8006920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006924:	4642      	mov	r2, r8
 8006926:	464b      	mov	r3, r9
 8006928:	4640      	mov	r0, r8
 800692a:	4649      	mov	r1, r9
 800692c:	f7fa f86e 	bl	8000a0c <__aeabi_dcmpun>
 8006930:	b148      	cbz	r0, 8006946 <_printf_float+0xe2>
 8006932:	464b      	mov	r3, r9
 8006934:	2b00      	cmp	r3, #0
 8006936:	bfb8      	it	lt
 8006938:	232d      	movlt	r3, #45	@ 0x2d
 800693a:	4a80      	ldr	r2, [pc, #512]	@ (8006b3c <_printf_float+0x2d8>)
 800693c:	bfb8      	it	lt
 800693e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006942:	4b7f      	ldr	r3, [pc, #508]	@ (8006b40 <_printf_float+0x2dc>)
 8006944:	e7d3      	b.n	80068ee <_printf_float+0x8a>
 8006946:	6863      	ldr	r3, [r4, #4]
 8006948:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	d13f      	bne.n	80069d0 <_printf_float+0x16c>
 8006950:	2306      	movs	r3, #6
 8006952:	6063      	str	r3, [r4, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800695a:	6023      	str	r3, [r4, #0]
 800695c:	9206      	str	r2, [sp, #24]
 800695e:	aa0e      	add	r2, sp, #56	@ 0x38
 8006960:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006964:	aa0d      	add	r2, sp, #52	@ 0x34
 8006966:	9203      	str	r2, [sp, #12]
 8006968:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800696c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006970:	6863      	ldr	r3, [r4, #4]
 8006972:	4642      	mov	r2, r8
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	4628      	mov	r0, r5
 8006978:	464b      	mov	r3, r9
 800697a:	910a      	str	r1, [sp, #40]	@ 0x28
 800697c:	f7ff fed4 	bl	8006728 <__cvt>
 8006980:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006982:	4680      	mov	r8, r0
 8006984:	2947      	cmp	r1, #71	@ 0x47
 8006986:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006988:	d128      	bne.n	80069dc <_printf_float+0x178>
 800698a:	1cc8      	adds	r0, r1, #3
 800698c:	db02      	blt.n	8006994 <_printf_float+0x130>
 800698e:	6863      	ldr	r3, [r4, #4]
 8006990:	4299      	cmp	r1, r3
 8006992:	dd40      	ble.n	8006a16 <_printf_float+0x1b2>
 8006994:	f1aa 0a02 	sub.w	sl, sl, #2
 8006998:	fa5f fa8a 	uxtb.w	sl, sl
 800699c:	4652      	mov	r2, sl
 800699e:	3901      	subs	r1, #1
 80069a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80069a4:	910d      	str	r1, [sp, #52]	@ 0x34
 80069a6:	f7ff ff23 	bl	80067f0 <__exponent>
 80069aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069ac:	4681      	mov	r9, r0
 80069ae:	1813      	adds	r3, r2, r0
 80069b0:	2a01      	cmp	r2, #1
 80069b2:	6123      	str	r3, [r4, #16]
 80069b4:	dc02      	bgt.n	80069bc <_printf_float+0x158>
 80069b6:	6822      	ldr	r2, [r4, #0]
 80069b8:	07d2      	lsls	r2, r2, #31
 80069ba:	d501      	bpl.n	80069c0 <_printf_float+0x15c>
 80069bc:	3301      	adds	r3, #1
 80069be:	6123      	str	r3, [r4, #16]
 80069c0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d09e      	beq.n	8006906 <_printf_float+0xa2>
 80069c8:	232d      	movs	r3, #45	@ 0x2d
 80069ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069ce:	e79a      	b.n	8006906 <_printf_float+0xa2>
 80069d0:	2947      	cmp	r1, #71	@ 0x47
 80069d2:	d1bf      	bne.n	8006954 <_printf_float+0xf0>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1bd      	bne.n	8006954 <_printf_float+0xf0>
 80069d8:	2301      	movs	r3, #1
 80069da:	e7ba      	b.n	8006952 <_printf_float+0xee>
 80069dc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069e0:	d9dc      	bls.n	800699c <_printf_float+0x138>
 80069e2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80069e6:	d118      	bne.n	8006a1a <_printf_float+0x1b6>
 80069e8:	2900      	cmp	r1, #0
 80069ea:	6863      	ldr	r3, [r4, #4]
 80069ec:	dd0b      	ble.n	8006a06 <_printf_float+0x1a2>
 80069ee:	6121      	str	r1, [r4, #16]
 80069f0:	b913      	cbnz	r3, 80069f8 <_printf_float+0x194>
 80069f2:	6822      	ldr	r2, [r4, #0]
 80069f4:	07d0      	lsls	r0, r2, #31
 80069f6:	d502      	bpl.n	80069fe <_printf_float+0x19a>
 80069f8:	3301      	adds	r3, #1
 80069fa:	440b      	add	r3, r1
 80069fc:	6123      	str	r3, [r4, #16]
 80069fe:	f04f 0900 	mov.w	r9, #0
 8006a02:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a04:	e7dc      	b.n	80069c0 <_printf_float+0x15c>
 8006a06:	b913      	cbnz	r3, 8006a0e <_printf_float+0x1aa>
 8006a08:	6822      	ldr	r2, [r4, #0]
 8006a0a:	07d2      	lsls	r2, r2, #31
 8006a0c:	d501      	bpl.n	8006a12 <_printf_float+0x1ae>
 8006a0e:	3302      	adds	r3, #2
 8006a10:	e7f4      	b.n	80069fc <_printf_float+0x198>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e7f2      	b.n	80069fc <_printf_float+0x198>
 8006a16:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006a1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a1c:	4299      	cmp	r1, r3
 8006a1e:	db05      	blt.n	8006a2c <_printf_float+0x1c8>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	6121      	str	r1, [r4, #16]
 8006a24:	07d8      	lsls	r0, r3, #31
 8006a26:	d5ea      	bpl.n	80069fe <_printf_float+0x19a>
 8006a28:	1c4b      	adds	r3, r1, #1
 8006a2a:	e7e7      	b.n	80069fc <_printf_float+0x198>
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	bfcc      	ite	gt
 8006a30:	2201      	movgt	r2, #1
 8006a32:	f1c1 0202 	rsble	r2, r1, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	e7e0      	b.n	80069fc <_printf_float+0x198>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	055a      	lsls	r2, r3, #21
 8006a3e:	d407      	bmi.n	8006a50 <_printf_float+0x1ec>
 8006a40:	6923      	ldr	r3, [r4, #16]
 8006a42:	4642      	mov	r2, r8
 8006a44:	4631      	mov	r1, r6
 8006a46:	4628      	mov	r0, r5
 8006a48:	47b8      	blx	r7
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	d12b      	bne.n	8006aa6 <_printf_float+0x242>
 8006a4e:	e764      	b.n	800691a <_printf_float+0xb6>
 8006a50:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a54:	f240 80dc 	bls.w	8006c10 <_printf_float+0x3ac>
 8006a58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f7f9 ffa2 	bl	80009a8 <__aeabi_dcmpeq>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d033      	beq.n	8006ad0 <_printf_float+0x26c>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	4a35      	ldr	r2, [pc, #212]	@ (8006b44 <_printf_float+0x2e0>)
 8006a70:	47b8      	blx	r7
 8006a72:	3001      	adds	r0, #1
 8006a74:	f43f af51 	beq.w	800691a <_printf_float+0xb6>
 8006a78:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006a7c:	4543      	cmp	r3, r8
 8006a7e:	db02      	blt.n	8006a86 <_printf_float+0x222>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	07d8      	lsls	r0, r3, #31
 8006a84:	d50f      	bpl.n	8006aa6 <_printf_float+0x242>
 8006a86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	f43f af42 	beq.w	800691a <_printf_float+0xb6>
 8006a96:	f04f 0900 	mov.w	r9, #0
 8006a9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a9e:	f104 0a1a 	add.w	sl, r4, #26
 8006aa2:	45c8      	cmp	r8, r9
 8006aa4:	dc09      	bgt.n	8006aba <_printf_float+0x256>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	079b      	lsls	r3, r3, #30
 8006aaa:	f100 8102 	bmi.w	8006cb2 <_printf_float+0x44e>
 8006aae:	68e0      	ldr	r0, [r4, #12]
 8006ab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ab2:	4298      	cmp	r0, r3
 8006ab4:	bfb8      	it	lt
 8006ab6:	4618      	movlt	r0, r3
 8006ab8:	e731      	b.n	800691e <_printf_float+0xba>
 8006aba:	2301      	movs	r3, #1
 8006abc:	4652      	mov	r2, sl
 8006abe:	4631      	mov	r1, r6
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	47b8      	blx	r7
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	f43f af28 	beq.w	800691a <_printf_float+0xb6>
 8006aca:	f109 0901 	add.w	r9, r9, #1
 8006ace:	e7e8      	b.n	8006aa2 <_printf_float+0x23e>
 8006ad0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	dc38      	bgt.n	8006b48 <_printf_float+0x2e4>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4628      	mov	r0, r5
 8006adc:	4a19      	ldr	r2, [pc, #100]	@ (8006b44 <_printf_float+0x2e0>)
 8006ade:	47b8      	blx	r7
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	f43f af1a 	beq.w	800691a <_printf_float+0xb6>
 8006ae6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006aea:	ea59 0303 	orrs.w	r3, r9, r3
 8006aee:	d102      	bne.n	8006af6 <_printf_float+0x292>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	07d9      	lsls	r1, r3, #31
 8006af4:	d5d7      	bpl.n	8006aa6 <_printf_float+0x242>
 8006af6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006afa:	4631      	mov	r1, r6
 8006afc:	4628      	mov	r0, r5
 8006afe:	47b8      	blx	r7
 8006b00:	3001      	adds	r0, #1
 8006b02:	f43f af0a 	beq.w	800691a <_printf_float+0xb6>
 8006b06:	f04f 0a00 	mov.w	sl, #0
 8006b0a:	f104 0b1a 	add.w	fp, r4, #26
 8006b0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b10:	425b      	negs	r3, r3
 8006b12:	4553      	cmp	r3, sl
 8006b14:	dc01      	bgt.n	8006b1a <_printf_float+0x2b6>
 8006b16:	464b      	mov	r3, r9
 8006b18:	e793      	b.n	8006a42 <_printf_float+0x1de>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	465a      	mov	r2, fp
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b8      	blx	r7
 8006b24:	3001      	adds	r0, #1
 8006b26:	f43f aef8 	beq.w	800691a <_printf_float+0xb6>
 8006b2a:	f10a 0a01 	add.w	sl, sl, #1
 8006b2e:	e7ee      	b.n	8006b0e <_printf_float+0x2aa>
 8006b30:	7fefffff 	.word	0x7fefffff
 8006b34:	0800b499 	.word	0x0800b499
 8006b38:	0800b49d 	.word	0x0800b49d
 8006b3c:	0800b4a1 	.word	0x0800b4a1
 8006b40:	0800b4a5 	.word	0x0800b4a5
 8006b44:	0800b7d7 	.word	0x0800b7d7
 8006b48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b4a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006b4e:	4553      	cmp	r3, sl
 8006b50:	bfa8      	it	ge
 8006b52:	4653      	movge	r3, sl
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	4699      	mov	r9, r3
 8006b58:	dc36      	bgt.n	8006bc8 <_printf_float+0x364>
 8006b5a:	f04f 0b00 	mov.w	fp, #0
 8006b5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b62:	f104 021a 	add.w	r2, r4, #26
 8006b66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b68:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b6a:	eba3 0309 	sub.w	r3, r3, r9
 8006b6e:	455b      	cmp	r3, fp
 8006b70:	dc31      	bgt.n	8006bd6 <_printf_float+0x372>
 8006b72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b74:	459a      	cmp	sl, r3
 8006b76:	dc3a      	bgt.n	8006bee <_printf_float+0x38a>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	07da      	lsls	r2, r3, #31
 8006b7c:	d437      	bmi.n	8006bee <_printf_float+0x38a>
 8006b7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b80:	ebaa 0903 	sub.w	r9, sl, r3
 8006b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b86:	ebaa 0303 	sub.w	r3, sl, r3
 8006b8a:	4599      	cmp	r9, r3
 8006b8c:	bfa8      	it	ge
 8006b8e:	4699      	movge	r9, r3
 8006b90:	f1b9 0f00 	cmp.w	r9, #0
 8006b94:	dc33      	bgt.n	8006bfe <_printf_float+0x39a>
 8006b96:	f04f 0800 	mov.w	r8, #0
 8006b9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b9e:	f104 0b1a 	add.w	fp, r4, #26
 8006ba2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ba4:	ebaa 0303 	sub.w	r3, sl, r3
 8006ba8:	eba3 0309 	sub.w	r3, r3, r9
 8006bac:	4543      	cmp	r3, r8
 8006bae:	f77f af7a 	ble.w	8006aa6 <_printf_float+0x242>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	465a      	mov	r2, fp
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b8      	blx	r7
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	f43f aeac 	beq.w	800691a <_printf_float+0xb6>
 8006bc2:	f108 0801 	add.w	r8, r8, #1
 8006bc6:	e7ec      	b.n	8006ba2 <_printf_float+0x33e>
 8006bc8:	4642      	mov	r2, r8
 8006bca:	4631      	mov	r1, r6
 8006bcc:	4628      	mov	r0, r5
 8006bce:	47b8      	blx	r7
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d1c2      	bne.n	8006b5a <_printf_float+0x2f6>
 8006bd4:	e6a1      	b.n	800691a <_printf_float+0xb6>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	4631      	mov	r1, r6
 8006bda:	4628      	mov	r0, r5
 8006bdc:	920a      	str	r2, [sp, #40]	@ 0x28
 8006bde:	47b8      	blx	r7
 8006be0:	3001      	adds	r0, #1
 8006be2:	f43f ae9a 	beq.w	800691a <_printf_float+0xb6>
 8006be6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006be8:	f10b 0b01 	add.w	fp, fp, #1
 8006bec:	e7bb      	b.n	8006b66 <_printf_float+0x302>
 8006bee:	4631      	mov	r1, r6
 8006bf0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b8      	blx	r7
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d1c0      	bne.n	8006b7e <_printf_float+0x31a>
 8006bfc:	e68d      	b.n	800691a <_printf_float+0xb6>
 8006bfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c00:	464b      	mov	r3, r9
 8006c02:	4631      	mov	r1, r6
 8006c04:	4628      	mov	r0, r5
 8006c06:	4442      	add	r2, r8
 8006c08:	47b8      	blx	r7
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d1c3      	bne.n	8006b96 <_printf_float+0x332>
 8006c0e:	e684      	b.n	800691a <_printf_float+0xb6>
 8006c10:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006c14:	f1ba 0f01 	cmp.w	sl, #1
 8006c18:	dc01      	bgt.n	8006c1e <_printf_float+0x3ba>
 8006c1a:	07db      	lsls	r3, r3, #31
 8006c1c:	d536      	bpl.n	8006c8c <_printf_float+0x428>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	4642      	mov	r2, r8
 8006c22:	4631      	mov	r1, r6
 8006c24:	4628      	mov	r0, r5
 8006c26:	47b8      	blx	r7
 8006c28:	3001      	adds	r0, #1
 8006c2a:	f43f ae76 	beq.w	800691a <_printf_float+0xb6>
 8006c2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c32:	4631      	mov	r1, r6
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b8      	blx	r7
 8006c38:	3001      	adds	r0, #1
 8006c3a:	f43f ae6e 	beq.w	800691a <_printf_float+0xb6>
 8006c3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c42:	2200      	movs	r2, #0
 8006c44:	2300      	movs	r3, #0
 8006c46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c4a:	f7f9 fead 	bl	80009a8 <__aeabi_dcmpeq>
 8006c4e:	b9c0      	cbnz	r0, 8006c82 <_printf_float+0x41e>
 8006c50:	4653      	mov	r3, sl
 8006c52:	f108 0201 	add.w	r2, r8, #1
 8006c56:	4631      	mov	r1, r6
 8006c58:	4628      	mov	r0, r5
 8006c5a:	47b8      	blx	r7
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	d10c      	bne.n	8006c7a <_printf_float+0x416>
 8006c60:	e65b      	b.n	800691a <_printf_float+0xb6>
 8006c62:	2301      	movs	r3, #1
 8006c64:	465a      	mov	r2, fp
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f43f ae54 	beq.w	800691a <_printf_float+0xb6>
 8006c72:	f108 0801 	add.w	r8, r8, #1
 8006c76:	45d0      	cmp	r8, sl
 8006c78:	dbf3      	blt.n	8006c62 <_printf_float+0x3fe>
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006c80:	e6e0      	b.n	8006a44 <_printf_float+0x1e0>
 8006c82:	f04f 0800 	mov.w	r8, #0
 8006c86:	f104 0b1a 	add.w	fp, r4, #26
 8006c8a:	e7f4      	b.n	8006c76 <_printf_float+0x412>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	4642      	mov	r2, r8
 8006c90:	e7e1      	b.n	8006c56 <_printf_float+0x3f2>
 8006c92:	2301      	movs	r3, #1
 8006c94:	464a      	mov	r2, r9
 8006c96:	4631      	mov	r1, r6
 8006c98:	4628      	mov	r0, r5
 8006c9a:	47b8      	blx	r7
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	f43f ae3c 	beq.w	800691a <_printf_float+0xb6>
 8006ca2:	f108 0801 	add.w	r8, r8, #1
 8006ca6:	68e3      	ldr	r3, [r4, #12]
 8006ca8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006caa:	1a5b      	subs	r3, r3, r1
 8006cac:	4543      	cmp	r3, r8
 8006cae:	dcf0      	bgt.n	8006c92 <_printf_float+0x42e>
 8006cb0:	e6fd      	b.n	8006aae <_printf_float+0x24a>
 8006cb2:	f04f 0800 	mov.w	r8, #0
 8006cb6:	f104 0919 	add.w	r9, r4, #25
 8006cba:	e7f4      	b.n	8006ca6 <_printf_float+0x442>

08006cbc <_printf_common>:
 8006cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc0:	4616      	mov	r6, r2
 8006cc2:	4698      	mov	r8, r3
 8006cc4:	688a      	ldr	r2, [r1, #8]
 8006cc6:	690b      	ldr	r3, [r1, #16]
 8006cc8:	4607      	mov	r7, r0
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	bfb8      	it	lt
 8006cce:	4613      	movlt	r3, r2
 8006cd0:	6033      	str	r3, [r6, #0]
 8006cd2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cdc:	b10a      	cbz	r2, 8006ce2 <_printf_common+0x26>
 8006cde:	3301      	adds	r3, #1
 8006ce0:	6033      	str	r3, [r6, #0]
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	0699      	lsls	r1, r3, #26
 8006ce6:	bf42      	ittt	mi
 8006ce8:	6833      	ldrmi	r3, [r6, #0]
 8006cea:	3302      	addmi	r3, #2
 8006cec:	6033      	strmi	r3, [r6, #0]
 8006cee:	6825      	ldr	r5, [r4, #0]
 8006cf0:	f015 0506 	ands.w	r5, r5, #6
 8006cf4:	d106      	bne.n	8006d04 <_printf_common+0x48>
 8006cf6:	f104 0a19 	add.w	sl, r4, #25
 8006cfa:	68e3      	ldr	r3, [r4, #12]
 8006cfc:	6832      	ldr	r2, [r6, #0]
 8006cfe:	1a9b      	subs	r3, r3, r2
 8006d00:	42ab      	cmp	r3, r5
 8006d02:	dc2b      	bgt.n	8006d5c <_printf_common+0xa0>
 8006d04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d08:	6822      	ldr	r2, [r4, #0]
 8006d0a:	3b00      	subs	r3, #0
 8006d0c:	bf18      	it	ne
 8006d0e:	2301      	movne	r3, #1
 8006d10:	0692      	lsls	r2, r2, #26
 8006d12:	d430      	bmi.n	8006d76 <_printf_common+0xba>
 8006d14:	4641      	mov	r1, r8
 8006d16:	4638      	mov	r0, r7
 8006d18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d1c:	47c8      	blx	r9
 8006d1e:	3001      	adds	r0, #1
 8006d20:	d023      	beq.n	8006d6a <_printf_common+0xae>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	6922      	ldr	r2, [r4, #16]
 8006d26:	f003 0306 	and.w	r3, r3, #6
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	bf14      	ite	ne
 8006d2e:	2500      	movne	r5, #0
 8006d30:	6833      	ldreq	r3, [r6, #0]
 8006d32:	f04f 0600 	mov.w	r6, #0
 8006d36:	bf08      	it	eq
 8006d38:	68e5      	ldreq	r5, [r4, #12]
 8006d3a:	f104 041a 	add.w	r4, r4, #26
 8006d3e:	bf08      	it	eq
 8006d40:	1aed      	subeq	r5, r5, r3
 8006d42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006d46:	bf08      	it	eq
 8006d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	bfc4      	itt	gt
 8006d50:	1a9b      	subgt	r3, r3, r2
 8006d52:	18ed      	addgt	r5, r5, r3
 8006d54:	42b5      	cmp	r5, r6
 8006d56:	d11a      	bne.n	8006d8e <_printf_common+0xd2>
 8006d58:	2000      	movs	r0, #0
 8006d5a:	e008      	b.n	8006d6e <_printf_common+0xb2>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	4652      	mov	r2, sl
 8006d60:	4641      	mov	r1, r8
 8006d62:	4638      	mov	r0, r7
 8006d64:	47c8      	blx	r9
 8006d66:	3001      	adds	r0, #1
 8006d68:	d103      	bne.n	8006d72 <_printf_common+0xb6>
 8006d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d72:	3501      	adds	r5, #1
 8006d74:	e7c1      	b.n	8006cfa <_printf_common+0x3e>
 8006d76:	2030      	movs	r0, #48	@ 0x30
 8006d78:	18e1      	adds	r1, r4, r3
 8006d7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d84:	4422      	add	r2, r4
 8006d86:	3302      	adds	r3, #2
 8006d88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d8c:	e7c2      	b.n	8006d14 <_printf_common+0x58>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4622      	mov	r2, r4
 8006d92:	4641      	mov	r1, r8
 8006d94:	4638      	mov	r0, r7
 8006d96:	47c8      	blx	r9
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d0e6      	beq.n	8006d6a <_printf_common+0xae>
 8006d9c:	3601      	adds	r6, #1
 8006d9e:	e7d9      	b.n	8006d54 <_printf_common+0x98>

08006da0 <_printf_i>:
 8006da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da4:	7e0f      	ldrb	r7, [r1, #24]
 8006da6:	4691      	mov	r9, r2
 8006da8:	2f78      	cmp	r7, #120	@ 0x78
 8006daa:	4680      	mov	r8, r0
 8006dac:	460c      	mov	r4, r1
 8006dae:	469a      	mov	sl, r3
 8006db0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006db2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006db6:	d807      	bhi.n	8006dc8 <_printf_i+0x28>
 8006db8:	2f62      	cmp	r7, #98	@ 0x62
 8006dba:	d80a      	bhi.n	8006dd2 <_printf_i+0x32>
 8006dbc:	2f00      	cmp	r7, #0
 8006dbe:	f000 80d3 	beq.w	8006f68 <_printf_i+0x1c8>
 8006dc2:	2f58      	cmp	r7, #88	@ 0x58
 8006dc4:	f000 80ba 	beq.w	8006f3c <_printf_i+0x19c>
 8006dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006dd0:	e03a      	b.n	8006e48 <_printf_i+0xa8>
 8006dd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006dd6:	2b15      	cmp	r3, #21
 8006dd8:	d8f6      	bhi.n	8006dc8 <_printf_i+0x28>
 8006dda:	a101      	add	r1, pc, #4	@ (adr r1, 8006de0 <_printf_i+0x40>)
 8006ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006de0:	08006e39 	.word	0x08006e39
 8006de4:	08006e4d 	.word	0x08006e4d
 8006de8:	08006dc9 	.word	0x08006dc9
 8006dec:	08006dc9 	.word	0x08006dc9
 8006df0:	08006dc9 	.word	0x08006dc9
 8006df4:	08006dc9 	.word	0x08006dc9
 8006df8:	08006e4d 	.word	0x08006e4d
 8006dfc:	08006dc9 	.word	0x08006dc9
 8006e00:	08006dc9 	.word	0x08006dc9
 8006e04:	08006dc9 	.word	0x08006dc9
 8006e08:	08006dc9 	.word	0x08006dc9
 8006e0c:	08006f4f 	.word	0x08006f4f
 8006e10:	08006e77 	.word	0x08006e77
 8006e14:	08006f09 	.word	0x08006f09
 8006e18:	08006dc9 	.word	0x08006dc9
 8006e1c:	08006dc9 	.word	0x08006dc9
 8006e20:	08006f71 	.word	0x08006f71
 8006e24:	08006dc9 	.word	0x08006dc9
 8006e28:	08006e77 	.word	0x08006e77
 8006e2c:	08006dc9 	.word	0x08006dc9
 8006e30:	08006dc9 	.word	0x08006dc9
 8006e34:	08006f11 	.word	0x08006f11
 8006e38:	6833      	ldr	r3, [r6, #0]
 8006e3a:	1d1a      	adds	r2, r3, #4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6032      	str	r2, [r6, #0]
 8006e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e09e      	b.n	8006f8a <_printf_i+0x1ea>
 8006e4c:	6833      	ldr	r3, [r6, #0]
 8006e4e:	6820      	ldr	r0, [r4, #0]
 8006e50:	1d19      	adds	r1, r3, #4
 8006e52:	6031      	str	r1, [r6, #0]
 8006e54:	0606      	lsls	r6, r0, #24
 8006e56:	d501      	bpl.n	8006e5c <_printf_i+0xbc>
 8006e58:	681d      	ldr	r5, [r3, #0]
 8006e5a:	e003      	b.n	8006e64 <_printf_i+0xc4>
 8006e5c:	0645      	lsls	r5, r0, #25
 8006e5e:	d5fb      	bpl.n	8006e58 <_printf_i+0xb8>
 8006e60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e64:	2d00      	cmp	r5, #0
 8006e66:	da03      	bge.n	8006e70 <_printf_i+0xd0>
 8006e68:	232d      	movs	r3, #45	@ 0x2d
 8006e6a:	426d      	negs	r5, r5
 8006e6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e70:	230a      	movs	r3, #10
 8006e72:	4859      	ldr	r0, [pc, #356]	@ (8006fd8 <_printf_i+0x238>)
 8006e74:	e011      	b.n	8006e9a <_printf_i+0xfa>
 8006e76:	6821      	ldr	r1, [r4, #0]
 8006e78:	6833      	ldr	r3, [r6, #0]
 8006e7a:	0608      	lsls	r0, r1, #24
 8006e7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e80:	d402      	bmi.n	8006e88 <_printf_i+0xe8>
 8006e82:	0649      	lsls	r1, r1, #25
 8006e84:	bf48      	it	mi
 8006e86:	b2ad      	uxthmi	r5, r5
 8006e88:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e8a:	6033      	str	r3, [r6, #0]
 8006e8c:	bf14      	ite	ne
 8006e8e:	230a      	movne	r3, #10
 8006e90:	2308      	moveq	r3, #8
 8006e92:	4851      	ldr	r0, [pc, #324]	@ (8006fd8 <_printf_i+0x238>)
 8006e94:	2100      	movs	r1, #0
 8006e96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e9a:	6866      	ldr	r6, [r4, #4]
 8006e9c:	2e00      	cmp	r6, #0
 8006e9e:	bfa8      	it	ge
 8006ea0:	6821      	ldrge	r1, [r4, #0]
 8006ea2:	60a6      	str	r6, [r4, #8]
 8006ea4:	bfa4      	itt	ge
 8006ea6:	f021 0104 	bicge.w	r1, r1, #4
 8006eaa:	6021      	strge	r1, [r4, #0]
 8006eac:	b90d      	cbnz	r5, 8006eb2 <_printf_i+0x112>
 8006eae:	2e00      	cmp	r6, #0
 8006eb0:	d04b      	beq.n	8006f4a <_printf_i+0x1aa>
 8006eb2:	4616      	mov	r6, r2
 8006eb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006eb8:	fb03 5711 	mls	r7, r3, r1, r5
 8006ebc:	5dc7      	ldrb	r7, [r0, r7]
 8006ebe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ec2:	462f      	mov	r7, r5
 8006ec4:	42bb      	cmp	r3, r7
 8006ec6:	460d      	mov	r5, r1
 8006ec8:	d9f4      	bls.n	8006eb4 <_printf_i+0x114>
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d10b      	bne.n	8006ee6 <_printf_i+0x146>
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	07df      	lsls	r7, r3, #31
 8006ed2:	d508      	bpl.n	8006ee6 <_printf_i+0x146>
 8006ed4:	6923      	ldr	r3, [r4, #16]
 8006ed6:	6861      	ldr	r1, [r4, #4]
 8006ed8:	4299      	cmp	r1, r3
 8006eda:	bfde      	ittt	le
 8006edc:	2330      	movle	r3, #48	@ 0x30
 8006ede:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ee2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ee6:	1b92      	subs	r2, r2, r6
 8006ee8:	6122      	str	r2, [r4, #16]
 8006eea:	464b      	mov	r3, r9
 8006eec:	4621      	mov	r1, r4
 8006eee:	4640      	mov	r0, r8
 8006ef0:	f8cd a000 	str.w	sl, [sp]
 8006ef4:	aa03      	add	r2, sp, #12
 8006ef6:	f7ff fee1 	bl	8006cbc <_printf_common>
 8006efa:	3001      	adds	r0, #1
 8006efc:	d14a      	bne.n	8006f94 <_printf_i+0x1f4>
 8006efe:	f04f 30ff 	mov.w	r0, #4294967295
 8006f02:	b004      	add	sp, #16
 8006f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	f043 0320 	orr.w	r3, r3, #32
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	2778      	movs	r7, #120	@ 0x78
 8006f12:	4832      	ldr	r0, [pc, #200]	@ (8006fdc <_printf_i+0x23c>)
 8006f14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	6831      	ldr	r1, [r6, #0]
 8006f1c:	061f      	lsls	r7, r3, #24
 8006f1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f22:	d402      	bmi.n	8006f2a <_printf_i+0x18a>
 8006f24:	065f      	lsls	r7, r3, #25
 8006f26:	bf48      	it	mi
 8006f28:	b2ad      	uxthmi	r5, r5
 8006f2a:	6031      	str	r1, [r6, #0]
 8006f2c:	07d9      	lsls	r1, r3, #31
 8006f2e:	bf44      	itt	mi
 8006f30:	f043 0320 	orrmi.w	r3, r3, #32
 8006f34:	6023      	strmi	r3, [r4, #0]
 8006f36:	b11d      	cbz	r5, 8006f40 <_printf_i+0x1a0>
 8006f38:	2310      	movs	r3, #16
 8006f3a:	e7ab      	b.n	8006e94 <_printf_i+0xf4>
 8006f3c:	4826      	ldr	r0, [pc, #152]	@ (8006fd8 <_printf_i+0x238>)
 8006f3e:	e7e9      	b.n	8006f14 <_printf_i+0x174>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	f023 0320 	bic.w	r3, r3, #32
 8006f46:	6023      	str	r3, [r4, #0]
 8006f48:	e7f6      	b.n	8006f38 <_printf_i+0x198>
 8006f4a:	4616      	mov	r6, r2
 8006f4c:	e7bd      	b.n	8006eca <_printf_i+0x12a>
 8006f4e:	6833      	ldr	r3, [r6, #0]
 8006f50:	6825      	ldr	r5, [r4, #0]
 8006f52:	1d18      	adds	r0, r3, #4
 8006f54:	6961      	ldr	r1, [r4, #20]
 8006f56:	6030      	str	r0, [r6, #0]
 8006f58:	062e      	lsls	r6, r5, #24
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	d501      	bpl.n	8006f62 <_printf_i+0x1c2>
 8006f5e:	6019      	str	r1, [r3, #0]
 8006f60:	e002      	b.n	8006f68 <_printf_i+0x1c8>
 8006f62:	0668      	lsls	r0, r5, #25
 8006f64:	d5fb      	bpl.n	8006f5e <_printf_i+0x1be>
 8006f66:	8019      	strh	r1, [r3, #0]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4616      	mov	r6, r2
 8006f6c:	6123      	str	r3, [r4, #16]
 8006f6e:	e7bc      	b.n	8006eea <_printf_i+0x14a>
 8006f70:	6833      	ldr	r3, [r6, #0]
 8006f72:	2100      	movs	r1, #0
 8006f74:	1d1a      	adds	r2, r3, #4
 8006f76:	6032      	str	r2, [r6, #0]
 8006f78:	681e      	ldr	r6, [r3, #0]
 8006f7a:	6862      	ldr	r2, [r4, #4]
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f000 fd02 	bl	8007986 <memchr>
 8006f82:	b108      	cbz	r0, 8006f88 <_printf_i+0x1e8>
 8006f84:	1b80      	subs	r0, r0, r6
 8006f86:	6060      	str	r0, [r4, #4]
 8006f88:	6863      	ldr	r3, [r4, #4]
 8006f8a:	6123      	str	r3, [r4, #16]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f92:	e7aa      	b.n	8006eea <_printf_i+0x14a>
 8006f94:	4632      	mov	r2, r6
 8006f96:	4649      	mov	r1, r9
 8006f98:	4640      	mov	r0, r8
 8006f9a:	6923      	ldr	r3, [r4, #16]
 8006f9c:	47d0      	blx	sl
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d0ad      	beq.n	8006efe <_printf_i+0x15e>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	079b      	lsls	r3, r3, #30
 8006fa6:	d413      	bmi.n	8006fd0 <_printf_i+0x230>
 8006fa8:	68e0      	ldr	r0, [r4, #12]
 8006faa:	9b03      	ldr	r3, [sp, #12]
 8006fac:	4298      	cmp	r0, r3
 8006fae:	bfb8      	it	lt
 8006fb0:	4618      	movlt	r0, r3
 8006fb2:	e7a6      	b.n	8006f02 <_printf_i+0x162>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	4632      	mov	r2, r6
 8006fb8:	4649      	mov	r1, r9
 8006fba:	4640      	mov	r0, r8
 8006fbc:	47d0      	blx	sl
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	d09d      	beq.n	8006efe <_printf_i+0x15e>
 8006fc2:	3501      	adds	r5, #1
 8006fc4:	68e3      	ldr	r3, [r4, #12]
 8006fc6:	9903      	ldr	r1, [sp, #12]
 8006fc8:	1a5b      	subs	r3, r3, r1
 8006fca:	42ab      	cmp	r3, r5
 8006fcc:	dcf2      	bgt.n	8006fb4 <_printf_i+0x214>
 8006fce:	e7eb      	b.n	8006fa8 <_printf_i+0x208>
 8006fd0:	2500      	movs	r5, #0
 8006fd2:	f104 0619 	add.w	r6, r4, #25
 8006fd6:	e7f5      	b.n	8006fc4 <_printf_i+0x224>
 8006fd8:	0800b4a9 	.word	0x0800b4a9
 8006fdc:	0800b4ba 	.word	0x0800b4ba

08006fe0 <_scanf_float>:
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	b087      	sub	sp, #28
 8006fe6:	9303      	str	r3, [sp, #12]
 8006fe8:	688b      	ldr	r3, [r1, #8]
 8006fea:	4617      	mov	r7, r2
 8006fec:	1e5a      	subs	r2, r3, #1
 8006fee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006ff2:	bf82      	ittt	hi
 8006ff4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006ff8:	eb03 0b05 	addhi.w	fp, r3, r5
 8006ffc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007000:	460a      	mov	r2, r1
 8007002:	f04f 0500 	mov.w	r5, #0
 8007006:	bf88      	it	hi
 8007008:	608b      	strhi	r3, [r1, #8]
 800700a:	680b      	ldr	r3, [r1, #0]
 800700c:	4680      	mov	r8, r0
 800700e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007012:	f842 3b1c 	str.w	r3, [r2], #28
 8007016:	460c      	mov	r4, r1
 8007018:	bf98      	it	ls
 800701a:	f04f 0b00 	movls.w	fp, #0
 800701e:	4616      	mov	r6, r2
 8007020:	46aa      	mov	sl, r5
 8007022:	46a9      	mov	r9, r5
 8007024:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007028:	9201      	str	r2, [sp, #4]
 800702a:	9502      	str	r5, [sp, #8]
 800702c:	68a2      	ldr	r2, [r4, #8]
 800702e:	b152      	cbz	r2, 8007046 <_scanf_float+0x66>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b4e      	cmp	r3, #78	@ 0x4e
 8007036:	d865      	bhi.n	8007104 <_scanf_float+0x124>
 8007038:	2b40      	cmp	r3, #64	@ 0x40
 800703a:	d83d      	bhi.n	80070b8 <_scanf_float+0xd8>
 800703c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007040:	b2c8      	uxtb	r0, r1
 8007042:	280e      	cmp	r0, #14
 8007044:	d93b      	bls.n	80070be <_scanf_float+0xde>
 8007046:	f1b9 0f00 	cmp.w	r9, #0
 800704a:	d003      	beq.n	8007054 <_scanf_float+0x74>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007052:	6023      	str	r3, [r4, #0]
 8007054:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007058:	f1ba 0f01 	cmp.w	sl, #1
 800705c:	f200 8118 	bhi.w	8007290 <_scanf_float+0x2b0>
 8007060:	9b01      	ldr	r3, [sp, #4]
 8007062:	429e      	cmp	r6, r3
 8007064:	f200 8109 	bhi.w	800727a <_scanf_float+0x29a>
 8007068:	2001      	movs	r0, #1
 800706a:	b007      	add	sp, #28
 800706c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007070:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007074:	2a0d      	cmp	r2, #13
 8007076:	d8e6      	bhi.n	8007046 <_scanf_float+0x66>
 8007078:	a101      	add	r1, pc, #4	@ (adr r1, 8007080 <_scanf_float+0xa0>)
 800707a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800707e:	bf00      	nop
 8007080:	080071c7 	.word	0x080071c7
 8007084:	08007047 	.word	0x08007047
 8007088:	08007047 	.word	0x08007047
 800708c:	08007047 	.word	0x08007047
 8007090:	08007227 	.word	0x08007227
 8007094:	080071ff 	.word	0x080071ff
 8007098:	08007047 	.word	0x08007047
 800709c:	08007047 	.word	0x08007047
 80070a0:	080071d5 	.word	0x080071d5
 80070a4:	08007047 	.word	0x08007047
 80070a8:	08007047 	.word	0x08007047
 80070ac:	08007047 	.word	0x08007047
 80070b0:	08007047 	.word	0x08007047
 80070b4:	0800718d 	.word	0x0800718d
 80070b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80070bc:	e7da      	b.n	8007074 <_scanf_float+0x94>
 80070be:	290e      	cmp	r1, #14
 80070c0:	d8c1      	bhi.n	8007046 <_scanf_float+0x66>
 80070c2:	a001      	add	r0, pc, #4	@ (adr r0, 80070c8 <_scanf_float+0xe8>)
 80070c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80070c8:	0800717d 	.word	0x0800717d
 80070cc:	08007047 	.word	0x08007047
 80070d0:	0800717d 	.word	0x0800717d
 80070d4:	08007213 	.word	0x08007213
 80070d8:	08007047 	.word	0x08007047
 80070dc:	08007125 	.word	0x08007125
 80070e0:	08007163 	.word	0x08007163
 80070e4:	08007163 	.word	0x08007163
 80070e8:	08007163 	.word	0x08007163
 80070ec:	08007163 	.word	0x08007163
 80070f0:	08007163 	.word	0x08007163
 80070f4:	08007163 	.word	0x08007163
 80070f8:	08007163 	.word	0x08007163
 80070fc:	08007163 	.word	0x08007163
 8007100:	08007163 	.word	0x08007163
 8007104:	2b6e      	cmp	r3, #110	@ 0x6e
 8007106:	d809      	bhi.n	800711c <_scanf_float+0x13c>
 8007108:	2b60      	cmp	r3, #96	@ 0x60
 800710a:	d8b1      	bhi.n	8007070 <_scanf_float+0x90>
 800710c:	2b54      	cmp	r3, #84	@ 0x54
 800710e:	d07b      	beq.n	8007208 <_scanf_float+0x228>
 8007110:	2b59      	cmp	r3, #89	@ 0x59
 8007112:	d198      	bne.n	8007046 <_scanf_float+0x66>
 8007114:	2d07      	cmp	r5, #7
 8007116:	d196      	bne.n	8007046 <_scanf_float+0x66>
 8007118:	2508      	movs	r5, #8
 800711a:	e02c      	b.n	8007176 <_scanf_float+0x196>
 800711c:	2b74      	cmp	r3, #116	@ 0x74
 800711e:	d073      	beq.n	8007208 <_scanf_float+0x228>
 8007120:	2b79      	cmp	r3, #121	@ 0x79
 8007122:	e7f6      	b.n	8007112 <_scanf_float+0x132>
 8007124:	6821      	ldr	r1, [r4, #0]
 8007126:	05c8      	lsls	r0, r1, #23
 8007128:	d51b      	bpl.n	8007162 <_scanf_float+0x182>
 800712a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800712e:	6021      	str	r1, [r4, #0]
 8007130:	f109 0901 	add.w	r9, r9, #1
 8007134:	f1bb 0f00 	cmp.w	fp, #0
 8007138:	d003      	beq.n	8007142 <_scanf_float+0x162>
 800713a:	3201      	adds	r2, #1
 800713c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007140:	60a2      	str	r2, [r4, #8]
 8007142:	68a3      	ldr	r3, [r4, #8]
 8007144:	3b01      	subs	r3, #1
 8007146:	60a3      	str	r3, [r4, #8]
 8007148:	6923      	ldr	r3, [r4, #16]
 800714a:	3301      	adds	r3, #1
 800714c:	6123      	str	r3, [r4, #16]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3b01      	subs	r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	607b      	str	r3, [r7, #4]
 8007156:	f340 8087 	ble.w	8007268 <_scanf_float+0x288>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	3301      	adds	r3, #1
 800715e:	603b      	str	r3, [r7, #0]
 8007160:	e764      	b.n	800702c <_scanf_float+0x4c>
 8007162:	eb1a 0105 	adds.w	r1, sl, r5
 8007166:	f47f af6e 	bne.w	8007046 <_scanf_float+0x66>
 800716a:	460d      	mov	r5, r1
 800716c:	468a      	mov	sl, r1
 800716e:	6822      	ldr	r2, [r4, #0]
 8007170:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007174:	6022      	str	r2, [r4, #0]
 8007176:	f806 3b01 	strb.w	r3, [r6], #1
 800717a:	e7e2      	b.n	8007142 <_scanf_float+0x162>
 800717c:	6822      	ldr	r2, [r4, #0]
 800717e:	0610      	lsls	r0, r2, #24
 8007180:	f57f af61 	bpl.w	8007046 <_scanf_float+0x66>
 8007184:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007188:	6022      	str	r2, [r4, #0]
 800718a:	e7f4      	b.n	8007176 <_scanf_float+0x196>
 800718c:	f1ba 0f00 	cmp.w	sl, #0
 8007190:	d10e      	bne.n	80071b0 <_scanf_float+0x1d0>
 8007192:	f1b9 0f00 	cmp.w	r9, #0
 8007196:	d10e      	bne.n	80071b6 <_scanf_float+0x1d6>
 8007198:	6822      	ldr	r2, [r4, #0]
 800719a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800719e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80071a2:	d108      	bne.n	80071b6 <_scanf_float+0x1d6>
 80071a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071a8:	f04f 0a01 	mov.w	sl, #1
 80071ac:	6022      	str	r2, [r4, #0]
 80071ae:	e7e2      	b.n	8007176 <_scanf_float+0x196>
 80071b0:	f1ba 0f02 	cmp.w	sl, #2
 80071b4:	d055      	beq.n	8007262 <_scanf_float+0x282>
 80071b6:	2d01      	cmp	r5, #1
 80071b8:	d002      	beq.n	80071c0 <_scanf_float+0x1e0>
 80071ba:	2d04      	cmp	r5, #4
 80071bc:	f47f af43 	bne.w	8007046 <_scanf_float+0x66>
 80071c0:	3501      	adds	r5, #1
 80071c2:	b2ed      	uxtb	r5, r5
 80071c4:	e7d7      	b.n	8007176 <_scanf_float+0x196>
 80071c6:	f1ba 0f01 	cmp.w	sl, #1
 80071ca:	f47f af3c 	bne.w	8007046 <_scanf_float+0x66>
 80071ce:	f04f 0a02 	mov.w	sl, #2
 80071d2:	e7d0      	b.n	8007176 <_scanf_float+0x196>
 80071d4:	b97d      	cbnz	r5, 80071f6 <_scanf_float+0x216>
 80071d6:	f1b9 0f00 	cmp.w	r9, #0
 80071da:	f47f af37 	bne.w	800704c <_scanf_float+0x6c>
 80071de:	6822      	ldr	r2, [r4, #0]
 80071e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80071e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80071e8:	f040 8103 	bne.w	80073f2 <_scanf_float+0x412>
 80071ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071f0:	2501      	movs	r5, #1
 80071f2:	6022      	str	r2, [r4, #0]
 80071f4:	e7bf      	b.n	8007176 <_scanf_float+0x196>
 80071f6:	2d03      	cmp	r5, #3
 80071f8:	d0e2      	beq.n	80071c0 <_scanf_float+0x1e0>
 80071fa:	2d05      	cmp	r5, #5
 80071fc:	e7de      	b.n	80071bc <_scanf_float+0x1dc>
 80071fe:	2d02      	cmp	r5, #2
 8007200:	f47f af21 	bne.w	8007046 <_scanf_float+0x66>
 8007204:	2503      	movs	r5, #3
 8007206:	e7b6      	b.n	8007176 <_scanf_float+0x196>
 8007208:	2d06      	cmp	r5, #6
 800720a:	f47f af1c 	bne.w	8007046 <_scanf_float+0x66>
 800720e:	2507      	movs	r5, #7
 8007210:	e7b1      	b.n	8007176 <_scanf_float+0x196>
 8007212:	6822      	ldr	r2, [r4, #0]
 8007214:	0591      	lsls	r1, r2, #22
 8007216:	f57f af16 	bpl.w	8007046 <_scanf_float+0x66>
 800721a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800721e:	6022      	str	r2, [r4, #0]
 8007220:	f8cd 9008 	str.w	r9, [sp, #8]
 8007224:	e7a7      	b.n	8007176 <_scanf_float+0x196>
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800722c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007230:	d006      	beq.n	8007240 <_scanf_float+0x260>
 8007232:	0550      	lsls	r0, r2, #21
 8007234:	f57f af07 	bpl.w	8007046 <_scanf_float+0x66>
 8007238:	f1b9 0f00 	cmp.w	r9, #0
 800723c:	f000 80d9 	beq.w	80073f2 <_scanf_float+0x412>
 8007240:	0591      	lsls	r1, r2, #22
 8007242:	bf58      	it	pl
 8007244:	9902      	ldrpl	r1, [sp, #8]
 8007246:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800724a:	bf58      	it	pl
 800724c:	eba9 0101 	subpl.w	r1, r9, r1
 8007250:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007254:	f04f 0900 	mov.w	r9, #0
 8007258:	bf58      	it	pl
 800725a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800725e:	6022      	str	r2, [r4, #0]
 8007260:	e789      	b.n	8007176 <_scanf_float+0x196>
 8007262:	f04f 0a03 	mov.w	sl, #3
 8007266:	e786      	b.n	8007176 <_scanf_float+0x196>
 8007268:	4639      	mov	r1, r7
 800726a:	4640      	mov	r0, r8
 800726c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007270:	4798      	blx	r3
 8007272:	2800      	cmp	r0, #0
 8007274:	f43f aeda 	beq.w	800702c <_scanf_float+0x4c>
 8007278:	e6e5      	b.n	8007046 <_scanf_float+0x66>
 800727a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800727e:	463a      	mov	r2, r7
 8007280:	4640      	mov	r0, r8
 8007282:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007286:	4798      	blx	r3
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	3b01      	subs	r3, #1
 800728c:	6123      	str	r3, [r4, #16]
 800728e:	e6e7      	b.n	8007060 <_scanf_float+0x80>
 8007290:	1e6b      	subs	r3, r5, #1
 8007292:	2b06      	cmp	r3, #6
 8007294:	d824      	bhi.n	80072e0 <_scanf_float+0x300>
 8007296:	2d02      	cmp	r5, #2
 8007298:	d836      	bhi.n	8007308 <_scanf_float+0x328>
 800729a:	9b01      	ldr	r3, [sp, #4]
 800729c:	429e      	cmp	r6, r3
 800729e:	f67f aee3 	bls.w	8007068 <_scanf_float+0x88>
 80072a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072a6:	463a      	mov	r2, r7
 80072a8:	4640      	mov	r0, r8
 80072aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072ae:	4798      	blx	r3
 80072b0:	6923      	ldr	r3, [r4, #16]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	6123      	str	r3, [r4, #16]
 80072b6:	e7f0      	b.n	800729a <_scanf_float+0x2ba>
 80072b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072bc:	463a      	mov	r2, r7
 80072be:	4640      	mov	r0, r8
 80072c0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80072c4:	4798      	blx	r3
 80072c6:	6923      	ldr	r3, [r4, #16]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	6123      	str	r3, [r4, #16]
 80072cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072d0:	fa5f fa8a 	uxtb.w	sl, sl
 80072d4:	f1ba 0f02 	cmp.w	sl, #2
 80072d8:	d1ee      	bne.n	80072b8 <_scanf_float+0x2d8>
 80072da:	3d03      	subs	r5, #3
 80072dc:	b2ed      	uxtb	r5, r5
 80072de:	1b76      	subs	r6, r6, r5
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	05da      	lsls	r2, r3, #23
 80072e4:	d530      	bpl.n	8007348 <_scanf_float+0x368>
 80072e6:	055b      	lsls	r3, r3, #21
 80072e8:	d511      	bpl.n	800730e <_scanf_float+0x32e>
 80072ea:	9b01      	ldr	r3, [sp, #4]
 80072ec:	429e      	cmp	r6, r3
 80072ee:	f67f aebb 	bls.w	8007068 <_scanf_float+0x88>
 80072f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072f6:	463a      	mov	r2, r7
 80072f8:	4640      	mov	r0, r8
 80072fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072fe:	4798      	blx	r3
 8007300:	6923      	ldr	r3, [r4, #16]
 8007302:	3b01      	subs	r3, #1
 8007304:	6123      	str	r3, [r4, #16]
 8007306:	e7f0      	b.n	80072ea <_scanf_float+0x30a>
 8007308:	46aa      	mov	sl, r5
 800730a:	46b3      	mov	fp, r6
 800730c:	e7de      	b.n	80072cc <_scanf_float+0x2ec>
 800730e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007312:	6923      	ldr	r3, [r4, #16]
 8007314:	2965      	cmp	r1, #101	@ 0x65
 8007316:	f103 33ff 	add.w	r3, r3, #4294967295
 800731a:	f106 35ff 	add.w	r5, r6, #4294967295
 800731e:	6123      	str	r3, [r4, #16]
 8007320:	d00c      	beq.n	800733c <_scanf_float+0x35c>
 8007322:	2945      	cmp	r1, #69	@ 0x45
 8007324:	d00a      	beq.n	800733c <_scanf_float+0x35c>
 8007326:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800732a:	463a      	mov	r2, r7
 800732c:	4640      	mov	r0, r8
 800732e:	4798      	blx	r3
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007336:	3b01      	subs	r3, #1
 8007338:	1eb5      	subs	r5, r6, #2
 800733a:	6123      	str	r3, [r4, #16]
 800733c:	463a      	mov	r2, r7
 800733e:	4640      	mov	r0, r8
 8007340:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007344:	4798      	blx	r3
 8007346:	462e      	mov	r6, r5
 8007348:	6822      	ldr	r2, [r4, #0]
 800734a:	f012 0210 	ands.w	r2, r2, #16
 800734e:	d001      	beq.n	8007354 <_scanf_float+0x374>
 8007350:	2000      	movs	r0, #0
 8007352:	e68a      	b.n	800706a <_scanf_float+0x8a>
 8007354:	7032      	strb	r2, [r6, #0]
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800735c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007360:	d11c      	bne.n	800739c <_scanf_float+0x3bc>
 8007362:	9b02      	ldr	r3, [sp, #8]
 8007364:	454b      	cmp	r3, r9
 8007366:	eba3 0209 	sub.w	r2, r3, r9
 800736a:	d123      	bne.n	80073b4 <_scanf_float+0x3d4>
 800736c:	2200      	movs	r2, #0
 800736e:	4640      	mov	r0, r8
 8007370:	9901      	ldr	r1, [sp, #4]
 8007372:	f7ff f941 	bl	80065f8 <_strtod_r>
 8007376:	9b03      	ldr	r3, [sp, #12]
 8007378:	6825      	ldr	r5, [r4, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f015 0f02 	tst.w	r5, #2
 8007380:	4606      	mov	r6, r0
 8007382:	460f      	mov	r7, r1
 8007384:	f103 0204 	add.w	r2, r3, #4
 8007388:	d01f      	beq.n	80073ca <_scanf_float+0x3ea>
 800738a:	9903      	ldr	r1, [sp, #12]
 800738c:	600a      	str	r2, [r1, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	e9c3 6700 	strd	r6, r7, [r3]
 8007394:	68e3      	ldr	r3, [r4, #12]
 8007396:	3301      	adds	r3, #1
 8007398:	60e3      	str	r3, [r4, #12]
 800739a:	e7d9      	b.n	8007350 <_scanf_float+0x370>
 800739c:	9b04      	ldr	r3, [sp, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0e4      	beq.n	800736c <_scanf_float+0x38c>
 80073a2:	9905      	ldr	r1, [sp, #20]
 80073a4:	230a      	movs	r3, #10
 80073a6:	4640      	mov	r0, r8
 80073a8:	3101      	adds	r1, #1
 80073aa:	f7ff f9b1 	bl	8006710 <_strtol_r>
 80073ae:	9b04      	ldr	r3, [sp, #16]
 80073b0:	9e05      	ldr	r6, [sp, #20]
 80073b2:	1ac2      	subs	r2, r0, r3
 80073b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80073b8:	429e      	cmp	r6, r3
 80073ba:	bf28      	it	cs
 80073bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80073c0:	4630      	mov	r0, r6
 80073c2:	490d      	ldr	r1, [pc, #52]	@ (80073f8 <_scanf_float+0x418>)
 80073c4:	f000 f924 	bl	8007610 <siprintf>
 80073c8:	e7d0      	b.n	800736c <_scanf_float+0x38c>
 80073ca:	076d      	lsls	r5, r5, #29
 80073cc:	d4dd      	bmi.n	800738a <_scanf_float+0x3aa>
 80073ce:	9d03      	ldr	r5, [sp, #12]
 80073d0:	602a      	str	r2, [r5, #0]
 80073d2:	681d      	ldr	r5, [r3, #0]
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	f7f9 fb18 	bl	8000a0c <__aeabi_dcmpun>
 80073dc:	b120      	cbz	r0, 80073e8 <_scanf_float+0x408>
 80073de:	4807      	ldr	r0, [pc, #28]	@ (80073fc <_scanf_float+0x41c>)
 80073e0:	f000 faf4 	bl	80079cc <nanf>
 80073e4:	6028      	str	r0, [r5, #0]
 80073e6:	e7d5      	b.n	8007394 <_scanf_float+0x3b4>
 80073e8:	4630      	mov	r0, r6
 80073ea:	4639      	mov	r1, r7
 80073ec:	f7f9 fb6c 	bl	8000ac8 <__aeabi_d2f>
 80073f0:	e7f8      	b.n	80073e4 <_scanf_float+0x404>
 80073f2:	f04f 0900 	mov.w	r9, #0
 80073f6:	e62d      	b.n	8007054 <_scanf_float+0x74>
 80073f8:	0800b4cb 	.word	0x0800b4cb
 80073fc:	0800b584 	.word	0x0800b584

08007400 <std>:
 8007400:	2300      	movs	r3, #0
 8007402:	b510      	push	{r4, lr}
 8007404:	4604      	mov	r4, r0
 8007406:	e9c0 3300 	strd	r3, r3, [r0]
 800740a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800740e:	6083      	str	r3, [r0, #8]
 8007410:	8181      	strh	r1, [r0, #12]
 8007412:	6643      	str	r3, [r0, #100]	@ 0x64
 8007414:	81c2      	strh	r2, [r0, #14]
 8007416:	6183      	str	r3, [r0, #24]
 8007418:	4619      	mov	r1, r3
 800741a:	2208      	movs	r2, #8
 800741c:	305c      	adds	r0, #92	@ 0x5c
 800741e:	f000 f986 	bl	800772e <memset>
 8007422:	4b0d      	ldr	r3, [pc, #52]	@ (8007458 <std+0x58>)
 8007424:	6224      	str	r4, [r4, #32]
 8007426:	6263      	str	r3, [r4, #36]	@ 0x24
 8007428:	4b0c      	ldr	r3, [pc, #48]	@ (800745c <std+0x5c>)
 800742a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800742c:	4b0c      	ldr	r3, [pc, #48]	@ (8007460 <std+0x60>)
 800742e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007430:	4b0c      	ldr	r3, [pc, #48]	@ (8007464 <std+0x64>)
 8007432:	6323      	str	r3, [r4, #48]	@ 0x30
 8007434:	4b0c      	ldr	r3, [pc, #48]	@ (8007468 <std+0x68>)
 8007436:	429c      	cmp	r4, r3
 8007438:	d006      	beq.n	8007448 <std+0x48>
 800743a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800743e:	4294      	cmp	r4, r2
 8007440:	d002      	beq.n	8007448 <std+0x48>
 8007442:	33d0      	adds	r3, #208	@ 0xd0
 8007444:	429c      	cmp	r4, r3
 8007446:	d105      	bne.n	8007454 <std+0x54>
 8007448:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800744c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007450:	f000 ba8e 	b.w	8007970 <__retarget_lock_init_recursive>
 8007454:	bd10      	pop	{r4, pc}
 8007456:	bf00      	nop
 8007458:	080076a5 	.word	0x080076a5
 800745c:	080076cb 	.word	0x080076cb
 8007460:	08007703 	.word	0x08007703
 8007464:	08007727 	.word	0x08007727
 8007468:	20000a9c 	.word	0x20000a9c

0800746c <stdio_exit_handler>:
 800746c:	4a02      	ldr	r2, [pc, #8]	@ (8007478 <stdio_exit_handler+0xc>)
 800746e:	4903      	ldr	r1, [pc, #12]	@ (800747c <stdio_exit_handler+0x10>)
 8007470:	4803      	ldr	r0, [pc, #12]	@ (8007480 <stdio_exit_handler+0x14>)
 8007472:	f000 b869 	b.w	8007548 <_fwalk_sglue>
 8007476:	bf00      	nop
 8007478:	200000cc 	.word	0x200000cc
 800747c:	0800a505 	.word	0x0800a505
 8007480:	20000248 	.word	0x20000248

08007484 <cleanup_stdio>:
 8007484:	6841      	ldr	r1, [r0, #4]
 8007486:	4b0c      	ldr	r3, [pc, #48]	@ (80074b8 <cleanup_stdio+0x34>)
 8007488:	b510      	push	{r4, lr}
 800748a:	4299      	cmp	r1, r3
 800748c:	4604      	mov	r4, r0
 800748e:	d001      	beq.n	8007494 <cleanup_stdio+0x10>
 8007490:	f003 f838 	bl	800a504 <_fflush_r>
 8007494:	68a1      	ldr	r1, [r4, #8]
 8007496:	4b09      	ldr	r3, [pc, #36]	@ (80074bc <cleanup_stdio+0x38>)
 8007498:	4299      	cmp	r1, r3
 800749a:	d002      	beq.n	80074a2 <cleanup_stdio+0x1e>
 800749c:	4620      	mov	r0, r4
 800749e:	f003 f831 	bl	800a504 <_fflush_r>
 80074a2:	68e1      	ldr	r1, [r4, #12]
 80074a4:	4b06      	ldr	r3, [pc, #24]	@ (80074c0 <cleanup_stdio+0x3c>)
 80074a6:	4299      	cmp	r1, r3
 80074a8:	d004      	beq.n	80074b4 <cleanup_stdio+0x30>
 80074aa:	4620      	mov	r0, r4
 80074ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074b0:	f003 b828 	b.w	800a504 <_fflush_r>
 80074b4:	bd10      	pop	{r4, pc}
 80074b6:	bf00      	nop
 80074b8:	20000a9c 	.word	0x20000a9c
 80074bc:	20000b04 	.word	0x20000b04
 80074c0:	20000b6c 	.word	0x20000b6c

080074c4 <global_stdio_init.part.0>:
 80074c4:	b510      	push	{r4, lr}
 80074c6:	4b0b      	ldr	r3, [pc, #44]	@ (80074f4 <global_stdio_init.part.0+0x30>)
 80074c8:	4c0b      	ldr	r4, [pc, #44]	@ (80074f8 <global_stdio_init.part.0+0x34>)
 80074ca:	4a0c      	ldr	r2, [pc, #48]	@ (80074fc <global_stdio_init.part.0+0x38>)
 80074cc:	4620      	mov	r0, r4
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	2104      	movs	r1, #4
 80074d2:	2200      	movs	r2, #0
 80074d4:	f7ff ff94 	bl	8007400 <std>
 80074d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074dc:	2201      	movs	r2, #1
 80074de:	2109      	movs	r1, #9
 80074e0:	f7ff ff8e 	bl	8007400 <std>
 80074e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80074e8:	2202      	movs	r2, #2
 80074ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ee:	2112      	movs	r1, #18
 80074f0:	f7ff bf86 	b.w	8007400 <std>
 80074f4:	20000bd4 	.word	0x20000bd4
 80074f8:	20000a9c 	.word	0x20000a9c
 80074fc:	0800746d 	.word	0x0800746d

08007500 <__sfp_lock_acquire>:
 8007500:	4801      	ldr	r0, [pc, #4]	@ (8007508 <__sfp_lock_acquire+0x8>)
 8007502:	f000 ba36 	b.w	8007972 <__retarget_lock_acquire_recursive>
 8007506:	bf00      	nop
 8007508:	20000bdd 	.word	0x20000bdd

0800750c <__sfp_lock_release>:
 800750c:	4801      	ldr	r0, [pc, #4]	@ (8007514 <__sfp_lock_release+0x8>)
 800750e:	f000 ba31 	b.w	8007974 <__retarget_lock_release_recursive>
 8007512:	bf00      	nop
 8007514:	20000bdd 	.word	0x20000bdd

08007518 <__sinit>:
 8007518:	b510      	push	{r4, lr}
 800751a:	4604      	mov	r4, r0
 800751c:	f7ff fff0 	bl	8007500 <__sfp_lock_acquire>
 8007520:	6a23      	ldr	r3, [r4, #32]
 8007522:	b11b      	cbz	r3, 800752c <__sinit+0x14>
 8007524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007528:	f7ff bff0 	b.w	800750c <__sfp_lock_release>
 800752c:	4b04      	ldr	r3, [pc, #16]	@ (8007540 <__sinit+0x28>)
 800752e:	6223      	str	r3, [r4, #32]
 8007530:	4b04      	ldr	r3, [pc, #16]	@ (8007544 <__sinit+0x2c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1f5      	bne.n	8007524 <__sinit+0xc>
 8007538:	f7ff ffc4 	bl	80074c4 <global_stdio_init.part.0>
 800753c:	e7f2      	b.n	8007524 <__sinit+0xc>
 800753e:	bf00      	nop
 8007540:	08007485 	.word	0x08007485
 8007544:	20000bd4 	.word	0x20000bd4

08007548 <_fwalk_sglue>:
 8007548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800754c:	4607      	mov	r7, r0
 800754e:	4688      	mov	r8, r1
 8007550:	4614      	mov	r4, r2
 8007552:	2600      	movs	r6, #0
 8007554:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007558:	f1b9 0901 	subs.w	r9, r9, #1
 800755c:	d505      	bpl.n	800756a <_fwalk_sglue+0x22>
 800755e:	6824      	ldr	r4, [r4, #0]
 8007560:	2c00      	cmp	r4, #0
 8007562:	d1f7      	bne.n	8007554 <_fwalk_sglue+0xc>
 8007564:	4630      	mov	r0, r6
 8007566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800756a:	89ab      	ldrh	r3, [r5, #12]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d907      	bls.n	8007580 <_fwalk_sglue+0x38>
 8007570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007574:	3301      	adds	r3, #1
 8007576:	d003      	beq.n	8007580 <_fwalk_sglue+0x38>
 8007578:	4629      	mov	r1, r5
 800757a:	4638      	mov	r0, r7
 800757c:	47c0      	blx	r8
 800757e:	4306      	orrs	r6, r0
 8007580:	3568      	adds	r5, #104	@ 0x68
 8007582:	e7e9      	b.n	8007558 <_fwalk_sglue+0x10>

08007584 <iprintf>:
 8007584:	b40f      	push	{r0, r1, r2, r3}
 8007586:	b507      	push	{r0, r1, r2, lr}
 8007588:	4906      	ldr	r1, [pc, #24]	@ (80075a4 <iprintf+0x20>)
 800758a:	ab04      	add	r3, sp, #16
 800758c:	6808      	ldr	r0, [r1, #0]
 800758e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007592:	6881      	ldr	r1, [r0, #8]
 8007594:	9301      	str	r3, [sp, #4]
 8007596:	f002 fcd1 	bl	8009f3c <_vfiprintf_r>
 800759a:	b003      	add	sp, #12
 800759c:	f85d eb04 	ldr.w	lr, [sp], #4
 80075a0:	b004      	add	sp, #16
 80075a2:	4770      	bx	lr
 80075a4:	20000244 	.word	0x20000244

080075a8 <sniprintf>:
 80075a8:	b40c      	push	{r2, r3}
 80075aa:	b530      	push	{r4, r5, lr}
 80075ac:	4b17      	ldr	r3, [pc, #92]	@ (800760c <sniprintf+0x64>)
 80075ae:	1e0c      	subs	r4, r1, #0
 80075b0:	681d      	ldr	r5, [r3, #0]
 80075b2:	b09d      	sub	sp, #116	@ 0x74
 80075b4:	da08      	bge.n	80075c8 <sniprintf+0x20>
 80075b6:	238b      	movs	r3, #139	@ 0x8b
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295
 80075bc:	602b      	str	r3, [r5, #0]
 80075be:	b01d      	add	sp, #116	@ 0x74
 80075c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075c4:	b002      	add	sp, #8
 80075c6:	4770      	bx	lr
 80075c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80075cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80075d0:	bf0c      	ite	eq
 80075d2:	4623      	moveq	r3, r4
 80075d4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80075d8:	9304      	str	r3, [sp, #16]
 80075da:	9307      	str	r3, [sp, #28]
 80075dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80075e0:	9002      	str	r0, [sp, #8]
 80075e2:	9006      	str	r0, [sp, #24]
 80075e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80075e8:	4628      	mov	r0, r5
 80075ea:	ab21      	add	r3, sp, #132	@ 0x84
 80075ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80075ee:	a902      	add	r1, sp, #8
 80075f0:	9301      	str	r3, [sp, #4]
 80075f2:	f002 f9b5 	bl	8009960 <_svfiprintf_r>
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	bfbc      	itt	lt
 80075fa:	238b      	movlt	r3, #139	@ 0x8b
 80075fc:	602b      	strlt	r3, [r5, #0]
 80075fe:	2c00      	cmp	r4, #0
 8007600:	d0dd      	beq.n	80075be <sniprintf+0x16>
 8007602:	2200      	movs	r2, #0
 8007604:	9b02      	ldr	r3, [sp, #8]
 8007606:	701a      	strb	r2, [r3, #0]
 8007608:	e7d9      	b.n	80075be <sniprintf+0x16>
 800760a:	bf00      	nop
 800760c:	20000244 	.word	0x20000244

08007610 <siprintf>:
 8007610:	b40e      	push	{r1, r2, r3}
 8007612:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007616:	b500      	push	{lr}
 8007618:	b09c      	sub	sp, #112	@ 0x70
 800761a:	ab1d      	add	r3, sp, #116	@ 0x74
 800761c:	9002      	str	r0, [sp, #8]
 800761e:	9006      	str	r0, [sp, #24]
 8007620:	9107      	str	r1, [sp, #28]
 8007622:	9104      	str	r1, [sp, #16]
 8007624:	4808      	ldr	r0, [pc, #32]	@ (8007648 <siprintf+0x38>)
 8007626:	4909      	ldr	r1, [pc, #36]	@ (800764c <siprintf+0x3c>)
 8007628:	f853 2b04 	ldr.w	r2, [r3], #4
 800762c:	9105      	str	r1, [sp, #20]
 800762e:	6800      	ldr	r0, [r0, #0]
 8007630:	a902      	add	r1, sp, #8
 8007632:	9301      	str	r3, [sp, #4]
 8007634:	f002 f994 	bl	8009960 <_svfiprintf_r>
 8007638:	2200      	movs	r2, #0
 800763a:	9b02      	ldr	r3, [sp, #8]
 800763c:	701a      	strb	r2, [r3, #0]
 800763e:	b01c      	add	sp, #112	@ 0x70
 8007640:	f85d eb04 	ldr.w	lr, [sp], #4
 8007644:	b003      	add	sp, #12
 8007646:	4770      	bx	lr
 8007648:	20000244 	.word	0x20000244
 800764c:	ffff0208 	.word	0xffff0208

08007650 <siscanf>:
 8007650:	b40e      	push	{r1, r2, r3}
 8007652:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007656:	b530      	push	{r4, r5, lr}
 8007658:	b09c      	sub	sp, #112	@ 0x70
 800765a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800765c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007660:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007664:	9002      	str	r0, [sp, #8]
 8007666:	9006      	str	r0, [sp, #24]
 8007668:	f7f8 fd72 	bl	8000150 <strlen>
 800766c:	4b0b      	ldr	r3, [pc, #44]	@ (800769c <siscanf+0x4c>)
 800766e:	9003      	str	r0, [sp, #12]
 8007670:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007672:	2300      	movs	r3, #0
 8007674:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007676:	9314      	str	r3, [sp, #80]	@ 0x50
 8007678:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800767c:	9007      	str	r0, [sp, #28]
 800767e:	4808      	ldr	r0, [pc, #32]	@ (80076a0 <siscanf+0x50>)
 8007680:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007684:	462a      	mov	r2, r5
 8007686:	4623      	mov	r3, r4
 8007688:	a902      	add	r1, sp, #8
 800768a:	6800      	ldr	r0, [r0, #0]
 800768c:	9401      	str	r4, [sp, #4]
 800768e:	f002 fabb 	bl	8009c08 <__ssvfiscanf_r>
 8007692:	b01c      	add	sp, #112	@ 0x70
 8007694:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007698:	b003      	add	sp, #12
 800769a:	4770      	bx	lr
 800769c:	080076c7 	.word	0x080076c7
 80076a0:	20000244 	.word	0x20000244

080076a4 <__sread>:
 80076a4:	b510      	push	{r4, lr}
 80076a6:	460c      	mov	r4, r1
 80076a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ac:	f000 f912 	bl	80078d4 <_read_r>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	bfab      	itete	ge
 80076b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076b6:	89a3      	ldrhlt	r3, [r4, #12]
 80076b8:	181b      	addge	r3, r3, r0
 80076ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076be:	bfac      	ite	ge
 80076c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076c2:	81a3      	strhlt	r3, [r4, #12]
 80076c4:	bd10      	pop	{r4, pc}

080076c6 <__seofread>:
 80076c6:	2000      	movs	r0, #0
 80076c8:	4770      	bx	lr

080076ca <__swrite>:
 80076ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ce:	461f      	mov	r7, r3
 80076d0:	898b      	ldrh	r3, [r1, #12]
 80076d2:	4605      	mov	r5, r0
 80076d4:	05db      	lsls	r3, r3, #23
 80076d6:	460c      	mov	r4, r1
 80076d8:	4616      	mov	r6, r2
 80076da:	d505      	bpl.n	80076e8 <__swrite+0x1e>
 80076dc:	2302      	movs	r3, #2
 80076de:	2200      	movs	r2, #0
 80076e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076e4:	f000 f8e4 	bl	80078b0 <_lseek_r>
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	4632      	mov	r2, r6
 80076ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	4628      	mov	r0, r5
 80076f4:	463b      	mov	r3, r7
 80076f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076fe:	f000 b8fb 	b.w	80078f8 <_write_r>

08007702 <__sseek>:
 8007702:	b510      	push	{r4, lr}
 8007704:	460c      	mov	r4, r1
 8007706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800770a:	f000 f8d1 	bl	80078b0 <_lseek_r>
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	bf15      	itete	ne
 8007714:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007716:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800771a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800771e:	81a3      	strheq	r3, [r4, #12]
 8007720:	bf18      	it	ne
 8007722:	81a3      	strhne	r3, [r4, #12]
 8007724:	bd10      	pop	{r4, pc}

08007726 <__sclose>:
 8007726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772a:	f000 b8b1 	b.w	8007890 <_close_r>

0800772e <memset>:
 800772e:	4603      	mov	r3, r0
 8007730:	4402      	add	r2, r0
 8007732:	4293      	cmp	r3, r2
 8007734:	d100      	bne.n	8007738 <memset+0xa>
 8007736:	4770      	bx	lr
 8007738:	f803 1b01 	strb.w	r1, [r3], #1
 800773c:	e7f9      	b.n	8007732 <memset+0x4>

0800773e <strchr>:
 800773e:	4603      	mov	r3, r0
 8007740:	b2c9      	uxtb	r1, r1
 8007742:	4618      	mov	r0, r3
 8007744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007748:	b112      	cbz	r2, 8007750 <strchr+0x12>
 800774a:	428a      	cmp	r2, r1
 800774c:	d1f9      	bne.n	8007742 <strchr+0x4>
 800774e:	4770      	bx	lr
 8007750:	2900      	cmp	r1, #0
 8007752:	bf18      	it	ne
 8007754:	2000      	movne	r0, #0
 8007756:	4770      	bx	lr

08007758 <strncmp>:
 8007758:	b510      	push	{r4, lr}
 800775a:	b16a      	cbz	r2, 8007778 <strncmp+0x20>
 800775c:	3901      	subs	r1, #1
 800775e:	1884      	adds	r4, r0, r2
 8007760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007764:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007768:	429a      	cmp	r2, r3
 800776a:	d103      	bne.n	8007774 <strncmp+0x1c>
 800776c:	42a0      	cmp	r0, r4
 800776e:	d001      	beq.n	8007774 <strncmp+0x1c>
 8007770:	2a00      	cmp	r2, #0
 8007772:	d1f5      	bne.n	8007760 <strncmp+0x8>
 8007774:	1ad0      	subs	r0, r2, r3
 8007776:	bd10      	pop	{r4, pc}
 8007778:	4610      	mov	r0, r2
 800777a:	e7fc      	b.n	8007776 <strncmp+0x1e>

0800777c <strncpy>:
 800777c:	4603      	mov	r3, r0
 800777e:	b510      	push	{r4, lr}
 8007780:	3901      	subs	r1, #1
 8007782:	b132      	cbz	r2, 8007792 <strncpy+0x16>
 8007784:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007788:	3a01      	subs	r2, #1
 800778a:	f803 4b01 	strb.w	r4, [r3], #1
 800778e:	2c00      	cmp	r4, #0
 8007790:	d1f7      	bne.n	8007782 <strncpy+0x6>
 8007792:	2100      	movs	r1, #0
 8007794:	441a      	add	r2, r3
 8007796:	4293      	cmp	r3, r2
 8007798:	d100      	bne.n	800779c <strncpy+0x20>
 800779a:	bd10      	pop	{r4, pc}
 800779c:	f803 1b01 	strb.w	r1, [r3], #1
 80077a0:	e7f9      	b.n	8007796 <strncpy+0x1a>
	...

080077a4 <strtok>:
 80077a4:	4b16      	ldr	r3, [pc, #88]	@ (8007800 <strtok+0x5c>)
 80077a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077aa:	681f      	ldr	r7, [r3, #0]
 80077ac:	4605      	mov	r5, r0
 80077ae:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80077b0:	460e      	mov	r6, r1
 80077b2:	b9ec      	cbnz	r4, 80077f0 <strtok+0x4c>
 80077b4:	2050      	movs	r0, #80	@ 0x50
 80077b6:	f001 fafd 	bl	8008db4 <malloc>
 80077ba:	4602      	mov	r2, r0
 80077bc:	6478      	str	r0, [r7, #68]	@ 0x44
 80077be:	b920      	cbnz	r0, 80077ca <strtok+0x26>
 80077c0:	215b      	movs	r1, #91	@ 0x5b
 80077c2:	4b10      	ldr	r3, [pc, #64]	@ (8007804 <strtok+0x60>)
 80077c4:	4810      	ldr	r0, [pc, #64]	@ (8007808 <strtok+0x64>)
 80077c6:	f000 f905 	bl	80079d4 <__assert_func>
 80077ca:	e9c0 4400 	strd	r4, r4, [r0]
 80077ce:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80077d2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80077d6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80077da:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80077de:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80077e2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80077e6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80077ea:	6184      	str	r4, [r0, #24]
 80077ec:	7704      	strb	r4, [r0, #28]
 80077ee:	6244      	str	r4, [r0, #36]	@ 0x24
 80077f0:	4631      	mov	r1, r6
 80077f2:	4628      	mov	r0, r5
 80077f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077f6:	2301      	movs	r3, #1
 80077f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077fc:	f000 b806 	b.w	800780c <__strtok_r>
 8007800:	20000244 	.word	0x20000244
 8007804:	0800b4d0 	.word	0x0800b4d0
 8007808:	0800b4e7 	.word	0x0800b4e7

0800780c <__strtok_r>:
 800780c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800780e:	4604      	mov	r4, r0
 8007810:	b908      	cbnz	r0, 8007816 <__strtok_r+0xa>
 8007812:	6814      	ldr	r4, [r2, #0]
 8007814:	b144      	cbz	r4, 8007828 <__strtok_r+0x1c>
 8007816:	460f      	mov	r7, r1
 8007818:	4620      	mov	r0, r4
 800781a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800781e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007822:	b91e      	cbnz	r6, 800782c <__strtok_r+0x20>
 8007824:	b965      	cbnz	r5, 8007840 <__strtok_r+0x34>
 8007826:	6015      	str	r5, [r2, #0]
 8007828:	2000      	movs	r0, #0
 800782a:	e005      	b.n	8007838 <__strtok_r+0x2c>
 800782c:	42b5      	cmp	r5, r6
 800782e:	d1f6      	bne.n	800781e <__strtok_r+0x12>
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1f0      	bne.n	8007816 <__strtok_r+0xa>
 8007834:	6014      	str	r4, [r2, #0]
 8007836:	7003      	strb	r3, [r0, #0]
 8007838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800783a:	461c      	mov	r4, r3
 800783c:	e00c      	b.n	8007858 <__strtok_r+0x4c>
 800783e:	b915      	cbnz	r5, 8007846 <__strtok_r+0x3a>
 8007840:	460e      	mov	r6, r1
 8007842:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007846:	f816 5b01 	ldrb.w	r5, [r6], #1
 800784a:	42ab      	cmp	r3, r5
 800784c:	d1f7      	bne.n	800783e <__strtok_r+0x32>
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0f3      	beq.n	800783a <__strtok_r+0x2e>
 8007852:	2300      	movs	r3, #0
 8007854:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007858:	6014      	str	r4, [r2, #0]
 800785a:	e7ed      	b.n	8007838 <__strtok_r+0x2c>

0800785c <strstr>:
 800785c:	780a      	ldrb	r2, [r1, #0]
 800785e:	b570      	push	{r4, r5, r6, lr}
 8007860:	b96a      	cbnz	r2, 800787e <strstr+0x22>
 8007862:	bd70      	pop	{r4, r5, r6, pc}
 8007864:	429a      	cmp	r2, r3
 8007866:	d109      	bne.n	800787c <strstr+0x20>
 8007868:	460c      	mov	r4, r1
 800786a:	4605      	mov	r5, r0
 800786c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007870:	2b00      	cmp	r3, #0
 8007872:	d0f6      	beq.n	8007862 <strstr+0x6>
 8007874:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007878:	429e      	cmp	r6, r3
 800787a:	d0f7      	beq.n	800786c <strstr+0x10>
 800787c:	3001      	adds	r0, #1
 800787e:	7803      	ldrb	r3, [r0, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1ef      	bne.n	8007864 <strstr+0x8>
 8007884:	4618      	mov	r0, r3
 8007886:	e7ec      	b.n	8007862 <strstr+0x6>

08007888 <_localeconv_r>:
 8007888:	4800      	ldr	r0, [pc, #0]	@ (800788c <_localeconv_r+0x4>)
 800788a:	4770      	bx	lr
 800788c:	200001c8 	.word	0x200001c8

08007890 <_close_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	2300      	movs	r3, #0
 8007894:	4d05      	ldr	r5, [pc, #20]	@ (80078ac <_close_r+0x1c>)
 8007896:	4604      	mov	r4, r0
 8007898:	4608      	mov	r0, r1
 800789a:	602b      	str	r3, [r5, #0]
 800789c:	f7fb fa7d 	bl	8002d9a <_close>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d102      	bne.n	80078aa <_close_r+0x1a>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	b103      	cbz	r3, 80078aa <_close_r+0x1a>
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	20000bd8 	.word	0x20000bd8

080078b0 <_lseek_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4604      	mov	r4, r0
 80078b4:	4608      	mov	r0, r1
 80078b6:	4611      	mov	r1, r2
 80078b8:	2200      	movs	r2, #0
 80078ba:	4d05      	ldr	r5, [pc, #20]	@ (80078d0 <_lseek_r+0x20>)
 80078bc:	602a      	str	r2, [r5, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	f7fb fa8f 	bl	8002de2 <_lseek>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d102      	bne.n	80078ce <_lseek_r+0x1e>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	b103      	cbz	r3, 80078ce <_lseek_r+0x1e>
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	20000bd8 	.word	0x20000bd8

080078d4 <_read_r>:
 80078d4:	b538      	push	{r3, r4, r5, lr}
 80078d6:	4604      	mov	r4, r0
 80078d8:	4608      	mov	r0, r1
 80078da:	4611      	mov	r1, r2
 80078dc:	2200      	movs	r2, #0
 80078de:	4d05      	ldr	r5, [pc, #20]	@ (80078f4 <_read_r+0x20>)
 80078e0:	602a      	str	r2, [r5, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	f7fb fa20 	bl	8002d28 <_read>
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	d102      	bne.n	80078f2 <_read_r+0x1e>
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	b103      	cbz	r3, 80078f2 <_read_r+0x1e>
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	bd38      	pop	{r3, r4, r5, pc}
 80078f4:	20000bd8 	.word	0x20000bd8

080078f8 <_write_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4604      	mov	r4, r0
 80078fc:	4608      	mov	r0, r1
 80078fe:	4611      	mov	r1, r2
 8007900:	2200      	movs	r2, #0
 8007902:	4d05      	ldr	r5, [pc, #20]	@ (8007918 <_write_r+0x20>)
 8007904:	602a      	str	r2, [r5, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	f7fb fa2b 	bl	8002d62 <_write>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_write_r+0x1e>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b103      	cbz	r3, 8007916 <_write_r+0x1e>
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	20000bd8 	.word	0x20000bd8

0800791c <__errno>:
 800791c:	4b01      	ldr	r3, [pc, #4]	@ (8007924 <__errno+0x8>)
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	20000244 	.word	0x20000244

08007928 <__libc_init_array>:
 8007928:	b570      	push	{r4, r5, r6, lr}
 800792a:	2600      	movs	r6, #0
 800792c:	4d0c      	ldr	r5, [pc, #48]	@ (8007960 <__libc_init_array+0x38>)
 800792e:	4c0d      	ldr	r4, [pc, #52]	@ (8007964 <__libc_init_array+0x3c>)
 8007930:	1b64      	subs	r4, r4, r5
 8007932:	10a4      	asrs	r4, r4, #2
 8007934:	42a6      	cmp	r6, r4
 8007936:	d109      	bne.n	800794c <__libc_init_array+0x24>
 8007938:	f003 fa04 	bl	800ad44 <_init>
 800793c:	2600      	movs	r6, #0
 800793e:	4d0a      	ldr	r5, [pc, #40]	@ (8007968 <__libc_init_array+0x40>)
 8007940:	4c0a      	ldr	r4, [pc, #40]	@ (800796c <__libc_init_array+0x44>)
 8007942:	1b64      	subs	r4, r4, r5
 8007944:	10a4      	asrs	r4, r4, #2
 8007946:	42a6      	cmp	r6, r4
 8007948:	d105      	bne.n	8007956 <__libc_init_array+0x2e>
 800794a:	bd70      	pop	{r4, r5, r6, pc}
 800794c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007950:	4798      	blx	r3
 8007952:	3601      	adds	r6, #1
 8007954:	e7ee      	b.n	8007934 <__libc_init_array+0xc>
 8007956:	f855 3b04 	ldr.w	r3, [r5], #4
 800795a:	4798      	blx	r3
 800795c:	3601      	adds	r6, #1
 800795e:	e7f2      	b.n	8007946 <__libc_init_array+0x1e>
 8007960:	0800b7f8 	.word	0x0800b7f8
 8007964:	0800b7f8 	.word	0x0800b7f8
 8007968:	0800b7f8 	.word	0x0800b7f8
 800796c:	0800b7fc 	.word	0x0800b7fc

08007970 <__retarget_lock_init_recursive>:
 8007970:	4770      	bx	lr

08007972 <__retarget_lock_acquire_recursive>:
 8007972:	4770      	bx	lr

08007974 <__retarget_lock_release_recursive>:
 8007974:	4770      	bx	lr

08007976 <strcpy>:
 8007976:	4603      	mov	r3, r0
 8007978:	f811 2b01 	ldrb.w	r2, [r1], #1
 800797c:	f803 2b01 	strb.w	r2, [r3], #1
 8007980:	2a00      	cmp	r2, #0
 8007982:	d1f9      	bne.n	8007978 <strcpy+0x2>
 8007984:	4770      	bx	lr

08007986 <memchr>:
 8007986:	4603      	mov	r3, r0
 8007988:	b510      	push	{r4, lr}
 800798a:	b2c9      	uxtb	r1, r1
 800798c:	4402      	add	r2, r0
 800798e:	4293      	cmp	r3, r2
 8007990:	4618      	mov	r0, r3
 8007992:	d101      	bne.n	8007998 <memchr+0x12>
 8007994:	2000      	movs	r0, #0
 8007996:	e003      	b.n	80079a0 <memchr+0x1a>
 8007998:	7804      	ldrb	r4, [r0, #0]
 800799a:	3301      	adds	r3, #1
 800799c:	428c      	cmp	r4, r1
 800799e:	d1f6      	bne.n	800798e <memchr+0x8>
 80079a0:	bd10      	pop	{r4, pc}

080079a2 <memcpy>:
 80079a2:	440a      	add	r2, r1
 80079a4:	4291      	cmp	r1, r2
 80079a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80079aa:	d100      	bne.n	80079ae <memcpy+0xc>
 80079ac:	4770      	bx	lr
 80079ae:	b510      	push	{r4, lr}
 80079b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079b4:	4291      	cmp	r1, r2
 80079b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079ba:	d1f9      	bne.n	80079b0 <memcpy+0xe>
 80079bc:	bd10      	pop	{r4, pc}
	...

080079c0 <nan>:
 80079c0:	2000      	movs	r0, #0
 80079c2:	4901      	ldr	r1, [pc, #4]	@ (80079c8 <nan+0x8>)
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop
 80079c8:	7ff80000 	.word	0x7ff80000

080079cc <nanf>:
 80079cc:	4800      	ldr	r0, [pc, #0]	@ (80079d0 <nanf+0x4>)
 80079ce:	4770      	bx	lr
 80079d0:	7fc00000 	.word	0x7fc00000

080079d4 <__assert_func>:
 80079d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079d6:	4614      	mov	r4, r2
 80079d8:	461a      	mov	r2, r3
 80079da:	4b09      	ldr	r3, [pc, #36]	@ (8007a00 <__assert_func+0x2c>)
 80079dc:	4605      	mov	r5, r0
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68d8      	ldr	r0, [r3, #12]
 80079e2:	b954      	cbnz	r4, 80079fa <__assert_func+0x26>
 80079e4:	4b07      	ldr	r3, [pc, #28]	@ (8007a04 <__assert_func+0x30>)
 80079e6:	461c      	mov	r4, r3
 80079e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079ec:	9100      	str	r1, [sp, #0]
 80079ee:	462b      	mov	r3, r5
 80079f0:	4905      	ldr	r1, [pc, #20]	@ (8007a08 <__assert_func+0x34>)
 80079f2:	f002 fdaf 	bl	800a554 <fiprintf>
 80079f6:	f002 feef 	bl	800a7d8 <abort>
 80079fa:	4b04      	ldr	r3, [pc, #16]	@ (8007a0c <__assert_func+0x38>)
 80079fc:	e7f4      	b.n	80079e8 <__assert_func+0x14>
 80079fe:	bf00      	nop
 8007a00:	20000244 	.word	0x20000244
 8007a04:	0800b584 	.word	0x0800b584
 8007a08:	0800b556 	.word	0x0800b556
 8007a0c:	0800b549 	.word	0x0800b549

08007a10 <quorem>:
 8007a10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	6903      	ldr	r3, [r0, #16]
 8007a16:	690c      	ldr	r4, [r1, #16]
 8007a18:	4607      	mov	r7, r0
 8007a1a:	42a3      	cmp	r3, r4
 8007a1c:	db7e      	blt.n	8007b1c <quorem+0x10c>
 8007a1e:	3c01      	subs	r4, #1
 8007a20:	00a3      	lsls	r3, r4, #2
 8007a22:	f100 0514 	add.w	r5, r0, #20
 8007a26:	f101 0814 	add.w	r8, r1, #20
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a46:	d32e      	bcc.n	8007aa6 <quorem+0x96>
 8007a48:	f04f 0a00 	mov.w	sl, #0
 8007a4c:	46c4      	mov	ip, r8
 8007a4e:	46ae      	mov	lr, r5
 8007a50:	46d3      	mov	fp, sl
 8007a52:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a56:	b298      	uxth	r0, r3
 8007a58:	fb06 a000 	mla	r0, r6, r0, sl
 8007a5c:	0c1b      	lsrs	r3, r3, #16
 8007a5e:	0c02      	lsrs	r2, r0, #16
 8007a60:	fb06 2303 	mla	r3, r6, r3, r2
 8007a64:	f8de 2000 	ldr.w	r2, [lr]
 8007a68:	b280      	uxth	r0, r0
 8007a6a:	b292      	uxth	r2, r2
 8007a6c:	1a12      	subs	r2, r2, r0
 8007a6e:	445a      	add	r2, fp
 8007a70:	f8de 0000 	ldr.w	r0, [lr]
 8007a74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a7e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a82:	b292      	uxth	r2, r2
 8007a84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a88:	45e1      	cmp	r9, ip
 8007a8a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a8e:	f84e 2b04 	str.w	r2, [lr], #4
 8007a92:	d2de      	bcs.n	8007a52 <quorem+0x42>
 8007a94:	9b00      	ldr	r3, [sp, #0]
 8007a96:	58eb      	ldr	r3, [r5, r3]
 8007a98:	b92b      	cbnz	r3, 8007aa6 <quorem+0x96>
 8007a9a:	9b01      	ldr	r3, [sp, #4]
 8007a9c:	3b04      	subs	r3, #4
 8007a9e:	429d      	cmp	r5, r3
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	d32f      	bcc.n	8007b04 <quorem+0xf4>
 8007aa4:	613c      	str	r4, [r7, #16]
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	f001 fd0e 	bl	80094c8 <__mcmp>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	db25      	blt.n	8007afc <quorem+0xec>
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ab8:	f8d1 c000 	ldr.w	ip, [r1]
 8007abc:	fa1f fe82 	uxth.w	lr, r2
 8007ac0:	fa1f f38c 	uxth.w	r3, ip
 8007ac4:	eba3 030e 	sub.w	r3, r3, lr
 8007ac8:	4403      	add	r3, r0
 8007aca:	0c12      	lsrs	r2, r2, #16
 8007acc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007ad0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ada:	45c1      	cmp	r9, r8
 8007adc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ae0:	f841 3b04 	str.w	r3, [r1], #4
 8007ae4:	d2e6      	bcs.n	8007ab4 <quorem+0xa4>
 8007ae6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aee:	b922      	cbnz	r2, 8007afa <quorem+0xea>
 8007af0:	3b04      	subs	r3, #4
 8007af2:	429d      	cmp	r5, r3
 8007af4:	461a      	mov	r2, r3
 8007af6:	d30b      	bcc.n	8007b10 <quorem+0x100>
 8007af8:	613c      	str	r4, [r7, #16]
 8007afa:	3601      	adds	r6, #1
 8007afc:	4630      	mov	r0, r6
 8007afe:	b003      	add	sp, #12
 8007b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b04:	6812      	ldr	r2, [r2, #0]
 8007b06:	3b04      	subs	r3, #4
 8007b08:	2a00      	cmp	r2, #0
 8007b0a:	d1cb      	bne.n	8007aa4 <quorem+0x94>
 8007b0c:	3c01      	subs	r4, #1
 8007b0e:	e7c6      	b.n	8007a9e <quorem+0x8e>
 8007b10:	6812      	ldr	r2, [r2, #0]
 8007b12:	3b04      	subs	r3, #4
 8007b14:	2a00      	cmp	r2, #0
 8007b16:	d1ef      	bne.n	8007af8 <quorem+0xe8>
 8007b18:	3c01      	subs	r4, #1
 8007b1a:	e7ea      	b.n	8007af2 <quorem+0xe2>
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	e7ee      	b.n	8007afe <quorem+0xee>

08007b20 <_dtoa_r>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	4614      	mov	r4, r2
 8007b26:	461d      	mov	r5, r3
 8007b28:	69c7      	ldr	r7, [r0, #28]
 8007b2a:	b097      	sub	sp, #92	@ 0x5c
 8007b2c:	4683      	mov	fp, r0
 8007b2e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007b32:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007b34:	b97f      	cbnz	r7, 8007b56 <_dtoa_r+0x36>
 8007b36:	2010      	movs	r0, #16
 8007b38:	f001 f93c 	bl	8008db4 <malloc>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007b42:	b920      	cbnz	r0, 8007b4e <_dtoa_r+0x2e>
 8007b44:	21ef      	movs	r1, #239	@ 0xef
 8007b46:	4ba8      	ldr	r3, [pc, #672]	@ (8007de8 <_dtoa_r+0x2c8>)
 8007b48:	48a8      	ldr	r0, [pc, #672]	@ (8007dec <_dtoa_r+0x2cc>)
 8007b4a:	f7ff ff43 	bl	80079d4 <__assert_func>
 8007b4e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b52:	6007      	str	r7, [r0, #0]
 8007b54:	60c7      	str	r7, [r0, #12]
 8007b56:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b5a:	6819      	ldr	r1, [r3, #0]
 8007b5c:	b159      	cbz	r1, 8007b76 <_dtoa_r+0x56>
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	2301      	movs	r3, #1
 8007b62:	4093      	lsls	r3, r2
 8007b64:	604a      	str	r2, [r1, #4]
 8007b66:	608b      	str	r3, [r1, #8]
 8007b68:	4658      	mov	r0, fp
 8007b6a:	f001 fa2b 	bl	8008fc4 <_Bfree>
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	1e2b      	subs	r3, r5, #0
 8007b78:	bfaf      	iteee	ge
 8007b7a:	2300      	movge	r3, #0
 8007b7c:	2201      	movlt	r2, #1
 8007b7e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b82:	9303      	strlt	r3, [sp, #12]
 8007b84:	bfa8      	it	ge
 8007b86:	6033      	strge	r3, [r6, #0]
 8007b88:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b8c:	4b98      	ldr	r3, [pc, #608]	@ (8007df0 <_dtoa_r+0x2d0>)
 8007b8e:	bfb8      	it	lt
 8007b90:	6032      	strlt	r2, [r6, #0]
 8007b92:	ea33 0308 	bics.w	r3, r3, r8
 8007b96:	d112      	bne.n	8007bbe <_dtoa_r+0x9e>
 8007b98:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b9c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007ba4:	4323      	orrs	r3, r4
 8007ba6:	f000 8550 	beq.w	800864a <_dtoa_r+0xb2a>
 8007baa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007bac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007df4 <_dtoa_r+0x2d4>
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 8552 	beq.w	800865a <_dtoa_r+0xb3a>
 8007bb6:	f10a 0303 	add.w	r3, sl, #3
 8007bba:	f000 bd4c 	b.w	8008656 <_dtoa_r+0xb36>
 8007bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bc2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007bc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f7f8 feeb 	bl	80009a8 <__aeabi_dcmpeq>
 8007bd2:	4607      	mov	r7, r0
 8007bd4:	b158      	cbz	r0, 8007bee <_dtoa_r+0xce>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007bde:	b113      	cbz	r3, 8007be6 <_dtoa_r+0xc6>
 8007be0:	4b85      	ldr	r3, [pc, #532]	@ (8007df8 <_dtoa_r+0x2d8>)
 8007be2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007dfc <_dtoa_r+0x2dc>
 8007bea:	f000 bd36 	b.w	800865a <_dtoa_r+0xb3a>
 8007bee:	ab14      	add	r3, sp, #80	@ 0x50
 8007bf0:	9301      	str	r3, [sp, #4]
 8007bf2:	ab15      	add	r3, sp, #84	@ 0x54
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	4658      	mov	r0, fp
 8007bf8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007bfc:	f001 fd7c 	bl	80096f8 <__d2b>
 8007c00:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007c04:	4681      	mov	r9, r0
 8007c06:	2e00      	cmp	r6, #0
 8007c08:	d077      	beq.n	8007cfa <_dtoa_r+0x1da>
 8007c0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c10:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c18:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007c1c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007c20:	9712      	str	r7, [sp, #72]	@ 0x48
 8007c22:	4619      	mov	r1, r3
 8007c24:	2200      	movs	r2, #0
 8007c26:	4b76      	ldr	r3, [pc, #472]	@ (8007e00 <_dtoa_r+0x2e0>)
 8007c28:	f7f8 fa9e 	bl	8000168 <__aeabi_dsub>
 8007c2c:	a368      	add	r3, pc, #416	@ (adr r3, 8007dd0 <_dtoa_r+0x2b0>)
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f7f8 fc51 	bl	80004d8 <__aeabi_dmul>
 8007c36:	a368      	add	r3, pc, #416	@ (adr r3, 8007dd8 <_dtoa_r+0x2b8>)
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	f7f8 fa96 	bl	800016c <__adddf3>
 8007c40:	4604      	mov	r4, r0
 8007c42:	4630      	mov	r0, r6
 8007c44:	460d      	mov	r5, r1
 8007c46:	f7f8 fbdd 	bl	8000404 <__aeabi_i2d>
 8007c4a:	a365      	add	r3, pc, #404	@ (adr r3, 8007de0 <_dtoa_r+0x2c0>)
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	f7f8 fc42 	bl	80004d8 <__aeabi_dmul>
 8007c54:	4602      	mov	r2, r0
 8007c56:	460b      	mov	r3, r1
 8007c58:	4620      	mov	r0, r4
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	f7f8 fa86 	bl	800016c <__adddf3>
 8007c60:	4604      	mov	r4, r0
 8007c62:	460d      	mov	r5, r1
 8007c64:	f7f8 fee8 	bl	8000a38 <__aeabi_d2iz>
 8007c68:	2200      	movs	r2, #0
 8007c6a:	4607      	mov	r7, r0
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4620      	mov	r0, r4
 8007c70:	4629      	mov	r1, r5
 8007c72:	f7f8 fea3 	bl	80009bc <__aeabi_dcmplt>
 8007c76:	b140      	cbz	r0, 8007c8a <_dtoa_r+0x16a>
 8007c78:	4638      	mov	r0, r7
 8007c7a:	f7f8 fbc3 	bl	8000404 <__aeabi_i2d>
 8007c7e:	4622      	mov	r2, r4
 8007c80:	462b      	mov	r3, r5
 8007c82:	f7f8 fe91 	bl	80009a8 <__aeabi_dcmpeq>
 8007c86:	b900      	cbnz	r0, 8007c8a <_dtoa_r+0x16a>
 8007c88:	3f01      	subs	r7, #1
 8007c8a:	2f16      	cmp	r7, #22
 8007c8c:	d853      	bhi.n	8007d36 <_dtoa_r+0x216>
 8007c8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c92:	4b5c      	ldr	r3, [pc, #368]	@ (8007e04 <_dtoa_r+0x2e4>)
 8007c94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	f7f8 fe8e 	bl	80009bc <__aeabi_dcmplt>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d04a      	beq.n	8007d3a <_dtoa_r+0x21a>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	3f01      	subs	r7, #1
 8007ca8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007caa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007cac:	1b9b      	subs	r3, r3, r6
 8007cae:	1e5a      	subs	r2, r3, #1
 8007cb0:	bf46      	itte	mi
 8007cb2:	f1c3 0801 	rsbmi	r8, r3, #1
 8007cb6:	2300      	movmi	r3, #0
 8007cb8:	f04f 0800 	movpl.w	r8, #0
 8007cbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cbe:	bf48      	it	mi
 8007cc0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007cc2:	2f00      	cmp	r7, #0
 8007cc4:	db3b      	blt.n	8007d3e <_dtoa_r+0x21e>
 8007cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc8:	970e      	str	r7, [sp, #56]	@ 0x38
 8007cca:	443b      	add	r3, r7
 8007ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cce:	2300      	movs	r3, #0
 8007cd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007cd4:	2b09      	cmp	r3, #9
 8007cd6:	d866      	bhi.n	8007da6 <_dtoa_r+0x286>
 8007cd8:	2b05      	cmp	r3, #5
 8007cda:	bfc4      	itt	gt
 8007cdc:	3b04      	subgt	r3, #4
 8007cde:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007ce0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ce2:	bfc8      	it	gt
 8007ce4:	2400      	movgt	r4, #0
 8007ce6:	f1a3 0302 	sub.w	r3, r3, #2
 8007cea:	bfd8      	it	le
 8007cec:	2401      	movle	r4, #1
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d864      	bhi.n	8007dbc <_dtoa_r+0x29c>
 8007cf2:	e8df f003 	tbb	[pc, r3]
 8007cf6:	382b      	.short	0x382b
 8007cf8:	5636      	.short	0x5636
 8007cfa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007cfe:	441e      	add	r6, r3
 8007d00:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007d04:	2b20      	cmp	r3, #32
 8007d06:	bfc1      	itttt	gt
 8007d08:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007d0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007d10:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007d14:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007d18:	bfd6      	itet	le
 8007d1a:	f1c3 0320 	rsble	r3, r3, #32
 8007d1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007d22:	fa04 f003 	lslle.w	r0, r4, r3
 8007d26:	f7f8 fb5d 	bl	80003e4 <__aeabi_ui2d>
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007d30:	3e01      	subs	r6, #1
 8007d32:	9212      	str	r2, [sp, #72]	@ 0x48
 8007d34:	e775      	b.n	8007c22 <_dtoa_r+0x102>
 8007d36:	2301      	movs	r3, #1
 8007d38:	e7b6      	b.n	8007ca8 <_dtoa_r+0x188>
 8007d3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007d3c:	e7b5      	b.n	8007caa <_dtoa_r+0x18a>
 8007d3e:	427b      	negs	r3, r7
 8007d40:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d42:	2300      	movs	r3, #0
 8007d44:	eba8 0807 	sub.w	r8, r8, r7
 8007d48:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d4a:	e7c2      	b.n	8007cd2 <_dtoa_r+0x1b2>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dc35      	bgt.n	8007dc2 <_dtoa_r+0x2a2>
 8007d56:	2301      	movs	r3, #1
 8007d58:	461a      	mov	r2, r3
 8007d5a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007d5e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007d60:	e00b      	b.n	8007d7a <_dtoa_r+0x25a>
 8007d62:	2301      	movs	r3, #1
 8007d64:	e7f3      	b.n	8007d4e <_dtoa_r+0x22e>
 8007d66:	2300      	movs	r3, #0
 8007d68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d6c:	18fb      	adds	r3, r7, r3
 8007d6e:	9308      	str	r3, [sp, #32]
 8007d70:	3301      	adds	r3, #1
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	9307      	str	r3, [sp, #28]
 8007d76:	bfb8      	it	lt
 8007d78:	2301      	movlt	r3, #1
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	2204      	movs	r2, #4
 8007d7e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007d82:	f102 0514 	add.w	r5, r2, #20
 8007d86:	429d      	cmp	r5, r3
 8007d88:	d91f      	bls.n	8007dca <_dtoa_r+0x2aa>
 8007d8a:	6041      	str	r1, [r0, #4]
 8007d8c:	4658      	mov	r0, fp
 8007d8e:	f001 f8d9 	bl	8008f44 <_Balloc>
 8007d92:	4682      	mov	sl, r0
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d139      	bne.n	8007e0c <_dtoa_r+0x2ec>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007e08 <_dtoa_r+0x2e8>)
 8007da0:	e6d2      	b.n	8007b48 <_dtoa_r+0x28>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e7e0      	b.n	8007d68 <_dtoa_r+0x248>
 8007da6:	2401      	movs	r4, #1
 8007da8:	2300      	movs	r3, #0
 8007daa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007dac:	9320      	str	r3, [sp, #128]	@ 0x80
 8007dae:	f04f 33ff 	mov.w	r3, #4294967295
 8007db2:	2200      	movs	r2, #0
 8007db4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007db8:	2312      	movs	r3, #18
 8007dba:	e7d0      	b.n	8007d5e <_dtoa_r+0x23e>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dc0:	e7f5      	b.n	8007dae <_dtoa_r+0x28e>
 8007dc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007dc8:	e7d7      	b.n	8007d7a <_dtoa_r+0x25a>
 8007dca:	3101      	adds	r1, #1
 8007dcc:	0052      	lsls	r2, r2, #1
 8007dce:	e7d8      	b.n	8007d82 <_dtoa_r+0x262>
 8007dd0:	636f4361 	.word	0x636f4361
 8007dd4:	3fd287a7 	.word	0x3fd287a7
 8007dd8:	8b60c8b3 	.word	0x8b60c8b3
 8007ddc:	3fc68a28 	.word	0x3fc68a28
 8007de0:	509f79fb 	.word	0x509f79fb
 8007de4:	3fd34413 	.word	0x3fd34413
 8007de8:	0800b4d0 	.word	0x0800b4d0
 8007dec:	0800b592 	.word	0x0800b592
 8007df0:	7ff00000 	.word	0x7ff00000
 8007df4:	0800b58e 	.word	0x0800b58e
 8007df8:	0800b7d8 	.word	0x0800b7d8
 8007dfc:	0800b7d7 	.word	0x0800b7d7
 8007e00:	3ff80000 	.word	0x3ff80000
 8007e04:	0800b6e8 	.word	0x0800b6e8
 8007e08:	0800b5ea 	.word	0x0800b5ea
 8007e0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e10:	6018      	str	r0, [r3, #0]
 8007e12:	9b07      	ldr	r3, [sp, #28]
 8007e14:	2b0e      	cmp	r3, #14
 8007e16:	f200 80a4 	bhi.w	8007f62 <_dtoa_r+0x442>
 8007e1a:	2c00      	cmp	r4, #0
 8007e1c:	f000 80a1 	beq.w	8007f62 <_dtoa_r+0x442>
 8007e20:	2f00      	cmp	r7, #0
 8007e22:	dd33      	ble.n	8007e8c <_dtoa_r+0x36c>
 8007e24:	4b86      	ldr	r3, [pc, #536]	@ (8008040 <_dtoa_r+0x520>)
 8007e26:	f007 020f 	and.w	r2, r7, #15
 8007e2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e2e:	05f8      	lsls	r0, r7, #23
 8007e30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007e3c:	d516      	bpl.n	8007e6c <_dtoa_r+0x34c>
 8007e3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e42:	4b80      	ldr	r3, [pc, #512]	@ (8008044 <_dtoa_r+0x524>)
 8007e44:	2603      	movs	r6, #3
 8007e46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e4a:	f7f8 fc6f 	bl	800072c <__aeabi_ddiv>
 8007e4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e52:	f004 040f 	and.w	r4, r4, #15
 8007e56:	4d7b      	ldr	r5, [pc, #492]	@ (8008044 <_dtoa_r+0x524>)
 8007e58:	b954      	cbnz	r4, 8007e70 <_dtoa_r+0x350>
 8007e5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e62:	f7f8 fc63 	bl	800072c <__aeabi_ddiv>
 8007e66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e6a:	e028      	b.n	8007ebe <_dtoa_r+0x39e>
 8007e6c:	2602      	movs	r6, #2
 8007e6e:	e7f2      	b.n	8007e56 <_dtoa_r+0x336>
 8007e70:	07e1      	lsls	r1, r4, #31
 8007e72:	d508      	bpl.n	8007e86 <_dtoa_r+0x366>
 8007e74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e7c:	f7f8 fb2c 	bl	80004d8 <__aeabi_dmul>
 8007e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e84:	3601      	adds	r6, #1
 8007e86:	1064      	asrs	r4, r4, #1
 8007e88:	3508      	adds	r5, #8
 8007e8a:	e7e5      	b.n	8007e58 <_dtoa_r+0x338>
 8007e8c:	f000 80d2 	beq.w	8008034 <_dtoa_r+0x514>
 8007e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e94:	427c      	negs	r4, r7
 8007e96:	4b6a      	ldr	r3, [pc, #424]	@ (8008040 <_dtoa_r+0x520>)
 8007e98:	f004 020f 	and.w	r2, r4, #15
 8007e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea4:	f7f8 fb18 	bl	80004d8 <__aeabi_dmul>
 8007ea8:	2602      	movs	r6, #2
 8007eaa:	2300      	movs	r3, #0
 8007eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eb0:	4d64      	ldr	r5, [pc, #400]	@ (8008044 <_dtoa_r+0x524>)
 8007eb2:	1124      	asrs	r4, r4, #4
 8007eb4:	2c00      	cmp	r4, #0
 8007eb6:	f040 80b2 	bne.w	800801e <_dtoa_r+0x4fe>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1d3      	bne.n	8007e66 <_dtoa_r+0x346>
 8007ebe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ec2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 80b7 	beq.w	8008038 <_dtoa_r+0x518>
 8007eca:	2200      	movs	r2, #0
 8007ecc:	4620      	mov	r0, r4
 8007ece:	4629      	mov	r1, r5
 8007ed0:	4b5d      	ldr	r3, [pc, #372]	@ (8008048 <_dtoa_r+0x528>)
 8007ed2:	f7f8 fd73 	bl	80009bc <__aeabi_dcmplt>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	f000 80ae 	beq.w	8008038 <_dtoa_r+0x518>
 8007edc:	9b07      	ldr	r3, [sp, #28]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 80aa 	beq.w	8008038 <_dtoa_r+0x518>
 8007ee4:	9b08      	ldr	r3, [sp, #32]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dd37      	ble.n	8007f5a <_dtoa_r+0x43a>
 8007eea:	1e7b      	subs	r3, r7, #1
 8007eec:	4620      	mov	r0, r4
 8007eee:	9304      	str	r3, [sp, #16]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4629      	mov	r1, r5
 8007ef4:	4b55      	ldr	r3, [pc, #340]	@ (800804c <_dtoa_r+0x52c>)
 8007ef6:	f7f8 faef 	bl	80004d8 <__aeabi_dmul>
 8007efa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007efe:	9c08      	ldr	r4, [sp, #32]
 8007f00:	3601      	adds	r6, #1
 8007f02:	4630      	mov	r0, r6
 8007f04:	f7f8 fa7e 	bl	8000404 <__aeabi_i2d>
 8007f08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f0c:	f7f8 fae4 	bl	80004d8 <__aeabi_dmul>
 8007f10:	2200      	movs	r2, #0
 8007f12:	4b4f      	ldr	r3, [pc, #316]	@ (8008050 <_dtoa_r+0x530>)
 8007f14:	f7f8 f92a 	bl	800016c <__adddf3>
 8007f18:	4605      	mov	r5, r0
 8007f1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007f1e:	2c00      	cmp	r4, #0
 8007f20:	f040 809a 	bne.w	8008058 <_dtoa_r+0x538>
 8007f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8008054 <_dtoa_r+0x534>)
 8007f2c:	f7f8 f91c 	bl	8000168 <__aeabi_dsub>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f38:	462a      	mov	r2, r5
 8007f3a:	4633      	mov	r3, r6
 8007f3c:	f7f8 fd5c 	bl	80009f8 <__aeabi_dcmpgt>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	f040 828e 	bne.w	8008462 <_dtoa_r+0x942>
 8007f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f4a:	462a      	mov	r2, r5
 8007f4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f50:	f7f8 fd34 	bl	80009bc <__aeabi_dcmplt>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	f040 8127 	bne.w	80081a8 <_dtoa_r+0x688>
 8007f5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007f5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007f62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f2c0 8163 	blt.w	8008230 <_dtoa_r+0x710>
 8007f6a:	2f0e      	cmp	r7, #14
 8007f6c:	f300 8160 	bgt.w	8008230 <_dtoa_r+0x710>
 8007f70:	4b33      	ldr	r3, [pc, #204]	@ (8008040 <_dtoa_r+0x520>)
 8007f72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	da03      	bge.n	8007f8c <_dtoa_r+0x46c>
 8007f84:	9b07      	ldr	r3, [sp, #28]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f340 8100 	ble.w	800818c <_dtoa_r+0x66c>
 8007f8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f90:	4656      	mov	r6, sl
 8007f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f96:	4620      	mov	r0, r4
 8007f98:	4629      	mov	r1, r5
 8007f9a:	f7f8 fbc7 	bl	800072c <__aeabi_ddiv>
 8007f9e:	f7f8 fd4b 	bl	8000a38 <__aeabi_d2iz>
 8007fa2:	4680      	mov	r8, r0
 8007fa4:	f7f8 fa2e 	bl	8000404 <__aeabi_i2d>
 8007fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fac:	f7f8 fa94 	bl	80004d8 <__aeabi_dmul>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	f7f8 f8d6 	bl	8000168 <__aeabi_dsub>
 8007fbc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007fc0:	9d07      	ldr	r5, [sp, #28]
 8007fc2:	f806 4b01 	strb.w	r4, [r6], #1
 8007fc6:	eba6 040a 	sub.w	r4, r6, sl
 8007fca:	42a5      	cmp	r5, r4
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	f040 8116 	bne.w	8008200 <_dtoa_r+0x6e0>
 8007fd4:	f7f8 f8ca 	bl	800016c <__adddf3>
 8007fd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fdc:	4604      	mov	r4, r0
 8007fde:	460d      	mov	r5, r1
 8007fe0:	f7f8 fd0a 	bl	80009f8 <__aeabi_dcmpgt>
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	f040 80f8 	bne.w	80081da <_dtoa_r+0x6ba>
 8007fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fee:	4620      	mov	r0, r4
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	f7f8 fcd9 	bl	80009a8 <__aeabi_dcmpeq>
 8007ff6:	b118      	cbz	r0, 8008000 <_dtoa_r+0x4e0>
 8007ff8:	f018 0f01 	tst.w	r8, #1
 8007ffc:	f040 80ed 	bne.w	80081da <_dtoa_r+0x6ba>
 8008000:	4649      	mov	r1, r9
 8008002:	4658      	mov	r0, fp
 8008004:	f000 ffde 	bl	8008fc4 <_Bfree>
 8008008:	2300      	movs	r3, #0
 800800a:	7033      	strb	r3, [r6, #0]
 800800c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800800e:	3701      	adds	r7, #1
 8008010:	601f      	str	r7, [r3, #0]
 8008012:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 8320 	beq.w	800865a <_dtoa_r+0xb3a>
 800801a:	601e      	str	r6, [r3, #0]
 800801c:	e31d      	b.n	800865a <_dtoa_r+0xb3a>
 800801e:	07e2      	lsls	r2, r4, #31
 8008020:	d505      	bpl.n	800802e <_dtoa_r+0x50e>
 8008022:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008026:	f7f8 fa57 	bl	80004d8 <__aeabi_dmul>
 800802a:	2301      	movs	r3, #1
 800802c:	3601      	adds	r6, #1
 800802e:	1064      	asrs	r4, r4, #1
 8008030:	3508      	adds	r5, #8
 8008032:	e73f      	b.n	8007eb4 <_dtoa_r+0x394>
 8008034:	2602      	movs	r6, #2
 8008036:	e742      	b.n	8007ebe <_dtoa_r+0x39e>
 8008038:	9c07      	ldr	r4, [sp, #28]
 800803a:	9704      	str	r7, [sp, #16]
 800803c:	e761      	b.n	8007f02 <_dtoa_r+0x3e2>
 800803e:	bf00      	nop
 8008040:	0800b6e8 	.word	0x0800b6e8
 8008044:	0800b6c0 	.word	0x0800b6c0
 8008048:	3ff00000 	.word	0x3ff00000
 800804c:	40240000 	.word	0x40240000
 8008050:	401c0000 	.word	0x401c0000
 8008054:	40140000 	.word	0x40140000
 8008058:	4b70      	ldr	r3, [pc, #448]	@ (800821c <_dtoa_r+0x6fc>)
 800805a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800805c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008060:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008064:	4454      	add	r4, sl
 8008066:	2900      	cmp	r1, #0
 8008068:	d045      	beq.n	80080f6 <_dtoa_r+0x5d6>
 800806a:	2000      	movs	r0, #0
 800806c:	496c      	ldr	r1, [pc, #432]	@ (8008220 <_dtoa_r+0x700>)
 800806e:	f7f8 fb5d 	bl	800072c <__aeabi_ddiv>
 8008072:	4633      	mov	r3, r6
 8008074:	462a      	mov	r2, r5
 8008076:	f7f8 f877 	bl	8000168 <__aeabi_dsub>
 800807a:	4656      	mov	r6, sl
 800807c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008084:	f7f8 fcd8 	bl	8000a38 <__aeabi_d2iz>
 8008088:	4605      	mov	r5, r0
 800808a:	f7f8 f9bb 	bl	8000404 <__aeabi_i2d>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008096:	f7f8 f867 	bl	8000168 <__aeabi_dsub>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	3530      	adds	r5, #48	@ 0x30
 80080a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080a8:	f806 5b01 	strb.w	r5, [r6], #1
 80080ac:	f7f8 fc86 	bl	80009bc <__aeabi_dcmplt>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	d163      	bne.n	800817c <_dtoa_r+0x65c>
 80080b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080b8:	2000      	movs	r0, #0
 80080ba:	495a      	ldr	r1, [pc, #360]	@ (8008224 <_dtoa_r+0x704>)
 80080bc:	f7f8 f854 	bl	8000168 <__aeabi_dsub>
 80080c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080c4:	f7f8 fc7a 	bl	80009bc <__aeabi_dcmplt>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	f040 8087 	bne.w	80081dc <_dtoa_r+0x6bc>
 80080ce:	42a6      	cmp	r6, r4
 80080d0:	f43f af43 	beq.w	8007f5a <_dtoa_r+0x43a>
 80080d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080d8:	2200      	movs	r2, #0
 80080da:	4b53      	ldr	r3, [pc, #332]	@ (8008228 <_dtoa_r+0x708>)
 80080dc:	f7f8 f9fc 	bl	80004d8 <__aeabi_dmul>
 80080e0:	2200      	movs	r2, #0
 80080e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ea:	4b4f      	ldr	r3, [pc, #316]	@ (8008228 <_dtoa_r+0x708>)
 80080ec:	f7f8 f9f4 	bl	80004d8 <__aeabi_dmul>
 80080f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080f4:	e7c4      	b.n	8008080 <_dtoa_r+0x560>
 80080f6:	4631      	mov	r1, r6
 80080f8:	4628      	mov	r0, r5
 80080fa:	f7f8 f9ed 	bl	80004d8 <__aeabi_dmul>
 80080fe:	4656      	mov	r6, sl
 8008100:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008104:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800810a:	f7f8 fc95 	bl	8000a38 <__aeabi_d2iz>
 800810e:	4605      	mov	r5, r0
 8008110:	f7f8 f978 	bl	8000404 <__aeabi_i2d>
 8008114:	4602      	mov	r2, r0
 8008116:	460b      	mov	r3, r1
 8008118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800811c:	f7f8 f824 	bl	8000168 <__aeabi_dsub>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	3530      	adds	r5, #48	@ 0x30
 8008126:	f806 5b01 	strb.w	r5, [r6], #1
 800812a:	42a6      	cmp	r6, r4
 800812c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008130:	f04f 0200 	mov.w	r2, #0
 8008134:	d124      	bne.n	8008180 <_dtoa_r+0x660>
 8008136:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800813a:	4b39      	ldr	r3, [pc, #228]	@ (8008220 <_dtoa_r+0x700>)
 800813c:	f7f8 f816 	bl	800016c <__adddf3>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008148:	f7f8 fc56 	bl	80009f8 <__aeabi_dcmpgt>
 800814c:	2800      	cmp	r0, #0
 800814e:	d145      	bne.n	80081dc <_dtoa_r+0x6bc>
 8008150:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008154:	2000      	movs	r0, #0
 8008156:	4932      	ldr	r1, [pc, #200]	@ (8008220 <_dtoa_r+0x700>)
 8008158:	f7f8 f806 	bl	8000168 <__aeabi_dsub>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008164:	f7f8 fc2a 	bl	80009bc <__aeabi_dcmplt>
 8008168:	2800      	cmp	r0, #0
 800816a:	f43f aef6 	beq.w	8007f5a <_dtoa_r+0x43a>
 800816e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008170:	1e73      	subs	r3, r6, #1
 8008172:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008174:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008178:	2b30      	cmp	r3, #48	@ 0x30
 800817a:	d0f8      	beq.n	800816e <_dtoa_r+0x64e>
 800817c:	9f04      	ldr	r7, [sp, #16]
 800817e:	e73f      	b.n	8008000 <_dtoa_r+0x4e0>
 8008180:	4b29      	ldr	r3, [pc, #164]	@ (8008228 <_dtoa_r+0x708>)
 8008182:	f7f8 f9a9 	bl	80004d8 <__aeabi_dmul>
 8008186:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800818a:	e7bc      	b.n	8008106 <_dtoa_r+0x5e6>
 800818c:	d10c      	bne.n	80081a8 <_dtoa_r+0x688>
 800818e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008192:	2200      	movs	r2, #0
 8008194:	4b25      	ldr	r3, [pc, #148]	@ (800822c <_dtoa_r+0x70c>)
 8008196:	f7f8 f99f 	bl	80004d8 <__aeabi_dmul>
 800819a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800819e:	f7f8 fc21 	bl	80009e4 <__aeabi_dcmpge>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	f000 815b 	beq.w	800845e <_dtoa_r+0x93e>
 80081a8:	2400      	movs	r4, #0
 80081aa:	4625      	mov	r5, r4
 80081ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081ae:	4656      	mov	r6, sl
 80081b0:	43db      	mvns	r3, r3
 80081b2:	9304      	str	r3, [sp, #16]
 80081b4:	2700      	movs	r7, #0
 80081b6:	4621      	mov	r1, r4
 80081b8:	4658      	mov	r0, fp
 80081ba:	f000 ff03 	bl	8008fc4 <_Bfree>
 80081be:	2d00      	cmp	r5, #0
 80081c0:	d0dc      	beq.n	800817c <_dtoa_r+0x65c>
 80081c2:	b12f      	cbz	r7, 80081d0 <_dtoa_r+0x6b0>
 80081c4:	42af      	cmp	r7, r5
 80081c6:	d003      	beq.n	80081d0 <_dtoa_r+0x6b0>
 80081c8:	4639      	mov	r1, r7
 80081ca:	4658      	mov	r0, fp
 80081cc:	f000 fefa 	bl	8008fc4 <_Bfree>
 80081d0:	4629      	mov	r1, r5
 80081d2:	4658      	mov	r0, fp
 80081d4:	f000 fef6 	bl	8008fc4 <_Bfree>
 80081d8:	e7d0      	b.n	800817c <_dtoa_r+0x65c>
 80081da:	9704      	str	r7, [sp, #16]
 80081dc:	4633      	mov	r3, r6
 80081de:	461e      	mov	r6, r3
 80081e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081e4:	2a39      	cmp	r2, #57	@ 0x39
 80081e6:	d107      	bne.n	80081f8 <_dtoa_r+0x6d8>
 80081e8:	459a      	cmp	sl, r3
 80081ea:	d1f8      	bne.n	80081de <_dtoa_r+0x6be>
 80081ec:	9a04      	ldr	r2, [sp, #16]
 80081ee:	3201      	adds	r2, #1
 80081f0:	9204      	str	r2, [sp, #16]
 80081f2:	2230      	movs	r2, #48	@ 0x30
 80081f4:	f88a 2000 	strb.w	r2, [sl]
 80081f8:	781a      	ldrb	r2, [r3, #0]
 80081fa:	3201      	adds	r2, #1
 80081fc:	701a      	strb	r2, [r3, #0]
 80081fe:	e7bd      	b.n	800817c <_dtoa_r+0x65c>
 8008200:	2200      	movs	r2, #0
 8008202:	4b09      	ldr	r3, [pc, #36]	@ (8008228 <_dtoa_r+0x708>)
 8008204:	f7f8 f968 	bl	80004d8 <__aeabi_dmul>
 8008208:	2200      	movs	r2, #0
 800820a:	2300      	movs	r3, #0
 800820c:	4604      	mov	r4, r0
 800820e:	460d      	mov	r5, r1
 8008210:	f7f8 fbca 	bl	80009a8 <__aeabi_dcmpeq>
 8008214:	2800      	cmp	r0, #0
 8008216:	f43f aebc 	beq.w	8007f92 <_dtoa_r+0x472>
 800821a:	e6f1      	b.n	8008000 <_dtoa_r+0x4e0>
 800821c:	0800b6e8 	.word	0x0800b6e8
 8008220:	3fe00000 	.word	0x3fe00000
 8008224:	3ff00000 	.word	0x3ff00000
 8008228:	40240000 	.word	0x40240000
 800822c:	40140000 	.word	0x40140000
 8008230:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008232:	2a00      	cmp	r2, #0
 8008234:	f000 80db 	beq.w	80083ee <_dtoa_r+0x8ce>
 8008238:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800823a:	2a01      	cmp	r2, #1
 800823c:	f300 80bf 	bgt.w	80083be <_dtoa_r+0x89e>
 8008240:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008242:	2a00      	cmp	r2, #0
 8008244:	f000 80b7 	beq.w	80083b6 <_dtoa_r+0x896>
 8008248:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800824c:	4646      	mov	r6, r8
 800824e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008252:	2101      	movs	r1, #1
 8008254:	441a      	add	r2, r3
 8008256:	4658      	mov	r0, fp
 8008258:	4498      	add	r8, r3
 800825a:	9209      	str	r2, [sp, #36]	@ 0x24
 800825c:	f000 ffb0 	bl	80091c0 <__i2b>
 8008260:	4605      	mov	r5, r0
 8008262:	b15e      	cbz	r6, 800827c <_dtoa_r+0x75c>
 8008264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008266:	2b00      	cmp	r3, #0
 8008268:	dd08      	ble.n	800827c <_dtoa_r+0x75c>
 800826a:	42b3      	cmp	r3, r6
 800826c:	bfa8      	it	ge
 800826e:	4633      	movge	r3, r6
 8008270:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008272:	eba8 0803 	sub.w	r8, r8, r3
 8008276:	1af6      	subs	r6, r6, r3
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	9309      	str	r3, [sp, #36]	@ 0x24
 800827c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800827e:	b1f3      	cbz	r3, 80082be <_dtoa_r+0x79e>
 8008280:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 80b7 	beq.w	80083f6 <_dtoa_r+0x8d6>
 8008288:	b18c      	cbz	r4, 80082ae <_dtoa_r+0x78e>
 800828a:	4629      	mov	r1, r5
 800828c:	4622      	mov	r2, r4
 800828e:	4658      	mov	r0, fp
 8008290:	f001 f854 	bl	800933c <__pow5mult>
 8008294:	464a      	mov	r2, r9
 8008296:	4601      	mov	r1, r0
 8008298:	4605      	mov	r5, r0
 800829a:	4658      	mov	r0, fp
 800829c:	f000 ffa6 	bl	80091ec <__multiply>
 80082a0:	4649      	mov	r1, r9
 80082a2:	9004      	str	r0, [sp, #16]
 80082a4:	4658      	mov	r0, fp
 80082a6:	f000 fe8d 	bl	8008fc4 <_Bfree>
 80082aa:	9b04      	ldr	r3, [sp, #16]
 80082ac:	4699      	mov	r9, r3
 80082ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082b0:	1b1a      	subs	r2, r3, r4
 80082b2:	d004      	beq.n	80082be <_dtoa_r+0x79e>
 80082b4:	4649      	mov	r1, r9
 80082b6:	4658      	mov	r0, fp
 80082b8:	f001 f840 	bl	800933c <__pow5mult>
 80082bc:	4681      	mov	r9, r0
 80082be:	2101      	movs	r1, #1
 80082c0:	4658      	mov	r0, fp
 80082c2:	f000 ff7d 	bl	80091c0 <__i2b>
 80082c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082c8:	4604      	mov	r4, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f000 81c9 	beq.w	8008662 <_dtoa_r+0xb42>
 80082d0:	461a      	mov	r2, r3
 80082d2:	4601      	mov	r1, r0
 80082d4:	4658      	mov	r0, fp
 80082d6:	f001 f831 	bl	800933c <__pow5mult>
 80082da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082dc:	4604      	mov	r4, r0
 80082de:	2b01      	cmp	r3, #1
 80082e0:	f300 808f 	bgt.w	8008402 <_dtoa_r+0x8e2>
 80082e4:	9b02      	ldr	r3, [sp, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f040 8087 	bne.w	80083fa <_dtoa_r+0x8da>
 80082ec:	9b03      	ldr	r3, [sp, #12]
 80082ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f040 8083 	bne.w	80083fe <_dtoa_r+0x8de>
 80082f8:	9b03      	ldr	r3, [sp, #12]
 80082fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082fe:	0d1b      	lsrs	r3, r3, #20
 8008300:	051b      	lsls	r3, r3, #20
 8008302:	b12b      	cbz	r3, 8008310 <_dtoa_r+0x7f0>
 8008304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008306:	f108 0801 	add.w	r8, r8, #1
 800830a:	3301      	adds	r3, #1
 800830c:	9309      	str	r3, [sp, #36]	@ 0x24
 800830e:	2301      	movs	r3, #1
 8008310:	930a      	str	r3, [sp, #40]	@ 0x28
 8008312:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 81aa 	beq.w	800866e <_dtoa_r+0xb4e>
 800831a:	6923      	ldr	r3, [r4, #16]
 800831c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008320:	6918      	ldr	r0, [r3, #16]
 8008322:	f000 ff01 	bl	8009128 <__hi0bits>
 8008326:	f1c0 0020 	rsb	r0, r0, #32
 800832a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800832c:	4418      	add	r0, r3
 800832e:	f010 001f 	ands.w	r0, r0, #31
 8008332:	d071      	beq.n	8008418 <_dtoa_r+0x8f8>
 8008334:	f1c0 0320 	rsb	r3, r0, #32
 8008338:	2b04      	cmp	r3, #4
 800833a:	dd65      	ble.n	8008408 <_dtoa_r+0x8e8>
 800833c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800833e:	f1c0 001c 	rsb	r0, r0, #28
 8008342:	4403      	add	r3, r0
 8008344:	4480      	add	r8, r0
 8008346:	4406      	add	r6, r0
 8008348:	9309      	str	r3, [sp, #36]	@ 0x24
 800834a:	f1b8 0f00 	cmp.w	r8, #0
 800834e:	dd05      	ble.n	800835c <_dtoa_r+0x83c>
 8008350:	4649      	mov	r1, r9
 8008352:	4642      	mov	r2, r8
 8008354:	4658      	mov	r0, fp
 8008356:	f001 f84b 	bl	80093f0 <__lshift>
 800835a:	4681      	mov	r9, r0
 800835c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800835e:	2b00      	cmp	r3, #0
 8008360:	dd05      	ble.n	800836e <_dtoa_r+0x84e>
 8008362:	4621      	mov	r1, r4
 8008364:	461a      	mov	r2, r3
 8008366:	4658      	mov	r0, fp
 8008368:	f001 f842 	bl	80093f0 <__lshift>
 800836c:	4604      	mov	r4, r0
 800836e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d053      	beq.n	800841c <_dtoa_r+0x8fc>
 8008374:	4621      	mov	r1, r4
 8008376:	4648      	mov	r0, r9
 8008378:	f001 f8a6 	bl	80094c8 <__mcmp>
 800837c:	2800      	cmp	r0, #0
 800837e:	da4d      	bge.n	800841c <_dtoa_r+0x8fc>
 8008380:	1e7b      	subs	r3, r7, #1
 8008382:	4649      	mov	r1, r9
 8008384:	9304      	str	r3, [sp, #16]
 8008386:	220a      	movs	r2, #10
 8008388:	2300      	movs	r3, #0
 800838a:	4658      	mov	r0, fp
 800838c:	f000 fe3c 	bl	8009008 <__multadd>
 8008390:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008392:	4681      	mov	r9, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 816c 	beq.w	8008672 <_dtoa_r+0xb52>
 800839a:	2300      	movs	r3, #0
 800839c:	4629      	mov	r1, r5
 800839e:	220a      	movs	r2, #10
 80083a0:	4658      	mov	r0, fp
 80083a2:	f000 fe31 	bl	8009008 <__multadd>
 80083a6:	9b08      	ldr	r3, [sp, #32]
 80083a8:	4605      	mov	r5, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	dc61      	bgt.n	8008472 <_dtoa_r+0x952>
 80083ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	dc3b      	bgt.n	800842c <_dtoa_r+0x90c>
 80083b4:	e05d      	b.n	8008472 <_dtoa_r+0x952>
 80083b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80083b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80083bc:	e746      	b.n	800824c <_dtoa_r+0x72c>
 80083be:	9b07      	ldr	r3, [sp, #28]
 80083c0:	1e5c      	subs	r4, r3, #1
 80083c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083c4:	42a3      	cmp	r3, r4
 80083c6:	bfbf      	itttt	lt
 80083c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80083ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80083cc:	1ae3      	sublt	r3, r4, r3
 80083ce:	18d2      	addlt	r2, r2, r3
 80083d0:	bfa8      	it	ge
 80083d2:	1b1c      	subge	r4, r3, r4
 80083d4:	9b07      	ldr	r3, [sp, #28]
 80083d6:	bfbe      	ittt	lt
 80083d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80083da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80083dc:	2400      	movlt	r4, #0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	bfb5      	itete	lt
 80083e2:	eba8 0603 	sublt.w	r6, r8, r3
 80083e6:	4646      	movge	r6, r8
 80083e8:	2300      	movlt	r3, #0
 80083ea:	9b07      	ldrge	r3, [sp, #28]
 80083ec:	e730      	b.n	8008250 <_dtoa_r+0x730>
 80083ee:	4646      	mov	r6, r8
 80083f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80083f4:	e735      	b.n	8008262 <_dtoa_r+0x742>
 80083f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083f8:	e75c      	b.n	80082b4 <_dtoa_r+0x794>
 80083fa:	2300      	movs	r3, #0
 80083fc:	e788      	b.n	8008310 <_dtoa_r+0x7f0>
 80083fe:	9b02      	ldr	r3, [sp, #8]
 8008400:	e786      	b.n	8008310 <_dtoa_r+0x7f0>
 8008402:	2300      	movs	r3, #0
 8008404:	930a      	str	r3, [sp, #40]	@ 0x28
 8008406:	e788      	b.n	800831a <_dtoa_r+0x7fa>
 8008408:	d09f      	beq.n	800834a <_dtoa_r+0x82a>
 800840a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800840c:	331c      	adds	r3, #28
 800840e:	441a      	add	r2, r3
 8008410:	4498      	add	r8, r3
 8008412:	441e      	add	r6, r3
 8008414:	9209      	str	r2, [sp, #36]	@ 0x24
 8008416:	e798      	b.n	800834a <_dtoa_r+0x82a>
 8008418:	4603      	mov	r3, r0
 800841a:	e7f6      	b.n	800840a <_dtoa_r+0x8ea>
 800841c:	9b07      	ldr	r3, [sp, #28]
 800841e:	9704      	str	r7, [sp, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	dc20      	bgt.n	8008466 <_dtoa_r+0x946>
 8008424:	9308      	str	r3, [sp, #32]
 8008426:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008428:	2b02      	cmp	r3, #2
 800842a:	dd1e      	ble.n	800846a <_dtoa_r+0x94a>
 800842c:	9b08      	ldr	r3, [sp, #32]
 800842e:	2b00      	cmp	r3, #0
 8008430:	f47f aebc 	bne.w	80081ac <_dtoa_r+0x68c>
 8008434:	4621      	mov	r1, r4
 8008436:	2205      	movs	r2, #5
 8008438:	4658      	mov	r0, fp
 800843a:	f000 fde5 	bl	8009008 <__multadd>
 800843e:	4601      	mov	r1, r0
 8008440:	4604      	mov	r4, r0
 8008442:	4648      	mov	r0, r9
 8008444:	f001 f840 	bl	80094c8 <__mcmp>
 8008448:	2800      	cmp	r0, #0
 800844a:	f77f aeaf 	ble.w	80081ac <_dtoa_r+0x68c>
 800844e:	2331      	movs	r3, #49	@ 0x31
 8008450:	4656      	mov	r6, sl
 8008452:	f806 3b01 	strb.w	r3, [r6], #1
 8008456:	9b04      	ldr	r3, [sp, #16]
 8008458:	3301      	adds	r3, #1
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	e6aa      	b.n	80081b4 <_dtoa_r+0x694>
 800845e:	9c07      	ldr	r4, [sp, #28]
 8008460:	9704      	str	r7, [sp, #16]
 8008462:	4625      	mov	r5, r4
 8008464:	e7f3      	b.n	800844e <_dtoa_r+0x92e>
 8008466:	9b07      	ldr	r3, [sp, #28]
 8008468:	9308      	str	r3, [sp, #32]
 800846a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 8104 	beq.w	800867a <_dtoa_r+0xb5a>
 8008472:	2e00      	cmp	r6, #0
 8008474:	dd05      	ble.n	8008482 <_dtoa_r+0x962>
 8008476:	4629      	mov	r1, r5
 8008478:	4632      	mov	r2, r6
 800847a:	4658      	mov	r0, fp
 800847c:	f000 ffb8 	bl	80093f0 <__lshift>
 8008480:	4605      	mov	r5, r0
 8008482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008484:	2b00      	cmp	r3, #0
 8008486:	d05a      	beq.n	800853e <_dtoa_r+0xa1e>
 8008488:	4658      	mov	r0, fp
 800848a:	6869      	ldr	r1, [r5, #4]
 800848c:	f000 fd5a 	bl	8008f44 <_Balloc>
 8008490:	4606      	mov	r6, r0
 8008492:	b928      	cbnz	r0, 80084a0 <_dtoa_r+0x980>
 8008494:	4602      	mov	r2, r0
 8008496:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800849a:	4b83      	ldr	r3, [pc, #524]	@ (80086a8 <_dtoa_r+0xb88>)
 800849c:	f7ff bb54 	b.w	8007b48 <_dtoa_r+0x28>
 80084a0:	692a      	ldr	r2, [r5, #16]
 80084a2:	f105 010c 	add.w	r1, r5, #12
 80084a6:	3202      	adds	r2, #2
 80084a8:	0092      	lsls	r2, r2, #2
 80084aa:	300c      	adds	r0, #12
 80084ac:	f7ff fa79 	bl	80079a2 <memcpy>
 80084b0:	2201      	movs	r2, #1
 80084b2:	4631      	mov	r1, r6
 80084b4:	4658      	mov	r0, fp
 80084b6:	f000 ff9b 	bl	80093f0 <__lshift>
 80084ba:	462f      	mov	r7, r5
 80084bc:	4605      	mov	r5, r0
 80084be:	f10a 0301 	add.w	r3, sl, #1
 80084c2:	9307      	str	r3, [sp, #28]
 80084c4:	9b08      	ldr	r3, [sp, #32]
 80084c6:	4453      	add	r3, sl
 80084c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084ca:	9b02      	ldr	r3, [sp, #8]
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80084d2:	9b07      	ldr	r3, [sp, #28]
 80084d4:	4621      	mov	r1, r4
 80084d6:	3b01      	subs	r3, #1
 80084d8:	4648      	mov	r0, r9
 80084da:	9302      	str	r3, [sp, #8]
 80084dc:	f7ff fa98 	bl	8007a10 <quorem>
 80084e0:	4639      	mov	r1, r7
 80084e2:	9008      	str	r0, [sp, #32]
 80084e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80084e8:	4648      	mov	r0, r9
 80084ea:	f000 ffed 	bl	80094c8 <__mcmp>
 80084ee:	462a      	mov	r2, r5
 80084f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80084f2:	4621      	mov	r1, r4
 80084f4:	4658      	mov	r0, fp
 80084f6:	f001 f803 	bl	8009500 <__mdiff>
 80084fa:	68c2      	ldr	r2, [r0, #12]
 80084fc:	4606      	mov	r6, r0
 80084fe:	bb02      	cbnz	r2, 8008542 <_dtoa_r+0xa22>
 8008500:	4601      	mov	r1, r0
 8008502:	4648      	mov	r0, r9
 8008504:	f000 ffe0 	bl	80094c8 <__mcmp>
 8008508:	4602      	mov	r2, r0
 800850a:	4631      	mov	r1, r6
 800850c:	4658      	mov	r0, fp
 800850e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008510:	f000 fd58 	bl	8008fc4 <_Bfree>
 8008514:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008516:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008518:	9e07      	ldr	r6, [sp, #28]
 800851a:	ea43 0102 	orr.w	r1, r3, r2
 800851e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008520:	4319      	orrs	r1, r3
 8008522:	d110      	bne.n	8008546 <_dtoa_r+0xa26>
 8008524:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008528:	d029      	beq.n	800857e <_dtoa_r+0xa5e>
 800852a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800852c:	2b00      	cmp	r3, #0
 800852e:	dd02      	ble.n	8008536 <_dtoa_r+0xa16>
 8008530:	9b08      	ldr	r3, [sp, #32]
 8008532:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008536:	9b02      	ldr	r3, [sp, #8]
 8008538:	f883 8000 	strb.w	r8, [r3]
 800853c:	e63b      	b.n	80081b6 <_dtoa_r+0x696>
 800853e:	4628      	mov	r0, r5
 8008540:	e7bb      	b.n	80084ba <_dtoa_r+0x99a>
 8008542:	2201      	movs	r2, #1
 8008544:	e7e1      	b.n	800850a <_dtoa_r+0x9ea>
 8008546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008548:	2b00      	cmp	r3, #0
 800854a:	db04      	blt.n	8008556 <_dtoa_r+0xa36>
 800854c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800854e:	430b      	orrs	r3, r1
 8008550:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008552:	430b      	orrs	r3, r1
 8008554:	d120      	bne.n	8008598 <_dtoa_r+0xa78>
 8008556:	2a00      	cmp	r2, #0
 8008558:	dded      	ble.n	8008536 <_dtoa_r+0xa16>
 800855a:	4649      	mov	r1, r9
 800855c:	2201      	movs	r2, #1
 800855e:	4658      	mov	r0, fp
 8008560:	f000 ff46 	bl	80093f0 <__lshift>
 8008564:	4621      	mov	r1, r4
 8008566:	4681      	mov	r9, r0
 8008568:	f000 ffae 	bl	80094c8 <__mcmp>
 800856c:	2800      	cmp	r0, #0
 800856e:	dc03      	bgt.n	8008578 <_dtoa_r+0xa58>
 8008570:	d1e1      	bne.n	8008536 <_dtoa_r+0xa16>
 8008572:	f018 0f01 	tst.w	r8, #1
 8008576:	d0de      	beq.n	8008536 <_dtoa_r+0xa16>
 8008578:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800857c:	d1d8      	bne.n	8008530 <_dtoa_r+0xa10>
 800857e:	2339      	movs	r3, #57	@ 0x39
 8008580:	9a02      	ldr	r2, [sp, #8]
 8008582:	7013      	strb	r3, [r2, #0]
 8008584:	4633      	mov	r3, r6
 8008586:	461e      	mov	r6, r3
 8008588:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800858c:	3b01      	subs	r3, #1
 800858e:	2a39      	cmp	r2, #57	@ 0x39
 8008590:	d052      	beq.n	8008638 <_dtoa_r+0xb18>
 8008592:	3201      	adds	r2, #1
 8008594:	701a      	strb	r2, [r3, #0]
 8008596:	e60e      	b.n	80081b6 <_dtoa_r+0x696>
 8008598:	2a00      	cmp	r2, #0
 800859a:	dd07      	ble.n	80085ac <_dtoa_r+0xa8c>
 800859c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80085a0:	d0ed      	beq.n	800857e <_dtoa_r+0xa5e>
 80085a2:	9a02      	ldr	r2, [sp, #8]
 80085a4:	f108 0301 	add.w	r3, r8, #1
 80085a8:	7013      	strb	r3, [r2, #0]
 80085aa:	e604      	b.n	80081b6 <_dtoa_r+0x696>
 80085ac:	9b07      	ldr	r3, [sp, #28]
 80085ae:	9a07      	ldr	r2, [sp, #28]
 80085b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80085b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d028      	beq.n	800860c <_dtoa_r+0xaec>
 80085ba:	4649      	mov	r1, r9
 80085bc:	2300      	movs	r3, #0
 80085be:	220a      	movs	r2, #10
 80085c0:	4658      	mov	r0, fp
 80085c2:	f000 fd21 	bl	8009008 <__multadd>
 80085c6:	42af      	cmp	r7, r5
 80085c8:	4681      	mov	r9, r0
 80085ca:	f04f 0300 	mov.w	r3, #0
 80085ce:	f04f 020a 	mov.w	r2, #10
 80085d2:	4639      	mov	r1, r7
 80085d4:	4658      	mov	r0, fp
 80085d6:	d107      	bne.n	80085e8 <_dtoa_r+0xac8>
 80085d8:	f000 fd16 	bl	8009008 <__multadd>
 80085dc:	4607      	mov	r7, r0
 80085de:	4605      	mov	r5, r0
 80085e0:	9b07      	ldr	r3, [sp, #28]
 80085e2:	3301      	adds	r3, #1
 80085e4:	9307      	str	r3, [sp, #28]
 80085e6:	e774      	b.n	80084d2 <_dtoa_r+0x9b2>
 80085e8:	f000 fd0e 	bl	8009008 <__multadd>
 80085ec:	4629      	mov	r1, r5
 80085ee:	4607      	mov	r7, r0
 80085f0:	2300      	movs	r3, #0
 80085f2:	220a      	movs	r2, #10
 80085f4:	4658      	mov	r0, fp
 80085f6:	f000 fd07 	bl	8009008 <__multadd>
 80085fa:	4605      	mov	r5, r0
 80085fc:	e7f0      	b.n	80085e0 <_dtoa_r+0xac0>
 80085fe:	9b08      	ldr	r3, [sp, #32]
 8008600:	2700      	movs	r7, #0
 8008602:	2b00      	cmp	r3, #0
 8008604:	bfcc      	ite	gt
 8008606:	461e      	movgt	r6, r3
 8008608:	2601      	movle	r6, #1
 800860a:	4456      	add	r6, sl
 800860c:	4649      	mov	r1, r9
 800860e:	2201      	movs	r2, #1
 8008610:	4658      	mov	r0, fp
 8008612:	f000 feed 	bl	80093f0 <__lshift>
 8008616:	4621      	mov	r1, r4
 8008618:	4681      	mov	r9, r0
 800861a:	f000 ff55 	bl	80094c8 <__mcmp>
 800861e:	2800      	cmp	r0, #0
 8008620:	dcb0      	bgt.n	8008584 <_dtoa_r+0xa64>
 8008622:	d102      	bne.n	800862a <_dtoa_r+0xb0a>
 8008624:	f018 0f01 	tst.w	r8, #1
 8008628:	d1ac      	bne.n	8008584 <_dtoa_r+0xa64>
 800862a:	4633      	mov	r3, r6
 800862c:	461e      	mov	r6, r3
 800862e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008632:	2a30      	cmp	r2, #48	@ 0x30
 8008634:	d0fa      	beq.n	800862c <_dtoa_r+0xb0c>
 8008636:	e5be      	b.n	80081b6 <_dtoa_r+0x696>
 8008638:	459a      	cmp	sl, r3
 800863a:	d1a4      	bne.n	8008586 <_dtoa_r+0xa66>
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	3301      	adds	r3, #1
 8008640:	9304      	str	r3, [sp, #16]
 8008642:	2331      	movs	r3, #49	@ 0x31
 8008644:	f88a 3000 	strb.w	r3, [sl]
 8008648:	e5b5      	b.n	80081b6 <_dtoa_r+0x696>
 800864a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800864c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80086ac <_dtoa_r+0xb8c>
 8008650:	b11b      	cbz	r3, 800865a <_dtoa_r+0xb3a>
 8008652:	f10a 0308 	add.w	r3, sl, #8
 8008656:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	4650      	mov	r0, sl
 800865c:	b017      	add	sp, #92	@ 0x5c
 800865e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008662:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008664:	2b01      	cmp	r3, #1
 8008666:	f77f ae3d 	ble.w	80082e4 <_dtoa_r+0x7c4>
 800866a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800866c:	930a      	str	r3, [sp, #40]	@ 0x28
 800866e:	2001      	movs	r0, #1
 8008670:	e65b      	b.n	800832a <_dtoa_r+0x80a>
 8008672:	9b08      	ldr	r3, [sp, #32]
 8008674:	2b00      	cmp	r3, #0
 8008676:	f77f aed6 	ble.w	8008426 <_dtoa_r+0x906>
 800867a:	4656      	mov	r6, sl
 800867c:	4621      	mov	r1, r4
 800867e:	4648      	mov	r0, r9
 8008680:	f7ff f9c6 	bl	8007a10 <quorem>
 8008684:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008688:	9b08      	ldr	r3, [sp, #32]
 800868a:	f806 8b01 	strb.w	r8, [r6], #1
 800868e:	eba6 020a 	sub.w	r2, r6, sl
 8008692:	4293      	cmp	r3, r2
 8008694:	ddb3      	ble.n	80085fe <_dtoa_r+0xade>
 8008696:	4649      	mov	r1, r9
 8008698:	2300      	movs	r3, #0
 800869a:	220a      	movs	r2, #10
 800869c:	4658      	mov	r0, fp
 800869e:	f000 fcb3 	bl	8009008 <__multadd>
 80086a2:	4681      	mov	r9, r0
 80086a4:	e7ea      	b.n	800867c <_dtoa_r+0xb5c>
 80086a6:	bf00      	nop
 80086a8:	0800b5ea 	.word	0x0800b5ea
 80086ac:	0800b585 	.word	0x0800b585

080086b0 <_free_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4605      	mov	r5, r0
 80086b4:	2900      	cmp	r1, #0
 80086b6:	d040      	beq.n	800873a <_free_r+0x8a>
 80086b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086bc:	1f0c      	subs	r4, r1, #4
 80086be:	2b00      	cmp	r3, #0
 80086c0:	bfb8      	it	lt
 80086c2:	18e4      	addlt	r4, r4, r3
 80086c4:	f000 fc32 	bl	8008f2c <__malloc_lock>
 80086c8:	4a1c      	ldr	r2, [pc, #112]	@ (800873c <_free_r+0x8c>)
 80086ca:	6813      	ldr	r3, [r2, #0]
 80086cc:	b933      	cbnz	r3, 80086dc <_free_r+0x2c>
 80086ce:	6063      	str	r3, [r4, #4]
 80086d0:	6014      	str	r4, [r2, #0]
 80086d2:	4628      	mov	r0, r5
 80086d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086d8:	f000 bc2e 	b.w	8008f38 <__malloc_unlock>
 80086dc:	42a3      	cmp	r3, r4
 80086de:	d908      	bls.n	80086f2 <_free_r+0x42>
 80086e0:	6820      	ldr	r0, [r4, #0]
 80086e2:	1821      	adds	r1, r4, r0
 80086e4:	428b      	cmp	r3, r1
 80086e6:	bf01      	itttt	eq
 80086e8:	6819      	ldreq	r1, [r3, #0]
 80086ea:	685b      	ldreq	r3, [r3, #4]
 80086ec:	1809      	addeq	r1, r1, r0
 80086ee:	6021      	streq	r1, [r4, #0]
 80086f0:	e7ed      	b.n	80086ce <_free_r+0x1e>
 80086f2:	461a      	mov	r2, r3
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	b10b      	cbz	r3, 80086fc <_free_r+0x4c>
 80086f8:	42a3      	cmp	r3, r4
 80086fa:	d9fa      	bls.n	80086f2 <_free_r+0x42>
 80086fc:	6811      	ldr	r1, [r2, #0]
 80086fe:	1850      	adds	r0, r2, r1
 8008700:	42a0      	cmp	r0, r4
 8008702:	d10b      	bne.n	800871c <_free_r+0x6c>
 8008704:	6820      	ldr	r0, [r4, #0]
 8008706:	4401      	add	r1, r0
 8008708:	1850      	adds	r0, r2, r1
 800870a:	4283      	cmp	r3, r0
 800870c:	6011      	str	r1, [r2, #0]
 800870e:	d1e0      	bne.n	80086d2 <_free_r+0x22>
 8008710:	6818      	ldr	r0, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	4408      	add	r0, r1
 8008716:	6010      	str	r0, [r2, #0]
 8008718:	6053      	str	r3, [r2, #4]
 800871a:	e7da      	b.n	80086d2 <_free_r+0x22>
 800871c:	d902      	bls.n	8008724 <_free_r+0x74>
 800871e:	230c      	movs	r3, #12
 8008720:	602b      	str	r3, [r5, #0]
 8008722:	e7d6      	b.n	80086d2 <_free_r+0x22>
 8008724:	6820      	ldr	r0, [r4, #0]
 8008726:	1821      	adds	r1, r4, r0
 8008728:	428b      	cmp	r3, r1
 800872a:	bf01      	itttt	eq
 800872c:	6819      	ldreq	r1, [r3, #0]
 800872e:	685b      	ldreq	r3, [r3, #4]
 8008730:	1809      	addeq	r1, r1, r0
 8008732:	6021      	streq	r1, [r4, #0]
 8008734:	6063      	str	r3, [r4, #4]
 8008736:	6054      	str	r4, [r2, #4]
 8008738:	e7cb      	b.n	80086d2 <_free_r+0x22>
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	20000be4 	.word	0x20000be4

08008740 <rshift>:
 8008740:	6903      	ldr	r3, [r0, #16]
 8008742:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008746:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800874a:	f100 0414 	add.w	r4, r0, #20
 800874e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008752:	dd46      	ble.n	80087e2 <rshift+0xa2>
 8008754:	f011 011f 	ands.w	r1, r1, #31
 8008758:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800875c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008760:	d10c      	bne.n	800877c <rshift+0x3c>
 8008762:	4629      	mov	r1, r5
 8008764:	f100 0710 	add.w	r7, r0, #16
 8008768:	42b1      	cmp	r1, r6
 800876a:	d335      	bcc.n	80087d8 <rshift+0x98>
 800876c:	1a9b      	subs	r3, r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	1eea      	subs	r2, r5, #3
 8008772:	4296      	cmp	r6, r2
 8008774:	bf38      	it	cc
 8008776:	2300      	movcc	r3, #0
 8008778:	4423      	add	r3, r4
 800877a:	e015      	b.n	80087a8 <rshift+0x68>
 800877c:	46a1      	mov	r9, r4
 800877e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008782:	f1c1 0820 	rsb	r8, r1, #32
 8008786:	40cf      	lsrs	r7, r1
 8008788:	f105 0e04 	add.w	lr, r5, #4
 800878c:	4576      	cmp	r6, lr
 800878e:	46f4      	mov	ip, lr
 8008790:	d816      	bhi.n	80087c0 <rshift+0x80>
 8008792:	1a9a      	subs	r2, r3, r2
 8008794:	0092      	lsls	r2, r2, #2
 8008796:	3a04      	subs	r2, #4
 8008798:	3501      	adds	r5, #1
 800879a:	42ae      	cmp	r6, r5
 800879c:	bf38      	it	cc
 800879e:	2200      	movcc	r2, #0
 80087a0:	18a3      	adds	r3, r4, r2
 80087a2:	50a7      	str	r7, [r4, r2]
 80087a4:	b107      	cbz	r7, 80087a8 <rshift+0x68>
 80087a6:	3304      	adds	r3, #4
 80087a8:	42a3      	cmp	r3, r4
 80087aa:	eba3 0204 	sub.w	r2, r3, r4
 80087ae:	bf08      	it	eq
 80087b0:	2300      	moveq	r3, #0
 80087b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80087b6:	6102      	str	r2, [r0, #16]
 80087b8:	bf08      	it	eq
 80087ba:	6143      	streq	r3, [r0, #20]
 80087bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087c0:	f8dc c000 	ldr.w	ip, [ip]
 80087c4:	fa0c fc08 	lsl.w	ip, ip, r8
 80087c8:	ea4c 0707 	orr.w	r7, ip, r7
 80087cc:	f849 7b04 	str.w	r7, [r9], #4
 80087d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80087d4:	40cf      	lsrs	r7, r1
 80087d6:	e7d9      	b.n	800878c <rshift+0x4c>
 80087d8:	f851 cb04 	ldr.w	ip, [r1], #4
 80087dc:	f847 cf04 	str.w	ip, [r7, #4]!
 80087e0:	e7c2      	b.n	8008768 <rshift+0x28>
 80087e2:	4623      	mov	r3, r4
 80087e4:	e7e0      	b.n	80087a8 <rshift+0x68>

080087e6 <__hexdig_fun>:
 80087e6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80087ea:	2b09      	cmp	r3, #9
 80087ec:	d802      	bhi.n	80087f4 <__hexdig_fun+0xe>
 80087ee:	3820      	subs	r0, #32
 80087f0:	b2c0      	uxtb	r0, r0
 80087f2:	4770      	bx	lr
 80087f4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80087f8:	2b05      	cmp	r3, #5
 80087fa:	d801      	bhi.n	8008800 <__hexdig_fun+0x1a>
 80087fc:	3847      	subs	r0, #71	@ 0x47
 80087fe:	e7f7      	b.n	80087f0 <__hexdig_fun+0xa>
 8008800:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008804:	2b05      	cmp	r3, #5
 8008806:	d801      	bhi.n	800880c <__hexdig_fun+0x26>
 8008808:	3827      	subs	r0, #39	@ 0x27
 800880a:	e7f1      	b.n	80087f0 <__hexdig_fun+0xa>
 800880c:	2000      	movs	r0, #0
 800880e:	4770      	bx	lr

08008810 <__gethex>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	468a      	mov	sl, r1
 8008816:	4690      	mov	r8, r2
 8008818:	b085      	sub	sp, #20
 800881a:	9302      	str	r3, [sp, #8]
 800881c:	680b      	ldr	r3, [r1, #0]
 800881e:	9001      	str	r0, [sp, #4]
 8008820:	1c9c      	adds	r4, r3, #2
 8008822:	46a1      	mov	r9, r4
 8008824:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008828:	2830      	cmp	r0, #48	@ 0x30
 800882a:	d0fa      	beq.n	8008822 <__gethex+0x12>
 800882c:	eba9 0303 	sub.w	r3, r9, r3
 8008830:	f1a3 0b02 	sub.w	fp, r3, #2
 8008834:	f7ff ffd7 	bl	80087e6 <__hexdig_fun>
 8008838:	4605      	mov	r5, r0
 800883a:	2800      	cmp	r0, #0
 800883c:	d168      	bne.n	8008910 <__gethex+0x100>
 800883e:	2201      	movs	r2, #1
 8008840:	4648      	mov	r0, r9
 8008842:	499f      	ldr	r1, [pc, #636]	@ (8008ac0 <__gethex+0x2b0>)
 8008844:	f7fe ff88 	bl	8007758 <strncmp>
 8008848:	4607      	mov	r7, r0
 800884a:	2800      	cmp	r0, #0
 800884c:	d167      	bne.n	800891e <__gethex+0x10e>
 800884e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008852:	4626      	mov	r6, r4
 8008854:	f7ff ffc7 	bl	80087e6 <__hexdig_fun>
 8008858:	2800      	cmp	r0, #0
 800885a:	d062      	beq.n	8008922 <__gethex+0x112>
 800885c:	4623      	mov	r3, r4
 800885e:	7818      	ldrb	r0, [r3, #0]
 8008860:	4699      	mov	r9, r3
 8008862:	2830      	cmp	r0, #48	@ 0x30
 8008864:	f103 0301 	add.w	r3, r3, #1
 8008868:	d0f9      	beq.n	800885e <__gethex+0x4e>
 800886a:	f7ff ffbc 	bl	80087e6 <__hexdig_fun>
 800886e:	fab0 f580 	clz	r5, r0
 8008872:	f04f 0b01 	mov.w	fp, #1
 8008876:	096d      	lsrs	r5, r5, #5
 8008878:	464a      	mov	r2, r9
 800887a:	4616      	mov	r6, r2
 800887c:	7830      	ldrb	r0, [r6, #0]
 800887e:	3201      	adds	r2, #1
 8008880:	f7ff ffb1 	bl	80087e6 <__hexdig_fun>
 8008884:	2800      	cmp	r0, #0
 8008886:	d1f8      	bne.n	800887a <__gethex+0x6a>
 8008888:	2201      	movs	r2, #1
 800888a:	4630      	mov	r0, r6
 800888c:	498c      	ldr	r1, [pc, #560]	@ (8008ac0 <__gethex+0x2b0>)
 800888e:	f7fe ff63 	bl	8007758 <strncmp>
 8008892:	2800      	cmp	r0, #0
 8008894:	d13f      	bne.n	8008916 <__gethex+0x106>
 8008896:	b944      	cbnz	r4, 80088aa <__gethex+0x9a>
 8008898:	1c74      	adds	r4, r6, #1
 800889a:	4622      	mov	r2, r4
 800889c:	4616      	mov	r6, r2
 800889e:	7830      	ldrb	r0, [r6, #0]
 80088a0:	3201      	adds	r2, #1
 80088a2:	f7ff ffa0 	bl	80087e6 <__hexdig_fun>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d1f8      	bne.n	800889c <__gethex+0x8c>
 80088aa:	1ba4      	subs	r4, r4, r6
 80088ac:	00a7      	lsls	r7, r4, #2
 80088ae:	7833      	ldrb	r3, [r6, #0]
 80088b0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80088b4:	2b50      	cmp	r3, #80	@ 0x50
 80088b6:	d13e      	bne.n	8008936 <__gethex+0x126>
 80088b8:	7873      	ldrb	r3, [r6, #1]
 80088ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80088bc:	d033      	beq.n	8008926 <__gethex+0x116>
 80088be:	2b2d      	cmp	r3, #45	@ 0x2d
 80088c0:	d034      	beq.n	800892c <__gethex+0x11c>
 80088c2:	2400      	movs	r4, #0
 80088c4:	1c71      	adds	r1, r6, #1
 80088c6:	7808      	ldrb	r0, [r1, #0]
 80088c8:	f7ff ff8d 	bl	80087e6 <__hexdig_fun>
 80088cc:	1e43      	subs	r3, r0, #1
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b18      	cmp	r3, #24
 80088d2:	d830      	bhi.n	8008936 <__gethex+0x126>
 80088d4:	f1a0 0210 	sub.w	r2, r0, #16
 80088d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80088dc:	f7ff ff83 	bl	80087e6 <__hexdig_fun>
 80088e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80088e4:	fa5f fc8c 	uxtb.w	ip, ip
 80088e8:	f1bc 0f18 	cmp.w	ip, #24
 80088ec:	f04f 030a 	mov.w	r3, #10
 80088f0:	d91e      	bls.n	8008930 <__gethex+0x120>
 80088f2:	b104      	cbz	r4, 80088f6 <__gethex+0xe6>
 80088f4:	4252      	negs	r2, r2
 80088f6:	4417      	add	r7, r2
 80088f8:	f8ca 1000 	str.w	r1, [sl]
 80088fc:	b1ed      	cbz	r5, 800893a <__gethex+0x12a>
 80088fe:	f1bb 0f00 	cmp.w	fp, #0
 8008902:	bf0c      	ite	eq
 8008904:	2506      	moveq	r5, #6
 8008906:	2500      	movne	r5, #0
 8008908:	4628      	mov	r0, r5
 800890a:	b005      	add	sp, #20
 800890c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008910:	2500      	movs	r5, #0
 8008912:	462c      	mov	r4, r5
 8008914:	e7b0      	b.n	8008878 <__gethex+0x68>
 8008916:	2c00      	cmp	r4, #0
 8008918:	d1c7      	bne.n	80088aa <__gethex+0x9a>
 800891a:	4627      	mov	r7, r4
 800891c:	e7c7      	b.n	80088ae <__gethex+0x9e>
 800891e:	464e      	mov	r6, r9
 8008920:	462f      	mov	r7, r5
 8008922:	2501      	movs	r5, #1
 8008924:	e7c3      	b.n	80088ae <__gethex+0x9e>
 8008926:	2400      	movs	r4, #0
 8008928:	1cb1      	adds	r1, r6, #2
 800892a:	e7cc      	b.n	80088c6 <__gethex+0xb6>
 800892c:	2401      	movs	r4, #1
 800892e:	e7fb      	b.n	8008928 <__gethex+0x118>
 8008930:	fb03 0002 	mla	r0, r3, r2, r0
 8008934:	e7ce      	b.n	80088d4 <__gethex+0xc4>
 8008936:	4631      	mov	r1, r6
 8008938:	e7de      	b.n	80088f8 <__gethex+0xe8>
 800893a:	4629      	mov	r1, r5
 800893c:	eba6 0309 	sub.w	r3, r6, r9
 8008940:	3b01      	subs	r3, #1
 8008942:	2b07      	cmp	r3, #7
 8008944:	dc0a      	bgt.n	800895c <__gethex+0x14c>
 8008946:	9801      	ldr	r0, [sp, #4]
 8008948:	f000 fafc 	bl	8008f44 <_Balloc>
 800894c:	4604      	mov	r4, r0
 800894e:	b940      	cbnz	r0, 8008962 <__gethex+0x152>
 8008950:	4602      	mov	r2, r0
 8008952:	21e4      	movs	r1, #228	@ 0xe4
 8008954:	4b5b      	ldr	r3, [pc, #364]	@ (8008ac4 <__gethex+0x2b4>)
 8008956:	485c      	ldr	r0, [pc, #368]	@ (8008ac8 <__gethex+0x2b8>)
 8008958:	f7ff f83c 	bl	80079d4 <__assert_func>
 800895c:	3101      	adds	r1, #1
 800895e:	105b      	asrs	r3, r3, #1
 8008960:	e7ef      	b.n	8008942 <__gethex+0x132>
 8008962:	2300      	movs	r3, #0
 8008964:	f100 0a14 	add.w	sl, r0, #20
 8008968:	4655      	mov	r5, sl
 800896a:	469b      	mov	fp, r3
 800896c:	45b1      	cmp	r9, r6
 800896e:	d337      	bcc.n	80089e0 <__gethex+0x1d0>
 8008970:	f845 bb04 	str.w	fp, [r5], #4
 8008974:	eba5 050a 	sub.w	r5, r5, sl
 8008978:	10ad      	asrs	r5, r5, #2
 800897a:	6125      	str	r5, [r4, #16]
 800897c:	4658      	mov	r0, fp
 800897e:	f000 fbd3 	bl	8009128 <__hi0bits>
 8008982:	016d      	lsls	r5, r5, #5
 8008984:	f8d8 6000 	ldr.w	r6, [r8]
 8008988:	1a2d      	subs	r5, r5, r0
 800898a:	42b5      	cmp	r5, r6
 800898c:	dd54      	ble.n	8008a38 <__gethex+0x228>
 800898e:	1bad      	subs	r5, r5, r6
 8008990:	4629      	mov	r1, r5
 8008992:	4620      	mov	r0, r4
 8008994:	f000 ff5b 	bl	800984e <__any_on>
 8008998:	4681      	mov	r9, r0
 800899a:	b178      	cbz	r0, 80089bc <__gethex+0x1ac>
 800899c:	f04f 0901 	mov.w	r9, #1
 80089a0:	1e6b      	subs	r3, r5, #1
 80089a2:	1159      	asrs	r1, r3, #5
 80089a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80089a8:	f003 021f 	and.w	r2, r3, #31
 80089ac:	fa09 f202 	lsl.w	r2, r9, r2
 80089b0:	420a      	tst	r2, r1
 80089b2:	d003      	beq.n	80089bc <__gethex+0x1ac>
 80089b4:	454b      	cmp	r3, r9
 80089b6:	dc36      	bgt.n	8008a26 <__gethex+0x216>
 80089b8:	f04f 0902 	mov.w	r9, #2
 80089bc:	4629      	mov	r1, r5
 80089be:	4620      	mov	r0, r4
 80089c0:	f7ff febe 	bl	8008740 <rshift>
 80089c4:	442f      	add	r7, r5
 80089c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089ca:	42bb      	cmp	r3, r7
 80089cc:	da42      	bge.n	8008a54 <__gethex+0x244>
 80089ce:	4621      	mov	r1, r4
 80089d0:	9801      	ldr	r0, [sp, #4]
 80089d2:	f000 faf7 	bl	8008fc4 <_Bfree>
 80089d6:	2300      	movs	r3, #0
 80089d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089da:	25a3      	movs	r5, #163	@ 0xa3
 80089dc:	6013      	str	r3, [r2, #0]
 80089de:	e793      	b.n	8008908 <__gethex+0xf8>
 80089e0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80089e4:	2a2e      	cmp	r2, #46	@ 0x2e
 80089e6:	d012      	beq.n	8008a0e <__gethex+0x1fe>
 80089e8:	2b20      	cmp	r3, #32
 80089ea:	d104      	bne.n	80089f6 <__gethex+0x1e6>
 80089ec:	f845 bb04 	str.w	fp, [r5], #4
 80089f0:	f04f 0b00 	mov.w	fp, #0
 80089f4:	465b      	mov	r3, fp
 80089f6:	7830      	ldrb	r0, [r6, #0]
 80089f8:	9303      	str	r3, [sp, #12]
 80089fa:	f7ff fef4 	bl	80087e6 <__hexdig_fun>
 80089fe:	9b03      	ldr	r3, [sp, #12]
 8008a00:	f000 000f 	and.w	r0, r0, #15
 8008a04:	4098      	lsls	r0, r3
 8008a06:	ea4b 0b00 	orr.w	fp, fp, r0
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	e7ae      	b.n	800896c <__gethex+0x15c>
 8008a0e:	45b1      	cmp	r9, r6
 8008a10:	d8ea      	bhi.n	80089e8 <__gethex+0x1d8>
 8008a12:	2201      	movs	r2, #1
 8008a14:	4630      	mov	r0, r6
 8008a16:	492a      	ldr	r1, [pc, #168]	@ (8008ac0 <__gethex+0x2b0>)
 8008a18:	9303      	str	r3, [sp, #12]
 8008a1a:	f7fe fe9d 	bl	8007758 <strncmp>
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	2800      	cmp	r0, #0
 8008a22:	d1e1      	bne.n	80089e8 <__gethex+0x1d8>
 8008a24:	e7a2      	b.n	800896c <__gethex+0x15c>
 8008a26:	4620      	mov	r0, r4
 8008a28:	1ea9      	subs	r1, r5, #2
 8008a2a:	f000 ff10 	bl	800984e <__any_on>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d0c2      	beq.n	80089b8 <__gethex+0x1a8>
 8008a32:	f04f 0903 	mov.w	r9, #3
 8008a36:	e7c1      	b.n	80089bc <__gethex+0x1ac>
 8008a38:	da09      	bge.n	8008a4e <__gethex+0x23e>
 8008a3a:	1b75      	subs	r5, r6, r5
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	462a      	mov	r2, r5
 8008a40:	9801      	ldr	r0, [sp, #4]
 8008a42:	f000 fcd5 	bl	80093f0 <__lshift>
 8008a46:	4604      	mov	r4, r0
 8008a48:	1b7f      	subs	r7, r7, r5
 8008a4a:	f100 0a14 	add.w	sl, r0, #20
 8008a4e:	f04f 0900 	mov.w	r9, #0
 8008a52:	e7b8      	b.n	80089c6 <__gethex+0x1b6>
 8008a54:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008a58:	42bd      	cmp	r5, r7
 8008a5a:	dd6f      	ble.n	8008b3c <__gethex+0x32c>
 8008a5c:	1bed      	subs	r5, r5, r7
 8008a5e:	42ae      	cmp	r6, r5
 8008a60:	dc34      	bgt.n	8008acc <__gethex+0x2bc>
 8008a62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d022      	beq.n	8008ab0 <__gethex+0x2a0>
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d024      	beq.n	8008ab8 <__gethex+0x2a8>
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d115      	bne.n	8008a9e <__gethex+0x28e>
 8008a72:	42ae      	cmp	r6, r5
 8008a74:	d113      	bne.n	8008a9e <__gethex+0x28e>
 8008a76:	2e01      	cmp	r6, #1
 8008a78:	d10b      	bne.n	8008a92 <__gethex+0x282>
 8008a7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008a7e:	9a02      	ldr	r2, [sp, #8]
 8008a80:	2562      	movs	r5, #98	@ 0x62
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	2301      	movs	r3, #1
 8008a86:	6123      	str	r3, [r4, #16]
 8008a88:	f8ca 3000 	str.w	r3, [sl]
 8008a8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a8e:	601c      	str	r4, [r3, #0]
 8008a90:	e73a      	b.n	8008908 <__gethex+0xf8>
 8008a92:	4620      	mov	r0, r4
 8008a94:	1e71      	subs	r1, r6, #1
 8008a96:	f000 feda 	bl	800984e <__any_on>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d1ed      	bne.n	8008a7a <__gethex+0x26a>
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	9801      	ldr	r0, [sp, #4]
 8008aa2:	f000 fa8f 	bl	8008fc4 <_Bfree>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008aaa:	2550      	movs	r5, #80	@ 0x50
 8008aac:	6013      	str	r3, [r2, #0]
 8008aae:	e72b      	b.n	8008908 <__gethex+0xf8>
 8008ab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1f3      	bne.n	8008a9e <__gethex+0x28e>
 8008ab6:	e7e0      	b.n	8008a7a <__gethex+0x26a>
 8008ab8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1dd      	bne.n	8008a7a <__gethex+0x26a>
 8008abe:	e7ee      	b.n	8008a9e <__gethex+0x28e>
 8008ac0:	0800b342 	.word	0x0800b342
 8008ac4:	0800b5ea 	.word	0x0800b5ea
 8008ac8:	0800b5fb 	.word	0x0800b5fb
 8008acc:	1e6f      	subs	r7, r5, #1
 8008ace:	f1b9 0f00 	cmp.w	r9, #0
 8008ad2:	d130      	bne.n	8008b36 <__gethex+0x326>
 8008ad4:	b127      	cbz	r7, 8008ae0 <__gethex+0x2d0>
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 feb8 	bl	800984e <__any_on>
 8008ade:	4681      	mov	r9, r0
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	1b76      	subs	r6, r6, r5
 8008ae6:	2502      	movs	r5, #2
 8008ae8:	117a      	asrs	r2, r7, #5
 8008aea:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008aee:	f007 071f 	and.w	r7, r7, #31
 8008af2:	40bb      	lsls	r3, r7
 8008af4:	4213      	tst	r3, r2
 8008af6:	4620      	mov	r0, r4
 8008af8:	bf18      	it	ne
 8008afa:	f049 0902 	orrne.w	r9, r9, #2
 8008afe:	f7ff fe1f 	bl	8008740 <rshift>
 8008b02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008b06:	f1b9 0f00 	cmp.w	r9, #0
 8008b0a:	d047      	beq.n	8008b9c <__gethex+0x38c>
 8008b0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d015      	beq.n	8008b40 <__gethex+0x330>
 8008b14:	2b03      	cmp	r3, #3
 8008b16:	d017      	beq.n	8008b48 <__gethex+0x338>
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d109      	bne.n	8008b30 <__gethex+0x320>
 8008b1c:	f019 0f02 	tst.w	r9, #2
 8008b20:	d006      	beq.n	8008b30 <__gethex+0x320>
 8008b22:	f8da 3000 	ldr.w	r3, [sl]
 8008b26:	ea49 0903 	orr.w	r9, r9, r3
 8008b2a:	f019 0f01 	tst.w	r9, #1
 8008b2e:	d10e      	bne.n	8008b4e <__gethex+0x33e>
 8008b30:	f045 0510 	orr.w	r5, r5, #16
 8008b34:	e032      	b.n	8008b9c <__gethex+0x38c>
 8008b36:	f04f 0901 	mov.w	r9, #1
 8008b3a:	e7d1      	b.n	8008ae0 <__gethex+0x2d0>
 8008b3c:	2501      	movs	r5, #1
 8008b3e:	e7e2      	b.n	8008b06 <__gethex+0x2f6>
 8008b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b42:	f1c3 0301 	rsb	r3, r3, #1
 8008b46:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0f0      	beq.n	8008b30 <__gethex+0x320>
 8008b4e:	f04f 0c00 	mov.w	ip, #0
 8008b52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b56:	f104 0314 	add.w	r3, r4, #20
 8008b5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b68:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b6c:	d01b      	beq.n	8008ba6 <__gethex+0x396>
 8008b6e:	3201      	adds	r2, #1
 8008b70:	6002      	str	r2, [r0, #0]
 8008b72:	2d02      	cmp	r5, #2
 8008b74:	f104 0314 	add.w	r3, r4, #20
 8008b78:	d13c      	bne.n	8008bf4 <__gethex+0x3e4>
 8008b7a:	f8d8 2000 	ldr.w	r2, [r8]
 8008b7e:	3a01      	subs	r2, #1
 8008b80:	42b2      	cmp	r2, r6
 8008b82:	d109      	bne.n	8008b98 <__gethex+0x388>
 8008b84:	2201      	movs	r2, #1
 8008b86:	1171      	asrs	r1, r6, #5
 8008b88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b8c:	f006 061f 	and.w	r6, r6, #31
 8008b90:	fa02 f606 	lsl.w	r6, r2, r6
 8008b94:	421e      	tst	r6, r3
 8008b96:	d13a      	bne.n	8008c0e <__gethex+0x3fe>
 8008b98:	f045 0520 	orr.w	r5, r5, #32
 8008b9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b9e:	601c      	str	r4, [r3, #0]
 8008ba0:	9b02      	ldr	r3, [sp, #8]
 8008ba2:	601f      	str	r7, [r3, #0]
 8008ba4:	e6b0      	b.n	8008908 <__gethex+0xf8>
 8008ba6:	4299      	cmp	r1, r3
 8008ba8:	f843 cc04 	str.w	ip, [r3, #-4]
 8008bac:	d8d9      	bhi.n	8008b62 <__gethex+0x352>
 8008bae:	68a3      	ldr	r3, [r4, #8]
 8008bb0:	459b      	cmp	fp, r3
 8008bb2:	db17      	blt.n	8008be4 <__gethex+0x3d4>
 8008bb4:	6861      	ldr	r1, [r4, #4]
 8008bb6:	9801      	ldr	r0, [sp, #4]
 8008bb8:	3101      	adds	r1, #1
 8008bba:	f000 f9c3 	bl	8008f44 <_Balloc>
 8008bbe:	4681      	mov	r9, r0
 8008bc0:	b918      	cbnz	r0, 8008bca <__gethex+0x3ba>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	2184      	movs	r1, #132	@ 0x84
 8008bc6:	4b19      	ldr	r3, [pc, #100]	@ (8008c2c <__gethex+0x41c>)
 8008bc8:	e6c5      	b.n	8008956 <__gethex+0x146>
 8008bca:	6922      	ldr	r2, [r4, #16]
 8008bcc:	f104 010c 	add.w	r1, r4, #12
 8008bd0:	3202      	adds	r2, #2
 8008bd2:	0092      	lsls	r2, r2, #2
 8008bd4:	300c      	adds	r0, #12
 8008bd6:	f7fe fee4 	bl	80079a2 <memcpy>
 8008bda:	4621      	mov	r1, r4
 8008bdc:	9801      	ldr	r0, [sp, #4]
 8008bde:	f000 f9f1 	bl	8008fc4 <_Bfree>
 8008be2:	464c      	mov	r4, r9
 8008be4:	6923      	ldr	r3, [r4, #16]
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	6122      	str	r2, [r4, #16]
 8008bea:	2201      	movs	r2, #1
 8008bec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008bf0:	615a      	str	r2, [r3, #20]
 8008bf2:	e7be      	b.n	8008b72 <__gethex+0x362>
 8008bf4:	6922      	ldr	r2, [r4, #16]
 8008bf6:	455a      	cmp	r2, fp
 8008bf8:	dd0b      	ble.n	8008c12 <__gethex+0x402>
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f7ff fd9f 	bl	8008740 <rshift>
 8008c02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c06:	3701      	adds	r7, #1
 8008c08:	42bb      	cmp	r3, r7
 8008c0a:	f6ff aee0 	blt.w	80089ce <__gethex+0x1be>
 8008c0e:	2501      	movs	r5, #1
 8008c10:	e7c2      	b.n	8008b98 <__gethex+0x388>
 8008c12:	f016 061f 	ands.w	r6, r6, #31
 8008c16:	d0fa      	beq.n	8008c0e <__gethex+0x3fe>
 8008c18:	4453      	add	r3, sl
 8008c1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c1e:	f000 fa83 	bl	8009128 <__hi0bits>
 8008c22:	f1c6 0620 	rsb	r6, r6, #32
 8008c26:	42b0      	cmp	r0, r6
 8008c28:	dbe7      	blt.n	8008bfa <__gethex+0x3ea>
 8008c2a:	e7f0      	b.n	8008c0e <__gethex+0x3fe>
 8008c2c:	0800b5ea 	.word	0x0800b5ea

08008c30 <L_shift>:
 8008c30:	f1c2 0208 	rsb	r2, r2, #8
 8008c34:	0092      	lsls	r2, r2, #2
 8008c36:	b570      	push	{r4, r5, r6, lr}
 8008c38:	f1c2 0620 	rsb	r6, r2, #32
 8008c3c:	6843      	ldr	r3, [r0, #4]
 8008c3e:	6804      	ldr	r4, [r0, #0]
 8008c40:	fa03 f506 	lsl.w	r5, r3, r6
 8008c44:	432c      	orrs	r4, r5
 8008c46:	40d3      	lsrs	r3, r2
 8008c48:	6004      	str	r4, [r0, #0]
 8008c4a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c4e:	4288      	cmp	r0, r1
 8008c50:	d3f4      	bcc.n	8008c3c <L_shift+0xc>
 8008c52:	bd70      	pop	{r4, r5, r6, pc}

08008c54 <__match>:
 8008c54:	b530      	push	{r4, r5, lr}
 8008c56:	6803      	ldr	r3, [r0, #0]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c5e:	b914      	cbnz	r4, 8008c66 <__match+0x12>
 8008c60:	6003      	str	r3, [r0, #0]
 8008c62:	2001      	movs	r0, #1
 8008c64:	bd30      	pop	{r4, r5, pc}
 8008c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c6a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008c6e:	2d19      	cmp	r5, #25
 8008c70:	bf98      	it	ls
 8008c72:	3220      	addls	r2, #32
 8008c74:	42a2      	cmp	r2, r4
 8008c76:	d0f0      	beq.n	8008c5a <__match+0x6>
 8008c78:	2000      	movs	r0, #0
 8008c7a:	e7f3      	b.n	8008c64 <__match+0x10>

08008c7c <__hexnan>:
 8008c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c80:	2500      	movs	r5, #0
 8008c82:	680b      	ldr	r3, [r1, #0]
 8008c84:	4682      	mov	sl, r0
 8008c86:	115e      	asrs	r6, r3, #5
 8008c88:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c8c:	f013 031f 	ands.w	r3, r3, #31
 8008c90:	bf18      	it	ne
 8008c92:	3604      	addne	r6, #4
 8008c94:	1f37      	subs	r7, r6, #4
 8008c96:	4690      	mov	r8, r2
 8008c98:	46b9      	mov	r9, r7
 8008c9a:	463c      	mov	r4, r7
 8008c9c:	46ab      	mov	fp, r5
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	6801      	ldr	r1, [r0, #0]
 8008ca2:	9301      	str	r3, [sp, #4]
 8008ca4:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ca8:	9502      	str	r5, [sp, #8]
 8008caa:	784a      	ldrb	r2, [r1, #1]
 8008cac:	1c4b      	adds	r3, r1, #1
 8008cae:	9303      	str	r3, [sp, #12]
 8008cb0:	b342      	cbz	r2, 8008d04 <__hexnan+0x88>
 8008cb2:	4610      	mov	r0, r2
 8008cb4:	9105      	str	r1, [sp, #20]
 8008cb6:	9204      	str	r2, [sp, #16]
 8008cb8:	f7ff fd95 	bl	80087e6 <__hexdig_fun>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	d151      	bne.n	8008d64 <__hexnan+0xe8>
 8008cc0:	9a04      	ldr	r2, [sp, #16]
 8008cc2:	9905      	ldr	r1, [sp, #20]
 8008cc4:	2a20      	cmp	r2, #32
 8008cc6:	d818      	bhi.n	8008cfa <__hexnan+0x7e>
 8008cc8:	9b02      	ldr	r3, [sp, #8]
 8008cca:	459b      	cmp	fp, r3
 8008ccc:	dd13      	ble.n	8008cf6 <__hexnan+0x7a>
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	d206      	bcs.n	8008ce0 <__hexnan+0x64>
 8008cd2:	2d07      	cmp	r5, #7
 8008cd4:	dc04      	bgt.n	8008ce0 <__hexnan+0x64>
 8008cd6:	462a      	mov	r2, r5
 8008cd8:	4649      	mov	r1, r9
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f7ff ffa8 	bl	8008c30 <L_shift>
 8008ce0:	4544      	cmp	r4, r8
 8008ce2:	d952      	bls.n	8008d8a <__hexnan+0x10e>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f1a4 0904 	sub.w	r9, r4, #4
 8008cea:	f844 3c04 	str.w	r3, [r4, #-4]
 8008cee:	461d      	mov	r5, r3
 8008cf0:	464c      	mov	r4, r9
 8008cf2:	f8cd b008 	str.w	fp, [sp, #8]
 8008cf6:	9903      	ldr	r1, [sp, #12]
 8008cf8:	e7d7      	b.n	8008caa <__hexnan+0x2e>
 8008cfa:	2a29      	cmp	r2, #41	@ 0x29
 8008cfc:	d157      	bne.n	8008dae <__hexnan+0x132>
 8008cfe:	3102      	adds	r1, #2
 8008d00:	f8ca 1000 	str.w	r1, [sl]
 8008d04:	f1bb 0f00 	cmp.w	fp, #0
 8008d08:	d051      	beq.n	8008dae <__hexnan+0x132>
 8008d0a:	454c      	cmp	r4, r9
 8008d0c:	d206      	bcs.n	8008d1c <__hexnan+0xa0>
 8008d0e:	2d07      	cmp	r5, #7
 8008d10:	dc04      	bgt.n	8008d1c <__hexnan+0xa0>
 8008d12:	462a      	mov	r2, r5
 8008d14:	4649      	mov	r1, r9
 8008d16:	4620      	mov	r0, r4
 8008d18:	f7ff ff8a 	bl	8008c30 <L_shift>
 8008d1c:	4544      	cmp	r4, r8
 8008d1e:	d936      	bls.n	8008d8e <__hexnan+0x112>
 8008d20:	4623      	mov	r3, r4
 8008d22:	f1a8 0204 	sub.w	r2, r8, #4
 8008d26:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d2a:	429f      	cmp	r7, r3
 8008d2c:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d30:	d2f9      	bcs.n	8008d26 <__hexnan+0xaa>
 8008d32:	1b3b      	subs	r3, r7, r4
 8008d34:	f023 0303 	bic.w	r3, r3, #3
 8008d38:	3304      	adds	r3, #4
 8008d3a:	3401      	adds	r4, #1
 8008d3c:	3e03      	subs	r6, #3
 8008d3e:	42b4      	cmp	r4, r6
 8008d40:	bf88      	it	hi
 8008d42:	2304      	movhi	r3, #4
 8008d44:	2200      	movs	r2, #0
 8008d46:	4443      	add	r3, r8
 8008d48:	f843 2b04 	str.w	r2, [r3], #4
 8008d4c:	429f      	cmp	r7, r3
 8008d4e:	d2fb      	bcs.n	8008d48 <__hexnan+0xcc>
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	b91b      	cbnz	r3, 8008d5c <__hexnan+0xe0>
 8008d54:	4547      	cmp	r7, r8
 8008d56:	d128      	bne.n	8008daa <__hexnan+0x12e>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	603b      	str	r3, [r7, #0]
 8008d5c:	2005      	movs	r0, #5
 8008d5e:	b007      	add	sp, #28
 8008d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d64:	3501      	adds	r5, #1
 8008d66:	2d08      	cmp	r5, #8
 8008d68:	f10b 0b01 	add.w	fp, fp, #1
 8008d6c:	dd06      	ble.n	8008d7c <__hexnan+0x100>
 8008d6e:	4544      	cmp	r4, r8
 8008d70:	d9c1      	bls.n	8008cf6 <__hexnan+0x7a>
 8008d72:	2300      	movs	r3, #0
 8008d74:	2501      	movs	r5, #1
 8008d76:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d7a:	3c04      	subs	r4, #4
 8008d7c:	6822      	ldr	r2, [r4, #0]
 8008d7e:	f000 000f 	and.w	r0, r0, #15
 8008d82:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008d86:	6020      	str	r0, [r4, #0]
 8008d88:	e7b5      	b.n	8008cf6 <__hexnan+0x7a>
 8008d8a:	2508      	movs	r5, #8
 8008d8c:	e7b3      	b.n	8008cf6 <__hexnan+0x7a>
 8008d8e:	9b01      	ldr	r3, [sp, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d0dd      	beq.n	8008d50 <__hexnan+0xd4>
 8008d94:	f04f 32ff 	mov.w	r2, #4294967295
 8008d98:	f1c3 0320 	rsb	r3, r3, #32
 8008d9c:	40da      	lsrs	r2, r3
 8008d9e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008da2:	4013      	ands	r3, r2
 8008da4:	f846 3c04 	str.w	r3, [r6, #-4]
 8008da8:	e7d2      	b.n	8008d50 <__hexnan+0xd4>
 8008daa:	3f04      	subs	r7, #4
 8008dac:	e7d0      	b.n	8008d50 <__hexnan+0xd4>
 8008dae:	2004      	movs	r0, #4
 8008db0:	e7d5      	b.n	8008d5e <__hexnan+0xe2>
	...

08008db4 <malloc>:
 8008db4:	4b02      	ldr	r3, [pc, #8]	@ (8008dc0 <malloc+0xc>)
 8008db6:	4601      	mov	r1, r0
 8008db8:	6818      	ldr	r0, [r3, #0]
 8008dba:	f000 b825 	b.w	8008e08 <_malloc_r>
 8008dbe:	bf00      	nop
 8008dc0:	20000244 	.word	0x20000244

08008dc4 <sbrk_aligned>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	4e0f      	ldr	r6, [pc, #60]	@ (8008e04 <sbrk_aligned+0x40>)
 8008dc8:	460c      	mov	r4, r1
 8008dca:	6831      	ldr	r1, [r6, #0]
 8008dcc:	4605      	mov	r5, r0
 8008dce:	b911      	cbnz	r1, 8008dd6 <sbrk_aligned+0x12>
 8008dd0:	f001 fcf2 	bl	800a7b8 <_sbrk_r>
 8008dd4:	6030      	str	r0, [r6, #0]
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f001 fced 	bl	800a7b8 <_sbrk_r>
 8008dde:	1c43      	adds	r3, r0, #1
 8008de0:	d103      	bne.n	8008dea <sbrk_aligned+0x26>
 8008de2:	f04f 34ff 	mov.w	r4, #4294967295
 8008de6:	4620      	mov	r0, r4
 8008de8:	bd70      	pop	{r4, r5, r6, pc}
 8008dea:	1cc4      	adds	r4, r0, #3
 8008dec:	f024 0403 	bic.w	r4, r4, #3
 8008df0:	42a0      	cmp	r0, r4
 8008df2:	d0f8      	beq.n	8008de6 <sbrk_aligned+0x22>
 8008df4:	1a21      	subs	r1, r4, r0
 8008df6:	4628      	mov	r0, r5
 8008df8:	f001 fcde 	bl	800a7b8 <_sbrk_r>
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	d1f2      	bne.n	8008de6 <sbrk_aligned+0x22>
 8008e00:	e7ef      	b.n	8008de2 <sbrk_aligned+0x1e>
 8008e02:	bf00      	nop
 8008e04:	20000be0 	.word	0x20000be0

08008e08 <_malloc_r>:
 8008e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e0c:	1ccd      	adds	r5, r1, #3
 8008e0e:	f025 0503 	bic.w	r5, r5, #3
 8008e12:	3508      	adds	r5, #8
 8008e14:	2d0c      	cmp	r5, #12
 8008e16:	bf38      	it	cc
 8008e18:	250c      	movcc	r5, #12
 8008e1a:	2d00      	cmp	r5, #0
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	db01      	blt.n	8008e24 <_malloc_r+0x1c>
 8008e20:	42a9      	cmp	r1, r5
 8008e22:	d904      	bls.n	8008e2e <_malloc_r+0x26>
 8008e24:	230c      	movs	r3, #12
 8008e26:	6033      	str	r3, [r6, #0]
 8008e28:	2000      	movs	r0, #0
 8008e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f04 <_malloc_r+0xfc>
 8008e32:	f000 f87b 	bl	8008f2c <__malloc_lock>
 8008e36:	f8d8 3000 	ldr.w	r3, [r8]
 8008e3a:	461c      	mov	r4, r3
 8008e3c:	bb44      	cbnz	r4, 8008e90 <_malloc_r+0x88>
 8008e3e:	4629      	mov	r1, r5
 8008e40:	4630      	mov	r0, r6
 8008e42:	f7ff ffbf 	bl	8008dc4 <sbrk_aligned>
 8008e46:	1c43      	adds	r3, r0, #1
 8008e48:	4604      	mov	r4, r0
 8008e4a:	d158      	bne.n	8008efe <_malloc_r+0xf6>
 8008e4c:	f8d8 4000 	ldr.w	r4, [r8]
 8008e50:	4627      	mov	r7, r4
 8008e52:	2f00      	cmp	r7, #0
 8008e54:	d143      	bne.n	8008ede <_malloc_r+0xd6>
 8008e56:	2c00      	cmp	r4, #0
 8008e58:	d04b      	beq.n	8008ef2 <_malloc_r+0xea>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	4639      	mov	r1, r7
 8008e5e:	4630      	mov	r0, r6
 8008e60:	eb04 0903 	add.w	r9, r4, r3
 8008e64:	f001 fca8 	bl	800a7b8 <_sbrk_r>
 8008e68:	4581      	cmp	r9, r0
 8008e6a:	d142      	bne.n	8008ef2 <_malloc_r+0xea>
 8008e6c:	6821      	ldr	r1, [r4, #0]
 8008e6e:	4630      	mov	r0, r6
 8008e70:	1a6d      	subs	r5, r5, r1
 8008e72:	4629      	mov	r1, r5
 8008e74:	f7ff ffa6 	bl	8008dc4 <sbrk_aligned>
 8008e78:	3001      	adds	r0, #1
 8008e7a:	d03a      	beq.n	8008ef2 <_malloc_r+0xea>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	442b      	add	r3, r5
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	f8d8 3000 	ldr.w	r3, [r8]
 8008e86:	685a      	ldr	r2, [r3, #4]
 8008e88:	bb62      	cbnz	r2, 8008ee4 <_malloc_r+0xdc>
 8008e8a:	f8c8 7000 	str.w	r7, [r8]
 8008e8e:	e00f      	b.n	8008eb0 <_malloc_r+0xa8>
 8008e90:	6822      	ldr	r2, [r4, #0]
 8008e92:	1b52      	subs	r2, r2, r5
 8008e94:	d420      	bmi.n	8008ed8 <_malloc_r+0xd0>
 8008e96:	2a0b      	cmp	r2, #11
 8008e98:	d917      	bls.n	8008eca <_malloc_r+0xc2>
 8008e9a:	1961      	adds	r1, r4, r5
 8008e9c:	42a3      	cmp	r3, r4
 8008e9e:	6025      	str	r5, [r4, #0]
 8008ea0:	bf18      	it	ne
 8008ea2:	6059      	strne	r1, [r3, #4]
 8008ea4:	6863      	ldr	r3, [r4, #4]
 8008ea6:	bf08      	it	eq
 8008ea8:	f8c8 1000 	streq.w	r1, [r8]
 8008eac:	5162      	str	r2, [r4, r5]
 8008eae:	604b      	str	r3, [r1, #4]
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f000 f841 	bl	8008f38 <__malloc_unlock>
 8008eb6:	f104 000b 	add.w	r0, r4, #11
 8008eba:	1d23      	adds	r3, r4, #4
 8008ebc:	f020 0007 	bic.w	r0, r0, #7
 8008ec0:	1ac2      	subs	r2, r0, r3
 8008ec2:	bf1c      	itt	ne
 8008ec4:	1a1b      	subne	r3, r3, r0
 8008ec6:	50a3      	strne	r3, [r4, r2]
 8008ec8:	e7af      	b.n	8008e2a <_malloc_r+0x22>
 8008eca:	6862      	ldr	r2, [r4, #4]
 8008ecc:	42a3      	cmp	r3, r4
 8008ece:	bf0c      	ite	eq
 8008ed0:	f8c8 2000 	streq.w	r2, [r8]
 8008ed4:	605a      	strne	r2, [r3, #4]
 8008ed6:	e7eb      	b.n	8008eb0 <_malloc_r+0xa8>
 8008ed8:	4623      	mov	r3, r4
 8008eda:	6864      	ldr	r4, [r4, #4]
 8008edc:	e7ae      	b.n	8008e3c <_malloc_r+0x34>
 8008ede:	463c      	mov	r4, r7
 8008ee0:	687f      	ldr	r7, [r7, #4]
 8008ee2:	e7b6      	b.n	8008e52 <_malloc_r+0x4a>
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	42a3      	cmp	r3, r4
 8008eea:	d1fb      	bne.n	8008ee4 <_malloc_r+0xdc>
 8008eec:	2300      	movs	r3, #0
 8008eee:	6053      	str	r3, [r2, #4]
 8008ef0:	e7de      	b.n	8008eb0 <_malloc_r+0xa8>
 8008ef2:	230c      	movs	r3, #12
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	6033      	str	r3, [r6, #0]
 8008ef8:	f000 f81e 	bl	8008f38 <__malloc_unlock>
 8008efc:	e794      	b.n	8008e28 <_malloc_r+0x20>
 8008efe:	6005      	str	r5, [r0, #0]
 8008f00:	e7d6      	b.n	8008eb0 <_malloc_r+0xa8>
 8008f02:	bf00      	nop
 8008f04:	20000be4 	.word	0x20000be4

08008f08 <__ascii_mbtowc>:
 8008f08:	b082      	sub	sp, #8
 8008f0a:	b901      	cbnz	r1, 8008f0e <__ascii_mbtowc+0x6>
 8008f0c:	a901      	add	r1, sp, #4
 8008f0e:	b142      	cbz	r2, 8008f22 <__ascii_mbtowc+0x1a>
 8008f10:	b14b      	cbz	r3, 8008f26 <__ascii_mbtowc+0x1e>
 8008f12:	7813      	ldrb	r3, [r2, #0]
 8008f14:	600b      	str	r3, [r1, #0]
 8008f16:	7812      	ldrb	r2, [r2, #0]
 8008f18:	1e10      	subs	r0, r2, #0
 8008f1a:	bf18      	it	ne
 8008f1c:	2001      	movne	r0, #1
 8008f1e:	b002      	add	sp, #8
 8008f20:	4770      	bx	lr
 8008f22:	4610      	mov	r0, r2
 8008f24:	e7fb      	b.n	8008f1e <__ascii_mbtowc+0x16>
 8008f26:	f06f 0001 	mvn.w	r0, #1
 8008f2a:	e7f8      	b.n	8008f1e <__ascii_mbtowc+0x16>

08008f2c <__malloc_lock>:
 8008f2c:	4801      	ldr	r0, [pc, #4]	@ (8008f34 <__malloc_lock+0x8>)
 8008f2e:	f7fe bd20 	b.w	8007972 <__retarget_lock_acquire_recursive>
 8008f32:	bf00      	nop
 8008f34:	20000bdc 	.word	0x20000bdc

08008f38 <__malloc_unlock>:
 8008f38:	4801      	ldr	r0, [pc, #4]	@ (8008f40 <__malloc_unlock+0x8>)
 8008f3a:	f7fe bd1b 	b.w	8007974 <__retarget_lock_release_recursive>
 8008f3e:	bf00      	nop
 8008f40:	20000bdc 	.word	0x20000bdc

08008f44 <_Balloc>:
 8008f44:	b570      	push	{r4, r5, r6, lr}
 8008f46:	69c6      	ldr	r6, [r0, #28]
 8008f48:	4604      	mov	r4, r0
 8008f4a:	460d      	mov	r5, r1
 8008f4c:	b976      	cbnz	r6, 8008f6c <_Balloc+0x28>
 8008f4e:	2010      	movs	r0, #16
 8008f50:	f7ff ff30 	bl	8008db4 <malloc>
 8008f54:	4602      	mov	r2, r0
 8008f56:	61e0      	str	r0, [r4, #28]
 8008f58:	b920      	cbnz	r0, 8008f64 <_Balloc+0x20>
 8008f5a:	216b      	movs	r1, #107	@ 0x6b
 8008f5c:	4b17      	ldr	r3, [pc, #92]	@ (8008fbc <_Balloc+0x78>)
 8008f5e:	4818      	ldr	r0, [pc, #96]	@ (8008fc0 <_Balloc+0x7c>)
 8008f60:	f7fe fd38 	bl	80079d4 <__assert_func>
 8008f64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f68:	6006      	str	r6, [r0, #0]
 8008f6a:	60c6      	str	r6, [r0, #12]
 8008f6c:	69e6      	ldr	r6, [r4, #28]
 8008f6e:	68f3      	ldr	r3, [r6, #12]
 8008f70:	b183      	cbz	r3, 8008f94 <_Balloc+0x50>
 8008f72:	69e3      	ldr	r3, [r4, #28]
 8008f74:	68db      	ldr	r3, [r3, #12]
 8008f76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f7a:	b9b8      	cbnz	r0, 8008fac <_Balloc+0x68>
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	fa01 f605 	lsl.w	r6, r1, r5
 8008f82:	1d72      	adds	r2, r6, #5
 8008f84:	4620      	mov	r0, r4
 8008f86:	0092      	lsls	r2, r2, #2
 8008f88:	f001 fc2d 	bl	800a7e6 <_calloc_r>
 8008f8c:	b160      	cbz	r0, 8008fa8 <_Balloc+0x64>
 8008f8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f92:	e00e      	b.n	8008fb2 <_Balloc+0x6e>
 8008f94:	2221      	movs	r2, #33	@ 0x21
 8008f96:	2104      	movs	r1, #4
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f001 fc24 	bl	800a7e6 <_calloc_r>
 8008f9e:	69e3      	ldr	r3, [r4, #28]
 8008fa0:	60f0      	str	r0, [r6, #12]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e4      	bne.n	8008f72 <_Balloc+0x2e>
 8008fa8:	2000      	movs	r0, #0
 8008faa:	bd70      	pop	{r4, r5, r6, pc}
 8008fac:	6802      	ldr	r2, [r0, #0]
 8008fae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fb8:	e7f7      	b.n	8008faa <_Balloc+0x66>
 8008fba:	bf00      	nop
 8008fbc:	0800b4d0 	.word	0x0800b4d0
 8008fc0:	0800b65b 	.word	0x0800b65b

08008fc4 <_Bfree>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	69c6      	ldr	r6, [r0, #28]
 8008fc8:	4605      	mov	r5, r0
 8008fca:	460c      	mov	r4, r1
 8008fcc:	b976      	cbnz	r6, 8008fec <_Bfree+0x28>
 8008fce:	2010      	movs	r0, #16
 8008fd0:	f7ff fef0 	bl	8008db4 <malloc>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	61e8      	str	r0, [r5, #28]
 8008fd8:	b920      	cbnz	r0, 8008fe4 <_Bfree+0x20>
 8008fda:	218f      	movs	r1, #143	@ 0x8f
 8008fdc:	4b08      	ldr	r3, [pc, #32]	@ (8009000 <_Bfree+0x3c>)
 8008fde:	4809      	ldr	r0, [pc, #36]	@ (8009004 <_Bfree+0x40>)
 8008fe0:	f7fe fcf8 	bl	80079d4 <__assert_func>
 8008fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fe8:	6006      	str	r6, [r0, #0]
 8008fea:	60c6      	str	r6, [r0, #12]
 8008fec:	b13c      	cbz	r4, 8008ffe <_Bfree+0x3a>
 8008fee:	69eb      	ldr	r3, [r5, #28]
 8008ff0:	6862      	ldr	r2, [r4, #4]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ff8:	6021      	str	r1, [r4, #0]
 8008ffa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ffe:	bd70      	pop	{r4, r5, r6, pc}
 8009000:	0800b4d0 	.word	0x0800b4d0
 8009004:	0800b65b 	.word	0x0800b65b

08009008 <__multadd>:
 8009008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800900c:	4607      	mov	r7, r0
 800900e:	460c      	mov	r4, r1
 8009010:	461e      	mov	r6, r3
 8009012:	2000      	movs	r0, #0
 8009014:	690d      	ldr	r5, [r1, #16]
 8009016:	f101 0c14 	add.w	ip, r1, #20
 800901a:	f8dc 3000 	ldr.w	r3, [ip]
 800901e:	3001      	adds	r0, #1
 8009020:	b299      	uxth	r1, r3
 8009022:	fb02 6101 	mla	r1, r2, r1, r6
 8009026:	0c1e      	lsrs	r6, r3, #16
 8009028:	0c0b      	lsrs	r3, r1, #16
 800902a:	fb02 3306 	mla	r3, r2, r6, r3
 800902e:	b289      	uxth	r1, r1
 8009030:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009034:	4285      	cmp	r5, r0
 8009036:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800903a:	f84c 1b04 	str.w	r1, [ip], #4
 800903e:	dcec      	bgt.n	800901a <__multadd+0x12>
 8009040:	b30e      	cbz	r6, 8009086 <__multadd+0x7e>
 8009042:	68a3      	ldr	r3, [r4, #8]
 8009044:	42ab      	cmp	r3, r5
 8009046:	dc19      	bgt.n	800907c <__multadd+0x74>
 8009048:	6861      	ldr	r1, [r4, #4]
 800904a:	4638      	mov	r0, r7
 800904c:	3101      	adds	r1, #1
 800904e:	f7ff ff79 	bl	8008f44 <_Balloc>
 8009052:	4680      	mov	r8, r0
 8009054:	b928      	cbnz	r0, 8009062 <__multadd+0x5a>
 8009056:	4602      	mov	r2, r0
 8009058:	21ba      	movs	r1, #186	@ 0xba
 800905a:	4b0c      	ldr	r3, [pc, #48]	@ (800908c <__multadd+0x84>)
 800905c:	480c      	ldr	r0, [pc, #48]	@ (8009090 <__multadd+0x88>)
 800905e:	f7fe fcb9 	bl	80079d4 <__assert_func>
 8009062:	6922      	ldr	r2, [r4, #16]
 8009064:	f104 010c 	add.w	r1, r4, #12
 8009068:	3202      	adds	r2, #2
 800906a:	0092      	lsls	r2, r2, #2
 800906c:	300c      	adds	r0, #12
 800906e:	f7fe fc98 	bl	80079a2 <memcpy>
 8009072:	4621      	mov	r1, r4
 8009074:	4638      	mov	r0, r7
 8009076:	f7ff ffa5 	bl	8008fc4 <_Bfree>
 800907a:	4644      	mov	r4, r8
 800907c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009080:	3501      	adds	r5, #1
 8009082:	615e      	str	r6, [r3, #20]
 8009084:	6125      	str	r5, [r4, #16]
 8009086:	4620      	mov	r0, r4
 8009088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800908c:	0800b5ea 	.word	0x0800b5ea
 8009090:	0800b65b 	.word	0x0800b65b

08009094 <__s2b>:
 8009094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009098:	4615      	mov	r5, r2
 800909a:	2209      	movs	r2, #9
 800909c:	461f      	mov	r7, r3
 800909e:	3308      	adds	r3, #8
 80090a0:	460c      	mov	r4, r1
 80090a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80090a6:	4606      	mov	r6, r0
 80090a8:	2201      	movs	r2, #1
 80090aa:	2100      	movs	r1, #0
 80090ac:	429a      	cmp	r2, r3
 80090ae:	db09      	blt.n	80090c4 <__s2b+0x30>
 80090b0:	4630      	mov	r0, r6
 80090b2:	f7ff ff47 	bl	8008f44 <_Balloc>
 80090b6:	b940      	cbnz	r0, 80090ca <__s2b+0x36>
 80090b8:	4602      	mov	r2, r0
 80090ba:	21d3      	movs	r1, #211	@ 0xd3
 80090bc:	4b18      	ldr	r3, [pc, #96]	@ (8009120 <__s2b+0x8c>)
 80090be:	4819      	ldr	r0, [pc, #100]	@ (8009124 <__s2b+0x90>)
 80090c0:	f7fe fc88 	bl	80079d4 <__assert_func>
 80090c4:	0052      	lsls	r2, r2, #1
 80090c6:	3101      	adds	r1, #1
 80090c8:	e7f0      	b.n	80090ac <__s2b+0x18>
 80090ca:	9b08      	ldr	r3, [sp, #32]
 80090cc:	2d09      	cmp	r5, #9
 80090ce:	6143      	str	r3, [r0, #20]
 80090d0:	f04f 0301 	mov.w	r3, #1
 80090d4:	6103      	str	r3, [r0, #16]
 80090d6:	dd16      	ble.n	8009106 <__s2b+0x72>
 80090d8:	f104 0909 	add.w	r9, r4, #9
 80090dc:	46c8      	mov	r8, r9
 80090de:	442c      	add	r4, r5
 80090e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80090e4:	4601      	mov	r1, r0
 80090e6:	220a      	movs	r2, #10
 80090e8:	4630      	mov	r0, r6
 80090ea:	3b30      	subs	r3, #48	@ 0x30
 80090ec:	f7ff ff8c 	bl	8009008 <__multadd>
 80090f0:	45a0      	cmp	r8, r4
 80090f2:	d1f5      	bne.n	80090e0 <__s2b+0x4c>
 80090f4:	f1a5 0408 	sub.w	r4, r5, #8
 80090f8:	444c      	add	r4, r9
 80090fa:	1b2d      	subs	r5, r5, r4
 80090fc:	1963      	adds	r3, r4, r5
 80090fe:	42bb      	cmp	r3, r7
 8009100:	db04      	blt.n	800910c <__s2b+0x78>
 8009102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009106:	2509      	movs	r5, #9
 8009108:	340a      	adds	r4, #10
 800910a:	e7f6      	b.n	80090fa <__s2b+0x66>
 800910c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009110:	4601      	mov	r1, r0
 8009112:	220a      	movs	r2, #10
 8009114:	4630      	mov	r0, r6
 8009116:	3b30      	subs	r3, #48	@ 0x30
 8009118:	f7ff ff76 	bl	8009008 <__multadd>
 800911c:	e7ee      	b.n	80090fc <__s2b+0x68>
 800911e:	bf00      	nop
 8009120:	0800b5ea 	.word	0x0800b5ea
 8009124:	0800b65b 	.word	0x0800b65b

08009128 <__hi0bits>:
 8009128:	4603      	mov	r3, r0
 800912a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800912e:	bf3a      	itte	cc
 8009130:	0403      	lslcc	r3, r0, #16
 8009132:	2010      	movcc	r0, #16
 8009134:	2000      	movcs	r0, #0
 8009136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800913a:	bf3c      	itt	cc
 800913c:	021b      	lslcc	r3, r3, #8
 800913e:	3008      	addcc	r0, #8
 8009140:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009144:	bf3c      	itt	cc
 8009146:	011b      	lslcc	r3, r3, #4
 8009148:	3004      	addcc	r0, #4
 800914a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800914e:	bf3c      	itt	cc
 8009150:	009b      	lslcc	r3, r3, #2
 8009152:	3002      	addcc	r0, #2
 8009154:	2b00      	cmp	r3, #0
 8009156:	db05      	blt.n	8009164 <__hi0bits+0x3c>
 8009158:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800915c:	f100 0001 	add.w	r0, r0, #1
 8009160:	bf08      	it	eq
 8009162:	2020      	moveq	r0, #32
 8009164:	4770      	bx	lr

08009166 <__lo0bits>:
 8009166:	6803      	ldr	r3, [r0, #0]
 8009168:	4602      	mov	r2, r0
 800916a:	f013 0007 	ands.w	r0, r3, #7
 800916e:	d00b      	beq.n	8009188 <__lo0bits+0x22>
 8009170:	07d9      	lsls	r1, r3, #31
 8009172:	d421      	bmi.n	80091b8 <__lo0bits+0x52>
 8009174:	0798      	lsls	r0, r3, #30
 8009176:	bf49      	itett	mi
 8009178:	085b      	lsrmi	r3, r3, #1
 800917a:	089b      	lsrpl	r3, r3, #2
 800917c:	2001      	movmi	r0, #1
 800917e:	6013      	strmi	r3, [r2, #0]
 8009180:	bf5c      	itt	pl
 8009182:	2002      	movpl	r0, #2
 8009184:	6013      	strpl	r3, [r2, #0]
 8009186:	4770      	bx	lr
 8009188:	b299      	uxth	r1, r3
 800918a:	b909      	cbnz	r1, 8009190 <__lo0bits+0x2a>
 800918c:	2010      	movs	r0, #16
 800918e:	0c1b      	lsrs	r3, r3, #16
 8009190:	b2d9      	uxtb	r1, r3
 8009192:	b909      	cbnz	r1, 8009198 <__lo0bits+0x32>
 8009194:	3008      	adds	r0, #8
 8009196:	0a1b      	lsrs	r3, r3, #8
 8009198:	0719      	lsls	r1, r3, #28
 800919a:	bf04      	itt	eq
 800919c:	091b      	lsreq	r3, r3, #4
 800919e:	3004      	addeq	r0, #4
 80091a0:	0799      	lsls	r1, r3, #30
 80091a2:	bf04      	itt	eq
 80091a4:	089b      	lsreq	r3, r3, #2
 80091a6:	3002      	addeq	r0, #2
 80091a8:	07d9      	lsls	r1, r3, #31
 80091aa:	d403      	bmi.n	80091b4 <__lo0bits+0x4e>
 80091ac:	085b      	lsrs	r3, r3, #1
 80091ae:	f100 0001 	add.w	r0, r0, #1
 80091b2:	d003      	beq.n	80091bc <__lo0bits+0x56>
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	4770      	bx	lr
 80091b8:	2000      	movs	r0, #0
 80091ba:	4770      	bx	lr
 80091bc:	2020      	movs	r0, #32
 80091be:	4770      	bx	lr

080091c0 <__i2b>:
 80091c0:	b510      	push	{r4, lr}
 80091c2:	460c      	mov	r4, r1
 80091c4:	2101      	movs	r1, #1
 80091c6:	f7ff febd 	bl	8008f44 <_Balloc>
 80091ca:	4602      	mov	r2, r0
 80091cc:	b928      	cbnz	r0, 80091da <__i2b+0x1a>
 80091ce:	f240 1145 	movw	r1, #325	@ 0x145
 80091d2:	4b04      	ldr	r3, [pc, #16]	@ (80091e4 <__i2b+0x24>)
 80091d4:	4804      	ldr	r0, [pc, #16]	@ (80091e8 <__i2b+0x28>)
 80091d6:	f7fe fbfd 	bl	80079d4 <__assert_func>
 80091da:	2301      	movs	r3, #1
 80091dc:	6144      	str	r4, [r0, #20]
 80091de:	6103      	str	r3, [r0, #16]
 80091e0:	bd10      	pop	{r4, pc}
 80091e2:	bf00      	nop
 80091e4:	0800b5ea 	.word	0x0800b5ea
 80091e8:	0800b65b 	.word	0x0800b65b

080091ec <__multiply>:
 80091ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f0:	4614      	mov	r4, r2
 80091f2:	690a      	ldr	r2, [r1, #16]
 80091f4:	6923      	ldr	r3, [r4, #16]
 80091f6:	460f      	mov	r7, r1
 80091f8:	429a      	cmp	r2, r3
 80091fa:	bfa2      	ittt	ge
 80091fc:	4623      	movge	r3, r4
 80091fe:	460c      	movge	r4, r1
 8009200:	461f      	movge	r7, r3
 8009202:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009206:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800920a:	68a3      	ldr	r3, [r4, #8]
 800920c:	6861      	ldr	r1, [r4, #4]
 800920e:	eb0a 0609 	add.w	r6, sl, r9
 8009212:	42b3      	cmp	r3, r6
 8009214:	b085      	sub	sp, #20
 8009216:	bfb8      	it	lt
 8009218:	3101      	addlt	r1, #1
 800921a:	f7ff fe93 	bl	8008f44 <_Balloc>
 800921e:	b930      	cbnz	r0, 800922e <__multiply+0x42>
 8009220:	4602      	mov	r2, r0
 8009222:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009226:	4b43      	ldr	r3, [pc, #268]	@ (8009334 <__multiply+0x148>)
 8009228:	4843      	ldr	r0, [pc, #268]	@ (8009338 <__multiply+0x14c>)
 800922a:	f7fe fbd3 	bl	80079d4 <__assert_func>
 800922e:	f100 0514 	add.w	r5, r0, #20
 8009232:	462b      	mov	r3, r5
 8009234:	2200      	movs	r2, #0
 8009236:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800923a:	4543      	cmp	r3, r8
 800923c:	d321      	bcc.n	8009282 <__multiply+0x96>
 800923e:	f107 0114 	add.w	r1, r7, #20
 8009242:	f104 0214 	add.w	r2, r4, #20
 8009246:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800924a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800924e:	9302      	str	r3, [sp, #8]
 8009250:	1b13      	subs	r3, r2, r4
 8009252:	3b15      	subs	r3, #21
 8009254:	f023 0303 	bic.w	r3, r3, #3
 8009258:	3304      	adds	r3, #4
 800925a:	f104 0715 	add.w	r7, r4, #21
 800925e:	42ba      	cmp	r2, r7
 8009260:	bf38      	it	cc
 8009262:	2304      	movcc	r3, #4
 8009264:	9301      	str	r3, [sp, #4]
 8009266:	9b02      	ldr	r3, [sp, #8]
 8009268:	9103      	str	r1, [sp, #12]
 800926a:	428b      	cmp	r3, r1
 800926c:	d80c      	bhi.n	8009288 <__multiply+0x9c>
 800926e:	2e00      	cmp	r6, #0
 8009270:	dd03      	ble.n	800927a <__multiply+0x8e>
 8009272:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009276:	2b00      	cmp	r3, #0
 8009278:	d05a      	beq.n	8009330 <__multiply+0x144>
 800927a:	6106      	str	r6, [r0, #16]
 800927c:	b005      	add	sp, #20
 800927e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009282:	f843 2b04 	str.w	r2, [r3], #4
 8009286:	e7d8      	b.n	800923a <__multiply+0x4e>
 8009288:	f8b1 a000 	ldrh.w	sl, [r1]
 800928c:	f1ba 0f00 	cmp.w	sl, #0
 8009290:	d023      	beq.n	80092da <__multiply+0xee>
 8009292:	46a9      	mov	r9, r5
 8009294:	f04f 0c00 	mov.w	ip, #0
 8009298:	f104 0e14 	add.w	lr, r4, #20
 800929c:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092a0:	f8d9 3000 	ldr.w	r3, [r9]
 80092a4:	fa1f fb87 	uxth.w	fp, r7
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	fb0a 330b 	mla	r3, sl, fp, r3
 80092ae:	4463      	add	r3, ip
 80092b0:	f8d9 c000 	ldr.w	ip, [r9]
 80092b4:	0c3f      	lsrs	r7, r7, #16
 80092b6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80092ba:	fb0a c707 	mla	r7, sl, r7, ip
 80092be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80092c8:	4572      	cmp	r2, lr
 80092ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80092ce:	f849 3b04 	str.w	r3, [r9], #4
 80092d2:	d8e3      	bhi.n	800929c <__multiply+0xb0>
 80092d4:	9b01      	ldr	r3, [sp, #4]
 80092d6:	f845 c003 	str.w	ip, [r5, r3]
 80092da:	9b03      	ldr	r3, [sp, #12]
 80092dc:	3104      	adds	r1, #4
 80092de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80092e2:	f1b9 0f00 	cmp.w	r9, #0
 80092e6:	d021      	beq.n	800932c <__multiply+0x140>
 80092e8:	46ae      	mov	lr, r5
 80092ea:	f04f 0a00 	mov.w	sl, #0
 80092ee:	682b      	ldr	r3, [r5, #0]
 80092f0:	f104 0c14 	add.w	ip, r4, #20
 80092f4:	f8bc b000 	ldrh.w	fp, [ip]
 80092f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	fb09 770b 	mla	r7, r9, fp, r7
 8009302:	4457      	add	r7, sl
 8009304:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009308:	f84e 3b04 	str.w	r3, [lr], #4
 800930c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009310:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009314:	f8be 3000 	ldrh.w	r3, [lr]
 8009318:	4562      	cmp	r2, ip
 800931a:	fb09 330a 	mla	r3, r9, sl, r3
 800931e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009322:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009326:	d8e5      	bhi.n	80092f4 <__multiply+0x108>
 8009328:	9f01      	ldr	r7, [sp, #4]
 800932a:	51eb      	str	r3, [r5, r7]
 800932c:	3504      	adds	r5, #4
 800932e:	e79a      	b.n	8009266 <__multiply+0x7a>
 8009330:	3e01      	subs	r6, #1
 8009332:	e79c      	b.n	800926e <__multiply+0x82>
 8009334:	0800b5ea 	.word	0x0800b5ea
 8009338:	0800b65b 	.word	0x0800b65b

0800933c <__pow5mult>:
 800933c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009340:	4615      	mov	r5, r2
 8009342:	f012 0203 	ands.w	r2, r2, #3
 8009346:	4607      	mov	r7, r0
 8009348:	460e      	mov	r6, r1
 800934a:	d007      	beq.n	800935c <__pow5mult+0x20>
 800934c:	4c25      	ldr	r4, [pc, #148]	@ (80093e4 <__pow5mult+0xa8>)
 800934e:	3a01      	subs	r2, #1
 8009350:	2300      	movs	r3, #0
 8009352:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009356:	f7ff fe57 	bl	8009008 <__multadd>
 800935a:	4606      	mov	r6, r0
 800935c:	10ad      	asrs	r5, r5, #2
 800935e:	d03d      	beq.n	80093dc <__pow5mult+0xa0>
 8009360:	69fc      	ldr	r4, [r7, #28]
 8009362:	b97c      	cbnz	r4, 8009384 <__pow5mult+0x48>
 8009364:	2010      	movs	r0, #16
 8009366:	f7ff fd25 	bl	8008db4 <malloc>
 800936a:	4602      	mov	r2, r0
 800936c:	61f8      	str	r0, [r7, #28]
 800936e:	b928      	cbnz	r0, 800937c <__pow5mult+0x40>
 8009370:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009374:	4b1c      	ldr	r3, [pc, #112]	@ (80093e8 <__pow5mult+0xac>)
 8009376:	481d      	ldr	r0, [pc, #116]	@ (80093ec <__pow5mult+0xb0>)
 8009378:	f7fe fb2c 	bl	80079d4 <__assert_func>
 800937c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009380:	6004      	str	r4, [r0, #0]
 8009382:	60c4      	str	r4, [r0, #12]
 8009384:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009388:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800938c:	b94c      	cbnz	r4, 80093a2 <__pow5mult+0x66>
 800938e:	f240 2171 	movw	r1, #625	@ 0x271
 8009392:	4638      	mov	r0, r7
 8009394:	f7ff ff14 	bl	80091c0 <__i2b>
 8009398:	2300      	movs	r3, #0
 800939a:	4604      	mov	r4, r0
 800939c:	f8c8 0008 	str.w	r0, [r8, #8]
 80093a0:	6003      	str	r3, [r0, #0]
 80093a2:	f04f 0900 	mov.w	r9, #0
 80093a6:	07eb      	lsls	r3, r5, #31
 80093a8:	d50a      	bpl.n	80093c0 <__pow5mult+0x84>
 80093aa:	4631      	mov	r1, r6
 80093ac:	4622      	mov	r2, r4
 80093ae:	4638      	mov	r0, r7
 80093b0:	f7ff ff1c 	bl	80091ec <__multiply>
 80093b4:	4680      	mov	r8, r0
 80093b6:	4631      	mov	r1, r6
 80093b8:	4638      	mov	r0, r7
 80093ba:	f7ff fe03 	bl	8008fc4 <_Bfree>
 80093be:	4646      	mov	r6, r8
 80093c0:	106d      	asrs	r5, r5, #1
 80093c2:	d00b      	beq.n	80093dc <__pow5mult+0xa0>
 80093c4:	6820      	ldr	r0, [r4, #0]
 80093c6:	b938      	cbnz	r0, 80093d8 <__pow5mult+0x9c>
 80093c8:	4622      	mov	r2, r4
 80093ca:	4621      	mov	r1, r4
 80093cc:	4638      	mov	r0, r7
 80093ce:	f7ff ff0d 	bl	80091ec <__multiply>
 80093d2:	6020      	str	r0, [r4, #0]
 80093d4:	f8c0 9000 	str.w	r9, [r0]
 80093d8:	4604      	mov	r4, r0
 80093da:	e7e4      	b.n	80093a6 <__pow5mult+0x6a>
 80093dc:	4630      	mov	r0, r6
 80093de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093e2:	bf00      	nop
 80093e4:	0800b6b4 	.word	0x0800b6b4
 80093e8:	0800b4d0 	.word	0x0800b4d0
 80093ec:	0800b65b 	.word	0x0800b65b

080093f0 <__lshift>:
 80093f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093f4:	460c      	mov	r4, r1
 80093f6:	4607      	mov	r7, r0
 80093f8:	4691      	mov	r9, r2
 80093fa:	6923      	ldr	r3, [r4, #16]
 80093fc:	6849      	ldr	r1, [r1, #4]
 80093fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009402:	68a3      	ldr	r3, [r4, #8]
 8009404:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009408:	f108 0601 	add.w	r6, r8, #1
 800940c:	42b3      	cmp	r3, r6
 800940e:	db0b      	blt.n	8009428 <__lshift+0x38>
 8009410:	4638      	mov	r0, r7
 8009412:	f7ff fd97 	bl	8008f44 <_Balloc>
 8009416:	4605      	mov	r5, r0
 8009418:	b948      	cbnz	r0, 800942e <__lshift+0x3e>
 800941a:	4602      	mov	r2, r0
 800941c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009420:	4b27      	ldr	r3, [pc, #156]	@ (80094c0 <__lshift+0xd0>)
 8009422:	4828      	ldr	r0, [pc, #160]	@ (80094c4 <__lshift+0xd4>)
 8009424:	f7fe fad6 	bl	80079d4 <__assert_func>
 8009428:	3101      	adds	r1, #1
 800942a:	005b      	lsls	r3, r3, #1
 800942c:	e7ee      	b.n	800940c <__lshift+0x1c>
 800942e:	2300      	movs	r3, #0
 8009430:	f100 0114 	add.w	r1, r0, #20
 8009434:	f100 0210 	add.w	r2, r0, #16
 8009438:	4618      	mov	r0, r3
 800943a:	4553      	cmp	r3, sl
 800943c:	db33      	blt.n	80094a6 <__lshift+0xb6>
 800943e:	6920      	ldr	r0, [r4, #16]
 8009440:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009444:	f104 0314 	add.w	r3, r4, #20
 8009448:	f019 091f 	ands.w	r9, r9, #31
 800944c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009450:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009454:	d02b      	beq.n	80094ae <__lshift+0xbe>
 8009456:	468a      	mov	sl, r1
 8009458:	2200      	movs	r2, #0
 800945a:	f1c9 0e20 	rsb	lr, r9, #32
 800945e:	6818      	ldr	r0, [r3, #0]
 8009460:	fa00 f009 	lsl.w	r0, r0, r9
 8009464:	4310      	orrs	r0, r2
 8009466:	f84a 0b04 	str.w	r0, [sl], #4
 800946a:	f853 2b04 	ldr.w	r2, [r3], #4
 800946e:	459c      	cmp	ip, r3
 8009470:	fa22 f20e 	lsr.w	r2, r2, lr
 8009474:	d8f3      	bhi.n	800945e <__lshift+0x6e>
 8009476:	ebac 0304 	sub.w	r3, ip, r4
 800947a:	3b15      	subs	r3, #21
 800947c:	f023 0303 	bic.w	r3, r3, #3
 8009480:	3304      	adds	r3, #4
 8009482:	f104 0015 	add.w	r0, r4, #21
 8009486:	4584      	cmp	ip, r0
 8009488:	bf38      	it	cc
 800948a:	2304      	movcc	r3, #4
 800948c:	50ca      	str	r2, [r1, r3]
 800948e:	b10a      	cbz	r2, 8009494 <__lshift+0xa4>
 8009490:	f108 0602 	add.w	r6, r8, #2
 8009494:	3e01      	subs	r6, #1
 8009496:	4638      	mov	r0, r7
 8009498:	4621      	mov	r1, r4
 800949a:	612e      	str	r6, [r5, #16]
 800949c:	f7ff fd92 	bl	8008fc4 <_Bfree>
 80094a0:	4628      	mov	r0, r5
 80094a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80094aa:	3301      	adds	r3, #1
 80094ac:	e7c5      	b.n	800943a <__lshift+0x4a>
 80094ae:	3904      	subs	r1, #4
 80094b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80094b4:	459c      	cmp	ip, r3
 80094b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80094ba:	d8f9      	bhi.n	80094b0 <__lshift+0xc0>
 80094bc:	e7ea      	b.n	8009494 <__lshift+0xa4>
 80094be:	bf00      	nop
 80094c0:	0800b5ea 	.word	0x0800b5ea
 80094c4:	0800b65b 	.word	0x0800b65b

080094c8 <__mcmp>:
 80094c8:	4603      	mov	r3, r0
 80094ca:	690a      	ldr	r2, [r1, #16]
 80094cc:	6900      	ldr	r0, [r0, #16]
 80094ce:	b530      	push	{r4, r5, lr}
 80094d0:	1a80      	subs	r0, r0, r2
 80094d2:	d10e      	bne.n	80094f2 <__mcmp+0x2a>
 80094d4:	3314      	adds	r3, #20
 80094d6:	3114      	adds	r1, #20
 80094d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80094dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80094e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80094e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80094e8:	4295      	cmp	r5, r2
 80094ea:	d003      	beq.n	80094f4 <__mcmp+0x2c>
 80094ec:	d205      	bcs.n	80094fa <__mcmp+0x32>
 80094ee:	f04f 30ff 	mov.w	r0, #4294967295
 80094f2:	bd30      	pop	{r4, r5, pc}
 80094f4:	42a3      	cmp	r3, r4
 80094f6:	d3f3      	bcc.n	80094e0 <__mcmp+0x18>
 80094f8:	e7fb      	b.n	80094f2 <__mcmp+0x2a>
 80094fa:	2001      	movs	r0, #1
 80094fc:	e7f9      	b.n	80094f2 <__mcmp+0x2a>
	...

08009500 <__mdiff>:
 8009500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009504:	4689      	mov	r9, r1
 8009506:	4606      	mov	r6, r0
 8009508:	4611      	mov	r1, r2
 800950a:	4648      	mov	r0, r9
 800950c:	4614      	mov	r4, r2
 800950e:	f7ff ffdb 	bl	80094c8 <__mcmp>
 8009512:	1e05      	subs	r5, r0, #0
 8009514:	d112      	bne.n	800953c <__mdiff+0x3c>
 8009516:	4629      	mov	r1, r5
 8009518:	4630      	mov	r0, r6
 800951a:	f7ff fd13 	bl	8008f44 <_Balloc>
 800951e:	4602      	mov	r2, r0
 8009520:	b928      	cbnz	r0, 800952e <__mdiff+0x2e>
 8009522:	f240 2137 	movw	r1, #567	@ 0x237
 8009526:	4b3e      	ldr	r3, [pc, #248]	@ (8009620 <__mdiff+0x120>)
 8009528:	483e      	ldr	r0, [pc, #248]	@ (8009624 <__mdiff+0x124>)
 800952a:	f7fe fa53 	bl	80079d4 <__assert_func>
 800952e:	2301      	movs	r3, #1
 8009530:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009534:	4610      	mov	r0, r2
 8009536:	b003      	add	sp, #12
 8009538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953c:	bfbc      	itt	lt
 800953e:	464b      	movlt	r3, r9
 8009540:	46a1      	movlt	r9, r4
 8009542:	4630      	mov	r0, r6
 8009544:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009548:	bfba      	itte	lt
 800954a:	461c      	movlt	r4, r3
 800954c:	2501      	movlt	r5, #1
 800954e:	2500      	movge	r5, #0
 8009550:	f7ff fcf8 	bl	8008f44 <_Balloc>
 8009554:	4602      	mov	r2, r0
 8009556:	b918      	cbnz	r0, 8009560 <__mdiff+0x60>
 8009558:	f240 2145 	movw	r1, #581	@ 0x245
 800955c:	4b30      	ldr	r3, [pc, #192]	@ (8009620 <__mdiff+0x120>)
 800955e:	e7e3      	b.n	8009528 <__mdiff+0x28>
 8009560:	f100 0b14 	add.w	fp, r0, #20
 8009564:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009568:	f109 0310 	add.w	r3, r9, #16
 800956c:	60c5      	str	r5, [r0, #12]
 800956e:	f04f 0c00 	mov.w	ip, #0
 8009572:	f109 0514 	add.w	r5, r9, #20
 8009576:	46d9      	mov	r9, fp
 8009578:	6926      	ldr	r6, [r4, #16]
 800957a:	f104 0e14 	add.w	lr, r4, #20
 800957e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009582:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009586:	9301      	str	r3, [sp, #4]
 8009588:	9b01      	ldr	r3, [sp, #4]
 800958a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800958e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009592:	b281      	uxth	r1, r0
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	fa1f f38a 	uxth.w	r3, sl
 800959a:	1a5b      	subs	r3, r3, r1
 800959c:	0c00      	lsrs	r0, r0, #16
 800959e:	4463      	add	r3, ip
 80095a0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80095a4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80095ae:	4576      	cmp	r6, lr
 80095b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80095b4:	f849 3b04 	str.w	r3, [r9], #4
 80095b8:	d8e6      	bhi.n	8009588 <__mdiff+0x88>
 80095ba:	1b33      	subs	r3, r6, r4
 80095bc:	3b15      	subs	r3, #21
 80095be:	f023 0303 	bic.w	r3, r3, #3
 80095c2:	3415      	adds	r4, #21
 80095c4:	3304      	adds	r3, #4
 80095c6:	42a6      	cmp	r6, r4
 80095c8:	bf38      	it	cc
 80095ca:	2304      	movcc	r3, #4
 80095cc:	441d      	add	r5, r3
 80095ce:	445b      	add	r3, fp
 80095d0:	461e      	mov	r6, r3
 80095d2:	462c      	mov	r4, r5
 80095d4:	4544      	cmp	r4, r8
 80095d6:	d30e      	bcc.n	80095f6 <__mdiff+0xf6>
 80095d8:	f108 0103 	add.w	r1, r8, #3
 80095dc:	1b49      	subs	r1, r1, r5
 80095de:	f021 0103 	bic.w	r1, r1, #3
 80095e2:	3d03      	subs	r5, #3
 80095e4:	45a8      	cmp	r8, r5
 80095e6:	bf38      	it	cc
 80095e8:	2100      	movcc	r1, #0
 80095ea:	440b      	add	r3, r1
 80095ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095f0:	b199      	cbz	r1, 800961a <__mdiff+0x11a>
 80095f2:	6117      	str	r7, [r2, #16]
 80095f4:	e79e      	b.n	8009534 <__mdiff+0x34>
 80095f6:	46e6      	mov	lr, ip
 80095f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80095fc:	fa1f fc81 	uxth.w	ip, r1
 8009600:	44f4      	add	ip, lr
 8009602:	0c08      	lsrs	r0, r1, #16
 8009604:	4471      	add	r1, lr
 8009606:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800960a:	b289      	uxth	r1, r1
 800960c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009610:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009614:	f846 1b04 	str.w	r1, [r6], #4
 8009618:	e7dc      	b.n	80095d4 <__mdiff+0xd4>
 800961a:	3f01      	subs	r7, #1
 800961c:	e7e6      	b.n	80095ec <__mdiff+0xec>
 800961e:	bf00      	nop
 8009620:	0800b5ea 	.word	0x0800b5ea
 8009624:	0800b65b 	.word	0x0800b65b

08009628 <__ulp>:
 8009628:	4b0e      	ldr	r3, [pc, #56]	@ (8009664 <__ulp+0x3c>)
 800962a:	400b      	ands	r3, r1
 800962c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009630:	2b00      	cmp	r3, #0
 8009632:	dc08      	bgt.n	8009646 <__ulp+0x1e>
 8009634:	425b      	negs	r3, r3
 8009636:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800963a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800963e:	da04      	bge.n	800964a <__ulp+0x22>
 8009640:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009644:	4113      	asrs	r3, r2
 8009646:	2200      	movs	r2, #0
 8009648:	e008      	b.n	800965c <__ulp+0x34>
 800964a:	f1a2 0314 	sub.w	r3, r2, #20
 800964e:	2b1e      	cmp	r3, #30
 8009650:	bfd6      	itet	le
 8009652:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009656:	2201      	movgt	r2, #1
 8009658:	40da      	lsrle	r2, r3
 800965a:	2300      	movs	r3, #0
 800965c:	4619      	mov	r1, r3
 800965e:	4610      	mov	r0, r2
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	7ff00000 	.word	0x7ff00000

08009668 <__b2d>:
 8009668:	6902      	ldr	r2, [r0, #16]
 800966a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966c:	f100 0614 	add.w	r6, r0, #20
 8009670:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009674:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009678:	4f1e      	ldr	r7, [pc, #120]	@ (80096f4 <__b2d+0x8c>)
 800967a:	4620      	mov	r0, r4
 800967c:	f7ff fd54 	bl	8009128 <__hi0bits>
 8009680:	4603      	mov	r3, r0
 8009682:	f1c0 0020 	rsb	r0, r0, #32
 8009686:	2b0a      	cmp	r3, #10
 8009688:	f1a2 0504 	sub.w	r5, r2, #4
 800968c:	6008      	str	r0, [r1, #0]
 800968e:	dc12      	bgt.n	80096b6 <__b2d+0x4e>
 8009690:	42ae      	cmp	r6, r5
 8009692:	bf2c      	ite	cs
 8009694:	2200      	movcs	r2, #0
 8009696:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800969a:	f1c3 0c0b 	rsb	ip, r3, #11
 800969e:	3315      	adds	r3, #21
 80096a0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80096a4:	fa04 f303 	lsl.w	r3, r4, r3
 80096a8:	fa22 f20c 	lsr.w	r2, r2, ip
 80096ac:	ea4e 0107 	orr.w	r1, lr, r7
 80096b0:	431a      	orrs	r2, r3
 80096b2:	4610      	mov	r0, r2
 80096b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b6:	42ae      	cmp	r6, r5
 80096b8:	bf36      	itet	cc
 80096ba:	f1a2 0508 	subcc.w	r5, r2, #8
 80096be:	2200      	movcs	r2, #0
 80096c0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80096c4:	3b0b      	subs	r3, #11
 80096c6:	d012      	beq.n	80096ee <__b2d+0x86>
 80096c8:	f1c3 0720 	rsb	r7, r3, #32
 80096cc:	fa22 f107 	lsr.w	r1, r2, r7
 80096d0:	409c      	lsls	r4, r3
 80096d2:	430c      	orrs	r4, r1
 80096d4:	42b5      	cmp	r5, r6
 80096d6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80096da:	bf94      	ite	ls
 80096dc:	2400      	movls	r4, #0
 80096de:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80096e2:	409a      	lsls	r2, r3
 80096e4:	40fc      	lsrs	r4, r7
 80096e6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80096ea:	4322      	orrs	r2, r4
 80096ec:	e7e1      	b.n	80096b2 <__b2d+0x4a>
 80096ee:	ea44 0107 	orr.w	r1, r4, r7
 80096f2:	e7de      	b.n	80096b2 <__b2d+0x4a>
 80096f4:	3ff00000 	.word	0x3ff00000

080096f8 <__d2b>:
 80096f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80096fc:	2101      	movs	r1, #1
 80096fe:	4690      	mov	r8, r2
 8009700:	4699      	mov	r9, r3
 8009702:	9e08      	ldr	r6, [sp, #32]
 8009704:	f7ff fc1e 	bl	8008f44 <_Balloc>
 8009708:	4604      	mov	r4, r0
 800970a:	b930      	cbnz	r0, 800971a <__d2b+0x22>
 800970c:	4602      	mov	r2, r0
 800970e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009712:	4b23      	ldr	r3, [pc, #140]	@ (80097a0 <__d2b+0xa8>)
 8009714:	4823      	ldr	r0, [pc, #140]	@ (80097a4 <__d2b+0xac>)
 8009716:	f7fe f95d 	bl	80079d4 <__assert_func>
 800971a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800971e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009722:	b10d      	cbz	r5, 8009728 <__d2b+0x30>
 8009724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009728:	9301      	str	r3, [sp, #4]
 800972a:	f1b8 0300 	subs.w	r3, r8, #0
 800972e:	d024      	beq.n	800977a <__d2b+0x82>
 8009730:	4668      	mov	r0, sp
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	f7ff fd17 	bl	8009166 <__lo0bits>
 8009738:	e9dd 1200 	ldrd	r1, r2, [sp]
 800973c:	b1d8      	cbz	r0, 8009776 <__d2b+0x7e>
 800973e:	f1c0 0320 	rsb	r3, r0, #32
 8009742:	fa02 f303 	lsl.w	r3, r2, r3
 8009746:	430b      	orrs	r3, r1
 8009748:	40c2      	lsrs	r2, r0
 800974a:	6163      	str	r3, [r4, #20]
 800974c:	9201      	str	r2, [sp, #4]
 800974e:	9b01      	ldr	r3, [sp, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	bf0c      	ite	eq
 8009754:	2201      	moveq	r2, #1
 8009756:	2202      	movne	r2, #2
 8009758:	61a3      	str	r3, [r4, #24]
 800975a:	6122      	str	r2, [r4, #16]
 800975c:	b1ad      	cbz	r5, 800978a <__d2b+0x92>
 800975e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009762:	4405      	add	r5, r0
 8009764:	6035      	str	r5, [r6, #0]
 8009766:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800976a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800976c:	6018      	str	r0, [r3, #0]
 800976e:	4620      	mov	r0, r4
 8009770:	b002      	add	sp, #8
 8009772:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009776:	6161      	str	r1, [r4, #20]
 8009778:	e7e9      	b.n	800974e <__d2b+0x56>
 800977a:	a801      	add	r0, sp, #4
 800977c:	f7ff fcf3 	bl	8009166 <__lo0bits>
 8009780:	9b01      	ldr	r3, [sp, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	6163      	str	r3, [r4, #20]
 8009786:	3020      	adds	r0, #32
 8009788:	e7e7      	b.n	800975a <__d2b+0x62>
 800978a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800978e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009792:	6030      	str	r0, [r6, #0]
 8009794:	6918      	ldr	r0, [r3, #16]
 8009796:	f7ff fcc7 	bl	8009128 <__hi0bits>
 800979a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800979e:	e7e4      	b.n	800976a <__d2b+0x72>
 80097a0:	0800b5ea 	.word	0x0800b5ea
 80097a4:	0800b65b 	.word	0x0800b65b

080097a8 <__ratio>:
 80097a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ac:	b085      	sub	sp, #20
 80097ae:	e9cd 1000 	strd	r1, r0, [sp]
 80097b2:	a902      	add	r1, sp, #8
 80097b4:	f7ff ff58 	bl	8009668 <__b2d>
 80097b8:	468b      	mov	fp, r1
 80097ba:	4606      	mov	r6, r0
 80097bc:	460f      	mov	r7, r1
 80097be:	9800      	ldr	r0, [sp, #0]
 80097c0:	a903      	add	r1, sp, #12
 80097c2:	f7ff ff51 	bl	8009668 <__b2d>
 80097c6:	460d      	mov	r5, r1
 80097c8:	9b01      	ldr	r3, [sp, #4]
 80097ca:	4689      	mov	r9, r1
 80097cc:	6919      	ldr	r1, [r3, #16]
 80097ce:	9b00      	ldr	r3, [sp, #0]
 80097d0:	4604      	mov	r4, r0
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	4630      	mov	r0, r6
 80097d6:	1ac9      	subs	r1, r1, r3
 80097d8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80097dc:	1a9b      	subs	r3, r3, r2
 80097de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	bfcd      	iteet	gt
 80097e6:	463a      	movgt	r2, r7
 80097e8:	462a      	movle	r2, r5
 80097ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80097ee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80097f2:	bfd8      	it	le
 80097f4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80097f8:	464b      	mov	r3, r9
 80097fa:	4622      	mov	r2, r4
 80097fc:	4659      	mov	r1, fp
 80097fe:	f7f6 ff95 	bl	800072c <__aeabi_ddiv>
 8009802:	b005      	add	sp, #20
 8009804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009808 <__copybits>:
 8009808:	3901      	subs	r1, #1
 800980a:	b570      	push	{r4, r5, r6, lr}
 800980c:	1149      	asrs	r1, r1, #5
 800980e:	6914      	ldr	r4, [r2, #16]
 8009810:	3101      	adds	r1, #1
 8009812:	f102 0314 	add.w	r3, r2, #20
 8009816:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800981a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800981e:	1f05      	subs	r5, r0, #4
 8009820:	42a3      	cmp	r3, r4
 8009822:	d30c      	bcc.n	800983e <__copybits+0x36>
 8009824:	1aa3      	subs	r3, r4, r2
 8009826:	3b11      	subs	r3, #17
 8009828:	f023 0303 	bic.w	r3, r3, #3
 800982c:	3211      	adds	r2, #17
 800982e:	42a2      	cmp	r2, r4
 8009830:	bf88      	it	hi
 8009832:	2300      	movhi	r3, #0
 8009834:	4418      	add	r0, r3
 8009836:	2300      	movs	r3, #0
 8009838:	4288      	cmp	r0, r1
 800983a:	d305      	bcc.n	8009848 <__copybits+0x40>
 800983c:	bd70      	pop	{r4, r5, r6, pc}
 800983e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009842:	f845 6f04 	str.w	r6, [r5, #4]!
 8009846:	e7eb      	b.n	8009820 <__copybits+0x18>
 8009848:	f840 3b04 	str.w	r3, [r0], #4
 800984c:	e7f4      	b.n	8009838 <__copybits+0x30>

0800984e <__any_on>:
 800984e:	f100 0214 	add.w	r2, r0, #20
 8009852:	6900      	ldr	r0, [r0, #16]
 8009854:	114b      	asrs	r3, r1, #5
 8009856:	4298      	cmp	r0, r3
 8009858:	b510      	push	{r4, lr}
 800985a:	db11      	blt.n	8009880 <__any_on+0x32>
 800985c:	dd0a      	ble.n	8009874 <__any_on+0x26>
 800985e:	f011 011f 	ands.w	r1, r1, #31
 8009862:	d007      	beq.n	8009874 <__any_on+0x26>
 8009864:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009868:	fa24 f001 	lsr.w	r0, r4, r1
 800986c:	fa00 f101 	lsl.w	r1, r0, r1
 8009870:	428c      	cmp	r4, r1
 8009872:	d10b      	bne.n	800988c <__any_on+0x3e>
 8009874:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009878:	4293      	cmp	r3, r2
 800987a:	d803      	bhi.n	8009884 <__any_on+0x36>
 800987c:	2000      	movs	r0, #0
 800987e:	bd10      	pop	{r4, pc}
 8009880:	4603      	mov	r3, r0
 8009882:	e7f7      	b.n	8009874 <__any_on+0x26>
 8009884:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009888:	2900      	cmp	r1, #0
 800988a:	d0f5      	beq.n	8009878 <__any_on+0x2a>
 800988c:	2001      	movs	r0, #1
 800988e:	e7f6      	b.n	800987e <__any_on+0x30>

08009890 <__ascii_wctomb>:
 8009890:	4603      	mov	r3, r0
 8009892:	4608      	mov	r0, r1
 8009894:	b141      	cbz	r1, 80098a8 <__ascii_wctomb+0x18>
 8009896:	2aff      	cmp	r2, #255	@ 0xff
 8009898:	d904      	bls.n	80098a4 <__ascii_wctomb+0x14>
 800989a:	228a      	movs	r2, #138	@ 0x8a
 800989c:	f04f 30ff 	mov.w	r0, #4294967295
 80098a0:	601a      	str	r2, [r3, #0]
 80098a2:	4770      	bx	lr
 80098a4:	2001      	movs	r0, #1
 80098a6:	700a      	strb	r2, [r1, #0]
 80098a8:	4770      	bx	lr

080098aa <__ssputs_r>:
 80098aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ae:	461f      	mov	r7, r3
 80098b0:	688e      	ldr	r6, [r1, #8]
 80098b2:	4682      	mov	sl, r0
 80098b4:	42be      	cmp	r6, r7
 80098b6:	460c      	mov	r4, r1
 80098b8:	4690      	mov	r8, r2
 80098ba:	680b      	ldr	r3, [r1, #0]
 80098bc:	d82d      	bhi.n	800991a <__ssputs_r+0x70>
 80098be:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098c2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80098c6:	d026      	beq.n	8009916 <__ssputs_r+0x6c>
 80098c8:	6965      	ldr	r5, [r4, #20]
 80098ca:	6909      	ldr	r1, [r1, #16]
 80098cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098d0:	eba3 0901 	sub.w	r9, r3, r1
 80098d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098d8:	1c7b      	adds	r3, r7, #1
 80098da:	444b      	add	r3, r9
 80098dc:	106d      	asrs	r5, r5, #1
 80098de:	429d      	cmp	r5, r3
 80098e0:	bf38      	it	cc
 80098e2:	461d      	movcc	r5, r3
 80098e4:	0553      	lsls	r3, r2, #21
 80098e6:	d527      	bpl.n	8009938 <__ssputs_r+0x8e>
 80098e8:	4629      	mov	r1, r5
 80098ea:	f7ff fa8d 	bl	8008e08 <_malloc_r>
 80098ee:	4606      	mov	r6, r0
 80098f0:	b360      	cbz	r0, 800994c <__ssputs_r+0xa2>
 80098f2:	464a      	mov	r2, r9
 80098f4:	6921      	ldr	r1, [r4, #16]
 80098f6:	f7fe f854 	bl	80079a2 <memcpy>
 80098fa:	89a3      	ldrh	r3, [r4, #12]
 80098fc:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009904:	81a3      	strh	r3, [r4, #12]
 8009906:	6126      	str	r6, [r4, #16]
 8009908:	444e      	add	r6, r9
 800990a:	6026      	str	r6, [r4, #0]
 800990c:	463e      	mov	r6, r7
 800990e:	6165      	str	r5, [r4, #20]
 8009910:	eba5 0509 	sub.w	r5, r5, r9
 8009914:	60a5      	str	r5, [r4, #8]
 8009916:	42be      	cmp	r6, r7
 8009918:	d900      	bls.n	800991c <__ssputs_r+0x72>
 800991a:	463e      	mov	r6, r7
 800991c:	4632      	mov	r2, r6
 800991e:	4641      	mov	r1, r8
 8009920:	6820      	ldr	r0, [r4, #0]
 8009922:	f000 ff2f 	bl	800a784 <memmove>
 8009926:	2000      	movs	r0, #0
 8009928:	68a3      	ldr	r3, [r4, #8]
 800992a:	1b9b      	subs	r3, r3, r6
 800992c:	60a3      	str	r3, [r4, #8]
 800992e:	6823      	ldr	r3, [r4, #0]
 8009930:	4433      	add	r3, r6
 8009932:	6023      	str	r3, [r4, #0]
 8009934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009938:	462a      	mov	r2, r5
 800993a:	f000 ff68 	bl	800a80e <_realloc_r>
 800993e:	4606      	mov	r6, r0
 8009940:	2800      	cmp	r0, #0
 8009942:	d1e0      	bne.n	8009906 <__ssputs_r+0x5c>
 8009944:	4650      	mov	r0, sl
 8009946:	6921      	ldr	r1, [r4, #16]
 8009948:	f7fe feb2 	bl	80086b0 <_free_r>
 800994c:	230c      	movs	r3, #12
 800994e:	f8ca 3000 	str.w	r3, [sl]
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	f04f 30ff 	mov.w	r0, #4294967295
 8009958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800995c:	81a3      	strh	r3, [r4, #12]
 800995e:	e7e9      	b.n	8009934 <__ssputs_r+0x8a>

08009960 <_svfiprintf_r>:
 8009960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009964:	4698      	mov	r8, r3
 8009966:	898b      	ldrh	r3, [r1, #12]
 8009968:	4607      	mov	r7, r0
 800996a:	061b      	lsls	r3, r3, #24
 800996c:	460d      	mov	r5, r1
 800996e:	4614      	mov	r4, r2
 8009970:	b09d      	sub	sp, #116	@ 0x74
 8009972:	d510      	bpl.n	8009996 <_svfiprintf_r+0x36>
 8009974:	690b      	ldr	r3, [r1, #16]
 8009976:	b973      	cbnz	r3, 8009996 <_svfiprintf_r+0x36>
 8009978:	2140      	movs	r1, #64	@ 0x40
 800997a:	f7ff fa45 	bl	8008e08 <_malloc_r>
 800997e:	6028      	str	r0, [r5, #0]
 8009980:	6128      	str	r0, [r5, #16]
 8009982:	b930      	cbnz	r0, 8009992 <_svfiprintf_r+0x32>
 8009984:	230c      	movs	r3, #12
 8009986:	603b      	str	r3, [r7, #0]
 8009988:	f04f 30ff 	mov.w	r0, #4294967295
 800998c:	b01d      	add	sp, #116	@ 0x74
 800998e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009992:	2340      	movs	r3, #64	@ 0x40
 8009994:	616b      	str	r3, [r5, #20]
 8009996:	2300      	movs	r3, #0
 8009998:	9309      	str	r3, [sp, #36]	@ 0x24
 800999a:	2320      	movs	r3, #32
 800999c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099a0:	2330      	movs	r3, #48	@ 0x30
 80099a2:	f04f 0901 	mov.w	r9, #1
 80099a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80099aa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009b44 <_svfiprintf_r+0x1e4>
 80099ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099b2:	4623      	mov	r3, r4
 80099b4:	469a      	mov	sl, r3
 80099b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ba:	b10a      	cbz	r2, 80099c0 <_svfiprintf_r+0x60>
 80099bc:	2a25      	cmp	r2, #37	@ 0x25
 80099be:	d1f9      	bne.n	80099b4 <_svfiprintf_r+0x54>
 80099c0:	ebba 0b04 	subs.w	fp, sl, r4
 80099c4:	d00b      	beq.n	80099de <_svfiprintf_r+0x7e>
 80099c6:	465b      	mov	r3, fp
 80099c8:	4622      	mov	r2, r4
 80099ca:	4629      	mov	r1, r5
 80099cc:	4638      	mov	r0, r7
 80099ce:	f7ff ff6c 	bl	80098aa <__ssputs_r>
 80099d2:	3001      	adds	r0, #1
 80099d4:	f000 80a7 	beq.w	8009b26 <_svfiprintf_r+0x1c6>
 80099d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099da:	445a      	add	r2, fp
 80099dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80099de:	f89a 3000 	ldrb.w	r3, [sl]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f000 809f 	beq.w	8009b26 <_svfiprintf_r+0x1c6>
 80099e8:	2300      	movs	r3, #0
 80099ea:	f04f 32ff 	mov.w	r2, #4294967295
 80099ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099f2:	f10a 0a01 	add.w	sl, sl, #1
 80099f6:	9304      	str	r3, [sp, #16]
 80099f8:	9307      	str	r3, [sp, #28]
 80099fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a00:	4654      	mov	r4, sl
 8009a02:	2205      	movs	r2, #5
 8009a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a08:	484e      	ldr	r0, [pc, #312]	@ (8009b44 <_svfiprintf_r+0x1e4>)
 8009a0a:	f7fd ffbc 	bl	8007986 <memchr>
 8009a0e:	9a04      	ldr	r2, [sp, #16]
 8009a10:	b9d8      	cbnz	r0, 8009a4a <_svfiprintf_r+0xea>
 8009a12:	06d0      	lsls	r0, r2, #27
 8009a14:	bf44      	itt	mi
 8009a16:	2320      	movmi	r3, #32
 8009a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a1c:	0711      	lsls	r1, r2, #28
 8009a1e:	bf44      	itt	mi
 8009a20:	232b      	movmi	r3, #43	@ 0x2b
 8009a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a26:	f89a 3000 	ldrb.w	r3, [sl]
 8009a2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a2c:	d015      	beq.n	8009a5a <_svfiprintf_r+0xfa>
 8009a2e:	4654      	mov	r4, sl
 8009a30:	2000      	movs	r0, #0
 8009a32:	f04f 0c0a 	mov.w	ip, #10
 8009a36:	9a07      	ldr	r2, [sp, #28]
 8009a38:	4621      	mov	r1, r4
 8009a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a3e:	3b30      	subs	r3, #48	@ 0x30
 8009a40:	2b09      	cmp	r3, #9
 8009a42:	d94b      	bls.n	8009adc <_svfiprintf_r+0x17c>
 8009a44:	b1b0      	cbz	r0, 8009a74 <_svfiprintf_r+0x114>
 8009a46:	9207      	str	r2, [sp, #28]
 8009a48:	e014      	b.n	8009a74 <_svfiprintf_r+0x114>
 8009a4a:	eba0 0308 	sub.w	r3, r0, r8
 8009a4e:	fa09 f303 	lsl.w	r3, r9, r3
 8009a52:	4313      	orrs	r3, r2
 8009a54:	46a2      	mov	sl, r4
 8009a56:	9304      	str	r3, [sp, #16]
 8009a58:	e7d2      	b.n	8009a00 <_svfiprintf_r+0xa0>
 8009a5a:	9b03      	ldr	r3, [sp, #12]
 8009a5c:	1d19      	adds	r1, r3, #4
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	9103      	str	r1, [sp, #12]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	bfbb      	ittet	lt
 8009a66:	425b      	neglt	r3, r3
 8009a68:	f042 0202 	orrlt.w	r2, r2, #2
 8009a6c:	9307      	strge	r3, [sp, #28]
 8009a6e:	9307      	strlt	r3, [sp, #28]
 8009a70:	bfb8      	it	lt
 8009a72:	9204      	strlt	r2, [sp, #16]
 8009a74:	7823      	ldrb	r3, [r4, #0]
 8009a76:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a78:	d10a      	bne.n	8009a90 <_svfiprintf_r+0x130>
 8009a7a:	7863      	ldrb	r3, [r4, #1]
 8009a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a7e:	d132      	bne.n	8009ae6 <_svfiprintf_r+0x186>
 8009a80:	9b03      	ldr	r3, [sp, #12]
 8009a82:	3402      	adds	r4, #2
 8009a84:	1d1a      	adds	r2, r3, #4
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	9203      	str	r2, [sp, #12]
 8009a8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a8e:	9305      	str	r3, [sp, #20]
 8009a90:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009b48 <_svfiprintf_r+0x1e8>
 8009a94:	2203      	movs	r2, #3
 8009a96:	4650      	mov	r0, sl
 8009a98:	7821      	ldrb	r1, [r4, #0]
 8009a9a:	f7fd ff74 	bl	8007986 <memchr>
 8009a9e:	b138      	cbz	r0, 8009ab0 <_svfiprintf_r+0x150>
 8009aa0:	2240      	movs	r2, #64	@ 0x40
 8009aa2:	9b04      	ldr	r3, [sp, #16]
 8009aa4:	eba0 000a 	sub.w	r0, r0, sl
 8009aa8:	4082      	lsls	r2, r0
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	3401      	adds	r4, #1
 8009aae:	9304      	str	r3, [sp, #16]
 8009ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ab4:	2206      	movs	r2, #6
 8009ab6:	4825      	ldr	r0, [pc, #148]	@ (8009b4c <_svfiprintf_r+0x1ec>)
 8009ab8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009abc:	f7fd ff63 	bl	8007986 <memchr>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	d036      	beq.n	8009b32 <_svfiprintf_r+0x1d2>
 8009ac4:	4b22      	ldr	r3, [pc, #136]	@ (8009b50 <_svfiprintf_r+0x1f0>)
 8009ac6:	bb1b      	cbnz	r3, 8009b10 <_svfiprintf_r+0x1b0>
 8009ac8:	9b03      	ldr	r3, [sp, #12]
 8009aca:	3307      	adds	r3, #7
 8009acc:	f023 0307 	bic.w	r3, r3, #7
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	9303      	str	r3, [sp, #12]
 8009ad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ad6:	4433      	add	r3, r6
 8009ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ada:	e76a      	b.n	80099b2 <_svfiprintf_r+0x52>
 8009adc:	460c      	mov	r4, r1
 8009ade:	2001      	movs	r0, #1
 8009ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ae4:	e7a8      	b.n	8009a38 <_svfiprintf_r+0xd8>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f04f 0c0a 	mov.w	ip, #10
 8009aec:	4619      	mov	r1, r3
 8009aee:	3401      	adds	r4, #1
 8009af0:	9305      	str	r3, [sp, #20]
 8009af2:	4620      	mov	r0, r4
 8009af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009af8:	3a30      	subs	r2, #48	@ 0x30
 8009afa:	2a09      	cmp	r2, #9
 8009afc:	d903      	bls.n	8009b06 <_svfiprintf_r+0x1a6>
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d0c6      	beq.n	8009a90 <_svfiprintf_r+0x130>
 8009b02:	9105      	str	r1, [sp, #20]
 8009b04:	e7c4      	b.n	8009a90 <_svfiprintf_r+0x130>
 8009b06:	4604      	mov	r4, r0
 8009b08:	2301      	movs	r3, #1
 8009b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b0e:	e7f0      	b.n	8009af2 <_svfiprintf_r+0x192>
 8009b10:	ab03      	add	r3, sp, #12
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	462a      	mov	r2, r5
 8009b16:	4638      	mov	r0, r7
 8009b18:	4b0e      	ldr	r3, [pc, #56]	@ (8009b54 <_svfiprintf_r+0x1f4>)
 8009b1a:	a904      	add	r1, sp, #16
 8009b1c:	f7fc fea2 	bl	8006864 <_printf_float>
 8009b20:	1c42      	adds	r2, r0, #1
 8009b22:	4606      	mov	r6, r0
 8009b24:	d1d6      	bne.n	8009ad4 <_svfiprintf_r+0x174>
 8009b26:	89ab      	ldrh	r3, [r5, #12]
 8009b28:	065b      	lsls	r3, r3, #25
 8009b2a:	f53f af2d 	bmi.w	8009988 <_svfiprintf_r+0x28>
 8009b2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b30:	e72c      	b.n	800998c <_svfiprintf_r+0x2c>
 8009b32:	ab03      	add	r3, sp, #12
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	462a      	mov	r2, r5
 8009b38:	4638      	mov	r0, r7
 8009b3a:	4b06      	ldr	r3, [pc, #24]	@ (8009b54 <_svfiprintf_r+0x1f4>)
 8009b3c:	a904      	add	r1, sp, #16
 8009b3e:	f7fd f92f 	bl	8006da0 <_printf_i>
 8009b42:	e7ed      	b.n	8009b20 <_svfiprintf_r+0x1c0>
 8009b44:	0800b7b0 	.word	0x0800b7b0
 8009b48:	0800b7b6 	.word	0x0800b7b6
 8009b4c:	0800b7ba 	.word	0x0800b7ba
 8009b50:	08006865 	.word	0x08006865
 8009b54:	080098ab 	.word	0x080098ab

08009b58 <_sungetc_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	1c4b      	adds	r3, r1, #1
 8009b5c:	4614      	mov	r4, r2
 8009b5e:	d103      	bne.n	8009b68 <_sungetc_r+0x10>
 8009b60:	f04f 35ff 	mov.w	r5, #4294967295
 8009b64:	4628      	mov	r0, r5
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	8993      	ldrh	r3, [r2, #12]
 8009b6a:	b2cd      	uxtb	r5, r1
 8009b6c:	f023 0320 	bic.w	r3, r3, #32
 8009b70:	8193      	strh	r3, [r2, #12]
 8009b72:	6853      	ldr	r3, [r2, #4]
 8009b74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009b76:	b18a      	cbz	r2, 8009b9c <_sungetc_r+0x44>
 8009b78:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	dd08      	ble.n	8009b90 <_sungetc_r+0x38>
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	1e5a      	subs	r2, r3, #1
 8009b82:	6022      	str	r2, [r4, #0]
 8009b84:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009b88:	6863      	ldr	r3, [r4, #4]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	6063      	str	r3, [r4, #4]
 8009b8e:	e7e9      	b.n	8009b64 <_sungetc_r+0xc>
 8009b90:	4621      	mov	r1, r4
 8009b92:	f000 fd2a 	bl	800a5ea <__submore>
 8009b96:	2800      	cmp	r0, #0
 8009b98:	d0f1      	beq.n	8009b7e <_sungetc_r+0x26>
 8009b9a:	e7e1      	b.n	8009b60 <_sungetc_r+0x8>
 8009b9c:	6921      	ldr	r1, [r4, #16]
 8009b9e:	6822      	ldr	r2, [r4, #0]
 8009ba0:	b141      	cbz	r1, 8009bb4 <_sungetc_r+0x5c>
 8009ba2:	4291      	cmp	r1, r2
 8009ba4:	d206      	bcs.n	8009bb4 <_sungetc_r+0x5c>
 8009ba6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009baa:	42a9      	cmp	r1, r5
 8009bac:	d102      	bne.n	8009bb4 <_sungetc_r+0x5c>
 8009bae:	3a01      	subs	r2, #1
 8009bb0:	6022      	str	r2, [r4, #0]
 8009bb2:	e7ea      	b.n	8009b8a <_sungetc_r+0x32>
 8009bb4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009bb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bbe:	2303      	movs	r3, #3
 8009bc0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009bc2:	4623      	mov	r3, r4
 8009bc4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009bc8:	6023      	str	r3, [r4, #0]
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e7de      	b.n	8009b8c <_sungetc_r+0x34>

08009bce <__ssrefill_r>:
 8009bce:	b510      	push	{r4, lr}
 8009bd0:	460c      	mov	r4, r1
 8009bd2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009bd4:	b169      	cbz	r1, 8009bf2 <__ssrefill_r+0x24>
 8009bd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bda:	4299      	cmp	r1, r3
 8009bdc:	d001      	beq.n	8009be2 <__ssrefill_r+0x14>
 8009bde:	f7fe fd67 	bl	80086b0 <_free_r>
 8009be2:	2000      	movs	r0, #0
 8009be4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009be6:	6360      	str	r0, [r4, #52]	@ 0x34
 8009be8:	6063      	str	r3, [r4, #4]
 8009bea:	b113      	cbz	r3, 8009bf2 <__ssrefill_r+0x24>
 8009bec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009bee:	6023      	str	r3, [r4, #0]
 8009bf0:	bd10      	pop	{r4, pc}
 8009bf2:	6923      	ldr	r3, [r4, #16]
 8009bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	6063      	str	r3, [r4, #4]
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	f043 0320 	orr.w	r3, r3, #32
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	e7f3      	b.n	8009bf0 <__ssrefill_r+0x22>

08009c08 <__ssvfiscanf_r>:
 8009c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c0c:	460c      	mov	r4, r1
 8009c0e:	2100      	movs	r1, #0
 8009c10:	4606      	mov	r6, r0
 8009c12:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009c16:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009c1a:	49aa      	ldr	r1, [pc, #680]	@ (8009ec4 <__ssvfiscanf_r+0x2bc>)
 8009c1c:	f10d 0804 	add.w	r8, sp, #4
 8009c20:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009c22:	49a9      	ldr	r1, [pc, #676]	@ (8009ec8 <__ssvfiscanf_r+0x2c0>)
 8009c24:	4fa9      	ldr	r7, [pc, #676]	@ (8009ecc <__ssvfiscanf_r+0x2c4>)
 8009c26:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009c2a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	7813      	ldrb	r3, [r2, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 8159 	beq.w	8009ee8 <__ssvfiscanf_r+0x2e0>
 8009c36:	5cf9      	ldrb	r1, [r7, r3]
 8009c38:	1c55      	adds	r5, r2, #1
 8009c3a:	f011 0108 	ands.w	r1, r1, #8
 8009c3e:	d019      	beq.n	8009c74 <__ssvfiscanf_r+0x6c>
 8009c40:	6863      	ldr	r3, [r4, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	dd0f      	ble.n	8009c66 <__ssvfiscanf_r+0x5e>
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	781a      	ldrb	r2, [r3, #0]
 8009c4a:	5cba      	ldrb	r2, [r7, r2]
 8009c4c:	0712      	lsls	r2, r2, #28
 8009c4e:	d401      	bmi.n	8009c54 <__ssvfiscanf_r+0x4c>
 8009c50:	462a      	mov	r2, r5
 8009c52:	e7ec      	b.n	8009c2e <__ssvfiscanf_r+0x26>
 8009c54:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009c56:	3301      	adds	r3, #1
 8009c58:	3201      	adds	r2, #1
 8009c5a:	9245      	str	r2, [sp, #276]	@ 0x114
 8009c5c:	6862      	ldr	r2, [r4, #4]
 8009c5e:	6023      	str	r3, [r4, #0]
 8009c60:	3a01      	subs	r2, #1
 8009c62:	6062      	str	r2, [r4, #4]
 8009c64:	e7ec      	b.n	8009c40 <__ssvfiscanf_r+0x38>
 8009c66:	4621      	mov	r1, r4
 8009c68:	4630      	mov	r0, r6
 8009c6a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009c6c:	4798      	blx	r3
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d0e9      	beq.n	8009c46 <__ssvfiscanf_r+0x3e>
 8009c72:	e7ed      	b.n	8009c50 <__ssvfiscanf_r+0x48>
 8009c74:	2b25      	cmp	r3, #37	@ 0x25
 8009c76:	d012      	beq.n	8009c9e <__ssvfiscanf_r+0x96>
 8009c78:	4699      	mov	r9, r3
 8009c7a:	6863      	ldr	r3, [r4, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f340 8094 	ble.w	8009daa <__ssvfiscanf_r+0x1a2>
 8009c82:	6822      	ldr	r2, [r4, #0]
 8009c84:	7813      	ldrb	r3, [r2, #0]
 8009c86:	454b      	cmp	r3, r9
 8009c88:	f040 812e 	bne.w	8009ee8 <__ssvfiscanf_r+0x2e0>
 8009c8c:	6863      	ldr	r3, [r4, #4]
 8009c8e:	3201      	adds	r2, #1
 8009c90:	3b01      	subs	r3, #1
 8009c92:	6063      	str	r3, [r4, #4]
 8009c94:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009c96:	6022      	str	r2, [r4, #0]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	9345      	str	r3, [sp, #276]	@ 0x114
 8009c9c:	e7d8      	b.n	8009c50 <__ssvfiscanf_r+0x48>
 8009c9e:	9141      	str	r1, [sp, #260]	@ 0x104
 8009ca0:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009ca2:	7853      	ldrb	r3, [r2, #1]
 8009ca4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ca6:	bf04      	itt	eq
 8009ca8:	2310      	moveq	r3, #16
 8009caa:	1c95      	addeq	r5, r2, #2
 8009cac:	f04f 020a 	mov.w	r2, #10
 8009cb0:	bf08      	it	eq
 8009cb2:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009cb4:	46a9      	mov	r9, r5
 8009cb6:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009cba:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009cbe:	2b09      	cmp	r3, #9
 8009cc0:	d91e      	bls.n	8009d00 <__ssvfiscanf_r+0xf8>
 8009cc2:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8009ed0 <__ssvfiscanf_r+0x2c8>
 8009cc6:	2203      	movs	r2, #3
 8009cc8:	4650      	mov	r0, sl
 8009cca:	f7fd fe5c 	bl	8007986 <memchr>
 8009cce:	b138      	cbz	r0, 8009ce0 <__ssvfiscanf_r+0xd8>
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	464d      	mov	r5, r9
 8009cd4:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009cd6:	eba0 000a 	sub.w	r0, r0, sl
 8009cda:	4083      	lsls	r3, r0
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	9341      	str	r3, [sp, #260]	@ 0x104
 8009ce0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ce4:	2b78      	cmp	r3, #120	@ 0x78
 8009ce6:	d806      	bhi.n	8009cf6 <__ssvfiscanf_r+0xee>
 8009ce8:	2b57      	cmp	r3, #87	@ 0x57
 8009cea:	d810      	bhi.n	8009d0e <__ssvfiscanf_r+0x106>
 8009cec:	2b25      	cmp	r3, #37	@ 0x25
 8009cee:	d0c3      	beq.n	8009c78 <__ssvfiscanf_r+0x70>
 8009cf0:	d856      	bhi.n	8009da0 <__ssvfiscanf_r+0x198>
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d064      	beq.n	8009dc0 <__ssvfiscanf_r+0x1b8>
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009cfa:	230a      	movs	r3, #10
 8009cfc:	9342      	str	r3, [sp, #264]	@ 0x108
 8009cfe:	e077      	b.n	8009df0 <__ssvfiscanf_r+0x1e8>
 8009d00:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009d02:	464d      	mov	r5, r9
 8009d04:	fb02 1103 	mla	r1, r2, r3, r1
 8009d08:	3930      	subs	r1, #48	@ 0x30
 8009d0a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009d0c:	e7d2      	b.n	8009cb4 <__ssvfiscanf_r+0xac>
 8009d0e:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009d12:	2a20      	cmp	r2, #32
 8009d14:	d8ef      	bhi.n	8009cf6 <__ssvfiscanf_r+0xee>
 8009d16:	a101      	add	r1, pc, #4	@ (adr r1, 8009d1c <__ssvfiscanf_r+0x114>)
 8009d18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d1c:	08009dcf 	.word	0x08009dcf
 8009d20:	08009cf7 	.word	0x08009cf7
 8009d24:	08009cf7 	.word	0x08009cf7
 8009d28:	08009e29 	.word	0x08009e29
 8009d2c:	08009cf7 	.word	0x08009cf7
 8009d30:	08009cf7 	.word	0x08009cf7
 8009d34:	08009cf7 	.word	0x08009cf7
 8009d38:	08009cf7 	.word	0x08009cf7
 8009d3c:	08009cf7 	.word	0x08009cf7
 8009d40:	08009cf7 	.word	0x08009cf7
 8009d44:	08009cf7 	.word	0x08009cf7
 8009d48:	08009e3f 	.word	0x08009e3f
 8009d4c:	08009e25 	.word	0x08009e25
 8009d50:	08009da7 	.word	0x08009da7
 8009d54:	08009da7 	.word	0x08009da7
 8009d58:	08009da7 	.word	0x08009da7
 8009d5c:	08009cf7 	.word	0x08009cf7
 8009d60:	08009de1 	.word	0x08009de1
 8009d64:	08009cf7 	.word	0x08009cf7
 8009d68:	08009cf7 	.word	0x08009cf7
 8009d6c:	08009cf7 	.word	0x08009cf7
 8009d70:	08009cf7 	.word	0x08009cf7
 8009d74:	08009e4f 	.word	0x08009e4f
 8009d78:	08009de9 	.word	0x08009de9
 8009d7c:	08009dc7 	.word	0x08009dc7
 8009d80:	08009cf7 	.word	0x08009cf7
 8009d84:	08009cf7 	.word	0x08009cf7
 8009d88:	08009e4b 	.word	0x08009e4b
 8009d8c:	08009cf7 	.word	0x08009cf7
 8009d90:	08009e25 	.word	0x08009e25
 8009d94:	08009cf7 	.word	0x08009cf7
 8009d98:	08009cf7 	.word	0x08009cf7
 8009d9c:	08009dcf 	.word	0x08009dcf
 8009da0:	3b45      	subs	r3, #69	@ 0x45
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d8a7      	bhi.n	8009cf6 <__ssvfiscanf_r+0xee>
 8009da6:	2305      	movs	r3, #5
 8009da8:	e021      	b.n	8009dee <__ssvfiscanf_r+0x1e6>
 8009daa:	4621      	mov	r1, r4
 8009dac:	4630      	mov	r0, r6
 8009dae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009db0:	4798      	blx	r3
 8009db2:	2800      	cmp	r0, #0
 8009db4:	f43f af65 	beq.w	8009c82 <__ssvfiscanf_r+0x7a>
 8009db8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	f040 808c 	bne.w	8009ed8 <__ssvfiscanf_r+0x2d0>
 8009dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc4:	e08c      	b.n	8009ee0 <__ssvfiscanf_r+0x2d8>
 8009dc6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009dc8:	f042 0220 	orr.w	r2, r2, #32
 8009dcc:	9241      	str	r2, [sp, #260]	@ 0x104
 8009dce:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009dd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009dd4:	9241      	str	r2, [sp, #260]	@ 0x104
 8009dd6:	2210      	movs	r2, #16
 8009dd8:	2b6e      	cmp	r3, #110	@ 0x6e
 8009dda:	9242      	str	r2, [sp, #264]	@ 0x108
 8009ddc:	d902      	bls.n	8009de4 <__ssvfiscanf_r+0x1dc>
 8009dde:	e005      	b.n	8009dec <__ssvfiscanf_r+0x1e4>
 8009de0:	2300      	movs	r3, #0
 8009de2:	9342      	str	r3, [sp, #264]	@ 0x108
 8009de4:	2303      	movs	r3, #3
 8009de6:	e002      	b.n	8009dee <__ssvfiscanf_r+0x1e6>
 8009de8:	2308      	movs	r3, #8
 8009dea:	9342      	str	r3, [sp, #264]	@ 0x108
 8009dec:	2304      	movs	r3, #4
 8009dee:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009df0:	6863      	ldr	r3, [r4, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	dd39      	ble.n	8009e6a <__ssvfiscanf_r+0x262>
 8009df6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009df8:	0659      	lsls	r1, r3, #25
 8009dfa:	d404      	bmi.n	8009e06 <__ssvfiscanf_r+0x1fe>
 8009dfc:	6823      	ldr	r3, [r4, #0]
 8009dfe:	781a      	ldrb	r2, [r3, #0]
 8009e00:	5cba      	ldrb	r2, [r7, r2]
 8009e02:	0712      	lsls	r2, r2, #28
 8009e04:	d438      	bmi.n	8009e78 <__ssvfiscanf_r+0x270>
 8009e06:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	dc47      	bgt.n	8009e9c <__ssvfiscanf_r+0x294>
 8009e0c:	466b      	mov	r3, sp
 8009e0e:	4622      	mov	r2, r4
 8009e10:	4630      	mov	r0, r6
 8009e12:	a941      	add	r1, sp, #260	@ 0x104
 8009e14:	f000 f9aa 	bl	800a16c <_scanf_chars>
 8009e18:	2801      	cmp	r0, #1
 8009e1a:	d065      	beq.n	8009ee8 <__ssvfiscanf_r+0x2e0>
 8009e1c:	2802      	cmp	r0, #2
 8009e1e:	f47f af17 	bne.w	8009c50 <__ssvfiscanf_r+0x48>
 8009e22:	e7c9      	b.n	8009db8 <__ssvfiscanf_r+0x1b0>
 8009e24:	220a      	movs	r2, #10
 8009e26:	e7d7      	b.n	8009dd8 <__ssvfiscanf_r+0x1d0>
 8009e28:	4629      	mov	r1, r5
 8009e2a:	4640      	mov	r0, r8
 8009e2c:	f000 fba4 	bl	800a578 <__sccl>
 8009e30:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009e32:	4605      	mov	r5, r0
 8009e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e38:	9341      	str	r3, [sp, #260]	@ 0x104
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e7d7      	b.n	8009dee <__ssvfiscanf_r+0x1e6>
 8009e3e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e44:	9341      	str	r3, [sp, #260]	@ 0x104
 8009e46:	2300      	movs	r3, #0
 8009e48:	e7d1      	b.n	8009dee <__ssvfiscanf_r+0x1e6>
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	e7cf      	b.n	8009dee <__ssvfiscanf_r+0x1e6>
 8009e4e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009e50:	06c3      	lsls	r3, r0, #27
 8009e52:	f53f aefd 	bmi.w	8009c50 <__ssvfiscanf_r+0x48>
 8009e56:	9b00      	ldr	r3, [sp, #0]
 8009e58:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009e5a:	1d19      	adds	r1, r3, #4
 8009e5c:	9100      	str	r1, [sp, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	07c0      	lsls	r0, r0, #31
 8009e62:	bf4c      	ite	mi
 8009e64:	801a      	strhmi	r2, [r3, #0]
 8009e66:	601a      	strpl	r2, [r3, #0]
 8009e68:	e6f2      	b.n	8009c50 <__ssvfiscanf_r+0x48>
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	4630      	mov	r0, r6
 8009e6e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009e70:	4798      	blx	r3
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d0bf      	beq.n	8009df6 <__ssvfiscanf_r+0x1ee>
 8009e76:	e79f      	b.n	8009db8 <__ssvfiscanf_r+0x1b0>
 8009e78:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009e7a:	3201      	adds	r2, #1
 8009e7c:	9245      	str	r2, [sp, #276]	@ 0x114
 8009e7e:	6862      	ldr	r2, [r4, #4]
 8009e80:	3a01      	subs	r2, #1
 8009e82:	2a00      	cmp	r2, #0
 8009e84:	6062      	str	r2, [r4, #4]
 8009e86:	dd02      	ble.n	8009e8e <__ssvfiscanf_r+0x286>
 8009e88:	3301      	adds	r3, #1
 8009e8a:	6023      	str	r3, [r4, #0]
 8009e8c:	e7b6      	b.n	8009dfc <__ssvfiscanf_r+0x1f4>
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4630      	mov	r0, r6
 8009e92:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009e94:	4798      	blx	r3
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d0b0      	beq.n	8009dfc <__ssvfiscanf_r+0x1f4>
 8009e9a:	e78d      	b.n	8009db8 <__ssvfiscanf_r+0x1b0>
 8009e9c:	2b04      	cmp	r3, #4
 8009e9e:	dc06      	bgt.n	8009eae <__ssvfiscanf_r+0x2a6>
 8009ea0:	466b      	mov	r3, sp
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	a941      	add	r1, sp, #260	@ 0x104
 8009ea8:	f000 f9ba 	bl	800a220 <_scanf_i>
 8009eac:	e7b4      	b.n	8009e18 <__ssvfiscanf_r+0x210>
 8009eae:	4b09      	ldr	r3, [pc, #36]	@ (8009ed4 <__ssvfiscanf_r+0x2cc>)
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f43f aecd 	beq.w	8009c50 <__ssvfiscanf_r+0x48>
 8009eb6:	466b      	mov	r3, sp
 8009eb8:	4622      	mov	r2, r4
 8009eba:	4630      	mov	r0, r6
 8009ebc:	a941      	add	r1, sp, #260	@ 0x104
 8009ebe:	f7fd f88f 	bl	8006fe0 <_scanf_float>
 8009ec2:	e7a9      	b.n	8009e18 <__ssvfiscanf_r+0x210>
 8009ec4:	08009b59 	.word	0x08009b59
 8009ec8:	08009bcf 	.word	0x08009bcf
 8009ecc:	0800b399 	.word	0x0800b399
 8009ed0:	0800b7b6 	.word	0x0800b7b6
 8009ed4:	08006fe1 	.word	0x08006fe1
 8009ed8:	89a3      	ldrh	r3, [r4, #12]
 8009eda:	065b      	lsls	r3, r3, #25
 8009edc:	f53f af70 	bmi.w	8009dc0 <__ssvfiscanf_r+0x1b8>
 8009ee0:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8009ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ee8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009eea:	e7f9      	b.n	8009ee0 <__ssvfiscanf_r+0x2d8>

08009eec <__sfputc_r>:
 8009eec:	6893      	ldr	r3, [r2, #8]
 8009eee:	b410      	push	{r4}
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	6093      	str	r3, [r2, #8]
 8009ef6:	da07      	bge.n	8009f08 <__sfputc_r+0x1c>
 8009ef8:	6994      	ldr	r4, [r2, #24]
 8009efa:	42a3      	cmp	r3, r4
 8009efc:	db01      	blt.n	8009f02 <__sfputc_r+0x16>
 8009efe:	290a      	cmp	r1, #10
 8009f00:	d102      	bne.n	8009f08 <__sfputc_r+0x1c>
 8009f02:	bc10      	pop	{r4}
 8009f04:	f000 bba9 	b.w	800a65a <__swbuf_r>
 8009f08:	6813      	ldr	r3, [r2, #0]
 8009f0a:	1c58      	adds	r0, r3, #1
 8009f0c:	6010      	str	r0, [r2, #0]
 8009f0e:	7019      	strb	r1, [r3, #0]
 8009f10:	4608      	mov	r0, r1
 8009f12:	bc10      	pop	{r4}
 8009f14:	4770      	bx	lr

08009f16 <__sfputs_r>:
 8009f16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f18:	4606      	mov	r6, r0
 8009f1a:	460f      	mov	r7, r1
 8009f1c:	4614      	mov	r4, r2
 8009f1e:	18d5      	adds	r5, r2, r3
 8009f20:	42ac      	cmp	r4, r5
 8009f22:	d101      	bne.n	8009f28 <__sfputs_r+0x12>
 8009f24:	2000      	movs	r0, #0
 8009f26:	e007      	b.n	8009f38 <__sfputs_r+0x22>
 8009f28:	463a      	mov	r2, r7
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f30:	f7ff ffdc 	bl	8009eec <__sfputc_r>
 8009f34:	1c43      	adds	r3, r0, #1
 8009f36:	d1f3      	bne.n	8009f20 <__sfputs_r+0xa>
 8009f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f3c <_vfiprintf_r>:
 8009f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f40:	460d      	mov	r5, r1
 8009f42:	4614      	mov	r4, r2
 8009f44:	4698      	mov	r8, r3
 8009f46:	4606      	mov	r6, r0
 8009f48:	b09d      	sub	sp, #116	@ 0x74
 8009f4a:	b118      	cbz	r0, 8009f54 <_vfiprintf_r+0x18>
 8009f4c:	6a03      	ldr	r3, [r0, #32]
 8009f4e:	b90b      	cbnz	r3, 8009f54 <_vfiprintf_r+0x18>
 8009f50:	f7fd fae2 	bl	8007518 <__sinit>
 8009f54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f56:	07d9      	lsls	r1, r3, #31
 8009f58:	d405      	bmi.n	8009f66 <_vfiprintf_r+0x2a>
 8009f5a:	89ab      	ldrh	r3, [r5, #12]
 8009f5c:	059a      	lsls	r2, r3, #22
 8009f5e:	d402      	bmi.n	8009f66 <_vfiprintf_r+0x2a>
 8009f60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f62:	f7fd fd06 	bl	8007972 <__retarget_lock_acquire_recursive>
 8009f66:	89ab      	ldrh	r3, [r5, #12]
 8009f68:	071b      	lsls	r3, r3, #28
 8009f6a:	d501      	bpl.n	8009f70 <_vfiprintf_r+0x34>
 8009f6c:	692b      	ldr	r3, [r5, #16]
 8009f6e:	b99b      	cbnz	r3, 8009f98 <_vfiprintf_r+0x5c>
 8009f70:	4629      	mov	r1, r5
 8009f72:	4630      	mov	r0, r6
 8009f74:	f000 fbb0 	bl	800a6d8 <__swsetup_r>
 8009f78:	b170      	cbz	r0, 8009f98 <_vfiprintf_r+0x5c>
 8009f7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f7c:	07dc      	lsls	r4, r3, #31
 8009f7e:	d504      	bpl.n	8009f8a <_vfiprintf_r+0x4e>
 8009f80:	f04f 30ff 	mov.w	r0, #4294967295
 8009f84:	b01d      	add	sp, #116	@ 0x74
 8009f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8a:	89ab      	ldrh	r3, [r5, #12]
 8009f8c:	0598      	lsls	r0, r3, #22
 8009f8e:	d4f7      	bmi.n	8009f80 <_vfiprintf_r+0x44>
 8009f90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f92:	f7fd fcef 	bl	8007974 <__retarget_lock_release_recursive>
 8009f96:	e7f3      	b.n	8009f80 <_vfiprintf_r+0x44>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f9c:	2320      	movs	r3, #32
 8009f9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fa2:	2330      	movs	r3, #48	@ 0x30
 8009fa4:	f04f 0901 	mov.w	r9, #1
 8009fa8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a158 <_vfiprintf_r+0x21c>
 8009fb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fb4:	4623      	mov	r3, r4
 8009fb6:	469a      	mov	sl, r3
 8009fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fbc:	b10a      	cbz	r2, 8009fc2 <_vfiprintf_r+0x86>
 8009fbe:	2a25      	cmp	r2, #37	@ 0x25
 8009fc0:	d1f9      	bne.n	8009fb6 <_vfiprintf_r+0x7a>
 8009fc2:	ebba 0b04 	subs.w	fp, sl, r4
 8009fc6:	d00b      	beq.n	8009fe0 <_vfiprintf_r+0xa4>
 8009fc8:	465b      	mov	r3, fp
 8009fca:	4622      	mov	r2, r4
 8009fcc:	4629      	mov	r1, r5
 8009fce:	4630      	mov	r0, r6
 8009fd0:	f7ff ffa1 	bl	8009f16 <__sfputs_r>
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	f000 80a7 	beq.w	800a128 <_vfiprintf_r+0x1ec>
 8009fda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fdc:	445a      	add	r2, fp
 8009fde:	9209      	str	r2, [sp, #36]	@ 0x24
 8009fe0:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f000 809f 	beq.w	800a128 <_vfiprintf_r+0x1ec>
 8009fea:	2300      	movs	r3, #0
 8009fec:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ff4:	f10a 0a01 	add.w	sl, sl, #1
 8009ff8:	9304      	str	r3, [sp, #16]
 8009ffa:	9307      	str	r3, [sp, #28]
 8009ffc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a000:	931a      	str	r3, [sp, #104]	@ 0x68
 800a002:	4654      	mov	r4, sl
 800a004:	2205      	movs	r2, #5
 800a006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a00a:	4853      	ldr	r0, [pc, #332]	@ (800a158 <_vfiprintf_r+0x21c>)
 800a00c:	f7fd fcbb 	bl	8007986 <memchr>
 800a010:	9a04      	ldr	r2, [sp, #16]
 800a012:	b9d8      	cbnz	r0, 800a04c <_vfiprintf_r+0x110>
 800a014:	06d1      	lsls	r1, r2, #27
 800a016:	bf44      	itt	mi
 800a018:	2320      	movmi	r3, #32
 800a01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a01e:	0713      	lsls	r3, r2, #28
 800a020:	bf44      	itt	mi
 800a022:	232b      	movmi	r3, #43	@ 0x2b
 800a024:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a028:	f89a 3000 	ldrb.w	r3, [sl]
 800a02c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a02e:	d015      	beq.n	800a05c <_vfiprintf_r+0x120>
 800a030:	4654      	mov	r4, sl
 800a032:	2000      	movs	r0, #0
 800a034:	f04f 0c0a 	mov.w	ip, #10
 800a038:	9a07      	ldr	r2, [sp, #28]
 800a03a:	4621      	mov	r1, r4
 800a03c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a040:	3b30      	subs	r3, #48	@ 0x30
 800a042:	2b09      	cmp	r3, #9
 800a044:	d94b      	bls.n	800a0de <_vfiprintf_r+0x1a2>
 800a046:	b1b0      	cbz	r0, 800a076 <_vfiprintf_r+0x13a>
 800a048:	9207      	str	r2, [sp, #28]
 800a04a:	e014      	b.n	800a076 <_vfiprintf_r+0x13a>
 800a04c:	eba0 0308 	sub.w	r3, r0, r8
 800a050:	fa09 f303 	lsl.w	r3, r9, r3
 800a054:	4313      	orrs	r3, r2
 800a056:	46a2      	mov	sl, r4
 800a058:	9304      	str	r3, [sp, #16]
 800a05a:	e7d2      	b.n	800a002 <_vfiprintf_r+0xc6>
 800a05c:	9b03      	ldr	r3, [sp, #12]
 800a05e:	1d19      	adds	r1, r3, #4
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	9103      	str	r1, [sp, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	bfbb      	ittet	lt
 800a068:	425b      	neglt	r3, r3
 800a06a:	f042 0202 	orrlt.w	r2, r2, #2
 800a06e:	9307      	strge	r3, [sp, #28]
 800a070:	9307      	strlt	r3, [sp, #28]
 800a072:	bfb8      	it	lt
 800a074:	9204      	strlt	r2, [sp, #16]
 800a076:	7823      	ldrb	r3, [r4, #0]
 800a078:	2b2e      	cmp	r3, #46	@ 0x2e
 800a07a:	d10a      	bne.n	800a092 <_vfiprintf_r+0x156>
 800a07c:	7863      	ldrb	r3, [r4, #1]
 800a07e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a080:	d132      	bne.n	800a0e8 <_vfiprintf_r+0x1ac>
 800a082:	9b03      	ldr	r3, [sp, #12]
 800a084:	3402      	adds	r4, #2
 800a086:	1d1a      	adds	r2, r3, #4
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	9203      	str	r2, [sp, #12]
 800a08c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a090:	9305      	str	r3, [sp, #20]
 800a092:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a15c <_vfiprintf_r+0x220>
 800a096:	2203      	movs	r2, #3
 800a098:	4650      	mov	r0, sl
 800a09a:	7821      	ldrb	r1, [r4, #0]
 800a09c:	f7fd fc73 	bl	8007986 <memchr>
 800a0a0:	b138      	cbz	r0, 800a0b2 <_vfiprintf_r+0x176>
 800a0a2:	2240      	movs	r2, #64	@ 0x40
 800a0a4:	9b04      	ldr	r3, [sp, #16]
 800a0a6:	eba0 000a 	sub.w	r0, r0, sl
 800a0aa:	4082      	lsls	r2, r0
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	3401      	adds	r4, #1
 800a0b0:	9304      	str	r3, [sp, #16]
 800a0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b6:	2206      	movs	r2, #6
 800a0b8:	4829      	ldr	r0, [pc, #164]	@ (800a160 <_vfiprintf_r+0x224>)
 800a0ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0be:	f7fd fc62 	bl	8007986 <memchr>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d03f      	beq.n	800a146 <_vfiprintf_r+0x20a>
 800a0c6:	4b27      	ldr	r3, [pc, #156]	@ (800a164 <_vfiprintf_r+0x228>)
 800a0c8:	bb1b      	cbnz	r3, 800a112 <_vfiprintf_r+0x1d6>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	3307      	adds	r3, #7
 800a0ce:	f023 0307 	bic.w	r3, r3, #7
 800a0d2:	3308      	adds	r3, #8
 800a0d4:	9303      	str	r3, [sp, #12]
 800a0d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0d8:	443b      	add	r3, r7
 800a0da:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0dc:	e76a      	b.n	8009fb4 <_vfiprintf_r+0x78>
 800a0de:	460c      	mov	r4, r1
 800a0e0:	2001      	movs	r0, #1
 800a0e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0e6:	e7a8      	b.n	800a03a <_vfiprintf_r+0xfe>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f04f 0c0a 	mov.w	ip, #10
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	3401      	adds	r4, #1
 800a0f2:	9305      	str	r3, [sp, #20]
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0fa:	3a30      	subs	r2, #48	@ 0x30
 800a0fc:	2a09      	cmp	r2, #9
 800a0fe:	d903      	bls.n	800a108 <_vfiprintf_r+0x1cc>
 800a100:	2b00      	cmp	r3, #0
 800a102:	d0c6      	beq.n	800a092 <_vfiprintf_r+0x156>
 800a104:	9105      	str	r1, [sp, #20]
 800a106:	e7c4      	b.n	800a092 <_vfiprintf_r+0x156>
 800a108:	4604      	mov	r4, r0
 800a10a:	2301      	movs	r3, #1
 800a10c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a110:	e7f0      	b.n	800a0f4 <_vfiprintf_r+0x1b8>
 800a112:	ab03      	add	r3, sp, #12
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	462a      	mov	r2, r5
 800a118:	4630      	mov	r0, r6
 800a11a:	4b13      	ldr	r3, [pc, #76]	@ (800a168 <_vfiprintf_r+0x22c>)
 800a11c:	a904      	add	r1, sp, #16
 800a11e:	f7fc fba1 	bl	8006864 <_printf_float>
 800a122:	4607      	mov	r7, r0
 800a124:	1c78      	adds	r0, r7, #1
 800a126:	d1d6      	bne.n	800a0d6 <_vfiprintf_r+0x19a>
 800a128:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a12a:	07d9      	lsls	r1, r3, #31
 800a12c:	d405      	bmi.n	800a13a <_vfiprintf_r+0x1fe>
 800a12e:	89ab      	ldrh	r3, [r5, #12]
 800a130:	059a      	lsls	r2, r3, #22
 800a132:	d402      	bmi.n	800a13a <_vfiprintf_r+0x1fe>
 800a134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a136:	f7fd fc1d 	bl	8007974 <__retarget_lock_release_recursive>
 800a13a:	89ab      	ldrh	r3, [r5, #12]
 800a13c:	065b      	lsls	r3, r3, #25
 800a13e:	f53f af1f 	bmi.w	8009f80 <_vfiprintf_r+0x44>
 800a142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a144:	e71e      	b.n	8009f84 <_vfiprintf_r+0x48>
 800a146:	ab03      	add	r3, sp, #12
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	462a      	mov	r2, r5
 800a14c:	4630      	mov	r0, r6
 800a14e:	4b06      	ldr	r3, [pc, #24]	@ (800a168 <_vfiprintf_r+0x22c>)
 800a150:	a904      	add	r1, sp, #16
 800a152:	f7fc fe25 	bl	8006da0 <_printf_i>
 800a156:	e7e4      	b.n	800a122 <_vfiprintf_r+0x1e6>
 800a158:	0800b7b0 	.word	0x0800b7b0
 800a15c:	0800b7b6 	.word	0x0800b7b6
 800a160:	0800b7ba 	.word	0x0800b7ba
 800a164:	08006865 	.word	0x08006865
 800a168:	08009f17 	.word	0x08009f17

0800a16c <_scanf_chars>:
 800a16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a170:	4615      	mov	r5, r2
 800a172:	688a      	ldr	r2, [r1, #8]
 800a174:	4680      	mov	r8, r0
 800a176:	460c      	mov	r4, r1
 800a178:	b932      	cbnz	r2, 800a188 <_scanf_chars+0x1c>
 800a17a:	698a      	ldr	r2, [r1, #24]
 800a17c:	2a00      	cmp	r2, #0
 800a17e:	bf14      	ite	ne
 800a180:	f04f 32ff 	movne.w	r2, #4294967295
 800a184:	2201      	moveq	r2, #1
 800a186:	608a      	str	r2, [r1, #8]
 800a188:	2700      	movs	r7, #0
 800a18a:	6822      	ldr	r2, [r4, #0]
 800a18c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800a21c <_scanf_chars+0xb0>
 800a190:	06d1      	lsls	r1, r2, #27
 800a192:	bf5f      	itttt	pl
 800a194:	681a      	ldrpl	r2, [r3, #0]
 800a196:	1d11      	addpl	r1, r2, #4
 800a198:	6019      	strpl	r1, [r3, #0]
 800a19a:	6816      	ldrpl	r6, [r2, #0]
 800a19c:	69a0      	ldr	r0, [r4, #24]
 800a19e:	b188      	cbz	r0, 800a1c4 <_scanf_chars+0x58>
 800a1a0:	2801      	cmp	r0, #1
 800a1a2:	d107      	bne.n	800a1b4 <_scanf_chars+0x48>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	781a      	ldrb	r2, [r3, #0]
 800a1a8:	6963      	ldr	r3, [r4, #20]
 800a1aa:	5c9b      	ldrb	r3, [r3, r2]
 800a1ac:	b953      	cbnz	r3, 800a1c4 <_scanf_chars+0x58>
 800a1ae:	2f00      	cmp	r7, #0
 800a1b0:	d031      	beq.n	800a216 <_scanf_chars+0xaa>
 800a1b2:	e022      	b.n	800a1fa <_scanf_chars+0x8e>
 800a1b4:	2802      	cmp	r0, #2
 800a1b6:	d120      	bne.n	800a1fa <_scanf_chars+0x8e>
 800a1b8:	682b      	ldr	r3, [r5, #0]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a1c0:	071b      	lsls	r3, r3, #28
 800a1c2:	d41a      	bmi.n	800a1fa <_scanf_chars+0x8e>
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	3701      	adds	r7, #1
 800a1c8:	06da      	lsls	r2, r3, #27
 800a1ca:	bf5e      	ittt	pl
 800a1cc:	682b      	ldrpl	r3, [r5, #0]
 800a1ce:	781b      	ldrbpl	r3, [r3, #0]
 800a1d0:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a1d4:	682a      	ldr	r2, [r5, #0]
 800a1d6:	686b      	ldr	r3, [r5, #4]
 800a1d8:	3201      	adds	r2, #1
 800a1da:	602a      	str	r2, [r5, #0]
 800a1dc:	68a2      	ldr	r2, [r4, #8]
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	3a01      	subs	r2, #1
 800a1e2:	606b      	str	r3, [r5, #4]
 800a1e4:	60a2      	str	r2, [r4, #8]
 800a1e6:	b142      	cbz	r2, 800a1fa <_scanf_chars+0x8e>
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	dcd7      	bgt.n	800a19c <_scanf_chars+0x30>
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a1f4:	4798      	blx	r3
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	d0d0      	beq.n	800a19c <_scanf_chars+0x30>
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	f013 0310 	ands.w	r3, r3, #16
 800a200:	d105      	bne.n	800a20e <_scanf_chars+0xa2>
 800a202:	68e2      	ldr	r2, [r4, #12]
 800a204:	3201      	adds	r2, #1
 800a206:	60e2      	str	r2, [r4, #12]
 800a208:	69a2      	ldr	r2, [r4, #24]
 800a20a:	b102      	cbz	r2, 800a20e <_scanf_chars+0xa2>
 800a20c:	7033      	strb	r3, [r6, #0]
 800a20e:	2000      	movs	r0, #0
 800a210:	6923      	ldr	r3, [r4, #16]
 800a212:	443b      	add	r3, r7
 800a214:	6123      	str	r3, [r4, #16]
 800a216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a21a:	bf00      	nop
 800a21c:	0800b399 	.word	0x0800b399

0800a220 <_scanf_i>:
 800a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a224:	460c      	mov	r4, r1
 800a226:	4698      	mov	r8, r3
 800a228:	4b72      	ldr	r3, [pc, #456]	@ (800a3f4 <_scanf_i+0x1d4>)
 800a22a:	b087      	sub	sp, #28
 800a22c:	4682      	mov	sl, r0
 800a22e:	4616      	mov	r6, r2
 800a230:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a234:	ab03      	add	r3, sp, #12
 800a236:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a23a:	4b6f      	ldr	r3, [pc, #444]	@ (800a3f8 <_scanf_i+0x1d8>)
 800a23c:	69a1      	ldr	r1, [r4, #24]
 800a23e:	4a6f      	ldr	r2, [pc, #444]	@ (800a3fc <_scanf_i+0x1dc>)
 800a240:	4627      	mov	r7, r4
 800a242:	2903      	cmp	r1, #3
 800a244:	bf08      	it	eq
 800a246:	461a      	moveq	r2, r3
 800a248:	68a3      	ldr	r3, [r4, #8]
 800a24a:	9201      	str	r2, [sp, #4]
 800a24c:	1e5a      	subs	r2, r3, #1
 800a24e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a252:	bf81      	itttt	hi
 800a254:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a258:	eb03 0905 	addhi.w	r9, r3, r5
 800a25c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a260:	60a3      	strhi	r3, [r4, #8]
 800a262:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a266:	bf98      	it	ls
 800a268:	f04f 0900 	movls.w	r9, #0
 800a26c:	463d      	mov	r5, r7
 800a26e:	f04f 0b00 	mov.w	fp, #0
 800a272:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a276:	6023      	str	r3, [r4, #0]
 800a278:	6831      	ldr	r1, [r6, #0]
 800a27a:	ab03      	add	r3, sp, #12
 800a27c:	2202      	movs	r2, #2
 800a27e:	7809      	ldrb	r1, [r1, #0]
 800a280:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a284:	f7fd fb7f 	bl	8007986 <memchr>
 800a288:	b328      	cbz	r0, 800a2d6 <_scanf_i+0xb6>
 800a28a:	f1bb 0f01 	cmp.w	fp, #1
 800a28e:	d159      	bne.n	800a344 <_scanf_i+0x124>
 800a290:	6862      	ldr	r2, [r4, #4]
 800a292:	b92a      	cbnz	r2, 800a2a0 <_scanf_i+0x80>
 800a294:	2108      	movs	r1, #8
 800a296:	6822      	ldr	r2, [r4, #0]
 800a298:	6061      	str	r1, [r4, #4]
 800a29a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a29e:	6022      	str	r2, [r4, #0]
 800a2a0:	6822      	ldr	r2, [r4, #0]
 800a2a2:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a2a6:	6022      	str	r2, [r4, #0]
 800a2a8:	68a2      	ldr	r2, [r4, #8]
 800a2aa:	1e51      	subs	r1, r2, #1
 800a2ac:	60a1      	str	r1, [r4, #8]
 800a2ae:	b192      	cbz	r2, 800a2d6 <_scanf_i+0xb6>
 800a2b0:	6832      	ldr	r2, [r6, #0]
 800a2b2:	1c51      	adds	r1, r2, #1
 800a2b4:	6031      	str	r1, [r6, #0]
 800a2b6:	7812      	ldrb	r2, [r2, #0]
 800a2b8:	f805 2b01 	strb.w	r2, [r5], #1
 800a2bc:	6872      	ldr	r2, [r6, #4]
 800a2be:	3a01      	subs	r2, #1
 800a2c0:	2a00      	cmp	r2, #0
 800a2c2:	6072      	str	r2, [r6, #4]
 800a2c4:	dc07      	bgt.n	800a2d6 <_scanf_i+0xb6>
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	4650      	mov	r0, sl
 800a2ca:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a2ce:	4790      	blx	r2
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	f040 8085 	bne.w	800a3e0 <_scanf_i+0x1c0>
 800a2d6:	f10b 0b01 	add.w	fp, fp, #1
 800a2da:	f1bb 0f03 	cmp.w	fp, #3
 800a2de:	d1cb      	bne.n	800a278 <_scanf_i+0x58>
 800a2e0:	6863      	ldr	r3, [r4, #4]
 800a2e2:	b90b      	cbnz	r3, 800a2e8 <_scanf_i+0xc8>
 800a2e4:	230a      	movs	r3, #10
 800a2e6:	6063      	str	r3, [r4, #4]
 800a2e8:	6863      	ldr	r3, [r4, #4]
 800a2ea:	4945      	ldr	r1, [pc, #276]	@ (800a400 <_scanf_i+0x1e0>)
 800a2ec:	6960      	ldr	r0, [r4, #20]
 800a2ee:	1ac9      	subs	r1, r1, r3
 800a2f0:	f000 f942 	bl	800a578 <__sccl>
 800a2f4:	f04f 0b00 	mov.w	fp, #0
 800a2f8:	68a3      	ldr	r3, [r4, #8]
 800a2fa:	6822      	ldr	r2, [r4, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d03d      	beq.n	800a37c <_scanf_i+0x15c>
 800a300:	6831      	ldr	r1, [r6, #0]
 800a302:	6960      	ldr	r0, [r4, #20]
 800a304:	f891 c000 	ldrb.w	ip, [r1]
 800a308:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d035      	beq.n	800a37c <_scanf_i+0x15c>
 800a310:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a314:	d124      	bne.n	800a360 <_scanf_i+0x140>
 800a316:	0510      	lsls	r0, r2, #20
 800a318:	d522      	bpl.n	800a360 <_scanf_i+0x140>
 800a31a:	f10b 0b01 	add.w	fp, fp, #1
 800a31e:	f1b9 0f00 	cmp.w	r9, #0
 800a322:	d003      	beq.n	800a32c <_scanf_i+0x10c>
 800a324:	3301      	adds	r3, #1
 800a326:	f109 39ff 	add.w	r9, r9, #4294967295
 800a32a:	60a3      	str	r3, [r4, #8]
 800a32c:	6873      	ldr	r3, [r6, #4]
 800a32e:	3b01      	subs	r3, #1
 800a330:	2b00      	cmp	r3, #0
 800a332:	6073      	str	r3, [r6, #4]
 800a334:	dd1b      	ble.n	800a36e <_scanf_i+0x14e>
 800a336:	6833      	ldr	r3, [r6, #0]
 800a338:	3301      	adds	r3, #1
 800a33a:	6033      	str	r3, [r6, #0]
 800a33c:	68a3      	ldr	r3, [r4, #8]
 800a33e:	3b01      	subs	r3, #1
 800a340:	60a3      	str	r3, [r4, #8]
 800a342:	e7d9      	b.n	800a2f8 <_scanf_i+0xd8>
 800a344:	f1bb 0f02 	cmp.w	fp, #2
 800a348:	d1ae      	bne.n	800a2a8 <_scanf_i+0x88>
 800a34a:	6822      	ldr	r2, [r4, #0]
 800a34c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a350:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a354:	d1bf      	bne.n	800a2d6 <_scanf_i+0xb6>
 800a356:	2110      	movs	r1, #16
 800a358:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a35c:	6061      	str	r1, [r4, #4]
 800a35e:	e7a2      	b.n	800a2a6 <_scanf_i+0x86>
 800a360:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a364:	6022      	str	r2, [r4, #0]
 800a366:	780b      	ldrb	r3, [r1, #0]
 800a368:	f805 3b01 	strb.w	r3, [r5], #1
 800a36c:	e7de      	b.n	800a32c <_scanf_i+0x10c>
 800a36e:	4631      	mov	r1, r6
 800a370:	4650      	mov	r0, sl
 800a372:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a376:	4798      	blx	r3
 800a378:	2800      	cmp	r0, #0
 800a37a:	d0df      	beq.n	800a33c <_scanf_i+0x11c>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	05d9      	lsls	r1, r3, #23
 800a380:	d50d      	bpl.n	800a39e <_scanf_i+0x17e>
 800a382:	42bd      	cmp	r5, r7
 800a384:	d909      	bls.n	800a39a <_scanf_i+0x17a>
 800a386:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a38a:	4632      	mov	r2, r6
 800a38c:	4650      	mov	r0, sl
 800a38e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a392:	f105 39ff 	add.w	r9, r5, #4294967295
 800a396:	4798      	blx	r3
 800a398:	464d      	mov	r5, r9
 800a39a:	42bd      	cmp	r5, r7
 800a39c:	d028      	beq.n	800a3f0 <_scanf_i+0x1d0>
 800a39e:	6822      	ldr	r2, [r4, #0]
 800a3a0:	f012 0210 	ands.w	r2, r2, #16
 800a3a4:	d113      	bne.n	800a3ce <_scanf_i+0x1ae>
 800a3a6:	702a      	strb	r2, [r5, #0]
 800a3a8:	4639      	mov	r1, r7
 800a3aa:	6863      	ldr	r3, [r4, #4]
 800a3ac:	4650      	mov	r0, sl
 800a3ae:	9e01      	ldr	r6, [sp, #4]
 800a3b0:	47b0      	blx	r6
 800a3b2:	f8d8 3000 	ldr.w	r3, [r8]
 800a3b6:	6821      	ldr	r1, [r4, #0]
 800a3b8:	1d1a      	adds	r2, r3, #4
 800a3ba:	f8c8 2000 	str.w	r2, [r8]
 800a3be:	f011 0f20 	tst.w	r1, #32
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	d00f      	beq.n	800a3e6 <_scanf_i+0x1c6>
 800a3c6:	6018      	str	r0, [r3, #0]
 800a3c8:	68e3      	ldr	r3, [r4, #12]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	60e3      	str	r3, [r4, #12]
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	6923      	ldr	r3, [r4, #16]
 800a3d2:	1bed      	subs	r5, r5, r7
 800a3d4:	445d      	add	r5, fp
 800a3d6:	442b      	add	r3, r5
 800a3d8:	6123      	str	r3, [r4, #16]
 800a3da:	b007      	add	sp, #28
 800a3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e0:	f04f 0b00 	mov.w	fp, #0
 800a3e4:	e7ca      	b.n	800a37c <_scanf_i+0x15c>
 800a3e6:	07ca      	lsls	r2, r1, #31
 800a3e8:	bf4c      	ite	mi
 800a3ea:	8018      	strhmi	r0, [r3, #0]
 800a3ec:	6018      	strpl	r0, [r3, #0]
 800a3ee:	e7eb      	b.n	800a3c8 <_scanf_i+0x1a8>
 800a3f0:	2001      	movs	r0, #1
 800a3f2:	e7f2      	b.n	800a3da <_scanf_i+0x1ba>
 800a3f4:	0800b2f8 	.word	0x0800b2f8
 800a3f8:	08006711 	.word	0x08006711
 800a3fc:	0800a949 	.word	0x0800a949
 800a400:	0800b7d1 	.word	0x0800b7d1

0800a404 <__sflush_r>:
 800a404:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40a:	0716      	lsls	r6, r2, #28
 800a40c:	4605      	mov	r5, r0
 800a40e:	460c      	mov	r4, r1
 800a410:	d454      	bmi.n	800a4bc <__sflush_r+0xb8>
 800a412:	684b      	ldr	r3, [r1, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	dc02      	bgt.n	800a41e <__sflush_r+0x1a>
 800a418:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	dd48      	ble.n	800a4b0 <__sflush_r+0xac>
 800a41e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a420:	2e00      	cmp	r6, #0
 800a422:	d045      	beq.n	800a4b0 <__sflush_r+0xac>
 800a424:	2300      	movs	r3, #0
 800a426:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a42a:	682f      	ldr	r7, [r5, #0]
 800a42c:	6a21      	ldr	r1, [r4, #32]
 800a42e:	602b      	str	r3, [r5, #0]
 800a430:	d030      	beq.n	800a494 <__sflush_r+0x90>
 800a432:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a434:	89a3      	ldrh	r3, [r4, #12]
 800a436:	0759      	lsls	r1, r3, #29
 800a438:	d505      	bpl.n	800a446 <__sflush_r+0x42>
 800a43a:	6863      	ldr	r3, [r4, #4]
 800a43c:	1ad2      	subs	r2, r2, r3
 800a43e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a440:	b10b      	cbz	r3, 800a446 <__sflush_r+0x42>
 800a442:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a444:	1ad2      	subs	r2, r2, r3
 800a446:	2300      	movs	r3, #0
 800a448:	4628      	mov	r0, r5
 800a44a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a44c:	6a21      	ldr	r1, [r4, #32]
 800a44e:	47b0      	blx	r6
 800a450:	1c43      	adds	r3, r0, #1
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	d106      	bne.n	800a464 <__sflush_r+0x60>
 800a456:	6829      	ldr	r1, [r5, #0]
 800a458:	291d      	cmp	r1, #29
 800a45a:	d82b      	bhi.n	800a4b4 <__sflush_r+0xb0>
 800a45c:	4a28      	ldr	r2, [pc, #160]	@ (800a500 <__sflush_r+0xfc>)
 800a45e:	410a      	asrs	r2, r1
 800a460:	07d6      	lsls	r6, r2, #31
 800a462:	d427      	bmi.n	800a4b4 <__sflush_r+0xb0>
 800a464:	2200      	movs	r2, #0
 800a466:	6062      	str	r2, [r4, #4]
 800a468:	6922      	ldr	r2, [r4, #16]
 800a46a:	04d9      	lsls	r1, r3, #19
 800a46c:	6022      	str	r2, [r4, #0]
 800a46e:	d504      	bpl.n	800a47a <__sflush_r+0x76>
 800a470:	1c42      	adds	r2, r0, #1
 800a472:	d101      	bne.n	800a478 <__sflush_r+0x74>
 800a474:	682b      	ldr	r3, [r5, #0]
 800a476:	b903      	cbnz	r3, 800a47a <__sflush_r+0x76>
 800a478:	6560      	str	r0, [r4, #84]	@ 0x54
 800a47a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a47c:	602f      	str	r7, [r5, #0]
 800a47e:	b1b9      	cbz	r1, 800a4b0 <__sflush_r+0xac>
 800a480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a484:	4299      	cmp	r1, r3
 800a486:	d002      	beq.n	800a48e <__sflush_r+0x8a>
 800a488:	4628      	mov	r0, r5
 800a48a:	f7fe f911 	bl	80086b0 <_free_r>
 800a48e:	2300      	movs	r3, #0
 800a490:	6363      	str	r3, [r4, #52]	@ 0x34
 800a492:	e00d      	b.n	800a4b0 <__sflush_r+0xac>
 800a494:	2301      	movs	r3, #1
 800a496:	4628      	mov	r0, r5
 800a498:	47b0      	blx	r6
 800a49a:	4602      	mov	r2, r0
 800a49c:	1c50      	adds	r0, r2, #1
 800a49e:	d1c9      	bne.n	800a434 <__sflush_r+0x30>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0c6      	beq.n	800a434 <__sflush_r+0x30>
 800a4a6:	2b1d      	cmp	r3, #29
 800a4a8:	d001      	beq.n	800a4ae <__sflush_r+0xaa>
 800a4aa:	2b16      	cmp	r3, #22
 800a4ac:	d11d      	bne.n	800a4ea <__sflush_r+0xe6>
 800a4ae:	602f      	str	r7, [r5, #0]
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	e021      	b.n	800a4f8 <__sflush_r+0xf4>
 800a4b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4b8:	b21b      	sxth	r3, r3
 800a4ba:	e01a      	b.n	800a4f2 <__sflush_r+0xee>
 800a4bc:	690f      	ldr	r7, [r1, #16]
 800a4be:	2f00      	cmp	r7, #0
 800a4c0:	d0f6      	beq.n	800a4b0 <__sflush_r+0xac>
 800a4c2:	0793      	lsls	r3, r2, #30
 800a4c4:	bf18      	it	ne
 800a4c6:	2300      	movne	r3, #0
 800a4c8:	680e      	ldr	r6, [r1, #0]
 800a4ca:	bf08      	it	eq
 800a4cc:	694b      	ldreq	r3, [r1, #20]
 800a4ce:	1bf6      	subs	r6, r6, r7
 800a4d0:	600f      	str	r7, [r1, #0]
 800a4d2:	608b      	str	r3, [r1, #8]
 800a4d4:	2e00      	cmp	r6, #0
 800a4d6:	ddeb      	ble.n	800a4b0 <__sflush_r+0xac>
 800a4d8:	4633      	mov	r3, r6
 800a4da:	463a      	mov	r2, r7
 800a4dc:	4628      	mov	r0, r5
 800a4de:	6a21      	ldr	r1, [r4, #32]
 800a4e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a4e4:	47e0      	blx	ip
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	dc07      	bgt.n	800a4fa <__sflush_r+0xf6>
 800a4ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f6:	81a3      	strh	r3, [r4, #12]
 800a4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4fa:	4407      	add	r7, r0
 800a4fc:	1a36      	subs	r6, r6, r0
 800a4fe:	e7e9      	b.n	800a4d4 <__sflush_r+0xd0>
 800a500:	dfbffffe 	.word	0xdfbffffe

0800a504 <_fflush_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	690b      	ldr	r3, [r1, #16]
 800a508:	4605      	mov	r5, r0
 800a50a:	460c      	mov	r4, r1
 800a50c:	b913      	cbnz	r3, 800a514 <_fflush_r+0x10>
 800a50e:	2500      	movs	r5, #0
 800a510:	4628      	mov	r0, r5
 800a512:	bd38      	pop	{r3, r4, r5, pc}
 800a514:	b118      	cbz	r0, 800a51e <_fflush_r+0x1a>
 800a516:	6a03      	ldr	r3, [r0, #32]
 800a518:	b90b      	cbnz	r3, 800a51e <_fflush_r+0x1a>
 800a51a:	f7fc fffd 	bl	8007518 <__sinit>
 800a51e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d0f3      	beq.n	800a50e <_fflush_r+0xa>
 800a526:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a528:	07d0      	lsls	r0, r2, #31
 800a52a:	d404      	bmi.n	800a536 <_fflush_r+0x32>
 800a52c:	0599      	lsls	r1, r3, #22
 800a52e:	d402      	bmi.n	800a536 <_fflush_r+0x32>
 800a530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a532:	f7fd fa1e 	bl	8007972 <__retarget_lock_acquire_recursive>
 800a536:	4628      	mov	r0, r5
 800a538:	4621      	mov	r1, r4
 800a53a:	f7ff ff63 	bl	800a404 <__sflush_r>
 800a53e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a540:	4605      	mov	r5, r0
 800a542:	07da      	lsls	r2, r3, #31
 800a544:	d4e4      	bmi.n	800a510 <_fflush_r+0xc>
 800a546:	89a3      	ldrh	r3, [r4, #12]
 800a548:	059b      	lsls	r3, r3, #22
 800a54a:	d4e1      	bmi.n	800a510 <_fflush_r+0xc>
 800a54c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a54e:	f7fd fa11 	bl	8007974 <__retarget_lock_release_recursive>
 800a552:	e7dd      	b.n	800a510 <_fflush_r+0xc>

0800a554 <fiprintf>:
 800a554:	b40e      	push	{r1, r2, r3}
 800a556:	b503      	push	{r0, r1, lr}
 800a558:	4601      	mov	r1, r0
 800a55a:	ab03      	add	r3, sp, #12
 800a55c:	4805      	ldr	r0, [pc, #20]	@ (800a574 <fiprintf+0x20>)
 800a55e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a562:	6800      	ldr	r0, [r0, #0]
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	f7ff fce9 	bl	8009f3c <_vfiprintf_r>
 800a56a:	b002      	add	sp, #8
 800a56c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a570:	b003      	add	sp, #12
 800a572:	4770      	bx	lr
 800a574:	20000244 	.word	0x20000244

0800a578 <__sccl>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	780b      	ldrb	r3, [r1, #0]
 800a57c:	4604      	mov	r4, r0
 800a57e:	2b5e      	cmp	r3, #94	@ 0x5e
 800a580:	bf0b      	itete	eq
 800a582:	784b      	ldrbeq	r3, [r1, #1]
 800a584:	1c4a      	addne	r2, r1, #1
 800a586:	1c8a      	addeq	r2, r1, #2
 800a588:	2100      	movne	r1, #0
 800a58a:	bf08      	it	eq
 800a58c:	2101      	moveq	r1, #1
 800a58e:	3801      	subs	r0, #1
 800a590:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a594:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a598:	42a8      	cmp	r0, r5
 800a59a:	d1fb      	bne.n	800a594 <__sccl+0x1c>
 800a59c:	b90b      	cbnz	r3, 800a5a2 <__sccl+0x2a>
 800a59e:	1e50      	subs	r0, r2, #1
 800a5a0:	bd70      	pop	{r4, r5, r6, pc}
 800a5a2:	f081 0101 	eor.w	r1, r1, #1
 800a5a6:	4610      	mov	r0, r2
 800a5a8:	54e1      	strb	r1, [r4, r3]
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a5b0:	2d2d      	cmp	r5, #45	@ 0x2d
 800a5b2:	d005      	beq.n	800a5c0 <__sccl+0x48>
 800a5b4:	2d5d      	cmp	r5, #93	@ 0x5d
 800a5b6:	d016      	beq.n	800a5e6 <__sccl+0x6e>
 800a5b8:	2d00      	cmp	r5, #0
 800a5ba:	d0f1      	beq.n	800a5a0 <__sccl+0x28>
 800a5bc:	462b      	mov	r3, r5
 800a5be:	e7f2      	b.n	800a5a6 <__sccl+0x2e>
 800a5c0:	7846      	ldrb	r6, [r0, #1]
 800a5c2:	2e5d      	cmp	r6, #93	@ 0x5d
 800a5c4:	d0fa      	beq.n	800a5bc <__sccl+0x44>
 800a5c6:	42b3      	cmp	r3, r6
 800a5c8:	dcf8      	bgt.n	800a5bc <__sccl+0x44>
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	3002      	adds	r0, #2
 800a5ce:	3201      	adds	r2, #1
 800a5d0:	4296      	cmp	r6, r2
 800a5d2:	54a1      	strb	r1, [r4, r2]
 800a5d4:	dcfb      	bgt.n	800a5ce <__sccl+0x56>
 800a5d6:	1af2      	subs	r2, r6, r3
 800a5d8:	3a01      	subs	r2, #1
 800a5da:	42b3      	cmp	r3, r6
 800a5dc:	bfa8      	it	ge
 800a5de:	2200      	movge	r2, #0
 800a5e0:	1c5d      	adds	r5, r3, #1
 800a5e2:	18ab      	adds	r3, r5, r2
 800a5e4:	e7e1      	b.n	800a5aa <__sccl+0x32>
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	e7da      	b.n	800a5a0 <__sccl+0x28>

0800a5ea <__submore>:
 800a5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ee:	460c      	mov	r4, r1
 800a5f0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a5f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5f6:	4299      	cmp	r1, r3
 800a5f8:	d11b      	bne.n	800a632 <__submore+0x48>
 800a5fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a5fe:	f7fe fc03 	bl	8008e08 <_malloc_r>
 800a602:	b918      	cbnz	r0, 800a60c <__submore+0x22>
 800a604:	f04f 30ff 	mov.w	r0, #4294967295
 800a608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a60c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a610:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a612:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a616:	6360      	str	r0, [r4, #52]	@ 0x34
 800a618:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a61c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a620:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a624:	7043      	strb	r3, [r0, #1]
 800a626:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a62a:	7003      	strb	r3, [r0, #0]
 800a62c:	6020      	str	r0, [r4, #0]
 800a62e:	2000      	movs	r0, #0
 800a630:	e7ea      	b.n	800a608 <__submore+0x1e>
 800a632:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a634:	0077      	lsls	r7, r6, #1
 800a636:	463a      	mov	r2, r7
 800a638:	f000 f8e9 	bl	800a80e <_realloc_r>
 800a63c:	4605      	mov	r5, r0
 800a63e:	2800      	cmp	r0, #0
 800a640:	d0e0      	beq.n	800a604 <__submore+0x1a>
 800a642:	eb00 0806 	add.w	r8, r0, r6
 800a646:	4601      	mov	r1, r0
 800a648:	4632      	mov	r2, r6
 800a64a:	4640      	mov	r0, r8
 800a64c:	f7fd f9a9 	bl	80079a2 <memcpy>
 800a650:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a654:	f8c4 8000 	str.w	r8, [r4]
 800a658:	e7e9      	b.n	800a62e <__submore+0x44>

0800a65a <__swbuf_r>:
 800a65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a65c:	460e      	mov	r6, r1
 800a65e:	4614      	mov	r4, r2
 800a660:	4605      	mov	r5, r0
 800a662:	b118      	cbz	r0, 800a66c <__swbuf_r+0x12>
 800a664:	6a03      	ldr	r3, [r0, #32]
 800a666:	b90b      	cbnz	r3, 800a66c <__swbuf_r+0x12>
 800a668:	f7fc ff56 	bl	8007518 <__sinit>
 800a66c:	69a3      	ldr	r3, [r4, #24]
 800a66e:	60a3      	str	r3, [r4, #8]
 800a670:	89a3      	ldrh	r3, [r4, #12]
 800a672:	071a      	lsls	r2, r3, #28
 800a674:	d501      	bpl.n	800a67a <__swbuf_r+0x20>
 800a676:	6923      	ldr	r3, [r4, #16]
 800a678:	b943      	cbnz	r3, 800a68c <__swbuf_r+0x32>
 800a67a:	4621      	mov	r1, r4
 800a67c:	4628      	mov	r0, r5
 800a67e:	f000 f82b 	bl	800a6d8 <__swsetup_r>
 800a682:	b118      	cbz	r0, 800a68c <__swbuf_r+0x32>
 800a684:	f04f 37ff 	mov.w	r7, #4294967295
 800a688:	4638      	mov	r0, r7
 800a68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a68c:	6823      	ldr	r3, [r4, #0]
 800a68e:	6922      	ldr	r2, [r4, #16]
 800a690:	b2f6      	uxtb	r6, r6
 800a692:	1a98      	subs	r0, r3, r2
 800a694:	6963      	ldr	r3, [r4, #20]
 800a696:	4637      	mov	r7, r6
 800a698:	4283      	cmp	r3, r0
 800a69a:	dc05      	bgt.n	800a6a8 <__swbuf_r+0x4e>
 800a69c:	4621      	mov	r1, r4
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f7ff ff30 	bl	800a504 <_fflush_r>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d1ed      	bne.n	800a684 <__swbuf_r+0x2a>
 800a6a8:	68a3      	ldr	r3, [r4, #8]
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	60a3      	str	r3, [r4, #8]
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	1c5a      	adds	r2, r3, #1
 800a6b2:	6022      	str	r2, [r4, #0]
 800a6b4:	701e      	strb	r6, [r3, #0]
 800a6b6:	6962      	ldr	r2, [r4, #20]
 800a6b8:	1c43      	adds	r3, r0, #1
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d004      	beq.n	800a6c8 <__swbuf_r+0x6e>
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	07db      	lsls	r3, r3, #31
 800a6c2:	d5e1      	bpl.n	800a688 <__swbuf_r+0x2e>
 800a6c4:	2e0a      	cmp	r6, #10
 800a6c6:	d1df      	bne.n	800a688 <__swbuf_r+0x2e>
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	f7ff ff1a 	bl	800a504 <_fflush_r>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	d0d9      	beq.n	800a688 <__swbuf_r+0x2e>
 800a6d4:	e7d6      	b.n	800a684 <__swbuf_r+0x2a>
	...

0800a6d8 <__swsetup_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4b29      	ldr	r3, [pc, #164]	@ (800a780 <__swsetup_r+0xa8>)
 800a6dc:	4605      	mov	r5, r0
 800a6de:	6818      	ldr	r0, [r3, #0]
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	b118      	cbz	r0, 800a6ec <__swsetup_r+0x14>
 800a6e4:	6a03      	ldr	r3, [r0, #32]
 800a6e6:	b90b      	cbnz	r3, 800a6ec <__swsetup_r+0x14>
 800a6e8:	f7fc ff16 	bl	8007518 <__sinit>
 800a6ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6f0:	0719      	lsls	r1, r3, #28
 800a6f2:	d422      	bmi.n	800a73a <__swsetup_r+0x62>
 800a6f4:	06da      	lsls	r2, r3, #27
 800a6f6:	d407      	bmi.n	800a708 <__swsetup_r+0x30>
 800a6f8:	2209      	movs	r2, #9
 800a6fa:	602a      	str	r2, [r5, #0]
 800a6fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a700:	f04f 30ff 	mov.w	r0, #4294967295
 800a704:	81a3      	strh	r3, [r4, #12]
 800a706:	e033      	b.n	800a770 <__swsetup_r+0x98>
 800a708:	0758      	lsls	r0, r3, #29
 800a70a:	d512      	bpl.n	800a732 <__swsetup_r+0x5a>
 800a70c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a70e:	b141      	cbz	r1, 800a722 <__swsetup_r+0x4a>
 800a710:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a714:	4299      	cmp	r1, r3
 800a716:	d002      	beq.n	800a71e <__swsetup_r+0x46>
 800a718:	4628      	mov	r0, r5
 800a71a:	f7fd ffc9 	bl	80086b0 <_free_r>
 800a71e:	2300      	movs	r3, #0
 800a720:	6363      	str	r3, [r4, #52]	@ 0x34
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a728:	81a3      	strh	r3, [r4, #12]
 800a72a:	2300      	movs	r3, #0
 800a72c:	6063      	str	r3, [r4, #4]
 800a72e:	6923      	ldr	r3, [r4, #16]
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	89a3      	ldrh	r3, [r4, #12]
 800a734:	f043 0308 	orr.w	r3, r3, #8
 800a738:	81a3      	strh	r3, [r4, #12]
 800a73a:	6923      	ldr	r3, [r4, #16]
 800a73c:	b94b      	cbnz	r3, 800a752 <__swsetup_r+0x7a>
 800a73e:	89a3      	ldrh	r3, [r4, #12]
 800a740:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a748:	d003      	beq.n	800a752 <__swsetup_r+0x7a>
 800a74a:	4621      	mov	r1, r4
 800a74c:	4628      	mov	r0, r5
 800a74e:	f000 f922 	bl	800a996 <__smakebuf_r>
 800a752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a756:	f013 0201 	ands.w	r2, r3, #1
 800a75a:	d00a      	beq.n	800a772 <__swsetup_r+0x9a>
 800a75c:	2200      	movs	r2, #0
 800a75e:	60a2      	str	r2, [r4, #8]
 800a760:	6962      	ldr	r2, [r4, #20]
 800a762:	4252      	negs	r2, r2
 800a764:	61a2      	str	r2, [r4, #24]
 800a766:	6922      	ldr	r2, [r4, #16]
 800a768:	b942      	cbnz	r2, 800a77c <__swsetup_r+0xa4>
 800a76a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a76e:	d1c5      	bne.n	800a6fc <__swsetup_r+0x24>
 800a770:	bd38      	pop	{r3, r4, r5, pc}
 800a772:	0799      	lsls	r1, r3, #30
 800a774:	bf58      	it	pl
 800a776:	6962      	ldrpl	r2, [r4, #20]
 800a778:	60a2      	str	r2, [r4, #8]
 800a77a:	e7f4      	b.n	800a766 <__swsetup_r+0x8e>
 800a77c:	2000      	movs	r0, #0
 800a77e:	e7f7      	b.n	800a770 <__swsetup_r+0x98>
 800a780:	20000244 	.word	0x20000244

0800a784 <memmove>:
 800a784:	4288      	cmp	r0, r1
 800a786:	b510      	push	{r4, lr}
 800a788:	eb01 0402 	add.w	r4, r1, r2
 800a78c:	d902      	bls.n	800a794 <memmove+0x10>
 800a78e:	4284      	cmp	r4, r0
 800a790:	4623      	mov	r3, r4
 800a792:	d807      	bhi.n	800a7a4 <memmove+0x20>
 800a794:	1e43      	subs	r3, r0, #1
 800a796:	42a1      	cmp	r1, r4
 800a798:	d008      	beq.n	800a7ac <memmove+0x28>
 800a79a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a79e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7a2:	e7f8      	b.n	800a796 <memmove+0x12>
 800a7a4:	4601      	mov	r1, r0
 800a7a6:	4402      	add	r2, r0
 800a7a8:	428a      	cmp	r2, r1
 800a7aa:	d100      	bne.n	800a7ae <memmove+0x2a>
 800a7ac:	bd10      	pop	{r4, pc}
 800a7ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7b6:	e7f7      	b.n	800a7a8 <memmove+0x24>

0800a7b8 <_sbrk_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	4d05      	ldr	r5, [pc, #20]	@ (800a7d4 <_sbrk_r+0x1c>)
 800a7be:	4604      	mov	r4, r0
 800a7c0:	4608      	mov	r0, r1
 800a7c2:	602b      	str	r3, [r5, #0]
 800a7c4:	f7f8 fb1a 	bl	8002dfc <_sbrk>
 800a7c8:	1c43      	adds	r3, r0, #1
 800a7ca:	d102      	bne.n	800a7d2 <_sbrk_r+0x1a>
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	b103      	cbz	r3, 800a7d2 <_sbrk_r+0x1a>
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	bd38      	pop	{r3, r4, r5, pc}
 800a7d4:	20000bd8 	.word	0x20000bd8

0800a7d8 <abort>:
 800a7d8:	2006      	movs	r0, #6
 800a7da:	b508      	push	{r3, lr}
 800a7dc:	f000 f940 	bl	800aa60 <raise>
 800a7e0:	2001      	movs	r0, #1
 800a7e2:	f7f8 fa96 	bl	8002d12 <_exit>

0800a7e6 <_calloc_r>:
 800a7e6:	b570      	push	{r4, r5, r6, lr}
 800a7e8:	fba1 5402 	umull	r5, r4, r1, r2
 800a7ec:	b93c      	cbnz	r4, 800a7fe <_calloc_r+0x18>
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	f7fe fb0a 	bl	8008e08 <_malloc_r>
 800a7f4:	4606      	mov	r6, r0
 800a7f6:	b928      	cbnz	r0, 800a804 <_calloc_r+0x1e>
 800a7f8:	2600      	movs	r6, #0
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	bd70      	pop	{r4, r5, r6, pc}
 800a7fe:	220c      	movs	r2, #12
 800a800:	6002      	str	r2, [r0, #0]
 800a802:	e7f9      	b.n	800a7f8 <_calloc_r+0x12>
 800a804:	462a      	mov	r2, r5
 800a806:	4621      	mov	r1, r4
 800a808:	f7fc ff91 	bl	800772e <memset>
 800a80c:	e7f5      	b.n	800a7fa <_calloc_r+0x14>

0800a80e <_realloc_r>:
 800a80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a812:	4680      	mov	r8, r0
 800a814:	4615      	mov	r5, r2
 800a816:	460c      	mov	r4, r1
 800a818:	b921      	cbnz	r1, 800a824 <_realloc_r+0x16>
 800a81a:	4611      	mov	r1, r2
 800a81c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a820:	f7fe baf2 	b.w	8008e08 <_malloc_r>
 800a824:	b92a      	cbnz	r2, 800a832 <_realloc_r+0x24>
 800a826:	f7fd ff43 	bl	80086b0 <_free_r>
 800a82a:	2400      	movs	r4, #0
 800a82c:	4620      	mov	r0, r4
 800a82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a832:	f000 f953 	bl	800aadc <_malloc_usable_size_r>
 800a836:	4285      	cmp	r5, r0
 800a838:	4606      	mov	r6, r0
 800a83a:	d802      	bhi.n	800a842 <_realloc_r+0x34>
 800a83c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a840:	d8f4      	bhi.n	800a82c <_realloc_r+0x1e>
 800a842:	4629      	mov	r1, r5
 800a844:	4640      	mov	r0, r8
 800a846:	f7fe fadf 	bl	8008e08 <_malloc_r>
 800a84a:	4607      	mov	r7, r0
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d0ec      	beq.n	800a82a <_realloc_r+0x1c>
 800a850:	42b5      	cmp	r5, r6
 800a852:	462a      	mov	r2, r5
 800a854:	4621      	mov	r1, r4
 800a856:	bf28      	it	cs
 800a858:	4632      	movcs	r2, r6
 800a85a:	f7fd f8a2 	bl	80079a2 <memcpy>
 800a85e:	4621      	mov	r1, r4
 800a860:	4640      	mov	r0, r8
 800a862:	f7fd ff25 	bl	80086b0 <_free_r>
 800a866:	463c      	mov	r4, r7
 800a868:	e7e0      	b.n	800a82c <_realloc_r+0x1e>
	...

0800a86c <_strtoul_l.constprop.0>:
 800a86c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a870:	4686      	mov	lr, r0
 800a872:	460d      	mov	r5, r1
 800a874:	4e33      	ldr	r6, [pc, #204]	@ (800a944 <_strtoul_l.constprop.0+0xd8>)
 800a876:	4628      	mov	r0, r5
 800a878:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a87c:	5d37      	ldrb	r7, [r6, r4]
 800a87e:	f017 0708 	ands.w	r7, r7, #8
 800a882:	d1f8      	bne.n	800a876 <_strtoul_l.constprop.0+0xa>
 800a884:	2c2d      	cmp	r4, #45	@ 0x2d
 800a886:	d12f      	bne.n	800a8e8 <_strtoul_l.constprop.0+0x7c>
 800a888:	2701      	movs	r7, #1
 800a88a:	782c      	ldrb	r4, [r5, #0]
 800a88c:	1c85      	adds	r5, r0, #2
 800a88e:	f033 0010 	bics.w	r0, r3, #16
 800a892:	d109      	bne.n	800a8a8 <_strtoul_l.constprop.0+0x3c>
 800a894:	2c30      	cmp	r4, #48	@ 0x30
 800a896:	d12c      	bne.n	800a8f2 <_strtoul_l.constprop.0+0x86>
 800a898:	7828      	ldrb	r0, [r5, #0]
 800a89a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a89e:	2858      	cmp	r0, #88	@ 0x58
 800a8a0:	d127      	bne.n	800a8f2 <_strtoul_l.constprop.0+0x86>
 800a8a2:	2310      	movs	r3, #16
 800a8a4:	786c      	ldrb	r4, [r5, #1]
 800a8a6:	3502      	adds	r5, #2
 800a8a8:	f04f 38ff 	mov.w	r8, #4294967295
 800a8ac:	fbb8 f8f3 	udiv	r8, r8, r3
 800a8b0:	2600      	movs	r6, #0
 800a8b2:	fb03 f908 	mul.w	r9, r3, r8
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	ea6f 0909 	mvn.w	r9, r9
 800a8bc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a8c0:	f1bc 0f09 	cmp.w	ip, #9
 800a8c4:	d81c      	bhi.n	800a900 <_strtoul_l.constprop.0+0x94>
 800a8c6:	4664      	mov	r4, ip
 800a8c8:	42a3      	cmp	r3, r4
 800a8ca:	dd2a      	ble.n	800a922 <_strtoul_l.constprop.0+0xb6>
 800a8cc:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a8d0:	d007      	beq.n	800a8e2 <_strtoul_l.constprop.0+0x76>
 800a8d2:	4580      	cmp	r8, r0
 800a8d4:	d322      	bcc.n	800a91c <_strtoul_l.constprop.0+0xb0>
 800a8d6:	d101      	bne.n	800a8dc <_strtoul_l.constprop.0+0x70>
 800a8d8:	45a1      	cmp	r9, r4
 800a8da:	db1f      	blt.n	800a91c <_strtoul_l.constprop.0+0xb0>
 800a8dc:	2601      	movs	r6, #1
 800a8de:	fb00 4003 	mla	r0, r0, r3, r4
 800a8e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8e6:	e7e9      	b.n	800a8bc <_strtoul_l.constprop.0+0x50>
 800a8e8:	2c2b      	cmp	r4, #43	@ 0x2b
 800a8ea:	bf04      	itt	eq
 800a8ec:	782c      	ldrbeq	r4, [r5, #0]
 800a8ee:	1c85      	addeq	r5, r0, #2
 800a8f0:	e7cd      	b.n	800a88e <_strtoul_l.constprop.0+0x22>
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1d8      	bne.n	800a8a8 <_strtoul_l.constprop.0+0x3c>
 800a8f6:	2c30      	cmp	r4, #48	@ 0x30
 800a8f8:	bf0c      	ite	eq
 800a8fa:	2308      	moveq	r3, #8
 800a8fc:	230a      	movne	r3, #10
 800a8fe:	e7d3      	b.n	800a8a8 <_strtoul_l.constprop.0+0x3c>
 800a900:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a904:	f1bc 0f19 	cmp.w	ip, #25
 800a908:	d801      	bhi.n	800a90e <_strtoul_l.constprop.0+0xa2>
 800a90a:	3c37      	subs	r4, #55	@ 0x37
 800a90c:	e7dc      	b.n	800a8c8 <_strtoul_l.constprop.0+0x5c>
 800a90e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a912:	f1bc 0f19 	cmp.w	ip, #25
 800a916:	d804      	bhi.n	800a922 <_strtoul_l.constprop.0+0xb6>
 800a918:	3c57      	subs	r4, #87	@ 0x57
 800a91a:	e7d5      	b.n	800a8c8 <_strtoul_l.constprop.0+0x5c>
 800a91c:	f04f 36ff 	mov.w	r6, #4294967295
 800a920:	e7df      	b.n	800a8e2 <_strtoul_l.constprop.0+0x76>
 800a922:	1c73      	adds	r3, r6, #1
 800a924:	d106      	bne.n	800a934 <_strtoul_l.constprop.0+0xc8>
 800a926:	2322      	movs	r3, #34	@ 0x22
 800a928:	4630      	mov	r0, r6
 800a92a:	f8ce 3000 	str.w	r3, [lr]
 800a92e:	b932      	cbnz	r2, 800a93e <_strtoul_l.constprop.0+0xd2>
 800a930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a934:	b107      	cbz	r7, 800a938 <_strtoul_l.constprop.0+0xcc>
 800a936:	4240      	negs	r0, r0
 800a938:	2a00      	cmp	r2, #0
 800a93a:	d0f9      	beq.n	800a930 <_strtoul_l.constprop.0+0xc4>
 800a93c:	b106      	cbz	r6, 800a940 <_strtoul_l.constprop.0+0xd4>
 800a93e:	1e69      	subs	r1, r5, #1
 800a940:	6011      	str	r1, [r2, #0]
 800a942:	e7f5      	b.n	800a930 <_strtoul_l.constprop.0+0xc4>
 800a944:	0800b399 	.word	0x0800b399

0800a948 <_strtoul_r>:
 800a948:	f7ff bf90 	b.w	800a86c <_strtoul_l.constprop.0>

0800a94c <__swhatbuf_r>:
 800a94c:	b570      	push	{r4, r5, r6, lr}
 800a94e:	460c      	mov	r4, r1
 800a950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a954:	4615      	mov	r5, r2
 800a956:	2900      	cmp	r1, #0
 800a958:	461e      	mov	r6, r3
 800a95a:	b096      	sub	sp, #88	@ 0x58
 800a95c:	da0c      	bge.n	800a978 <__swhatbuf_r+0x2c>
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	2100      	movs	r1, #0
 800a962:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a966:	bf14      	ite	ne
 800a968:	2340      	movne	r3, #64	@ 0x40
 800a96a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a96e:	2000      	movs	r0, #0
 800a970:	6031      	str	r1, [r6, #0]
 800a972:	602b      	str	r3, [r5, #0]
 800a974:	b016      	add	sp, #88	@ 0x58
 800a976:	bd70      	pop	{r4, r5, r6, pc}
 800a978:	466a      	mov	r2, sp
 800a97a:	f000 f879 	bl	800aa70 <_fstat_r>
 800a97e:	2800      	cmp	r0, #0
 800a980:	dbed      	blt.n	800a95e <__swhatbuf_r+0x12>
 800a982:	9901      	ldr	r1, [sp, #4]
 800a984:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a988:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a98c:	4259      	negs	r1, r3
 800a98e:	4159      	adcs	r1, r3
 800a990:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a994:	e7eb      	b.n	800a96e <__swhatbuf_r+0x22>

0800a996 <__smakebuf_r>:
 800a996:	898b      	ldrh	r3, [r1, #12]
 800a998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a99a:	079d      	lsls	r5, r3, #30
 800a99c:	4606      	mov	r6, r0
 800a99e:	460c      	mov	r4, r1
 800a9a0:	d507      	bpl.n	800a9b2 <__smakebuf_r+0x1c>
 800a9a2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a9a6:	6023      	str	r3, [r4, #0]
 800a9a8:	6123      	str	r3, [r4, #16]
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	6163      	str	r3, [r4, #20]
 800a9ae:	b003      	add	sp, #12
 800a9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b2:	466a      	mov	r2, sp
 800a9b4:	ab01      	add	r3, sp, #4
 800a9b6:	f7ff ffc9 	bl	800a94c <__swhatbuf_r>
 800a9ba:	9f00      	ldr	r7, [sp, #0]
 800a9bc:	4605      	mov	r5, r0
 800a9be:	4639      	mov	r1, r7
 800a9c0:	4630      	mov	r0, r6
 800a9c2:	f7fe fa21 	bl	8008e08 <_malloc_r>
 800a9c6:	b948      	cbnz	r0, 800a9dc <__smakebuf_r+0x46>
 800a9c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9cc:	059a      	lsls	r2, r3, #22
 800a9ce:	d4ee      	bmi.n	800a9ae <__smakebuf_r+0x18>
 800a9d0:	f023 0303 	bic.w	r3, r3, #3
 800a9d4:	f043 0302 	orr.w	r3, r3, #2
 800a9d8:	81a3      	strh	r3, [r4, #12]
 800a9da:	e7e2      	b.n	800a9a2 <__smakebuf_r+0xc>
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a9e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9e6:	81a3      	strh	r3, [r4, #12]
 800a9e8:	9b01      	ldr	r3, [sp, #4]
 800a9ea:	6020      	str	r0, [r4, #0]
 800a9ec:	b15b      	cbz	r3, 800aa06 <__smakebuf_r+0x70>
 800a9ee:	4630      	mov	r0, r6
 800a9f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9f4:	f000 f84e 	bl	800aa94 <_isatty_r>
 800a9f8:	b128      	cbz	r0, 800aa06 <__smakebuf_r+0x70>
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	f023 0303 	bic.w	r3, r3, #3
 800aa00:	f043 0301 	orr.w	r3, r3, #1
 800aa04:	81a3      	strh	r3, [r4, #12]
 800aa06:	89a3      	ldrh	r3, [r4, #12]
 800aa08:	431d      	orrs	r5, r3
 800aa0a:	81a5      	strh	r5, [r4, #12]
 800aa0c:	e7cf      	b.n	800a9ae <__smakebuf_r+0x18>

0800aa0e <_raise_r>:
 800aa0e:	291f      	cmp	r1, #31
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4605      	mov	r5, r0
 800aa14:	460c      	mov	r4, r1
 800aa16:	d904      	bls.n	800aa22 <_raise_r+0x14>
 800aa18:	2316      	movs	r3, #22
 800aa1a:	6003      	str	r3, [r0, #0]
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	bd38      	pop	{r3, r4, r5, pc}
 800aa22:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa24:	b112      	cbz	r2, 800aa2c <_raise_r+0x1e>
 800aa26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa2a:	b94b      	cbnz	r3, 800aa40 <_raise_r+0x32>
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	f000 f853 	bl	800aad8 <_getpid_r>
 800aa32:	4622      	mov	r2, r4
 800aa34:	4601      	mov	r1, r0
 800aa36:	4628      	mov	r0, r5
 800aa38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa3c:	f000 b83a 	b.w	800aab4 <_kill_r>
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d00a      	beq.n	800aa5a <_raise_r+0x4c>
 800aa44:	1c59      	adds	r1, r3, #1
 800aa46:	d103      	bne.n	800aa50 <_raise_r+0x42>
 800aa48:	2316      	movs	r3, #22
 800aa4a:	6003      	str	r3, [r0, #0]
 800aa4c:	2001      	movs	r0, #1
 800aa4e:	e7e7      	b.n	800aa20 <_raise_r+0x12>
 800aa50:	2100      	movs	r1, #0
 800aa52:	4620      	mov	r0, r4
 800aa54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa58:	4798      	blx	r3
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	e7e0      	b.n	800aa20 <_raise_r+0x12>
	...

0800aa60 <raise>:
 800aa60:	4b02      	ldr	r3, [pc, #8]	@ (800aa6c <raise+0xc>)
 800aa62:	4601      	mov	r1, r0
 800aa64:	6818      	ldr	r0, [r3, #0]
 800aa66:	f7ff bfd2 	b.w	800aa0e <_raise_r>
 800aa6a:	bf00      	nop
 800aa6c:	20000244 	.word	0x20000244

0800aa70 <_fstat_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	2300      	movs	r3, #0
 800aa74:	4d06      	ldr	r5, [pc, #24]	@ (800aa90 <_fstat_r+0x20>)
 800aa76:	4604      	mov	r4, r0
 800aa78:	4608      	mov	r0, r1
 800aa7a:	4611      	mov	r1, r2
 800aa7c:	602b      	str	r3, [r5, #0]
 800aa7e:	f7f8 f997 	bl	8002db0 <_fstat>
 800aa82:	1c43      	adds	r3, r0, #1
 800aa84:	d102      	bne.n	800aa8c <_fstat_r+0x1c>
 800aa86:	682b      	ldr	r3, [r5, #0]
 800aa88:	b103      	cbz	r3, 800aa8c <_fstat_r+0x1c>
 800aa8a:	6023      	str	r3, [r4, #0]
 800aa8c:	bd38      	pop	{r3, r4, r5, pc}
 800aa8e:	bf00      	nop
 800aa90:	20000bd8 	.word	0x20000bd8

0800aa94 <_isatty_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	2300      	movs	r3, #0
 800aa98:	4d05      	ldr	r5, [pc, #20]	@ (800aab0 <_isatty_r+0x1c>)
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	4608      	mov	r0, r1
 800aa9e:	602b      	str	r3, [r5, #0]
 800aaa0:	f7f8 f995 	bl	8002dce <_isatty>
 800aaa4:	1c43      	adds	r3, r0, #1
 800aaa6:	d102      	bne.n	800aaae <_isatty_r+0x1a>
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	b103      	cbz	r3, 800aaae <_isatty_r+0x1a>
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	bd38      	pop	{r3, r4, r5, pc}
 800aab0:	20000bd8 	.word	0x20000bd8

0800aab4 <_kill_r>:
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	2300      	movs	r3, #0
 800aab8:	4d06      	ldr	r5, [pc, #24]	@ (800aad4 <_kill_r+0x20>)
 800aaba:	4604      	mov	r4, r0
 800aabc:	4608      	mov	r0, r1
 800aabe:	4611      	mov	r1, r2
 800aac0:	602b      	str	r3, [r5, #0]
 800aac2:	f7f8 f916 	bl	8002cf2 <_kill>
 800aac6:	1c43      	adds	r3, r0, #1
 800aac8:	d102      	bne.n	800aad0 <_kill_r+0x1c>
 800aaca:	682b      	ldr	r3, [r5, #0]
 800aacc:	b103      	cbz	r3, 800aad0 <_kill_r+0x1c>
 800aace:	6023      	str	r3, [r4, #0]
 800aad0:	bd38      	pop	{r3, r4, r5, pc}
 800aad2:	bf00      	nop
 800aad4:	20000bd8 	.word	0x20000bd8

0800aad8 <_getpid_r>:
 800aad8:	f7f8 b904 	b.w	8002ce4 <_getpid>

0800aadc <_malloc_usable_size_r>:
 800aadc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aae0:	1f18      	subs	r0, r3, #4
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	bfbc      	itt	lt
 800aae6:	580b      	ldrlt	r3, [r1, r0]
 800aae8:	18c0      	addlt	r0, r0, r3
 800aaea:	4770      	bx	lr

0800aaec <fmod>:
 800aaec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf0:	4680      	mov	r8, r0
 800aaf2:	4689      	mov	r9, r1
 800aaf4:	4616      	mov	r6, r2
 800aaf6:	461f      	mov	r7, r3
 800aaf8:	f000 f820 	bl	800ab3c <__ieee754_fmod>
 800aafc:	4632      	mov	r2, r6
 800aafe:	4604      	mov	r4, r0
 800ab00:	460d      	mov	r5, r1
 800ab02:	463b      	mov	r3, r7
 800ab04:	4640      	mov	r0, r8
 800ab06:	4649      	mov	r1, r9
 800ab08:	f7f5 ff80 	bl	8000a0c <__aeabi_dcmpun>
 800ab0c:	b990      	cbnz	r0, 800ab34 <fmod+0x48>
 800ab0e:	2200      	movs	r2, #0
 800ab10:	2300      	movs	r3, #0
 800ab12:	4630      	mov	r0, r6
 800ab14:	4639      	mov	r1, r7
 800ab16:	f7f5 ff47 	bl	80009a8 <__aeabi_dcmpeq>
 800ab1a:	b158      	cbz	r0, 800ab34 <fmod+0x48>
 800ab1c:	f7fc fefe 	bl	800791c <__errno>
 800ab20:	2321      	movs	r3, #33	@ 0x21
 800ab22:	2200      	movs	r2, #0
 800ab24:	6003      	str	r3, [r0, #0]
 800ab26:	2300      	movs	r3, #0
 800ab28:	4610      	mov	r0, r2
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	f7f5 fdfe 	bl	800072c <__aeabi_ddiv>
 800ab30:	4604      	mov	r4, r0
 800ab32:	460d      	mov	r5, r1
 800ab34:	4620      	mov	r0, r4
 800ab36:	4629      	mov	r1, r5
 800ab38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ab3c <__ieee754_fmod>:
 800ab3c:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800ab40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab44:	ea52 040c 	orrs.w	r4, r2, ip
 800ab48:	461e      	mov	r6, r3
 800ab4a:	4617      	mov	r7, r2
 800ab4c:	4696      	mov	lr, r2
 800ab4e:	d00c      	beq.n	800ab6a <__ieee754_fmod+0x2e>
 800ab50:	4c76      	ldr	r4, [pc, #472]	@ (800ad2c <__ieee754_fmod+0x1f0>)
 800ab52:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800ab56:	45a0      	cmp	r8, r4
 800ab58:	4689      	mov	r9, r1
 800ab5a:	d806      	bhi.n	800ab6a <__ieee754_fmod+0x2e>
 800ab5c:	4254      	negs	r4, r2
 800ab5e:	4d74      	ldr	r5, [pc, #464]	@ (800ad30 <__ieee754_fmod+0x1f4>)
 800ab60:	4314      	orrs	r4, r2
 800ab62:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800ab66:	42ac      	cmp	r4, r5
 800ab68:	d907      	bls.n	800ab7a <__ieee754_fmod+0x3e>
 800ab6a:	f7f5 fcb5 	bl	80004d8 <__aeabi_dmul>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	460b      	mov	r3, r1
 800ab72:	f7f5 fddb 	bl	800072c <__aeabi_ddiv>
 800ab76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab7a:	45e0      	cmp	r8, ip
 800ab7c:	4682      	mov	sl, r0
 800ab7e:	4604      	mov	r4, r0
 800ab80:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800ab84:	dc09      	bgt.n	800ab9a <__ieee754_fmod+0x5e>
 800ab86:	dbf6      	blt.n	800ab76 <__ieee754_fmod+0x3a>
 800ab88:	4282      	cmp	r2, r0
 800ab8a:	d8f4      	bhi.n	800ab76 <__ieee754_fmod+0x3a>
 800ab8c:	d105      	bne.n	800ab9a <__ieee754_fmod+0x5e>
 800ab8e:	4b69      	ldr	r3, [pc, #420]	@ (800ad34 <__ieee754_fmod+0x1f8>)
 800ab90:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800ab94:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab98:	e7ed      	b.n	800ab76 <__ieee754_fmod+0x3a>
 800ab9a:	4a65      	ldr	r2, [pc, #404]	@ (800ad30 <__ieee754_fmod+0x1f4>)
 800ab9c:	ea19 0f02 	tst.w	r9, r2
 800aba0:	d148      	bne.n	800ac34 <__ieee754_fmod+0xf8>
 800aba2:	f1b8 0f00 	cmp.w	r8, #0
 800aba6:	d13d      	bne.n	800ac24 <__ieee754_fmod+0xe8>
 800aba8:	4653      	mov	r3, sl
 800abaa:	4963      	ldr	r1, [pc, #396]	@ (800ad38 <__ieee754_fmod+0x1fc>)
 800abac:	2b00      	cmp	r3, #0
 800abae:	dc36      	bgt.n	800ac1e <__ieee754_fmod+0xe2>
 800abb0:	4216      	tst	r6, r2
 800abb2:	d14f      	bne.n	800ac54 <__ieee754_fmod+0x118>
 800abb4:	f1bc 0f00 	cmp.w	ip, #0
 800abb8:	d144      	bne.n	800ac44 <__ieee754_fmod+0x108>
 800abba:	463b      	mov	r3, r7
 800abbc:	4a5e      	ldr	r2, [pc, #376]	@ (800ad38 <__ieee754_fmod+0x1fc>)
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	dc3d      	bgt.n	800ac3e <__ieee754_fmod+0x102>
 800abc2:	485e      	ldr	r0, [pc, #376]	@ (800ad3c <__ieee754_fmod+0x200>)
 800abc4:	4281      	cmp	r1, r0
 800abc6:	db4a      	blt.n	800ac5e <__ieee754_fmod+0x122>
 800abc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abd0:	485a      	ldr	r0, [pc, #360]	@ (800ad3c <__ieee754_fmod+0x200>)
 800abd2:	4282      	cmp	r2, r0
 800abd4:	db57      	blt.n	800ac86 <__ieee754_fmod+0x14a>
 800abd6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800abda:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800abde:	1a89      	subs	r1, r1, r2
 800abe0:	1b98      	subs	r0, r3, r6
 800abe2:	eba4 070e 	sub.w	r7, r4, lr
 800abe6:	2900      	cmp	r1, #0
 800abe8:	d162      	bne.n	800acb0 <__ieee754_fmod+0x174>
 800abea:	4574      	cmp	r4, lr
 800abec:	bf38      	it	cc
 800abee:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800abf2:	2800      	cmp	r0, #0
 800abf4:	bfa4      	itt	ge
 800abf6:	463c      	movge	r4, r7
 800abf8:	4603      	movge	r3, r0
 800abfa:	ea53 0104 	orrs.w	r1, r3, r4
 800abfe:	d0c6      	beq.n	800ab8e <__ieee754_fmod+0x52>
 800ac00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac04:	db69      	blt.n	800acda <__ieee754_fmod+0x19e>
 800ac06:	494d      	ldr	r1, [pc, #308]	@ (800ad3c <__ieee754_fmod+0x200>)
 800ac08:	428a      	cmp	r2, r1
 800ac0a:	db6c      	blt.n	800ace6 <__ieee754_fmod+0x1aa>
 800ac0c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ac10:	432b      	orrs	r3, r5
 800ac12:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800ac16:	4620      	mov	r0, r4
 800ac18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ac1c:	e7ab      	b.n	800ab76 <__ieee754_fmod+0x3a>
 800ac1e:	3901      	subs	r1, #1
 800ac20:	005b      	lsls	r3, r3, #1
 800ac22:	e7c3      	b.n	800abac <__ieee754_fmod+0x70>
 800ac24:	4945      	ldr	r1, [pc, #276]	@ (800ad3c <__ieee754_fmod+0x200>)
 800ac26:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	ddc0      	ble.n	800abb0 <__ieee754_fmod+0x74>
 800ac2e:	3901      	subs	r1, #1
 800ac30:	005b      	lsls	r3, r3, #1
 800ac32:	e7fa      	b.n	800ac2a <__ieee754_fmod+0xee>
 800ac34:	ea4f 5128 	mov.w	r1, r8, asr #20
 800ac38:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ac3c:	e7b8      	b.n	800abb0 <__ieee754_fmod+0x74>
 800ac3e:	3a01      	subs	r2, #1
 800ac40:	005b      	lsls	r3, r3, #1
 800ac42:	e7bc      	b.n	800abbe <__ieee754_fmod+0x82>
 800ac44:	4a3d      	ldr	r2, [pc, #244]	@ (800ad3c <__ieee754_fmod+0x200>)
 800ac46:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	ddb9      	ble.n	800abc2 <__ieee754_fmod+0x86>
 800ac4e:	3a01      	subs	r2, #1
 800ac50:	005b      	lsls	r3, r3, #1
 800ac52:	e7fa      	b.n	800ac4a <__ieee754_fmod+0x10e>
 800ac54:	ea4f 522c 	mov.w	r2, ip, asr #20
 800ac58:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ac5c:	e7b1      	b.n	800abc2 <__ieee754_fmod+0x86>
 800ac5e:	1a40      	subs	r0, r0, r1
 800ac60:	281f      	cmp	r0, #31
 800ac62:	dc0a      	bgt.n	800ac7a <__ieee754_fmod+0x13e>
 800ac64:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800ac68:	fa08 f800 	lsl.w	r8, r8, r0
 800ac6c:	fa2a f303 	lsr.w	r3, sl, r3
 800ac70:	ea43 0308 	orr.w	r3, r3, r8
 800ac74:	fa0a f400 	lsl.w	r4, sl, r0
 800ac78:	e7aa      	b.n	800abd0 <__ieee754_fmod+0x94>
 800ac7a:	4b31      	ldr	r3, [pc, #196]	@ (800ad40 <__ieee754_fmod+0x204>)
 800ac7c:	2400      	movs	r4, #0
 800ac7e:	1a5b      	subs	r3, r3, r1
 800ac80:	fa0a f303 	lsl.w	r3, sl, r3
 800ac84:	e7a4      	b.n	800abd0 <__ieee754_fmod+0x94>
 800ac86:	1a80      	subs	r0, r0, r2
 800ac88:	281f      	cmp	r0, #31
 800ac8a:	dc0a      	bgt.n	800aca2 <__ieee754_fmod+0x166>
 800ac8c:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800ac90:	fa0c fc00 	lsl.w	ip, ip, r0
 800ac94:	fa27 f606 	lsr.w	r6, r7, r6
 800ac98:	ea46 060c 	orr.w	r6, r6, ip
 800ac9c:	fa07 fe00 	lsl.w	lr, r7, r0
 800aca0:	e79d      	b.n	800abde <__ieee754_fmod+0xa2>
 800aca2:	4e27      	ldr	r6, [pc, #156]	@ (800ad40 <__ieee754_fmod+0x204>)
 800aca4:	f04f 0e00 	mov.w	lr, #0
 800aca8:	1ab6      	subs	r6, r6, r2
 800acaa:	fa07 f606 	lsl.w	r6, r7, r6
 800acae:	e796      	b.n	800abde <__ieee754_fmod+0xa2>
 800acb0:	4574      	cmp	r4, lr
 800acb2:	bf38      	it	cc
 800acb4:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800acb8:	2800      	cmp	r0, #0
 800acba:	da05      	bge.n	800acc8 <__ieee754_fmod+0x18c>
 800acbc:	0fe0      	lsrs	r0, r4, #31
 800acbe:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800acc2:	0064      	lsls	r4, r4, #1
 800acc4:	3901      	subs	r1, #1
 800acc6:	e78b      	b.n	800abe0 <__ieee754_fmod+0xa4>
 800acc8:	ea50 0307 	orrs.w	r3, r0, r7
 800accc:	f43f af5f 	beq.w	800ab8e <__ieee754_fmod+0x52>
 800acd0:	0ffb      	lsrs	r3, r7, #31
 800acd2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800acd6:	007c      	lsls	r4, r7, #1
 800acd8:	e7f4      	b.n	800acc4 <__ieee754_fmod+0x188>
 800acda:	0fe1      	lsrs	r1, r4, #31
 800acdc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800ace0:	0064      	lsls	r4, r4, #1
 800ace2:	3a01      	subs	r2, #1
 800ace4:	e78c      	b.n	800ac00 <__ieee754_fmod+0xc4>
 800ace6:	1a89      	subs	r1, r1, r2
 800ace8:	2914      	cmp	r1, #20
 800acea:	dc0a      	bgt.n	800ad02 <__ieee754_fmod+0x1c6>
 800acec:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800acf0:	fa03 f202 	lsl.w	r2, r3, r2
 800acf4:	40cc      	lsrs	r4, r1
 800acf6:	4322      	orrs	r2, r4
 800acf8:	410b      	asrs	r3, r1
 800acfa:	4610      	mov	r0, r2
 800acfc:	ea43 0105 	orr.w	r1, r3, r5
 800ad00:	e739      	b.n	800ab76 <__ieee754_fmod+0x3a>
 800ad02:	291f      	cmp	r1, #31
 800ad04:	dc07      	bgt.n	800ad16 <__ieee754_fmod+0x1da>
 800ad06:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800ad0a:	40cc      	lsrs	r4, r1
 800ad0c:	fa03 f202 	lsl.w	r2, r3, r2
 800ad10:	4322      	orrs	r2, r4
 800ad12:	462b      	mov	r3, r5
 800ad14:	e7f1      	b.n	800acfa <__ieee754_fmod+0x1be>
 800ad16:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800ad1a:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800ad1e:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800ad22:	32e2      	adds	r2, #226	@ 0xe2
 800ad24:	fa43 f202 	asr.w	r2, r3, r2
 800ad28:	e7f3      	b.n	800ad12 <__ieee754_fmod+0x1d6>
 800ad2a:	bf00      	nop
 800ad2c:	7fefffff 	.word	0x7fefffff
 800ad30:	7ff00000 	.word	0x7ff00000
 800ad34:	0800b7e0 	.word	0x0800b7e0
 800ad38:	fffffbed 	.word	0xfffffbed
 800ad3c:	fffffc02 	.word	0xfffffc02
 800ad40:	fffffbe2 	.word	0xfffffbe2

0800ad44 <_init>:
 800ad44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad46:	bf00      	nop
 800ad48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad4a:	bc08      	pop	{r3}
 800ad4c:	469e      	mov	lr, r3
 800ad4e:	4770      	bx	lr

0800ad50 <_fini>:
 800ad50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad52:	bf00      	nop
 800ad54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad56:	bc08      	pop	{r3}
 800ad58:	469e      	mov	lr, r3
 800ad5a:	4770      	bx	lr

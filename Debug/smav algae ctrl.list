
smav algae ctrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a62c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c4  0800a740  0800a740  0000b740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b104  0800b104  0000d2f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b104  0800b104  0000c104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b10c  0800b10c  0000d2f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b10c  0800b10c  0000c10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b110  0800b110  0000c110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f8  20000000  0800b114  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ac  200002f8  0800b40c  0000d2f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ba4  0800b40c  0000dba4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d2f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d729  00000000  00000000  0000d321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a0  00000000  00000000  0001aa4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0001d3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d2  00000000  00000000  0001dfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c07  00000000  00000000  0001e872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc7f  00000000  00000000  00038479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b936  00000000  00000000  000480f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3a2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004788  00000000  00000000  000d3a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000d81fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002f8 	.word	0x200002f8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a724 	.word	0x0800a724

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002fc 	.word	0x200002fc
 800014c:	0800a724 	.word	0x0800a724

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	2200      	movs	r2, #0
 8001160:	2300      	movs	r3, #0
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f7ff fc29 	bl	80009bc <__aeabi_dcmplt>
 800116a:	b928      	cbnz	r0, 8001178 <__aeabi_d2lz+0x1c>
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001174:	f000 b80a 	b.w	800118c <__aeabi_d2ulz>
 8001178:	4620      	mov	r0, r4
 800117a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800117e:	f000 f805 	bl	800118c <__aeabi_d2ulz>
 8001182:	4240      	negs	r0, r0
 8001184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop

0800118c <__aeabi_d2ulz>:
 800118c:	b5d0      	push	{r4, r6, r7, lr}
 800118e:	2200      	movs	r2, #0
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__aeabi_d2ulz+0x34>)
 8001192:	4606      	mov	r6, r0
 8001194:	460f      	mov	r7, r1
 8001196:	f7ff f99f 	bl	80004d8 <__aeabi_dmul>
 800119a:	f7ff fc75 	bl	8000a88 <__aeabi_d2uiz>
 800119e:	4604      	mov	r4, r0
 80011a0:	f7ff f920 	bl	80003e4 <__aeabi_ui2d>
 80011a4:	2200      	movs	r2, #0
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <__aeabi_d2ulz+0x38>)
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4630      	mov	r0, r6
 80011b2:	4639      	mov	r1, r7
 80011b4:	f7fe ffd8 	bl	8000168 <__aeabi_dsub>
 80011b8:	f7ff fc66 	bl	8000a88 <__aeabi_d2uiz>
 80011bc:	4621      	mov	r1, r4
 80011be:	bdd0      	pop	{r4, r6, r7, pc}
 80011c0:	3df00000 	.word	0x3df00000
 80011c4:	41f00000 	.word	0x41f00000

080011c8 <lireTensionBatterie>:
char buffer1[400];
uint16_t raw_batterie;
uint16_t raw_tension_stable;
int pourcentageBatterie;
// Fonction pour lire la valeur de la batterie
int lireTensionBatterie() {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	@ 0x28
 80011cc:	af02      	add	r7, sp, #8
    GPIO_InitTypeDef GPIO_InitStruct;

    // Activer l'horloge pour le port GPIO de la batterie
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b60      	ldr	r3, [pc, #384]	@ (8001350 <lireTensionBatterie+0x188>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001350 <lireTensionBatterie+0x188>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	6193      	str	r3, [r2, #24]
 80011da:	4b5d      	ldr	r3, [pc, #372]	@ (8001350 <lireTensionBatterie+0x188>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

    // Configurer le pin GPIO de la batterie pour une entrée analogique
    GPIO_InitStruct.Pin = BATTERIE_PIN;
 80011e6:	2301      	movs	r3, #1
 80011e8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ea:	2303      	movs	r3, #3
 80011ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BATTERIE_PORT, &GPIO_InitStruct);
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4619      	mov	r1, r3
 80011f8:	4856      	ldr	r0, [pc, #344]	@ (8001354 <lireTensionBatterie+0x18c>)
 80011fa:	f002 fb7d 	bl	80038f8 <HAL_GPIO_Init>

    // Attendre un court instant pour que le GPIO se stabilise
    HAL_Delay(10);
 80011fe:	200a      	movs	r0, #10
 8001200:	f001 fe46 	bl	8002e90 <HAL_Delay>

    // Lecture de la valeur analogique
    HAL_ADC_Start(&hadc1);
 8001204:	4854      	ldr	r0, [pc, #336]	@ (8001358 <lireTensionBatterie+0x190>)
 8001206:	f001 ff3f 	bl	8003088 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800120a:	f04f 31ff 	mov.w	r1, #4294967295
 800120e:	4852      	ldr	r0, [pc, #328]	@ (8001358 <lireTensionBatterie+0x190>)
 8001210:	f001 ffe8 	bl	80031e4 <HAL_ADC_PollForConversion>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d17b      	bne.n	8001312 <lireTensionBatterie+0x14a>
        HAL_ADC_PollForConversion(&hadc1, 300);
 800121a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800121e:	484e      	ldr	r0, [pc, #312]	@ (8001358 <lireTensionBatterie+0x190>)
 8001220:	f001 ffe0 	bl	80031e4 <HAL_ADC_PollForConversion>
        raw_batterie = HAL_ADC_GetValue(&hadc1);
 8001224:	484c      	ldr	r0, [pc, #304]	@ (8001358 <lireTensionBatterie+0x190>)
 8001226:	f002 f8e3 	bl	80033f0 <HAL_ADC_GetValue>
 800122a:	4603      	mov	r3, r0
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b4b      	ldr	r3, [pc, #300]	@ (800135c <lireTensionBatterie+0x194>)
 8001230:	801a      	strh	r2, [r3, #0]
        float tensionBatterie = raw_batterie * (3.3 / 4096) * 1.054;
 8001232:	4b4a      	ldr	r3, [pc, #296]	@ (800135c <lireTensionBatterie+0x194>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f8e4 	bl	8000404 <__aeabi_i2d>
 800123c:	a340      	add	r3, pc, #256	@ (adr r3, 8001340 <lireTensionBatterie+0x178>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f949 	bl	80004d8 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	a33e      	add	r3, pc, #248	@ (adr r3, 8001348 <lireTensionBatterie+0x180>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff f940 	bl	80004d8 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc32 	bl	8000ac8 <__aeabi_d2f>
 8001264:	4603      	mov	r3, r0
 8001266:	61bb      	str	r3, [r7, #24]
        tensionBatterie = (tensionBatterie * 37500) / 7500;
 8001268:	493d      	ldr	r1, [pc, #244]	@ (8001360 <lireTensionBatterie+0x198>)
 800126a:	69b8      	ldr	r0, [r7, #24]
 800126c:	f7ff fd8a 	bl	8000d84 <__aeabi_fmul>
 8001270:	4603      	mov	r3, r0
 8001272:	493c      	ldr	r1, [pc, #240]	@ (8001364 <lireTensionBatterie+0x19c>)
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fe39 	bl	8000eec <__aeabi_fdiv>
 800127a:	4603      	mov	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]

        // Calcul du pourcentage de charge de la batterie
        int pourcentageBatterie;
        if (tensionBatterie > 13) {
 800127e:	493a      	ldr	r1, [pc, #232]	@ (8001368 <lireTensionBatterie+0x1a0>)
 8001280:	69b8      	ldr	r0, [r7, #24]
 8001282:	f7ff ff3b 	bl	80010fc <__aeabi_fcmpgt>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <lireTensionBatterie+0xca>
            pourcentageBatterie = 90;
 800128c:	235a      	movs	r3, #90	@ 0x5a
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	e024      	b.n	80012dc <lireTensionBatterie+0x114>
        } else if (tensionBatterie > 10 && tensionBatterie <= 13) {
 8001292:	4936      	ldr	r1, [pc, #216]	@ (800136c <lireTensionBatterie+0x1a4>)
 8001294:	69b8      	ldr	r0, [r7, #24]
 8001296:	f7ff ff31 	bl	80010fc <__aeabi_fcmpgt>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d01b      	beq.n	80012d8 <lireTensionBatterie+0x110>
 80012a0:	4931      	ldr	r1, [pc, #196]	@ (8001368 <lireTensionBatterie+0x1a0>)
 80012a2:	69b8      	ldr	r0, [r7, #24]
 80012a4:	f7ff ff16 	bl	80010d4 <__aeabi_fcmple>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d014      	beq.n	80012d8 <lireTensionBatterie+0x110>
            pourcentageBatterie = ((tensionBatterie - 10) / (13 - 10)) * 100;
 80012ae:	492f      	ldr	r1, [pc, #188]	@ (800136c <lireTensionBatterie+0x1a4>)
 80012b0:	69b8      	ldr	r0, [r7, #24]
 80012b2:	f7ff fc5d 	bl	8000b70 <__aeabi_fsub>
 80012b6:	4603      	mov	r3, r0
 80012b8:	492d      	ldr	r1, [pc, #180]	@ (8001370 <lireTensionBatterie+0x1a8>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fe16 	bl	8000eec <__aeabi_fdiv>
 80012c0:	4603      	mov	r3, r0
 80012c2:	492c      	ldr	r1, [pc, #176]	@ (8001374 <lireTensionBatterie+0x1ac>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fd5d 	bl	8000d84 <__aeabi_fmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff1f 	bl	8001110 <__aeabi_f2iz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	e001      	b.n	80012dc <lireTensionBatterie+0x114>
        } else {
            pourcentageBatterie = 5;
 80012d8:	2305      	movs	r3, #5
 80012da:	61fb      	str	r3, [r7, #28]
        }

        // Affichage de la tension de la batterie via UART
        snprintf(buffer1, sizeof(buffer1), "\nLe pourcentage de la batterie en pourcentage : %d \nLa tension du batterie %.2f", pourcentageBatterie, tensionBatterie);
 80012dc:	69b8      	ldr	r0, [r7, #24]
 80012de:	f7ff f8a3 	bl	8000428 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	e9cd 2300 	strd	r2, r3, [sp]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	4a22      	ldr	r2, [pc, #136]	@ (8001378 <lireTensionBatterie+0x1b0>)
 80012ee:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80012f2:	4822      	ldr	r0, [pc, #136]	@ (800137c <lireTensionBatterie+0x1b4>)
 80012f4:	f005 ffd8 	bl	80072a8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, strlen(buffer1), HAL_MAX_DELAY);
 80012f8:	4820      	ldr	r0, [pc, #128]	@ (800137c <lireTensionBatterie+0x1b4>)
 80012fa:	f7fe ff29 	bl	8000150 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29a      	uxth	r2, r3
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	491d      	ldr	r1, [pc, #116]	@ (800137c <lireTensionBatterie+0x1b4>)
 8001308:	481d      	ldr	r0, [pc, #116]	@ (8001380 <lireTensionBatterie+0x1b8>)
 800130a:	f003 fff1 	bl	80052f0 <HAL_UART_Transmit>

        return pourcentageBatterie;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	e012      	b.n	8001338 <lireTensionBatterie+0x170>
    } else {
        // Gestion de l'échec de la conversion ADC
        snprintf(buffer1, sizeof(buffer1), "\nÉchec de la conversion ADC pour la batterie");
 8001312:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <lireTensionBatterie+0x1bc>)
 8001314:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001318:	4818      	ldr	r0, [pc, #96]	@ (800137c <lireTensionBatterie+0x1b4>)
 800131a:	f005 ffc5 	bl	80072a8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, strlen(buffer1), HAL_MAX_DELAY);
 800131e:	4817      	ldr	r0, [pc, #92]	@ (800137c <lireTensionBatterie+0x1b4>)
 8001320:	f7fe ff16 	bl	8000150 <strlen>
 8001324:	4603      	mov	r3, r0
 8001326:	b29a      	uxth	r2, r3
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	4913      	ldr	r1, [pc, #76]	@ (800137c <lireTensionBatterie+0x1b4>)
 800132e:	4814      	ldr	r0, [pc, #80]	@ (8001380 <lireTensionBatterie+0x1b8>)
 8001330:	f003 ffde 	bl	80052f0 <HAL_UART_Transmit>

        return -1.0f; // Valeur d'erreur
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001338:	4618      	mov	r0, r3
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	66666666 	.word	0x66666666
 8001344:	3f4a6666 	.word	0x3f4a6666
 8001348:	1a9fbe77 	.word	0x1a9fbe77
 800134c:	3ff0dd2f 	.word	0x3ff0dd2f
 8001350:	40021000 	.word	0x40021000
 8001354:	40010c00 	.word	0x40010c00
 8001358:	200004a8 	.word	0x200004a8
 800135c:	200004a4 	.word	0x200004a4
 8001360:	47127c00 	.word	0x47127c00
 8001364:	45ea6000 	.word	0x45ea6000
 8001368:	41500000 	.word	0x41500000
 800136c:	41200000 	.word	0x41200000
 8001370:	40400000 	.word	0x40400000
 8001374:	42c80000 	.word	0x42c80000
 8001378:	0800a740 	.word	0x0800a740
 800137c:	20000314 	.word	0x20000314
 8001380:	200009c4 	.word	0x200009c4
 8001384:	0800a790 	.word	0x0800a790

08001388 <lireTensionStable>:


// Fonction pour lire la tension stable
int lireTensionStable() {
 8001388:	b580      	push	{r7, lr}
 800138a:	b088      	sub	sp, #32
 800138c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    int VoltageState = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    // Activer l'horloge pour le port GPIO de la tension stable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b49      	ldr	r3, [pc, #292]	@ (80014b8 <lireTensionStable+0x130>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	4a48      	ldr	r2, [pc, #288]	@ (80014b8 <lireTensionStable+0x130>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6193      	str	r3, [r2, #24]
 800139e:	4b46      	ldr	r3, [pc, #280]	@ (80014b8 <lireTensionStable+0x130>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]

    // Configurer le pin GPIO de la tension stable pour une entrée analogique
    GPIO_InitStruct.Pin = TENSION_STABLE_PIN;
 80013aa:	2380      	movs	r3, #128	@ 0x80
 80013ac:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ae:	2303      	movs	r3, #3
 80013b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(TENSION_STABLE_PORT, &GPIO_InitStruct);
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	483f      	ldr	r0, [pc, #252]	@ (80014bc <lireTensionStable+0x134>)
 80013be:	f002 fa9b 	bl	80038f8 <HAL_GPIO_Init>

    // Attendre un court instant pour que le GPIO se stabilise
    HAL_Delay(10);
 80013c2:	200a      	movs	r0, #10
 80013c4:	f001 fd64 	bl	8002e90 <HAL_Delay>

    // Lecture de la valeur analogique de la tension stable
    HAL_ADC_Start(&hadc2); // Assurez-vous que hadc2 est correctement configuré pour votre tension stable
 80013c8:	483d      	ldr	r0, [pc, #244]	@ (80014c0 <lireTensionStable+0x138>)
 80013ca:	f001 fe5d 	bl	8003088 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) == HAL_OK) {
 80013ce:	f04f 31ff 	mov.w	r1, #4294967295
 80013d2:	483b      	ldr	r0, [pc, #236]	@ (80014c0 <lireTensionStable+0x138>)
 80013d4:	f001 ff06 	bl	80031e4 <HAL_ADC_PollForConversion>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d150      	bne.n	8001480 <lireTensionStable+0xf8>
        HAL_ADC_PollForConversion(&hadc2, 300);
 80013de:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80013e2:	4837      	ldr	r0, [pc, #220]	@ (80014c0 <lireTensionStable+0x138>)
 80013e4:	f001 fefe 	bl	80031e4 <HAL_ADC_PollForConversion>
        raw_tension_stable = HAL_ADC_GetValue(&hadc2);
 80013e8:	4835      	ldr	r0, [pc, #212]	@ (80014c0 <lireTensionStable+0x138>)
 80013ea:	f002 f801 	bl	80033f0 <HAL_ADC_GetValue>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b34      	ldr	r3, [pc, #208]	@ (80014c4 <lireTensionStable+0x13c>)
 80013f4:	801a      	strh	r2, [r3, #0]
        float tensionStable = raw_tension_stable * (3.3 / 4096);
 80013f6:	4b33      	ldr	r3, [pc, #204]	@ (80014c4 <lireTensionStable+0x13c>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f802 	bl	8000404 <__aeabi_i2d>
 8001400:	a32b      	add	r3, pc, #172	@ (adr r3, 80014b0 <lireTensionStable+0x128>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	f7ff f867 	bl	80004d8 <__aeabi_dmul>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	f7ff fb59 	bl	8000ac8 <__aeabi_d2f>
 8001416:	4603      	mov	r3, r0
 8001418:	61bb      	str	r3, [r7, #24]
        tensionStable = (tensionStable * 37500) / 7500;
 800141a:	492b      	ldr	r1, [pc, #172]	@ (80014c8 <lireTensionStable+0x140>)
 800141c:	69b8      	ldr	r0, [r7, #24]
 800141e:	f7ff fcb1 	bl	8000d84 <__aeabi_fmul>
 8001422:	4603      	mov	r3, r0
 8001424:	4929      	ldr	r1, [pc, #164]	@ (80014cc <lireTensionStable+0x144>)
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fd60 	bl	8000eec <__aeabi_fdiv>
 800142c:	4603      	mov	r3, r0
 800142e:	61bb      	str	r3, [r7, #24]
        // Affichage de la tension stable via UART
        if (tensionStable > 1)
 8001430:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001434:	69b8      	ldr	r0, [r7, #24]
 8001436:	f7ff fe61 	bl	80010fc <__aeabi_fcmpgt>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <lireTensionStable+0xbc>
        {
        	return 1;
 8001440:	2301      	movs	r3, #1
 8001442:	e030      	b.n	80014a6 <lireTensionStable+0x11e>
        }
        else if (tensionStable < 1)
 8001444:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001448:	69b8      	ldr	r0, [r7, #24]
 800144a:	f7ff fe39 	bl	80010c0 <__aeabi_fcmplt>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <lireTensionStable+0xd0>
        {
        	return 0;
 8001454:	2300      	movs	r3, #0
 8001456:	e026      	b.n	80014a6 <lireTensionStable+0x11e>
        }
        snprintf(buffer1, sizeof(buffer1), "\nLa tension stable est : %d", VoltageState);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	4a1d      	ldr	r2, [pc, #116]	@ (80014d0 <lireTensionStable+0x148>)
 800145c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001460:	481c      	ldr	r0, [pc, #112]	@ (80014d4 <lireTensionStable+0x14c>)
 8001462:	f005 ff21 	bl	80072a8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, strlen(buffer1), HAL_MAX_DELAY);
 8001466:	481b      	ldr	r0, [pc, #108]	@ (80014d4 <lireTensionStable+0x14c>)
 8001468:	f7fe fe72 	bl	8000150 <strlen>
 800146c:	4603      	mov	r3, r0
 800146e:	b29a      	uxth	r2, r3
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
 8001474:	4917      	ldr	r1, [pc, #92]	@ (80014d4 <lireTensionStable+0x14c>)
 8001476:	4818      	ldr	r0, [pc, #96]	@ (80014d8 <lireTensionStable+0x150>)
 8001478:	f003 ff3a 	bl	80052f0 <HAL_UART_Transmit>

        return VoltageState;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	e012      	b.n	80014a6 <lireTensionStable+0x11e>
        //return VoltageState;
    } else {
        // Gestion de l'échec de la conversion ADC
        snprintf(buffer1, sizeof(buffer1), "\nÉchec de la conversion ADC pour la tension stable");
 8001480:	4a16      	ldr	r2, [pc, #88]	@ (80014dc <lireTensionStable+0x154>)
 8001482:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001486:	4813      	ldr	r0, [pc, #76]	@ (80014d4 <lireTensionStable+0x14c>)
 8001488:	f005 ff0e 	bl	80072a8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer1, strlen(buffer1), HAL_MAX_DELAY);
 800148c:	4811      	ldr	r0, [pc, #68]	@ (80014d4 <lireTensionStable+0x14c>)
 800148e:	f7fe fe5f 	bl	8000150 <strlen>
 8001492:	4603      	mov	r3, r0
 8001494:	b29a      	uxth	r2, r3
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	490e      	ldr	r1, [pc, #56]	@ (80014d4 <lireTensionStable+0x14c>)
 800149c:	480e      	ldr	r0, [pc, #56]	@ (80014d8 <lireTensionStable+0x150>)
 800149e:	f003 ff27 	bl	80052f0 <HAL_UART_Transmit>

        return -1.0f; // Valeur d'erreur
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	66666666 	.word	0x66666666
 80014b4:	3f4a6666 	.word	0x3f4a6666
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010800 	.word	0x40010800
 80014c0:	200004d8 	.word	0x200004d8
 80014c4:	200004a6 	.word	0x200004a6
 80014c8:	47127c00 	.word	0x47127c00
 80014cc:	45ea6000 	.word	0x45ea6000
 80014d0:	0800a7c0 	.word	0x0800a7c0
 80014d4:	20000314 	.word	0x20000314
 80014d8:	200009c4 	.word	0x200009c4
 80014dc:	0800a7dc 	.word	0x0800a7dc

080014e0 <newLoRa>:
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */


LoRa newLoRa(){
 80014e0:	b4b0      	push	{r4, r5, r7}
 80014e2:	b08f      	sub	sp, #60	@ 0x3c
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 868       ;
 80014e8:	f44f 7359 	mov.w	r3, #868	@ 0x364
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_9      ;
 80014ee:	2309      	movs	r3, #9
 80014f0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_250KHz ;
 80014f4:	2308      	movs	r3, #8
 80014f6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_8    ;
 80014fa:	2304      	movs	r3, #4
 80014fc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_17db;
 8001500:	23fc      	movs	r3, #252	@ 0xfc
 8001502:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 130       ;
 8001506:	2382      	movs	r3, #130	@ 0x82
 8001508:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 800150c:	2308      	movs	r3, #8
 800150e:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	461d      	mov	r5, r3
 8001514:	f107 040c 	add.w	r4, r7, #12
 8001518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800151c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800151e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001520:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001524:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	373c      	adds	r7, #60	@ 0x3c
 800152c:	46bd      	mov	sp, r7
 800152e:	bcb0      	pop	{r4, r5, r7}
 8001530:	4770      	bx	lr

08001532 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 800153c:	2101      	movs	r1, #1
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f9ff 	bl	8001942 <LoRa_read>
 8001544:	4603      	mov	r3, r0
 8001546:	73bb      	strb	r3, [r7, #14]
	data = read;
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d107      	bne.n	8001562 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001552:	7bbb      	ldrb	r3, [r7, #14]
 8001554:	f023 0307 	bic.w	r3, r3, #7
 8001558:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
 8001560:	e03e      	b.n	80015e0 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d10c      	bne.n	8001582 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8001568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800156c:	f023 0307 	bic.w	r3, r3, #7
 8001570:	b25b      	sxtb	r3, r3
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	b25b      	sxtb	r3, r3
 8001578:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	61da      	str	r2, [r3, #28]
 8001580:	e02e      	b.n	80015e0 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d10c      	bne.n	80015a2 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8001588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800158c:	f023 0307 	bic.w	r3, r3, #7
 8001590:	b25b      	sxtb	r3, r3
 8001592:	f043 0303 	orr.w	r3, r3, #3
 8001596:	b25b      	sxtb	r3, r3
 8001598:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2203      	movs	r2, #3
 800159e:	61da      	str	r2, [r3, #28]
 80015a0:	e01e      	b.n	80015e0 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d10c      	bne.n	80015c2 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80015a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015ac:	f023 0307 	bic.w	r3, r3, #7
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	f043 0305 	orr.w	r3, r3, #5
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2205      	movs	r2, #5
 80015be:	61da      	str	r2, [r3, #28]
 80015c0:	e00e      	b.n	80015e0 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	2b06      	cmp	r3, #6
 80015c6:	d10b      	bne.n	80015e0 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80015c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015cc:	f023 0307 	bic.w	r3, r3, #7
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	f043 0306 	orr.w	r3, r3, #6
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2206      	movs	r2, #6
 80015de:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	461a      	mov	r2, r3
 80015e4:	2101      	movs	r1, #1
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f9c5 	bl	8001976 <LoRa_write>
	//HAL_Delay(10);
}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	4613      	mov	r3, r2
 8001602:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	889b      	ldrh	r3, [r3, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	4619      	mov	r1, r3
 8001610:	f002 faf6 	bl	8003c00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6998      	ldr	r0, [r3, #24]
 8001618:	88fa      	ldrh	r2, [r7, #6]
 800161a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	f003 f906 	bl	8004830 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001624:	bf00      	nop
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	4618      	mov	r0, r3
 800162c:	f003 fd0b 	bl	8005046 <HAL_SPI_GetState>
 8001630:	4603      	mov	r3, r0
 8001632:	2b01      	cmp	r3, #1
 8001634:	d1f7      	bne.n	8001626 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6998      	ldr	r0, [r3, #24]
 800163a:	8b3a      	ldrh	r2, [r7, #24]
 800163c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001640:	6839      	ldr	r1, [r7, #0]
 8001642:	f003 fa38 	bl	8004ab6 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001646:	bf00      	nop
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4618      	mov	r0, r3
 800164e:	f003 fcfa 	bl	8005046 <HAL_SPI_GetState>
 8001652:	4603      	mov	r3, r0
 8001654:	2b01      	cmp	r3, #1
 8001656:	d1f7      	bne.n	8001648 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	889b      	ldrh	r3, [r3, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	4619      	mov	r1, r3
 8001664:	f002 facc 	bl	8003c00 <HAL_GPIO_WritePin>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	4613      	mov	r3, r2
 800167e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	889b      	ldrh	r3, [r3, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	f002 fab8 	bl	8003c00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6998      	ldr	r0, [r3, #24]
 8001694:	88fa      	ldrh	r2, [r7, #6]
 8001696:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	f003 f8c8 	bl	8004830 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80016a0:	bf00      	nop
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 fccd 	bl	8005046 <HAL_SPI_GetState>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d1f7      	bne.n	80016a2 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6998      	ldr	r0, [r3, #24]
 80016b6:	8b3a      	ldrh	r2, [r7, #24]
 80016b8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016bc:	6839      	ldr	r1, [r7, #0]
 80016be:	f003 f8b7 	bl	8004830 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80016c2:	bf00      	nop
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fcbc 	bl	8005046 <HAL_SPI_GetState>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d1f7      	bne.n	80016c4 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	889b      	ldrh	r3, [r3, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	4619      	mov	r1, r3
 80016e0:	f002 fa8e 	bl	8003c00 <HAL_GPIO_WritePin>
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 80016f8:	2126      	movs	r1, #38	@ 0x26
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f921 	bl	8001942 <LoRa_read>
 8001700:	4603      	mov	r3, r0
 8001702:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d004      	beq.n	8001714 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e003      	b.n	800171c <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8001714:	7bbb      	ldrb	r3, [r7, #14]
 8001716:	f023 0308 	bic.w	r3, r3, #8
 800171a:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	461a      	mov	r2, r3
 8001720:	2126      	movs	r1, #38	@ 0x26
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f927 	bl	8001976 <LoRa_write>
	HAL_Delay(10);
 8001728:	200a      	movs	r0, #10
 800172a:	f001 fbb1 	bl	8002e90 <HAL_Delay>
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8001738:	b580      	push	{r7, lr}
 800173a:	b096      	sub	sp, #88	@ 0x58
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8001740:	4a17      	ldr	r2, [pc, #92]	@ (80017a0 <LoRa_setAutoLDO+0x68>)
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	4611      	mov	r1, r2
 8001748:	2250      	movs	r2, #80	@ 0x50
 800174a:	4618      	mov	r0, r3
 800174c:	f005 ff45 	bl	80075da <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001756:	461a      	mov	r2, r3
 8001758:	2301      	movs	r3, #1
 800175a:	4093      	lsls	r3, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe fe51 	bl	8000404 <__aeabi_i2d>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	3358      	adds	r3, #88	@ 0x58
 800176c:	443b      	add	r3, r7
 800176e:	3b50      	subs	r3, #80	@ 0x50
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7fe ffda 	bl	800072c <__aeabi_ddiv>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f7ff f95a 	bl	8000a38 <__aeabi_d2iz>
 8001784:	4603      	mov	r3, r0
 8001786:	2b10      	cmp	r3, #16
 8001788:	bfcc      	ite	gt
 800178a:	2301      	movgt	r3, #1
 800178c:	2300      	movle	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4619      	mov	r1, r3
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ffaa 	bl	80016ec <LoRa_setLowDaraRateOptimization>
}
 8001798:	bf00      	nop
 800179a:	3758      	adds	r7, #88	@ 0x58
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	0800a810 	.word	0x0800a810

080017a4 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	04db      	lsls	r3, r3, #19
 80017b2:	115b      	asrs	r3, r3, #5
 80017b4:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	0c1b      	lsrs	r3, r3, #16
 80017ba:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80017bc:	7afb      	ldrb	r3, [r7, #11]
 80017be:	461a      	mov	r2, r3
 80017c0:	2106      	movs	r1, #6
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f8d7 	bl	8001976 <LoRa_write>
	HAL_Delay(5);
 80017c8:	2005      	movs	r0, #5
 80017ca:	f001 fb61 	bl	8002e90 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80017d4:	7afb      	ldrb	r3, [r7, #11]
 80017d6:	461a      	mov	r2, r3
 80017d8:	2107      	movs	r1, #7
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f8cb 	bl	8001976 <LoRa_write>
	HAL_Delay(5);
 80017e0:	2005      	movs	r0, #5
 80017e2:	f001 fb55 	bl	8002e90 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	461a      	mov	r2, r3
 80017ee:	2108      	movs	r1, #8
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f8c0 	bl	8001976 <LoRa_write>
	HAL_Delay(5);
 80017f6:	2005      	movs	r0, #5
 80017f8:	f001 fb4a 	bl	8002e90 <HAL_Delay>
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	2b0c      	cmp	r3, #12
 8001812:	dd01      	ble.n	8001818 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001814:	230c      	movs	r3, #12
 8001816:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2b06      	cmp	r3, #6
 800181c:	dc01      	bgt.n	8001822 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800181e:	2307      	movs	r3, #7
 8001820:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001822:	211e      	movs	r1, #30
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f88c 	bl	8001942 <LoRa_read>
 800182a:	4603      	mov	r3, r0
 800182c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800182e:	200a      	movs	r0, #10
 8001830:	f001 fb2e 	bl	8002e90 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	b2da      	uxtb	r2, r3
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	b2db      	uxtb	r3, r3
 8001844:	4413      	add	r3, r2
 8001846:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001848:	7bbb      	ldrb	r3, [r7, #14]
 800184a:	461a      	mov	r2, r3
 800184c:	211e      	movs	r1, #30
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f891 	bl	8001976 <LoRa_write>
	HAL_Delay(10);
 8001854:	200a      	movs	r0, #10
 8001856:	f001 fb1b 	bl	8002e90 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff ff6c 	bl	8001738 <LoRa_setAutoLDO>
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	461a      	mov	r2, r3
 8001878:	2109      	movs	r1, #9
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f87b 	bl	8001976 <LoRa_write>
	HAL_Delay(10);
 8001880:	200a      	movs	r0, #10
 8001882:	f001 fb05 	bl	8002e90 <HAL_Delay>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	2b2c      	cmp	r3, #44	@ 0x2c
 80018a4:	d801      	bhi.n	80018aa <LoRa_setOCP+0x1a>
		current = 45;
 80018a6:	232d      	movs	r3, #45	@ 0x2d
 80018a8:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	2bf0      	cmp	r3, #240	@ 0xf0
 80018ae:	d901      	bls.n	80018b4 <LoRa_setOCP+0x24>
		current = 240;
 80018b0:	23f0      	movs	r3, #240	@ 0xf0
 80018b2:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	2b78      	cmp	r3, #120	@ 0x78
 80018b8:	d809      	bhi.n	80018ce <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	3b2d      	subs	r3, #45	@ 0x2d
 80018be:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <LoRa_setOCP+0x78>)
 80018c0:	fb82 1203 	smull	r1, r2, r2, r3
 80018c4:	1052      	asrs	r2, r2, #1
 80018c6:	17db      	asrs	r3, r3, #31
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e00b      	b.n	80018e6 <LoRa_setOCP+0x56>
	else if(current <= 240)
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	2bf0      	cmp	r3, #240	@ 0xf0
 80018d2:	d808      	bhi.n	80018e6 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	331e      	adds	r3, #30
 80018d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001908 <LoRa_setOCP+0x78>)
 80018da:	fb82 1203 	smull	r1, r2, r2, r3
 80018de:	1092      	asrs	r2, r2, #2
 80018e0:	17db      	asrs	r3, r3, #31
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	3320      	adds	r3, #32
 80018ea:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	461a      	mov	r2, r3
 80018f0:	210b      	movs	r1, #11
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f83f 	bl	8001976 <LoRa_write>
	HAL_Delay(10);
 80018f8:	200a      	movs	r0, #10
 80018fa:	f001 fac9 	bl	8002e90 <HAL_Delay>
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	66666667 	.word	0x66666667

0800190c <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001914:	211e      	movs	r1, #30
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f813 	bl	8001942 <LoRa_read>
 800191c:	4603      	mov	r3, r0
 800191e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	f043 0307 	orr.w	r3, r3, #7
 8001926:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	461a      	mov	r2, r3
 800192c:	211e      	movs	r1, #30
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f821 	bl	8001976 <LoRa_write>
	HAL_Delay(10);
 8001934:	200a      	movs	r0, #10
 8001936:	f001 faab 	bl	8002e90 <HAL_Delay>
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af02      	add	r7, sp, #8
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	460b      	mov	r3, r1
 800194c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001954:	b2db      	uxtb	r3, r3
 8001956:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001958:	f107 030f 	add.w	r3, r7, #15
 800195c:	f107 010e 	add.w	r1, r7, #14
 8001960:	2201      	movs	r2, #1
 8001962:	9200      	str	r2, [sp, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fe44 	bl	80015f4 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af02      	add	r7, sp, #8
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	70fb      	strb	r3, [r7, #3]
 8001982:	4613      	mov	r3, r2
 8001984:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800198c:	b2db      	uxtb	r3, r3
 800198e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001990:	78bb      	ldrb	r3, [r7, #2]
 8001992:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001994:	f107 030f 	add.w	r3, r7, #15
 8001998:	f107 010e 	add.w	r1, r7, #14
 800199c:	2201      	movs	r2, #1
 800199e:	9200      	str	r2, [sp, #0]
 80019a0:	2201      	movs	r2, #1
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fe64 	bl	8001670 <LoRa_writeReg>
	//HAL_Delay(5);
}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

	return 1;
 80019b8:	2301      	movs	r3, #1
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b089      	sub	sp, #36	@ 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	4613      	mov	r3, r2
 80019d0:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	e007      	b.n	80019ec <LoRa_receive+0x28>
		data[i]=0;
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	4413      	add	r3, r2
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	3301      	adds	r3, #1
 80019ea:	61bb      	str	r3, [r7, #24]
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dbf3      	blt.n	80019dc <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80019f4:	2101      	movs	r1, #1
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fd9b 	bl	8001532 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80019fc:	2112      	movs	r1, #18
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f7ff ff9f 	bl	8001942 <LoRa_read>
 8001a04:	4603      	mov	r3, r0
 8001a06:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8001a08:	7cfb      	ldrb	r3, [r7, #19]
 8001a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d02f      	beq.n	8001a72 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001a12:	22ff      	movs	r2, #255	@ 0xff
 8001a14:	2112      	movs	r1, #18
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f7ff ffad 	bl	8001976 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001a1c:	2113      	movs	r1, #19
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f7ff ff8f 	bl	8001942 <LoRa_read>
 8001a24:	4603      	mov	r3, r0
 8001a26:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001a28:	2110      	movs	r1, #16
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff ff89 	bl	8001942 <LoRa_read>
 8001a30:	4603      	mov	r3, r0
 8001a32:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001a34:	7cfb      	ldrb	r3, [r7, #19]
 8001a36:	461a      	mov	r2, r3
 8001a38:	210d      	movs	r1, #13
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f7ff ff9b 	bl	8001976 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001a40:	7cba      	ldrb	r2, [r7, #18]
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	4293      	cmp	r3, r2
 8001a46:	bf28      	it	cs
 8001a48:	4613      	movcs	r3, r2
 8001a4a:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e00b      	b.n	8001a6a <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	18d4      	adds	r4, r2, r3
 8001a58:	2100      	movs	r1, #0
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f7ff ff71 	bl	8001942 <LoRa_read>
 8001a60:	4603      	mov	r3, r0
 8001a62:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	7ffb      	ldrb	r3, [r7, #31]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	dbef      	blt.n	8001a52 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001a72:	2105      	movs	r1, #5
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fd5c 	bl	8001532 <LoRa_gotoMode>
    return min;
 8001a7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3724      	adds	r7, #36	@ 0x24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd90      	pop	{r4, r7, pc}

08001a84 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff ff8f 	bl	80019b0 <LoRa_isvalid>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8096 	beq.w	8001bc6 <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fd48 	bl	8001532 <LoRa_gotoMode>
			HAL_Delay(10);
 8001aa2:	200a      	movs	r0, #10
 8001aa4:	f001 f9f4 	bl	8002e90 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ff49 	bl	8001942 <LoRa_read>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8001ab4:	200a      	movs	r0, #10
 8001ab6:	f001 f9eb 	bl	8002e90 <HAL_Delay>
			data = read | 0x80;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ac0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001ac2:	7bbb      	ldrb	r3, [r7, #14]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff ff54 	bl	8001976 <LoRa_write>
			HAL_Delay(100);
 8001ace:	2064      	movs	r0, #100	@ 0x64
 8001ad0:	f001 f9de 	bl	8002e90 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fe62 	bl	80017a4 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff febd 	bl	8001868 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001af4:	4619      	mov	r1, r3
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff feca 	bl	8001890 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001afc:	2223      	movs	r2, #35	@ 0x23
 8001afe:	210c      	movs	r1, #12
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff38 	bl	8001976 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ff00 	bl	800190c <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b12:	4619      	mov	r1, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7ff fe75 	bl	8001804 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001b1a:	22ff      	movs	r2, #255	@ 0xff
 8001b1c:	211f      	movs	r1, #31
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ff29 	bl	8001976 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	461a      	mov	r2, r3
 8001b44:	211d      	movs	r1, #29
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff15 	bl	8001976 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fdf3 	bl	8001738 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b56:	0a1b      	lsrs	r3, r3, #8
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2120      	movs	r1, #32
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff08 	bl	8001976 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	2121      	movs	r1, #33	@ 0x21
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff00 	bl	8001976 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001b76:	2140      	movs	r1, #64	@ 0x40
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff fee2 	bl	8001942 <LoRa_read>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8001b88:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001b8a:	7bbb      	ldrb	r3, [r7, #14]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2140      	movs	r1, #64	@ 0x40
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fef0 	bl	8001976 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001b96:	2101      	movs	r1, #1
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff fcca 	bl	8001532 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001ba4:	200a      	movs	r0, #10
 8001ba6:	f001 f973 	bl	8002e90 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001baa:	2142      	movs	r1, #66	@ 0x42
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff fec8 	bl	8001942 <LoRa_read>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	2b12      	cmp	r3, #18
 8001bba:	d101      	bne.n	8001bc0 <LoRa_init+0x13c>
				return LORA_OK;
 8001bbc:	23c8      	movs	r3, #200	@ 0xc8
 8001bbe:	e004      	b.n	8001bca <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001bc0:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 8001bc4:	e001      	b.n	8001bca <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 8001bc6:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <separateData>:
/////////////////////////ADDED BY LAFDIL SOUFIANE////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

void separateData(uint8_t *dataReceived, float *dataArray, int size) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b094      	sub	sp, #80	@ 0x50
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
    char *ptr;
    int i = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    char tempBuffer[50]; // Augmentez la taille du tampon temporaire si nécessaire

    // Copie des données reçues dans un tampon temporaire pour éviter de les modifier
    strncpy(tempBuffer, dataReceived, sizeof(tempBuffer) - 1);
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	2231      	movs	r2, #49	@ 0x31
 8001bea:	68f9      	ldr	r1, [r7, #12]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f005 fc45 	bl	800747c <strncpy>
    tempBuffer[sizeof(tempBuffer) - 1] = '\0'; // Assurer la terminaison du tampon temporaire
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41

    // Utiliser sscanf pour extraire les valeurs flottantes
    while ((sscanf(tempBuffer, "%f,", &dataArray[i])) == 1 && i < size) {
 8001bf8:	e019      	b.n	8001c2e <separateData+0x5a>
        // Rechercher la virgule suivante dans la chaîne
        ptr = strchr(tempBuffer, ',');
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	212c      	movs	r1, #44	@ 0x2c
 8001c00:	4618      	mov	r0, r3
 8001c02:	f005 fc1c 	bl	800743e <strchr>
 8001c06:	6478      	str	r0, [r7, #68]	@ 0x44
        if (ptr != NULL) {
 8001c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d021      	beq.n	8001c52 <separateData+0x7e>
            // Avancer le pointeur pour sauter la virgule
            ptr++;
 8001c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c10:	3301      	adds	r3, #1
 8001c12:	647b      	str	r3, [r7, #68]	@ 0x44
            // Mettre à jour le tampon temporaire pour contenir le reste de la chaîne
            strncpy(tempBuffer, ptr, sizeof(tempBuffer) - 1);
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	2231      	movs	r2, #49	@ 0x31
 8001c1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f005 fc2d 	bl	800747c <strncpy>
            tempBuffer[sizeof(tempBuffer) - 1] = '\0'; // Assurer la terminaison du tampon temporaire
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
        } else {
            // Si aucune virgule n'est trouvée, sortir de la boucle
            break;
        }
        i++;
 8001c28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while ((sscanf(tempBuffer, "%f,", &dataArray[i])) == 1 && i < size) {
 8001c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	441a      	add	r2, r3
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	4917      	ldr	r1, [pc, #92]	@ (8001c98 <separateData+0xc4>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f005 fb87 	bl	8007350 <siscanf>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d105      	bne.n	8001c54 <separateData+0x80>
 8001c48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbd4      	blt.n	8001bfa <separateData+0x26>
 8001c50:	e000      	b.n	8001c54 <separateData+0x80>
            break;
 8001c52:	bf00      	nop
    }

    // Débogage : imprimer les valeurs intermédiaires et les tokens extraits
    printf("Nombre de valeurs trouvées : %d\n", i);
 8001c54:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001c56:	4811      	ldr	r0, [pc, #68]	@ (8001c9c <separateData+0xc8>)
 8001c58:	f005 fb14 	bl	8007284 <iprintf>
    for (int j = 0; j < i; j++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c60:	e010      	b.n	8001c84 <separateData+0xb0>
        printf("Valeur %d : %f\n", j, dataArray[j]);
 8001c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	4413      	add	r3, r2
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fbdb 	bl	8000428 <__aeabi_f2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001c78:	4809      	ldr	r0, [pc, #36]	@ (8001ca0 <separateData+0xcc>)
 8001c7a:	f005 fb03 	bl	8007284 <iprintf>
    for (int j = 0; j < i; j++) {
 8001c7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c80:	3301      	adds	r3, #1
 8001c82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dbea      	blt.n	8001c62 <separateData+0x8e>
    }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3750      	adds	r7, #80	@ 0x50
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	0800a860 	.word	0x0800a860
 8001c9c:	0800a864 	.word	0x0800a864
 8001ca0:	0800a888 	.word	0x0800a888

08001ca4 <receiveAndProcessLoRaFrame>:

void receiveAndProcessLoRaFrame(int bytes_received, uint8_t *read_data, float *DataArray, int size) {
 8001ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca8:	b0c8      	sub	sp, #288	@ 0x120
 8001caa:	af0a      	add	r7, sp, #40	@ 0x28
 8001cac:	6178      	str	r0, [r7, #20]
 8001cae:	6139      	str	r1, [r7, #16]
 8001cb0:	60fa      	str	r2, [r7, #12]
 8001cb2:	60bb      	str	r3, [r7, #8]

    char buffer[200];
    if (bytes_received > 0) {
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	dd7c      	ble.n	8001db4 <receiveAndProcessLoRaFrame+0x110>
        read_data[bytes_received] = '\0'; // Assurez-vous que la chaîne est terminée par un caractère nul
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]

        snprintf(buffer, sizeof(buffer), "\nData received: %s\r\n", read_data);
 8001cc4:	f107 001c 	add.w	r0, r7, #28
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4a40      	ldr	r2, [pc, #256]	@ (8001dcc <receiveAndProcessLoRaFrame+0x128>)
 8001ccc:	21c8      	movs	r1, #200	@ 0xc8
 8001cce:	f005 faeb 	bl	80072a8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fa3a 	bl	8000150 <strlen>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	f107 011c 	add.w	r1, r7, #28
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce8:	4839      	ldr	r0, [pc, #228]	@ (8001dd0 <receiveAndProcessLoRaFrame+0x12c>)
 8001cea:	f003 fb01 	bl	80052f0 <HAL_UART_Transmit>

        separateData(read_data, DataArray, size);
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	68f9      	ldr	r1, [r7, #12]
 8001cf2:	6938      	ldr	r0, [r7, #16]
 8001cf4:	f7ff ff6e 	bl	8001bd4 <separateData>

        float Temperature = DataArray[0] / 100;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4935      	ldr	r1, [pc, #212]	@ (8001dd4 <receiveAndProcessLoRaFrame+0x130>)
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f8f4 	bl	8000eec <__aeabi_fdiv>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
        float Conductivity = DataArray[1];
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        float Salinity = DataArray[2];
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
        float TDS = DataArray[3];
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
        float PH = DataArray[4]/100;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	3310      	adds	r3, #16
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	492a      	ldr	r1, [pc, #168]	@ (8001dd4 <receiveAndProcessLoRaFrame+0x130>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f8de 	bl	8000eec <__aeabi_fdiv>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

        snprintf(buffer, sizeof(buffer), "\nTemperature : %.2f °C\nConductivity : %.2f us/cm\nSalinity: %.2f mg/L\nTDS: %.2f mg/L\nPH: %.2f ph \r\n", Temperature, Conductivity, Salinity, TDS, PH);
 8001d36:	f8d7 00f4 	ldr.w	r0, [r7, #244]	@ 0xf4
 8001d3a:	f7fe fb75 	bl	8000428 <__aeabi_f2d>
 8001d3e:	4604      	mov	r4, r0
 8001d40:	460d      	mov	r5, r1
 8001d42:	f8d7 00f0 	ldr.w	r0, [r7, #240]	@ 0xf0
 8001d46:	f7fe fb6f 	bl	8000428 <__aeabi_f2d>
 8001d4a:	4680      	mov	r8, r0
 8001d4c:	4689      	mov	r9, r1
 8001d4e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001d52:	f7fe fb69 	bl	8000428 <__aeabi_f2d>
 8001d56:	4682      	mov	sl, r0
 8001d58:	468b      	mov	fp, r1
 8001d5a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8001d5e:	f7fe fb63 	bl	8000428 <__aeabi_f2d>
 8001d62:	e9c7 0100 	strd	r0, r1, [r7]
 8001d66:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8001d6a:	f7fe fb5d 	bl	8000428 <__aeabi_f2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	f107 001c 	add.w	r0, r7, #28
 8001d76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001d82:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001d86:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d8a:	e9cd 4500 	strd	r4, r5, [sp]
 8001d8e:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <receiveAndProcessLoRaFrame+0x134>)
 8001d90:	21c8      	movs	r1, #200	@ 0xc8
 8001d92:	f005 fa89 	bl	80072a8 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d96:	f107 031c 	add.w	r3, r7, #28
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe f9d8 	bl	8000150 <strlen>
 8001da0:	4603      	mov	r3, r0
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f107 011c 	add.w	r1, r7, #28
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dac:	4808      	ldr	r0, [pc, #32]	@ (8001dd0 <receiveAndProcessLoRaFrame+0x12c>)
 8001dae:	f003 fa9f 	bl	80052f0 <HAL_UART_Transmit>

    } else {
        HAL_UART_Transmit(&huart2, (uint8_t *)"\nAucune donnée reçue", strlen("Aucune donnée reçue\n"), HAL_MAX_DELAY);
    }
}
 8001db2:	e006      	b.n	8001dc2 <receiveAndProcessLoRaFrame+0x11e>
        HAL_UART_Transmit(&huart2, (uint8_t *)"\nAucune donnée reçue", strlen("Aucune donnée reçue\n"), HAL_MAX_DELAY);
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	2216      	movs	r2, #22
 8001dba:	4908      	ldr	r1, [pc, #32]	@ (8001ddc <receiveAndProcessLoRaFrame+0x138>)
 8001dbc:	4804      	ldr	r0, [pc, #16]	@ (8001dd0 <receiveAndProcessLoRaFrame+0x12c>)
 8001dbe:	f003 fa97 	bl	80052f0 <HAL_UART_Transmit>
}
 8001dc2:	bf00      	nop
 8001dc4:	37f8      	adds	r7, #248	@ 0xf8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dcc:	0800a898 	.word	0x0800a898
 8001dd0:	200009c4 	.word	0x200009c4
 8001dd4:	42c80000 	.word	0x42c80000
 8001dd8:	0800a8b0 	.word	0x0800a8b0
 8001ddc:	0800a914 	.word	0x0800a914

08001de0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001df0:	4b18      	ldr	r3, [pc, #96]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001df2:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <MX_ADC1_Init+0x78>)
 8001df4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001df6:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001dfc:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e02:	4b14      	ldr	r3, [pc, #80]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001e0a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001e0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e10:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001e16:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e1c:	480d      	ldr	r0, [pc, #52]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001e1e:	f001 f85b 	bl	8002ed8 <HAL_ADC_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001e28:	f000 faff 	bl	800242a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <MX_ADC1_Init+0x74>)
 8001e3e:	f001 fae3 	bl	8003408 <HAL_ADC_ConfigChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001e48:	f000 faef 	bl	800242a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	200004a8 	.word	0x200004a8
 8001e58:	40012400 	.word	0x40012400

08001e5c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001e6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e6e:	4a19      	ldr	r2, [pc, #100]	@ (8001ed4 <MX_ADC2_Init+0x78>)
 8001e70:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e72:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001e78:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001e7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e84:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e86:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001e8a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e8c:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001e92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001e98:	480d      	ldr	r0, [pc, #52]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001e9a:	f001 f81d 	bl	8002ed8 <HAL_ADC_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001ea4:	f000 fac1 	bl	800242a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ea8:	2307      	movs	r3, #7
 8001eaa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eac:	2301      	movs	r3, #1
 8001eae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <MX_ADC2_Init+0x74>)
 8001eba:	f001 faa5 	bl	8003408 <HAL_ADC_ConfigChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001ec4:	f000 fab1 	bl	800242a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200004d8 	.word	0x200004d8
 8001ed4:	40012800 	.word	0x40012800

08001ed8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	@ 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a28      	ldr	r2, [pc, #160]	@ (8001f94 <HAL_ADC_MspInit+0xbc>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d122      	bne.n	8001f3e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ef8:	4b27      	ldr	r3, [pc, #156]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a26      	ldr	r2, [pc, #152]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f10:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a20      	ldr	r2, [pc, #128]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f16:	f043 0308 	orr.w	r3, r3, #8
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	f107 0318 	add.w	r3, r7, #24
 8001f34:	4619      	mov	r1, r3
 8001f36:	4819      	ldr	r0, [pc, #100]	@ (8001f9c <HAL_ADC_MspInit+0xc4>)
 8001f38:	f001 fcde 	bl	80038f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001f3c:	e026      	b.n	8001f8c <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a17      	ldr	r2, [pc, #92]	@ (8001fa0 <HAL_ADC_MspInit+0xc8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d121      	bne.n	8001f8c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f48:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a12      	ldr	r2, [pc, #72]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f60:	4b0d      	ldr	r3, [pc, #52]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	4a0c      	ldr	r2, [pc, #48]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f66:	f043 0304 	orr.w	r3, r3, #4
 8001f6a:	6193      	str	r3, [r2, #24]
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <HAL_ADC_MspInit+0xc0>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f78:	2380      	movs	r3, #128	@ 0x80
 8001f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 0318 	add.w	r3, r7, #24
 8001f84:	4619      	mov	r1, r3
 8001f86:	4807      	ldr	r0, [pc, #28]	@ (8001fa4 <HAL_ADC_MspInit+0xcc>)
 8001f88:	f001 fcb6 	bl	80038f8 <HAL_GPIO_Init>
}
 8001f8c:	bf00      	nop
 8001f8e:	3728      	adds	r7, #40	@ 0x28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40012400 	.word	0x40012400
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010c00 	.word	0x40010c00
 8001fa0:	40012800 	.word	0x40012800
 8001fa4:	40010800 	.word	0x40010800

08001fa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbc:	4b27      	ldr	r3, [pc, #156]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a26      	ldr	r2, [pc, #152]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001fc2:	f043 0310 	orr.w	r3, r3, #16
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b24      	ldr	r3, [pc, #144]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	4b21      	ldr	r3, [pc, #132]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a20      	ldr	r2, [pc, #128]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fec:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001ff2:	f043 0308 	orr.w	r3, r3, #8
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b18      	ldr	r3, [pc, #96]	@ (800205c <MX_GPIO_Init+0xb4>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RLY_3_Pin|RLY_2_Pin|RLY_1_Pin, GPIO_PIN_RESET);
 8002004:	2200      	movs	r2, #0
 8002006:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800200a:	4815      	ldr	r0, [pc, #84]	@ (8002060 <MX_GPIO_Init+0xb8>)
 800200c:	f001 fdf8 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	2140      	movs	r1, #64	@ 0x40
 8002014:	4813      	ldr	r0, [pc, #76]	@ (8002064 <MX_GPIO_Init+0xbc>)
 8002016:	f001 fdf3 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RLY_3_Pin|RLY_2_Pin|RLY_1_Pin;
 800201a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800201e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002020:	2301      	movs	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2302      	movs	r3, #2
 800202a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202c:	f107 0310 	add.w	r3, r7, #16
 8002030:	4619      	mov	r1, r3
 8002032:	480b      	ldr	r0, [pc, #44]	@ (8002060 <MX_GPIO_Init+0xb8>)
 8002034:	f001 fc60 	bl	80038f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8002038:	2340      	movs	r3, #64	@ 0x40
 800203a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203c:	2301      	movs	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2302      	movs	r3, #2
 8002046:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	4619      	mov	r1, r3
 800204e:	4805      	ldr	r0, [pc, #20]	@ (8002064 <MX_GPIO_Init+0xbc>)
 8002050:	f001 fc52 	bl	80038f8 <HAL_GPIO_Init>

}
 8002054:	bf00      	nop
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000
 8002060:	40011000 	.word	0x40011000
 8002064:	40010c00 	.word	0x40010c00

08002068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800206c:	b0ab      	sub	sp, #172	@ 0xac
 800206e:	af0e      	add	r7, sp, #56	@ 0x38

  /* USER CODE BEGIN 1 */
	memset(LoRa_Data, 0, sizeof(LoRa_Data)); // Initialise tous les éléments avec des zéros
 8002070:	2228      	movs	r2, #40	@ 0x28
 8002072:	2100      	movs	r1, #0
 8002074:	48a1      	ldr	r0, [pc, #644]	@ (80022fc <main+0x294>)
 8002076:	f005 f9da 	bl	800742e <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800207a:	f000 fea7 	bl	8002dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800207e:	f000 f97d 	bl	800237c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002082:	f7ff ff91 	bl	8001fa8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002086:	f7ff feab 	bl	8001de0 <MX_ADC1_Init>
  MX_ADC2_Init();
 800208a:	f7ff fee7 	bl	8001e5c <MX_ADC2_Init>
  MX_SPI1_Init();
 800208e:	f000 fbc9 	bl	8002824 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002092:	f000 fd7d 	bl	8002b90 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002096:	f000 fda5 	bl	8002be4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  myLoRa = newLoRa();
 800209a:	4c99      	ldr	r4, [pc, #612]	@ (8002300 <main+0x298>)
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fa1d 	bl	80014e0 <newLoRa>
 80020a6:	4625      	mov	r5, r4
 80020a8:	f107 0408 	add.w	r4, r7, #8
 80020ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  LoRa new_LoRa;
  myLoRa.CS_port         = GPIOB;
 80020bc:	4b90      	ldr	r3, [pc, #576]	@ (8002300 <main+0x298>)
 80020be:	4a91      	ldr	r2, [pc, #580]	@ (8002304 <main+0x29c>)
 80020c0:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = GPIO_PIN_6;
 80020c2:	4b8f      	ldr	r3, [pc, #572]	@ (8002300 <main+0x298>)
 80020c4:	2240      	movs	r2, #64	@ 0x40
 80020c6:	809a      	strh	r2, [r3, #4]
  myLoRa.hSPIx           = &hspi1;
 80020c8:	4b8d      	ldr	r3, [pc, #564]	@ (8002300 <main+0x298>)
 80020ca:	4a8f      	ldr	r2, [pc, #572]	@ (8002308 <main+0x2a0>)
 80020cc:	619a      	str	r2, [r3, #24]

  if(LoRa_init(&myLoRa)==LORA_OK){
 80020ce:	488c      	ldr	r0, [pc, #560]	@ (8002300 <main+0x298>)
 80020d0:	f7ff fcd8 	bl	8001a84 <LoRa_init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2bc8      	cmp	r3, #200	@ 0xc8
 80020d8:	d103      	bne.n	80020e2 <main+0x7a>
	  LoRa_stat = 1;
 80020da:	4b8c      	ldr	r3, [pc, #560]	@ (800230c <main+0x2a4>)
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e002      	b.n	80020e8 <main+0x80>
  }else {
      LoRa_stat = 0; // Échec de l'initialisation
 80020e2:	4b8a      	ldr	r3, [pc, #552]	@ (800230c <main+0x2a4>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  debugPrintln("------------------------------------------------------ SMART ALGAE CTRL ------------------------------------------------------");
 80020e8:	4889      	ldr	r0, [pc, #548]	@ (8002310 <main+0x2a8>)
 80020ea:	f000 fe2b 	bl	8002d44 <debugPrintln>
  HAL_Delay(30000);
 80020ee:	f247 5030 	movw	r0, #30000	@ 0x7530
 80020f2:	f000 fecd 	bl	8002e90 <HAL_Delay>
  SIM_INIT();
 80020f6:	f000 fae3 	bl	80026c0 <SIM_INIT>
  HAL_Delay(500);*/
  //_____________________________________________________________________________________
  while (1)
  {
    /* USER CODE END WHILE */
	  uint32_t startTime = HAL_GetTick();
 80020fa:	f000 febf 	bl	8002e7c <HAL_GetTick>
 80020fe:	66f8      	str	r0, [r7, #108]	@ 0x6c
	    while ((HAL_GetTick() - startTime) < DURATION_MS)
 8002100:	e0a5      	b.n	800224e <main+0x1e6>
	    {
	        // Appel de la fonction pour recevoir des données via LoRa
	    	//HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
	     	  int bytes_received = LoRa_receive(&myLoRa, read_data, sizeof(read_data));
 8002102:	2228      	movs	r2, #40	@ 0x28
 8002104:	4983      	ldr	r1, [pc, #524]	@ (8002314 <main+0x2ac>)
 8002106:	487e      	ldr	r0, [pc, #504]	@ (8002300 <main+0x298>)
 8002108:	f7ff fc5c 	bl	80019c4 <LoRa_receive>
 800210c:	4603      	mov	r3, r0
 800210e:	66bb      	str	r3, [r7, #104]	@ 0x68
	     	  if (LoRa_stat == 1) {
 8002110:	4b7e      	ldr	r3, [pc, #504]	@ (800230c <main+0x2a4>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d12f      	bne.n	8002178 <main+0x110>
	     	              receiveAndProcessLoRaFrame(bytes_received, read_data, DataArray, size);
 8002118:	4b7f      	ldr	r3, [pc, #508]	@ (8002318 <main+0x2b0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a7f      	ldr	r2, [pc, #508]	@ (800231c <main+0x2b4>)
 800211e:	497d      	ldr	r1, [pc, #500]	@ (8002314 <main+0x2ac>)
 8002120:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002122:	f7ff fdbf 	bl	8001ca4 <receiveAndProcessLoRaFrame>
	     	              Previous_Temperature = DataArray[0] / 100;
 8002126:	4b7d      	ldr	r3, [pc, #500]	@ (800231c <main+0x2b4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	497d      	ldr	r1, [pc, #500]	@ (8002320 <main+0x2b8>)
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fedd 	bl	8000eec <__aeabi_fdiv>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	4b7b      	ldr	r3, [pc, #492]	@ (8002324 <main+0x2bc>)
 8002138:	601a      	str	r2, [r3, #0]
	     	              Previous_Conductivity = DataArray[1];
 800213a:	4b78      	ldr	r3, [pc, #480]	@ (800231c <main+0x2b4>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4a7a      	ldr	r2, [pc, #488]	@ (8002328 <main+0x2c0>)
 8002140:	6013      	str	r3, [r2, #0]
	     	              Previous_Salinity = DataArray[2];
 8002142:	4b76      	ldr	r3, [pc, #472]	@ (800231c <main+0x2b4>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	4a79      	ldr	r2, [pc, #484]	@ (800232c <main+0x2c4>)
 8002148:	6013      	str	r3, [r2, #0]
	     	              Previous_TDS = DataArray[3];
 800214a:	4b74      	ldr	r3, [pc, #464]	@ (800231c <main+0x2b4>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	4a78      	ldr	r2, [pc, #480]	@ (8002330 <main+0x2c8>)
 8002150:	6013      	str	r3, [r2, #0]
	     	              Previous_PH = DataArray[4]/100;
 8002152:	4b72      	ldr	r3, [pc, #456]	@ (800231c <main+0x2b4>)
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	4972      	ldr	r1, [pc, #456]	@ (8002320 <main+0x2b8>)
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fec7 	bl	8000eec <__aeabi_fdiv>
 800215e:	4603      	mov	r3, r0
 8002160:	461a      	mov	r2, r3
 8002162:	4b74      	ldr	r3, [pc, #464]	@ (8002334 <main+0x2cc>)
 8002164:	601a      	str	r2, [r3, #0]
	     	              strcpy(LoRa_Status, "LoRa is Ok");
 8002166:	4b74      	ldr	r3, [pc, #464]	@ (8002338 <main+0x2d0>)
 8002168:	4a74      	ldr	r2, [pc, #464]	@ (800233c <main+0x2d4>)
 800216a:	ca07      	ldmia	r2, {r0, r1, r2}
 800216c:	c303      	stmia	r3!, {r0, r1}
 800216e:	801a      	strh	r2, [r3, #0]
 8002170:	3302      	adds	r3, #2
 8002172:	0c12      	lsrs	r2, r2, #16
 8002174:	701a      	strb	r2, [r3, #0]
 8002176:	e00f      	b.n	8002198 <main+0x130>
	              } else {
	    	              HAL_UART_Transmit(&huart2, (uint8_t *)"LoRa n'est pas initialisé\n", strlen("LoRa n'est pas initialisé\n"), HAL_MAX_DELAY);
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
 800217c:	221b      	movs	r2, #27
 800217e:	4970      	ldr	r1, [pc, #448]	@ (8002340 <main+0x2d8>)
 8002180:	4870      	ldr	r0, [pc, #448]	@ (8002344 <main+0x2dc>)
 8002182:	f003 f8b5 	bl	80052f0 <HAL_UART_Transmit>
	    	              strcpy(LoRa_Status, "LoRa is not Ok");
 8002186:	4a6c      	ldr	r2, [pc, #432]	@ (8002338 <main+0x2d0>)
 8002188:	4b6f      	ldr	r3, [pc, #444]	@ (8002348 <main+0x2e0>)
 800218a:	4614      	mov	r4, r2
 800218c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800218e:	c407      	stmia	r4!, {r0, r1, r2}
 8002190:	8023      	strh	r3, [r4, #0]
 8002192:	3402      	adds	r4, #2
 8002194:	0c1b      	lsrs	r3, r3, #16
 8002196:	7023      	strb	r3, [r4, #0]
	              }

	           HAL_UART_Transmit(&huart2, (uint8_t *)"\n______________________ Les valeurs stocké ________________________\n", strlen("______________________ Les valeurs stocké ________________________\n"), HAL_MAX_DELAY);
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
 800219c:	2244      	movs	r2, #68	@ 0x44
 800219e:	496b      	ldr	r1, [pc, #428]	@ (800234c <main+0x2e4>)
 80021a0:	4868      	ldr	r0, [pc, #416]	@ (8002344 <main+0x2dc>)
 80021a2:	f003 f8a5 	bl	80052f0 <HAL_UART_Transmit>
	           snprintf(buffer, sizeof(buffer), "\nTemperature : %.2f °C\nConductivity : %.2f us/cm\nSalinity: %.2f mg/L\nTDS: %.2f mg/L\nPH: %.2f ph \r\n", Previous_Temperature, Previous_Conductivity, Previous_Salinity, Previous_TDS, Previous_PH);
 80021a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002324 <main+0x2bc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f93c 	bl	8000428 <__aeabi_f2d>
 80021b0:	4604      	mov	r4, r0
 80021b2:	460d      	mov	r5, r1
 80021b4:	4b5c      	ldr	r3, [pc, #368]	@ (8002328 <main+0x2c0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f935 	bl	8000428 <__aeabi_f2d>
 80021be:	4680      	mov	r8, r0
 80021c0:	4689      	mov	r9, r1
 80021c2:	4b5a      	ldr	r3, [pc, #360]	@ (800232c <main+0x2c4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f92e 	bl	8000428 <__aeabi_f2d>
 80021cc:	4682      	mov	sl, r0
 80021ce:	468b      	mov	fp, r1
 80021d0:	4b57      	ldr	r3, [pc, #348]	@ (8002330 <main+0x2c8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f927 	bl	8000428 <__aeabi_f2d>
 80021da:	e9c7 0100 	strd	r0, r1, [r7]
 80021de:	4b55      	ldr	r3, [pc, #340]	@ (8002334 <main+0x2cc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f920 	bl	8000428 <__aeabi_f2d>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80021f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80021f8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80021fc:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002200:	e9cd 4500 	strd	r4, r5, [sp]
 8002204:	4a52      	ldr	r2, [pc, #328]	@ (8002350 <main+0x2e8>)
 8002206:	21c8      	movs	r1, #200	@ 0xc8
 8002208:	4852      	ldr	r0, [pc, #328]	@ (8002354 <main+0x2ec>)
 800220a:	f005 f84d 	bl	80072a8 <sniprintf>
	           HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800220e:	4851      	ldr	r0, [pc, #324]	@ (8002354 <main+0x2ec>)
 8002210:	f7fd ff9e 	bl	8000150 <strlen>
 8002214:	4603      	mov	r3, r0
 8002216:	b29a      	uxth	r2, r3
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
 800221c:	494d      	ldr	r1, [pc, #308]	@ (8002354 <main+0x2ec>)
 800221e:	4849      	ldr	r0, [pc, #292]	@ (8002344 <main+0x2dc>)
 8002220:	f003 f866 	bl	80052f0 <HAL_UART_Transmit>
	           HAL_UART_Transmit(&huart2, (uint8_t *)"______________________________________________\n", strlen("______________________________________________\n"), HAL_MAX_DELAY);
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	222f      	movs	r2, #47	@ 0x2f
 800222a:	494b      	ldr	r1, [pc, #300]	@ (8002358 <main+0x2f0>)
 800222c:	4845      	ldr	r0, [pc, #276]	@ (8002344 <main+0x2dc>)
 800222e:	f003 f85f 	bl	80052f0 <HAL_UART_Transmit>

	     	  TensionBatt = lireTensionBatterie();
 8002232:	f7fe ffc9 	bl	80011c8 <lireTensionBatterie>
 8002236:	4603      	mov	r3, r0
 8002238:	4a48      	ldr	r2, [pc, #288]	@ (800235c <main+0x2f4>)
 800223a:	6013      	str	r3, [r2, #0]
	     	  TensionStable = lireTensionStable();
 800223c:	f7ff f8a4 	bl	8001388 <lireTensionStable>
 8002240:	4603      	mov	r3, r0
 8002242:	4a47      	ldr	r2, [pc, #284]	@ (8002360 <main+0x2f8>)
 8002244:	6013      	str	r3, [r2, #0]

	     	  HAL_Delay(1000);
 8002246:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800224a:	f000 fe21 	bl	8002e90 <HAL_Delay>
	    while ((HAL_GetTick() - startTime) < DURATION_MS)
 800224e:	f000 fe15 	bl	8002e7c <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	4a42      	ldr	r2, [pc, #264]	@ (8002364 <main+0x2fc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	f67f af51 	bls.w	8002102 <main+0x9a>
	    }


 	  //******************************************************************* SIM *******************************************************
 	  rssi = sendATCommandAndWaitForResponse_signalquality("AT+CSQ\r\n", "OK", 3000);
 8002260:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002264:	4940      	ldr	r1, [pc, #256]	@ (8002368 <main+0x300>)
 8002266:	4841      	ldr	r0, [pc, #260]	@ (800236c <main+0x304>)
 8002268:	f000 f9dc 	bl	8002624 <sendATCommandAndWaitForResponse_signalquality>
 800226c:	4603      	mov	r3, r0
 800226e:	4a40      	ldr	r2, [pc, #256]	@ (8002370 <main+0x308>)
 8002270:	6013      	str	r3, [r2, #0]
 	  snprintf(data_json, sizeof(data_json), "{\"temperature\":%.2f, \"Conductivity\":%.2f, \"Salinity\":%.2f, \"TDS\":%.2f, \"PH\":%.2f, \"TensionBatt\":%d, \"TensionStable\":%d, \"rssi\":%d, \"LoRa_Status\":\"%s\"}", Previous_Temperature, Previous_Conductivity, Previous_Salinity, Previous_TDS, Previous_PH, TensionBatt, TensionStable, rssi, LoRa_Status);
 8002272:	4b2c      	ldr	r3, [pc, #176]	@ (8002324 <main+0x2bc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f8d6 	bl	8000428 <__aeabi_f2d>
 800227c:	4604      	mov	r4, r0
 800227e:	460d      	mov	r5, r1
 8002280:	4b29      	ldr	r3, [pc, #164]	@ (8002328 <main+0x2c0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f8cf 	bl	8000428 <__aeabi_f2d>
 800228a:	4680      	mov	r8, r0
 800228c:	4689      	mov	r9, r1
 800228e:	4b27      	ldr	r3, [pc, #156]	@ (800232c <main+0x2c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f8c8 	bl	8000428 <__aeabi_f2d>
 8002298:	4682      	mov	sl, r0
 800229a:	468b      	mov	fp, r1
 800229c:	4b24      	ldr	r3, [pc, #144]	@ (8002330 <main+0x2c8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe f8c1 	bl	8000428 <__aeabi_f2d>
 80022a6:	e9c7 0100 	strd	r0, r1, [r7]
 80022aa:	4b22      	ldr	r3, [pc, #136]	@ (8002334 <main+0x2cc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe f8ba 	bl	8000428 <__aeabi_f2d>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4928      	ldr	r1, [pc, #160]	@ (800235c <main+0x2f4>)
 80022ba:	6808      	ldr	r0, [r1, #0]
 80022bc:	4928      	ldr	r1, [pc, #160]	@ (8002360 <main+0x2f8>)
 80022be:	680e      	ldr	r6, [r1, #0]
 80022c0:	492b      	ldr	r1, [pc, #172]	@ (8002370 <main+0x308>)
 80022c2:	6809      	ldr	r1, [r1, #0]
 80022c4:	f8df c070 	ldr.w	ip, [pc, #112]	@ 8002338 <main+0x2d0>
 80022c8:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 80022cc:	910c      	str	r1, [sp, #48]	@ 0x30
 80022ce:	960b      	str	r6, [sp, #44]	@ 0x2c
 80022d0:	900a      	str	r0, [sp, #40]	@ 0x28
 80022d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80022d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80022de:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80022e2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80022e6:	e9cd 4500 	strd	r4, r5, [sp]
 80022ea:	4a22      	ldr	r2, [pc, #136]	@ (8002374 <main+0x30c>)
 80022ec:	21fa      	movs	r1, #250	@ 0xfa
 80022ee:	4822      	ldr	r0, [pc, #136]	@ (8002378 <main+0x310>)
 80022f0:	f004 ffda 	bl	80072a8 <sniprintf>
 	  HTTPConnect(data_json);
 80022f4:	4820      	ldr	r0, [pc, #128]	@ (8002378 <main+0x310>)
 80022f6:	f000 fa23 	bl	8002740 <HTTPConnect>
  {
 80022fa:	e6fe      	b.n	80020fa <main+0x92>
 80022fc:	2000055c 	.word	0x2000055c
 8002300:	20000508 	.word	0x20000508
 8002304:	40010c00 	.word	0x40010c00
 8002308:	20000968 	.word	0x20000968
 800230c:	200005a2 	.word	0x200005a2
 8002310:	0800a92c 	.word	0x0800a92c
 8002314:	20000534 	.word	0x20000534
 8002318:	20000000 	.word	0x20000000
 800231c:	2000066c 	.word	0x2000066c
 8002320:	42c80000 	.word	0x42c80000
 8002324:	20000004 	.word	0x20000004
 8002328:	20000008 	.word	0x20000008
 800232c:	2000000c 	.word	0x2000000c
 8002330:	20000010 	.word	0x20000010
 8002334:	20000014 	.word	0x20000014
 8002338:	20000584 	.word	0x20000584
 800233c:	0800a9ac 	.word	0x0800a9ac
 8002340:	0800a9b8 	.word	0x0800a9b8
 8002344:	200009c4 	.word	0x200009c4
 8002348:	0800a9d4 	.word	0x0800a9d4
 800234c:	0800a9e4 	.word	0x0800a9e4
 8002350:	0800aa2c 	.word	0x0800aa2c
 8002354:	200005a4 	.word	0x200005a4
 8002358:	0800aa90 	.word	0x0800aa90
 800235c:	200007fc 	.word	0x200007fc
 8002360:	20000800 	.word	0x20000800
 8002364:	000927bf 	.word	0x000927bf
 8002368:	0800aac0 	.word	0x0800aac0
 800236c:	0800aac4 	.word	0x0800aac4
 8002370:	20000900 	.word	0x20000900
 8002374:	0800aad0 	.word	0x0800aad0
 8002378:	20000804 	.word	0x20000804

0800237c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b094      	sub	sp, #80	@ 0x50
 8002380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002382:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002386:	2228      	movs	r2, #40	@ 0x28
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f005 f84f 	bl	800742e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023ac:	2302      	movs	r3, #2
 80023ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023b0:	2301      	movs	r3, #1
 80023b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023b4:	2310      	movs	r3, #16
 80023b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023b8:	2302      	movs	r3, #2
 80023ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80023bc:	2300      	movs	r3, #0
 80023be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80023c0:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80023c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ca:	4618      	mov	r0, r3
 80023cc:	f001 fc30 	bl	8003c30 <HAL_RCC_OscConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80023d6:	f000 f828 	bl	800242a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023da:	230f      	movs	r3, #15
 80023dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023de:	2302      	movs	r3, #2
 80023e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	2102      	movs	r1, #2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 fe9c 	bl	8004134 <HAL_RCC_ClockConfig>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002402:	f000 f812 	bl	800242a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002406:	2302      	movs	r3, #2
 8002408:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800240a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800240e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	4618      	mov	r0, r3
 8002414:	f002 f81c 	bl	8004450 <HAL_RCCEx_PeriphCLKConfig>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800241e:	f000 f804 	bl	800242a <Error_Handler>
  }
}
 8002422:	bf00      	nop
 8002424:	3750      	adds	r7, #80	@ 0x50
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800242e:	b672      	cpsid	i
}
 8002430:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002432:	bf00      	nop
 8002434:	e7fd      	b.n	8002432 <Error_Handler+0x8>
	...

08002438 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800243c:	f3bf 8f4f 	dsb	sy
}
 8002440:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002442:	4b06      	ldr	r3, [pc, #24]	@ (800245c <__NVIC_SystemReset+0x24>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800244a:	4904      	ldr	r1, [pc, #16]	@ (800245c <__NVIC_SystemReset+0x24>)
 800244c:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <__NVIC_SystemReset+0x28>)
 800244e:	4313      	orrs	r3, r2
 8002450:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002452:	f3bf 8f4f 	dsb	sy
}
 8002456:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <__NVIC_SystemReset+0x20>
 800245c:	e000ed00 	.word	0xe000ed00
 8002460:	05fa0004 	.word	0x05fa0004

08002464 <SIMTransmit>:
    -57,  // index 28 corresponds to value 28
    -55   // index 29 corresponds to value 29
};

void SIMTransmit(char *cmd)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  memset(buffer_sim,0,sizeof(buffer_sim));
 800246c:	2264      	movs	r2, #100	@ 0x64
 800246e:	2100      	movs	r1, #0
 8002470:	480c      	ldr	r0, [pc, #48]	@ (80024a4 <SIMTransmit+0x40>)
 8002472:	f004 ffdc 	bl	800742e <memset>
  HAL_UART_Transmit(&huart3,(uint8_t *)cmd,strlen(cmd),1000);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fd fe6a 	bl	8000150 <strlen>
 800247c:	4603      	mov	r3, r0
 800247e:	b29a      	uxth	r2, r3
 8002480:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4808      	ldr	r0, [pc, #32]	@ (80024a8 <SIMTransmit+0x44>)
 8002488:	f002 ff32 	bl	80052f0 <HAL_UART_Transmit>
  HAL_UART_Receive (&huart3, buffer_sim, 100, 1000);
 800248c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002490:	2264      	movs	r2, #100	@ 0x64
 8002492:	4904      	ldr	r1, [pc, #16]	@ (80024a4 <SIMTransmit+0x40>)
 8002494:	4804      	ldr	r0, [pc, #16]	@ (80024a8 <SIMTransmit+0x44>)
 8002496:	f002 ffae 	bl	80053f6 <HAL_UART_Receive>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000904 	.word	0x20000904
 80024a8:	20000a0c 	.word	0x20000a0c

080024ac <sendATCommandAndWaitForResponse>:


void sendATCommandAndWaitForResponse(const char* command, const char* expectedResponse, uint32_t responseTimeout_ms) {
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
    int responseReceived = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
    uint32_t previousTick = HAL_GetTick();
 80024bc:	f000 fcde 	bl	8002e7c <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

    while (!responseReceived && (previousTick + responseTimeout_ms > HAL_GetTick())) {
 80024c2:	e015      	b.n	80024f0 <sendATCommandAndWaitForResponse+0x44>
        // Envoyer la commande AT
        SIMTransmit(command);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff ffcd 	bl	8002464 <SIMTransmit>
        debugPrintln(command);
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 fc3a 	bl	8002d44 <debugPrintln>

        // Attendre un court délai pour la réponse
        HAL_Delay(1000);
 80024d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024d4:	f000 fcdc 	bl	8002e90 <HAL_Delay>

        // Vérifier si la réponse contient la réponse attendue
        if (strstr((char *)buffer_sim, expectedResponse)) {
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	4810      	ldr	r0, [pc, #64]	@ (800251c <sendATCommandAndWaitForResponse+0x70>)
 80024dc:	f004 ffe1 	bl	80074a2 <strstr>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d004      	beq.n	80024f0 <sendATCommandAndWaitForResponse+0x44>
            responseReceived = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	617b      	str	r3, [r7, #20]
            debugPrintln(buffer_sim);
 80024ea:	480c      	ldr	r0, [pc, #48]	@ (800251c <sendATCommandAndWaitForResponse+0x70>)
 80024ec:	f000 fc2a 	bl	8002d44 <debugPrintln>
    while (!responseReceived && (previousTick + responseTimeout_ms > HAL_GetTick())) {
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d107      	bne.n	8002506 <sendATCommandAndWaitForResponse+0x5a>
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	18d4      	adds	r4, r2, r3
 80024fc:	f000 fcbe 	bl	8002e7c <HAL_GetTick>
 8002500:	4603      	mov	r3, r0
 8002502:	429c      	cmp	r4, r3
 8002504:	d8de      	bhi.n	80024c4 <sendATCommandAndWaitForResponse+0x18>
        }
    }

    if (!responseReceived) {
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d102      	bne.n	8002512 <sendATCommandAndWaitForResponse+0x66>
        debugPrintln("Timeout waiting for response.");
 800250c:	4804      	ldr	r0, [pc, #16]	@ (8002520 <sendATCommandAndWaitForResponse+0x74>)
 800250e:	f000 fc19 	bl	8002d44 <debugPrintln>
    }
}
 8002512:	bf00      	nop
 8002514:	371c      	adds	r7, #28
 8002516:	46bd      	mov	sp, r7
 8002518:	bd90      	pop	{r4, r7, pc}
 800251a:	bf00      	nop
 800251c:	20000904 	.word	0x20000904
 8002520:	0800ab68 	.word	0x0800ab68

08002524 <sendATCommandAndWaitForResponse_AT_Action>:
void sendATCommandAndWaitForResponse_AT_Action(const char* command, const char* expectedResponse, uint32_t responseTimeout_ms) {
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
    int responseReceived = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
    uint32_t previousTick = HAL_GetTick();
 8002534:	f000 fca2 	bl	8002e7c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

    while (!responseReceived && (previousTick + responseTimeout_ms > HAL_GetTick())) {
 800253a:	e015      	b.n	8002568 <sendATCommandAndWaitForResponse_AT_Action+0x44>
        // Envoyer la commande AT
        SIMTransmit(command);
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff ff91 	bl	8002464 <SIMTransmit>
        debugPrintln(command);
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fbfe 	bl	8002d44 <debugPrintln>

        // Attendre un court délai pour la réponse
        HAL_Delay(1000);
 8002548:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800254c:	f000 fca0 	bl	8002e90 <HAL_Delay>

        // Vérifier si la réponse contient la réponse attendue
        if (strstr((char *)buffer_sim, expectedResponse)) {
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	4814      	ldr	r0, [pc, #80]	@ (80025a4 <sendATCommandAndWaitForResponse_AT_Action+0x80>)
 8002554:	f004 ffa5 	bl	80074a2 <strstr>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d004      	beq.n	8002568 <sendATCommandAndWaitForResponse_AT_Action+0x44>
            responseReceived = 1;
 800255e:	2301      	movs	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
            debugPrintln(buffer_sim);
 8002562:	4810      	ldr	r0, [pc, #64]	@ (80025a4 <sendATCommandAndWaitForResponse_AT_Action+0x80>)
 8002564:	f000 fbee 	bl	8002d44 <debugPrintln>
    while (!responseReceived && (previousTick + responseTimeout_ms > HAL_GetTick())) {
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d107      	bne.n	800257e <sendATCommandAndWaitForResponse_AT_Action+0x5a>
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	18d4      	adds	r4, r2, r3
 8002574:	f000 fc82 	bl	8002e7c <HAL_GetTick>
 8002578:	4603      	mov	r3, r0
 800257a:	429c      	cmp	r4, r3
 800257c:	d8de      	bhi.n	800253c <sendATCommandAndWaitForResponse_AT_Action+0x18>
        }
    }

    if (!responseReceived) {
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <sendATCommandAndWaitForResponse_AT_Action+0x76>
        debugPrintln("Timeout waiting for response.");
 8002584:	4808      	ldr	r0, [pc, #32]	@ (80025a8 <sendATCommandAndWaitForResponse_AT_Action+0x84>)
 8002586:	f000 fbdd 	bl	8002d44 <debugPrintln>
        sendATCommandAndWaitForResponse("AT+CRESET\r\n", "OK", 3000);
 800258a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800258e:	4907      	ldr	r1, [pc, #28]	@ (80025ac <sendATCommandAndWaitForResponse_AT_Action+0x88>)
 8002590:	4807      	ldr	r0, [pc, #28]	@ (80025b0 <sendATCommandAndWaitForResponse_AT_Action+0x8c>)
 8002592:	f7ff ff8b 	bl	80024ac <sendATCommandAndWaitForResponse>
        NVIC_SystemReset();
 8002596:	f7ff ff4f 	bl	8002438 <__NVIC_SystemReset>
    }
}
 800259a:	bf00      	nop
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd90      	pop	{r4, r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000904 	.word	0x20000904
 80025a8:	0800ab68 	.word	0x0800ab68
 80025ac:	0800ab88 	.word	0x0800ab88
 80025b0:	0800ab8c 	.word	0x0800ab8c

080025b4 <extractRSSIValue>:
    }
}*/
//_____________________________________________________________________________________________________

// Fonction pour extraire la valeur RSSI
int extractRSSIValue(const char* response) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
    int rssi = -1;  // Initialisation à une valeur par défaut
 80025bc:	f04f 33ff 	mov.w	r3, #4294967295
 80025c0:	60fb      	str	r3, [r7, #12]
    char* token = strstr(response, "+CSQ: ");
 80025c2:	490a      	ldr	r1, [pc, #40]	@ (80025ec <extractRSSIValue+0x38>)
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f004 ff6c 	bl	80074a2 <strstr>
 80025ca:	60b8      	str	r0, [r7, #8]
    if (token != NULL) {
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d006      	beq.n	80025e0 <extractRSSIValue+0x2c>
        token += 6;  // Avance le pointeur pour ignorer "+CSQ: "
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	3306      	adds	r3, #6
 80025d6:	60bb      	str	r3, [r7, #8]
        rssi = atoi(token);  // Convertit la chaîne en entier
 80025d8:	68b8      	ldr	r0, [r7, #8]
 80025da:	f003 f89b 	bl	8005714 <atoi>
 80025de:	60f8      	str	r0, [r7, #12]
    }
    return rssi;
 80025e0:	68fb      	ldr	r3, [r7, #12]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	0800ab98 	.word	0x0800ab98

080025f0 <getRSSI>:

// Fonction pour convertir la valeur en RSSI
int getRSSI(int value) {
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
    if (value >= 2 && value <= 30) {
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	dd08      	ble.n	8002610 <getRSSI+0x20>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b1e      	cmp	r3, #30
 8002602:	dc05      	bgt.n	8002610 <getRSSI+0x20>
        return valueToRSSI[value - 2]; // Ajuste l'index pour accéder au bon élément
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3b02      	subs	r3, #2
 8002608:	4a04      	ldr	r2, [pc, #16]	@ (800261c <getRSSI+0x2c>)
 800260a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260e:	e000      	b.n	8002612 <getRSSI+0x22>
    } else {
        return -999; // Valeur d'erreur pour les valeurs en dehors de la plage
 8002610:	4b03      	ldr	r3, [pc, #12]	@ (8002620 <getRSSI+0x30>)
    }
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	200000b4 	.word	0x200000b4
 8002620:	fffffc19 	.word	0xfffffc19

08002624 <sendATCommandAndWaitForResponse_signalquality>:

int sendATCommandAndWaitForResponse_signalquality(char* command, char* expectedResponse, uint32_t responseTimeout_ms) {
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b089      	sub	sp, #36	@ 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
    int responseReceived = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
    uint32_t previousTick = HAL_GetTick();
 8002634:	f000 fc22 	bl	8002e7c <HAL_GetTick>
 8002638:	61b8      	str	r0, [r7, #24]

    while (!responseReceived && (previousTick + responseTimeout_ms > HAL_GetTick())) {
 800263a:	e026      	b.n	800268a <sendATCommandAndWaitForResponse_signalquality+0x66>
        // Envoyer la commande AT
        SIMTransmit(command);
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f7ff ff11 	bl	8002464 <SIMTransmit>
        debugPrintln(command);
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fb7e 	bl	8002d44 <debugPrintln>

        // Attendre un court délai pour la réponse
        HAL_Delay(1000);
 8002648:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800264c:	f000 fc20 	bl	8002e90 <HAL_Delay>

        // Vérifier si la réponse contient la réponse attendue
        if (strstr((char *)buffer_sim, expectedResponse)) {
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	4818      	ldr	r0, [pc, #96]	@ (80026b4 <sendATCommandAndWaitForResponse_signalquality+0x90>)
 8002654:	f004 ff25 	bl	80074a2 <strstr>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d015      	beq.n	800268a <sendATCommandAndWaitForResponse_signalquality+0x66>
            responseReceived = 1;
 800265e:	2301      	movs	r3, #1
 8002660:	61fb      	str	r3, [r7, #28]
            debugPrintln(buffer_sim);
 8002662:	4814      	ldr	r0, [pc, #80]	@ (80026b4 <sendATCommandAndWaitForResponse_signalquality+0x90>)
 8002664:	f000 fb6e 	bl	8002d44 <debugPrintln>
            int rssi = extractRSSIValue(buffer_sim);
 8002668:	4812      	ldr	r0, [pc, #72]	@ (80026b4 <sendATCommandAndWaitForResponse_signalquality+0x90>)
 800266a:	f7ff ffa3 	bl	80025b4 <extractRSSIValue>
 800266e:	6178      	str	r0, [r7, #20]
            int RSSI = getRSSI(rssi);
 8002670:	6978      	ldr	r0, [r7, #20]
 8002672:	f7ff ffbd 	bl	80025f0 <getRSSI>
 8002676:	6138      	str	r0, [r7, #16]
                if (rssi != -999) {
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	4a0f      	ldr	r2, [pc, #60]	@ (80026b8 <sendATCommandAndWaitForResponse_signalquality+0x94>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d001      	beq.n	8002684 <sendATCommandAndWaitForResponse_signalquality+0x60>
                	return RSSI;
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	e013      	b.n	80026ac <sendATCommandAndWaitForResponse_signalquality+0x88>
                } else {
                    return -111;
 8002684:	f06f 036e 	mvn.w	r3, #110	@ 0x6e
 8002688:	e010      	b.n	80026ac <sendATCommandAndWaitForResponse_signalquality+0x88>
    while (!responseReceived && (previousTick + responseTimeout_ms > HAL_GetTick())) {
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d107      	bne.n	80026a0 <sendATCommandAndWaitForResponse_signalquality+0x7c>
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	18d4      	adds	r4, r2, r3
 8002696:	f000 fbf1 	bl	8002e7c <HAL_GetTick>
 800269a:	4603      	mov	r3, r0
 800269c:	429c      	cmp	r4, r3
 800269e:	d8cd      	bhi.n	800263c <sendATCommandAndWaitForResponse_signalquality+0x18>
            HAL_UART_Transmit(&huart2, (uint8_t *)buffer_sim, strlen(buffer_sim), HAL_MAX_DELAY);

        }
    }

    if (!responseReceived) {
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <sendATCommandAndWaitForResponse_signalquality+0x88>
        debugPrintln("Timeout waiting for response.");
 80026a6:	4805      	ldr	r0, [pc, #20]	@ (80026bc <sendATCommandAndWaitForResponse_signalquality+0x98>)
 80026a8:	f000 fb4c 	bl	8002d44 <debugPrintln>
    }
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3724      	adds	r7, #36	@ 0x24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd90      	pop	{r4, r7, pc}
 80026b4:	20000904 	.word	0x20000904
 80026b8:	fffffc19 	.word	0xfffffc19
 80026bc:	0800ab68 	.word	0x0800ab68

080026c0 <SIM_INIT>:

void SIM_INIT(){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0

	  sendATCommandAndWaitForResponse_AT_Action("AT\r\n", "OK", 3000);
 80026c4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80026c8:	4916      	ldr	r1, [pc, #88]	@ (8002724 <SIM_INIT+0x64>)
 80026ca:	4817      	ldr	r0, [pc, #92]	@ (8002728 <SIM_INIT+0x68>)
 80026cc:	f7ff ff2a 	bl	8002524 <sendATCommandAndWaitForResponse_AT_Action>
	  HAL_Delay(500);
 80026d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026d4:	f000 fbdc 	bl	8002e90 <HAL_Delay>
	  //************************* GPS **********************************
	  /*sendATCommandAndWaitForResponse("AT+CGPS=1\r\n", "OK", 3000);
	  HAL_Delay(500);*/
	  //________________________________________________________________
	  sendATCommandAndWaitForResponse("AT+CREG?\r\n", "OK", 3000);
 80026d8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80026dc:	4911      	ldr	r1, [pc, #68]	@ (8002724 <SIM_INIT+0x64>)
 80026de:	4813      	ldr	r0, [pc, #76]	@ (800272c <SIM_INIT+0x6c>)
 80026e0:	f7ff fee4 	bl	80024ac <sendATCommandAndWaitForResponse>
	  HAL_Delay(500);
 80026e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026e8:	f000 fbd2 	bl	8002e90 <HAL_Delay>
	  sendATCommandAndWaitForResponse("AT+CNMP=2\r\n", "OK", 3000);
 80026ec:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80026f0:	490c      	ldr	r1, [pc, #48]	@ (8002724 <SIM_INIT+0x64>)
 80026f2:	480f      	ldr	r0, [pc, #60]	@ (8002730 <SIM_INIT+0x70>)
 80026f4:	f7ff feda 	bl	80024ac <sendATCommandAndWaitForResponse>
	  HAL_Delay(500);
 80026f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026fc:	f000 fbc8 	bl	8002e90 <HAL_Delay>
	  sprintf(ATcommand,"AT+CGDCONT=1,\"IP\",\"%s\"\r\n", apn);
 8002700:	4a0c      	ldr	r2, [pc, #48]	@ (8002734 <SIM_INIT+0x74>)
 8002702:	490d      	ldr	r1, [pc, #52]	@ (8002738 <SIM_INIT+0x78>)
 8002704:	480d      	ldr	r0, [pc, #52]	@ (800273c <SIM_INIT+0x7c>)
 8002706:	f004 fe03 	bl	8007310 <siprintf>
	  //sprintf(ATcommand,"AT+CGDCONT=1,\"IP\",\"iot.telenet.be\"\r\n");
	  sendATCommandAndWaitForResponse(ATcommand, "OK", 3000);
 800270a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800270e:	4905      	ldr	r1, [pc, #20]	@ (8002724 <SIM_INIT+0x64>)
 8002710:	480a      	ldr	r0, [pc, #40]	@ (800273c <SIM_INIT+0x7c>)
 8002712:	f7ff fecb 	bl	80024ac <sendATCommandAndWaitForResponse>
	  HAL_Delay(500);
 8002716:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800271a:	f000 fbb9 	bl	8002e90 <HAL_Delay>

}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	0800ab88 	.word	0x0800ab88
 8002728:	0800aba0 	.word	0x0800aba0
 800272c:	0800aba8 	.word	0x0800aba8
 8002730:	0800abb4 	.word	0x0800abb4
 8002734:	20000050 	.word	0x20000050
 8002738:	0800abc0 	.word	0x0800abc0
 800273c:	20000734 	.word	0x20000734

08002740 <HTTPConnect>:
    }
    return decimal;
}
*/
//_____________________________________________________________________
void HTTPConnect(char* data_Json){
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	sendATCommandAndWaitForResponse("AT+HTTPINIT\r\n", "OK", 3000);
 8002748:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800274c:	492b      	ldr	r1, [pc, #172]	@ (80027fc <HTTPConnect+0xbc>)
 800274e:	482c      	ldr	r0, [pc, #176]	@ (8002800 <HTTPConnect+0xc0>)
 8002750:	f7ff feac 	bl	80024ac <sendATCommandAndWaitForResponse>
	HAL_Delay(500);
 8002754:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002758:	f000 fb9a 	bl	8002e90 <HAL_Delay>
	snprintf(ATcommand, sizeof(ATcommand), "AT+HTTPPARA=\"URL\",\"%s\"\r\n", url);
 800275c:	4b29      	ldr	r3, [pc, #164]	@ (8002804 <HTTPConnect+0xc4>)
 800275e:	4a2a      	ldr	r2, [pc, #168]	@ (8002808 <HTTPConnect+0xc8>)
 8002760:	21c8      	movs	r1, #200	@ 0xc8
 8002762:	482a      	ldr	r0, [pc, #168]	@ (800280c <HTTPConnect+0xcc>)
 8002764:	f004 fda0 	bl	80072a8 <sniprintf>
	sendATCommandAndWaitForResponse(ATcommand, "OK", 3000);
 8002768:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800276c:	4923      	ldr	r1, [pc, #140]	@ (80027fc <HTTPConnect+0xbc>)
 800276e:	4827      	ldr	r0, [pc, #156]	@ (800280c <HTTPConnect+0xcc>)
 8002770:	f7ff fe9c 	bl	80024ac <sendATCommandAndWaitForResponse>
	HAL_Delay(500);
 8002774:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002778:	f000 fb8a 	bl	8002e90 <HAL_Delay>
	sprintf(ATcommand,"AT+HTTPPARA=\"CONTENT\",\"application/json\"\r\n");
 800277c:	4924      	ldr	r1, [pc, #144]	@ (8002810 <HTTPConnect+0xd0>)
 800277e:	4823      	ldr	r0, [pc, #140]	@ (800280c <HTTPConnect+0xcc>)
 8002780:	f004 fdc6 	bl	8007310 <siprintf>
	sendATCommandAndWaitForResponse(ATcommand, "OK", 3000);
 8002784:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002788:	491c      	ldr	r1, [pc, #112]	@ (80027fc <HTTPConnect+0xbc>)
 800278a:	4820      	ldr	r0, [pc, #128]	@ (800280c <HTTPConnect+0xcc>)
 800278c:	f7ff fe8e 	bl	80024ac <sendATCommandAndWaitForResponse>
	HAL_Delay(500);
 8002790:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002794:	f000 fb7c 	bl	8002e90 <HAL_Delay>
	snprintf(ATcommand, sizeof(ATcommand), "AT+HTTPDATA=%d,10000\r\n", strlen(data_Json));
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7fd fcd9 	bl	8000150 <strlen>
 800279e:	4603      	mov	r3, r0
 80027a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002814 <HTTPConnect+0xd4>)
 80027a2:	21c8      	movs	r1, #200	@ 0xc8
 80027a4:	4819      	ldr	r0, [pc, #100]	@ (800280c <HTTPConnect+0xcc>)
 80027a6:	f004 fd7f 	bl	80072a8 <sniprintf>
	sendATCommandAndWaitForResponse(ATcommand, "DOWNLOAD", 6000);
 80027aa:	f241 7270 	movw	r2, #6000	@ 0x1770
 80027ae:	491a      	ldr	r1, [pc, #104]	@ (8002818 <HTTPConnect+0xd8>)
 80027b0:	4816      	ldr	r0, [pc, #88]	@ (800280c <HTTPConnect+0xcc>)
 80027b2:	f7ff fe7b 	bl	80024ac <sendATCommandAndWaitForResponse>
	HAL_Delay(500);
 80027b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80027ba:	f000 fb69 	bl	8002e90 <HAL_Delay>
	sendATCommandAndWaitForResponse(data_Json, "OK", 6000);
 80027be:	f241 7270 	movw	r2, #6000	@ 0x1770
 80027c2:	490e      	ldr	r1, [pc, #56]	@ (80027fc <HTTPConnect+0xbc>)
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff fe71 	bl	80024ac <sendATCommandAndWaitForResponse>
	sendATCommandAndWaitForResponse_AT_Action("AT+HTTPACTION=1\r\n", "OK", 3000);
 80027ca:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80027ce:	490b      	ldr	r1, [pc, #44]	@ (80027fc <HTTPConnect+0xbc>)
 80027d0:	4812      	ldr	r0, [pc, #72]	@ (800281c <HTTPConnect+0xdc>)
 80027d2:	f7ff fea7 	bl	8002524 <sendATCommandAndWaitForResponse_AT_Action>
	HAL_Delay(3000);
 80027d6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80027da:	f000 fb59 	bl	8002e90 <HAL_Delay>
	sendATCommandAndWaitForResponse("AT+HTTPTERM\r\n", "OK", 3000);
 80027de:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80027e2:	4906      	ldr	r1, [pc, #24]	@ (80027fc <HTTPConnect+0xbc>)
 80027e4:	480e      	ldr	r0, [pc, #56]	@ (8002820 <HTTPConnect+0xe0>)
 80027e6:	f7ff fe61 	bl	80024ac <sendATCommandAndWaitForResponse>
	HAL_Delay(500);
 80027ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80027ee:	f000 fb4f 	bl	8002e90 <HAL_Delay>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	0800ab88 	.word	0x0800ab88
 8002800:	0800abdc 	.word	0x0800abdc
 8002804:	20000018 	.word	0x20000018
 8002808:	0800abec 	.word	0x0800abec
 800280c:	20000734 	.word	0x20000734
 8002810:	0800ac08 	.word	0x0800ac08
 8002814:	0800ac34 	.word	0x0800ac34
 8002818:	0800ac4c 	.word	0x0800ac4c
 800281c:	0800ac58 	.word	0x0800ac58
 8002820:	0800ac6c 	.word	0x0800ac6c

08002824 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002828:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <MX_SPI1_Init+0x64>)
 800282a:	4a18      	ldr	r2, [pc, #96]	@ (800288c <MX_SPI1_Init+0x68>)
 800282c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800282e:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <MX_SPI1_Init+0x64>)
 8002830:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002834:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002836:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <MX_SPI1_Init+0x64>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800283c:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <MX_SPI1_Init+0x64>)
 800283e:	2200      	movs	r2, #0
 8002840:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002842:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <MX_SPI1_Init+0x64>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002848:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <MX_SPI1_Init+0x64>)
 800284a:	2200      	movs	r2, #0
 800284c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800284e:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <MX_SPI1_Init+0x64>)
 8002850:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002854:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002856:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <MX_SPI1_Init+0x64>)
 8002858:	2228      	movs	r2, #40	@ 0x28
 800285a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800285c:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <MX_SPI1_Init+0x64>)
 800285e:	2200      	movs	r2, #0
 8002860:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002862:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <MX_SPI1_Init+0x64>)
 8002864:	2200      	movs	r2, #0
 8002866:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002868:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <MX_SPI1_Init+0x64>)
 800286a:	2200      	movs	r2, #0
 800286c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800286e:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <MX_SPI1_Init+0x64>)
 8002870:	220a      	movs	r2, #10
 8002872:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002874:	4804      	ldr	r0, [pc, #16]	@ (8002888 <MX_SPI1_Init+0x64>)
 8002876:	f001 ff57 	bl	8004728 <HAL_SPI_Init>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002880:	f7ff fdd3 	bl	800242a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000968 	.word	0x20000968
 800288c:	40013000 	.word	0x40013000

08002890 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	@ 0x28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a22      	ldr	r2, [pc, #136]	@ (8002934 <HAL_SPI_MspInit+0xa4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d13d      	bne.n	800292c <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028b0:	4b21      	ldr	r3, [pc, #132]	@ (8002938 <HAL_SPI_MspInit+0xa8>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	4a20      	ldr	r2, [pc, #128]	@ (8002938 <HAL_SPI_MspInit+0xa8>)
 80028b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028ba:	6193      	str	r3, [r2, #24]
 80028bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002938 <HAL_SPI_MspInit+0xa8>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002938 <HAL_SPI_MspInit+0xa8>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002938 <HAL_SPI_MspInit+0xa8>)
 80028ce:	f043 0308 	orr.w	r3, r3, #8
 80028d2:	6193      	str	r3, [r2, #24]
 80028d4:	4b18      	ldr	r3, [pc, #96]	@ (8002938 <HAL_SPI_MspInit+0xa8>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80028e0:	2328      	movs	r3, #40	@ 0x28
 80028e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	2302      	movs	r3, #2
 80028e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028e8:	2303      	movs	r3, #3
 80028ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	4619      	mov	r1, r3
 80028f2:	4812      	ldr	r0, [pc, #72]	@ (800293c <HAL_SPI_MspInit+0xac>)
 80028f4:	f001 f800 	bl	80038f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028f8:	2310      	movs	r3, #16
 80028fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4619      	mov	r1, r3
 800290a:	480c      	ldr	r0, [pc, #48]	@ (800293c <HAL_SPI_MspInit+0xac>)
 800290c:	f000 fff4 	bl	80038f8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_SPI_MspInit+0xb0>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
 8002926:	4a06      	ldr	r2, [pc, #24]	@ (8002940 <HAL_SPI_MspInit+0xb0>)
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800292c:	bf00      	nop
 800292e:	3728      	adds	r7, #40	@ 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40013000 	.word	0x40013000
 8002938:	40021000 	.word	0x40021000
 800293c:	40010c00 	.word	0x40010c00
 8002940:	40010000 	.word	0x40010000

08002944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800294a:	4b15      	ldr	r3, [pc, #84]	@ (80029a0 <HAL_MspInit+0x5c>)
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	4a14      	ldr	r2, [pc, #80]	@ (80029a0 <HAL_MspInit+0x5c>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	6193      	str	r3, [r2, #24]
 8002956:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <HAL_MspInit+0x5c>)
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <HAL_MspInit+0x5c>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	4a0e      	ldr	r2, [pc, #56]	@ (80029a0 <HAL_MspInit+0x5c>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800296c:	61d3      	str	r3, [r2, #28]
 800296e:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <HAL_MspInit+0x5c>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002976:	607b      	str	r3, [r7, #4]
 8002978:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800297a:	4b0a      	ldr	r3, [pc, #40]	@ (80029a4 <HAL_MspInit+0x60>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	4a04      	ldr	r2, [pc, #16]	@ (80029a4 <HAL_MspInit+0x60>)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40010000 	.word	0x40010000

080029a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029ac:	bf00      	nop
 80029ae:	e7fd      	b.n	80029ac <NMI_Handler+0x4>

080029b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <HardFault_Handler+0x4>

080029b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029bc:	bf00      	nop
 80029be:	e7fd      	b.n	80029bc <MemManage_Handler+0x4>

080029c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029c4:	bf00      	nop
 80029c6:	e7fd      	b.n	80029c4 <BusFault_Handler+0x4>

080029c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <UsageFault_Handler+0x4>

080029d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029f8:	f000 fa2e 	bl	8002e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return 1;
 8002a04:	2301      	movs	r3, #1
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <_kill>:

int _kill(int pid, int sig)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a18:	f004 fda4 	bl	8007564 <__errno>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2216      	movs	r2, #22
 8002a20:	601a      	str	r2, [r3, #0]
  return -1;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <_exit>:

void _exit (int status)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a36:	f04f 31ff 	mov.w	r1, #4294967295
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ffe7 	bl	8002a0e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <_exit+0x12>

08002a44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	e00a      	b.n	8002a6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a56:	f3af 8000 	nop.w
 8002a5a:	4601      	mov	r1, r0
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	60ba      	str	r2, [r7, #8]
 8002a62:	b2ca      	uxtb	r2, r1
 8002a64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	dbf0      	blt.n	8002a56 <_read+0x12>
  }

  return len;
 8002a74:	687b      	ldr	r3, [r7, #4]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e009      	b.n	8002aa4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	60ba      	str	r2, [r7, #8]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	dbf1      	blt.n	8002a90 <_write+0x12>
  }
  return len;
 8002aac:	687b      	ldr	r3, [r7, #4]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <_close>:

int _close(int file)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002adc:	605a      	str	r2, [r3, #4]
  return 0;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <_isatty>:

int _isatty(int file)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
	...

08002b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b20:	4a14      	ldr	r2, [pc, #80]	@ (8002b74 <_sbrk+0x5c>)
 8002b22:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <_sbrk+0x60>)
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b2c:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <_sbrk+0x64>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b34:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <_sbrk+0x64>)
 8002b36:	4a12      	ldr	r2, [pc, #72]	@ (8002b80 <_sbrk+0x68>)
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b3a:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <_sbrk+0x64>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d207      	bcs.n	8002b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b48:	f004 fd0c 	bl	8007564 <__errno>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	220c      	movs	r2, #12
 8002b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	e009      	b.n	8002b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b58:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <_sbrk+0x64>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b5e:	4b07      	ldr	r3, [pc, #28]	@ (8002b7c <_sbrk+0x64>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	4a05      	ldr	r2, [pc, #20]	@ (8002b7c <_sbrk+0x64>)
 8002b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20005000 	.word	0x20005000
 8002b78:	00000400 	.word	0x00000400
 8002b7c:	200009c0 	.word	0x200009c0
 8002b80:	20000ba8 	.word	0x20000ba8

08002b84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b94:	4b11      	ldr	r3, [pc, #68]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002b96:	4a12      	ldr	r2, [pc, #72]	@ (8002be0 <MX_USART2_UART_Init+0x50>)
 8002b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b9a:	4b10      	ldr	r3, [pc, #64]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bae:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bb4:	4b09      	ldr	r3, [pc, #36]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bba:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bc6:	4805      	ldr	r0, [pc, #20]	@ (8002bdc <MX_USART2_UART_Init+0x4c>)
 8002bc8:	f002 fb42 	bl	8005250 <HAL_UART_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bd2:	f7ff fc2a 	bl	800242a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	200009c4 	.word	0x200009c4
 8002be0:	40004400 	.word	0x40004400

08002be4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002be8:	4b11      	ldr	r3, [pc, #68]	@ (8002c30 <MX_USART3_UART_Init+0x4c>)
 8002bea:	4a12      	ldr	r2, [pc, #72]	@ (8002c34 <MX_USART3_UART_Init+0x50>)
 8002bec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002bee:	4b10      	ldr	r3, [pc, #64]	@ (8002c30 <MX_USART3_UART_Init+0x4c>)
 8002bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002bf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c30 <MX_USART3_UART_Init+0x4c>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <MX_USART3_UART_Init+0x4c>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c02:	4b0b      	ldr	r3, [pc, #44]	@ (8002c30 <MX_USART3_UART_Init+0x4c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c08:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <MX_USART3_UART_Init+0x4c>)
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c0e:	4b08      	ldr	r3, [pc, #32]	@ (8002c30 <MX_USART3_UART_Init+0x4c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c14:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <MX_USART3_UART_Init+0x4c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c1a:	4805      	ldr	r0, [pc, #20]	@ (8002c30 <MX_USART3_UART_Init+0x4c>)
 8002c1c:	f002 fb18 	bl	8005250 <HAL_UART_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002c26:	f7ff fc00 	bl	800242a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000a0c 	.word	0x20000a0c
 8002c34:	40004800 	.word	0x40004800

08002c38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	@ 0x28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 0318 	add.w	r3, r7, #24
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a37      	ldr	r2, [pc, #220]	@ (8002d30 <HAL_UART_MspInit+0xf8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d130      	bne.n	8002cba <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c58:	4b36      	ldr	r3, [pc, #216]	@ (8002d34 <HAL_UART_MspInit+0xfc>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	4a35      	ldr	r2, [pc, #212]	@ (8002d34 <HAL_UART_MspInit+0xfc>)
 8002c5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c62:	61d3      	str	r3, [r2, #28]
 8002c64:	4b33      	ldr	r3, [pc, #204]	@ (8002d34 <HAL_UART_MspInit+0xfc>)
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c70:	4b30      	ldr	r3, [pc, #192]	@ (8002d34 <HAL_UART_MspInit+0xfc>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	4a2f      	ldr	r2, [pc, #188]	@ (8002d34 <HAL_UART_MspInit+0xfc>)
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	6193      	str	r3, [r2, #24]
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d34 <HAL_UART_MspInit+0xfc>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c88:	2304      	movs	r3, #4
 8002c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c90:	2303      	movs	r3, #3
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c94:	f107 0318 	add.w	r3, r7, #24
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4827      	ldr	r0, [pc, #156]	@ (8002d38 <HAL_UART_MspInit+0x100>)
 8002c9c:	f000 fe2c 	bl	80038f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cac:	f107 0318 	add.w	r3, r7, #24
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4821      	ldr	r0, [pc, #132]	@ (8002d38 <HAL_UART_MspInit+0x100>)
 8002cb4:	f000 fe20 	bl	80038f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002cb8:	e036      	b.n	8002d28 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8002d3c <HAL_UART_MspInit+0x104>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d131      	bne.n	8002d28 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d34 <HAL_UART_MspInit+0xfc>)
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8002d34 <HAL_UART_MspInit+0xfc>)
 8002cca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cce:	61d3      	str	r3, [r2, #28]
 8002cd0:	4b18      	ldr	r3, [pc, #96]	@ (8002d34 <HAL_UART_MspInit+0xfc>)
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cdc:	4b15      	ldr	r3, [pc, #84]	@ (8002d34 <HAL_UART_MspInit+0xfc>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	4a14      	ldr	r2, [pc, #80]	@ (8002d34 <HAL_UART_MspInit+0xfc>)
 8002ce2:	f043 0308 	orr.w	r3, r3, #8
 8002ce6:	6193      	str	r3, [r2, #24]
 8002ce8:	4b12      	ldr	r3, [pc, #72]	@ (8002d34 <HAL_UART_MspInit+0xfc>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cf4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d02:	f107 0318 	add.w	r3, r7, #24
 8002d06:	4619      	mov	r1, r3
 8002d08:	480d      	ldr	r0, [pc, #52]	@ (8002d40 <HAL_UART_MspInit+0x108>)
 8002d0a:	f000 fdf5 	bl	80038f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1c:	f107 0318 	add.w	r3, r7, #24
 8002d20:	4619      	mov	r1, r3
 8002d22:	4807      	ldr	r0, [pc, #28]	@ (8002d40 <HAL_UART_MspInit+0x108>)
 8002d24:	f000 fde8 	bl	80038f8 <HAL_GPIO_Init>
}
 8002d28:	bf00      	nop
 8002d2a:	3728      	adds	r7, #40	@ 0x28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40004400 	.word	0x40004400
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40010800 	.word	0x40010800
 8002d3c:	40004800 	.word	0x40004800
 8002d40:	40010c00 	.word	0x40010c00

08002d44 <debugPrintln>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void debugPrintln(char _out[]){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) _out, strlen(_out), 50);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7fd f9ff 	bl	8000150 <strlen>
 8002d52:	4603      	mov	r3, r0
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	2332      	movs	r3, #50	@ 0x32
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4808      	ldr	r0, [pc, #32]	@ (8002d7c <debugPrintln+0x38>)
 8002d5c:	f002 fac8 	bl	80052f0 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8002d60:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8002d64:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 1);
 8002d66:	f107 010c 	add.w	r1, r7, #12
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	4803      	ldr	r0, [pc, #12]	@ (8002d7c <debugPrintln+0x38>)
 8002d70:	f002 fabe 	bl	80052f0 <HAL_UART_Transmit>
}
 8002d74:	bf00      	nop
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	200009c4 	.word	0x200009c4

08002d80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d80:	f7ff ff00 	bl	8002b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d84:	480b      	ldr	r0, [pc, #44]	@ (8002db4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d86:	490c      	ldr	r1, [pc, #48]	@ (8002db8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d88:	4a0c      	ldr	r2, [pc, #48]	@ (8002dbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d8c:	e002      	b.n	8002d94 <LoopCopyDataInit>

08002d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d92:	3304      	adds	r3, #4

08002d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d98:	d3f9      	bcc.n	8002d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d9a:	4a09      	ldr	r2, [pc, #36]	@ (8002dc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d9c:	4c09      	ldr	r4, [pc, #36]	@ (8002dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da0:	e001      	b.n	8002da6 <LoopFillZerobss>

08002da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da4:	3204      	adds	r2, #4

08002da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da8:	d3fb      	bcc.n	8002da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002daa:	f004 fbe1 	bl	8007570 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dae:	f7ff f95b 	bl	8002068 <main>
  bx lr
 8002db2:	4770      	bx	lr
  ldr r0, =_sdata
 8002db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db8:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8002dbc:	0800b114 	.word	0x0800b114
  ldr r2, =_sbss
 8002dc0:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8002dc4:	20000ba4 	.word	0x20000ba4

08002dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dc8:	e7fe      	b.n	8002dc8 <ADC1_2_IRQHandler>
	...

08002dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd0:	4b08      	ldr	r3, [pc, #32]	@ (8002df4 <HAL_Init+0x28>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a07      	ldr	r2, [pc, #28]	@ (8002df4 <HAL_Init+0x28>)
 8002dd6:	f043 0310 	orr.w	r3, r3, #16
 8002dda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ddc:	2003      	movs	r0, #3
 8002dde:	f000 fd57 	bl	8003890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002de2:	200f      	movs	r0, #15
 8002de4:	f000 f808 	bl	8002df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de8:	f7ff fdac 	bl	8002944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40022000 	.word	0x40022000

08002df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e00:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <HAL_InitTick+0x54>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <HAL_InitTick+0x58>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fd61 	bl	80038de <HAL_SYSTICK_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e00e      	b.n	8002e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b0f      	cmp	r3, #15
 8002e2a:	d80a      	bhi.n	8002e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	f000 fd37 	bl	80038a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e38:	4a06      	ldr	r2, [pc, #24]	@ (8002e54 <HAL_InitTick+0x5c>)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000124 	.word	0x20000124
 8002e50:	2000012c 	.word	0x2000012c
 8002e54:	20000128 	.word	0x20000128

08002e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e5c:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <HAL_IncTick+0x1c>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <HAL_IncTick+0x20>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4413      	add	r3, r2
 8002e68:	4a03      	ldr	r2, [pc, #12]	@ (8002e78 <HAL_IncTick+0x20>)
 8002e6a:	6013      	str	r3, [r2, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr
 8002e74:	2000012c 	.word	0x2000012c
 8002e78:	20000a54 	.word	0x20000a54

08002e7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e80:	4b02      	ldr	r3, [pc, #8]	@ (8002e8c <HAL_GetTick+0x10>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr
 8002e8c:	20000a54 	.word	0x20000a54

08002e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7ff fff0 	bl	8002e7c <HAL_GetTick>
 8002e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea8:	d005      	beq.n	8002eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <HAL_Delay+0x44>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eb6:	bf00      	nop
 8002eb8:	f7ff ffe0 	bl	8002e7c <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d8f7      	bhi.n	8002eb8 <HAL_Delay+0x28>
  {
  }
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	2000012c 	.word	0x2000012c

08002ed8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0be      	b.n	8003078 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d109      	bne.n	8002f1c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fe ffde 	bl	8001ed8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fbc5 	bl	80036ac <ADC_ConversionStop_Disable>
 8002f22:	4603      	mov	r3, r0
 8002f24:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 8099 	bne.w	8003066 <HAL_ADC_Init+0x18e>
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f040 8095 	bne.w	8003066 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f44:	f023 0302 	bic.w	r3, r3, #2
 8002f48:	f043 0202 	orr.w	r2, r3, #2
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7b1b      	ldrb	r3, [r3, #12]
 8002f5e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f60:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f70:	d003      	beq.n	8002f7a <HAL_ADC_Init+0xa2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d102      	bne.n	8002f80 <HAL_ADC_Init+0xa8>
 8002f7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f7e:	e000      	b.n	8002f82 <HAL_ADC_Init+0xaa>
 8002f80:	2300      	movs	r3, #0
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	7d1b      	ldrb	r3, [r3, #20]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d119      	bne.n	8002fc4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	7b1b      	ldrb	r3, [r3, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d109      	bne.n	8002fac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	035a      	lsls	r2, r3, #13
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	e00b      	b.n	8002fc4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	4b28      	ldr	r3, [pc, #160]	@ (8003080 <HAL_ADC_Init+0x1a8>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ff4:	d003      	beq.n	8002ffe <HAL_ADC_Init+0x126>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d104      	bne.n	8003008 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	3b01      	subs	r3, #1
 8003004:	051b      	lsls	r3, r3, #20
 8003006:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	430a      	orrs	r2, r1
 800301a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	4b18      	ldr	r3, [pc, #96]	@ (8003084 <HAL_ADC_Init+0x1ac>)
 8003024:	4013      	ands	r3, r2
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	429a      	cmp	r2, r3
 800302a:	d10b      	bne.n	8003044 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003036:	f023 0303 	bic.w	r3, r3, #3
 800303a:	f043 0201 	orr.w	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003042:	e018      	b.n	8003076 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	f023 0312 	bic.w	r3, r3, #18
 800304c:	f043 0210 	orr.w	r2, r3, #16
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003064:	e007      	b.n	8003076 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306a:	f043 0210 	orr.w	r2, r3, #16
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003076:	7dfb      	ldrb	r3, [r7, #23]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	ffe1f7fd 	.word	0xffe1f7fd
 8003084:	ff1f0efe 	.word	0xff1f0efe

08003088 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_ADC_Start+0x1a>
 800309e:	2302      	movs	r3, #2
 80030a0:	e098      	b.n	80031d4 <HAL_ADC_Start+0x14c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 faa4 	bl	80035f8 <ADC_Enable>
 80030b0:	4603      	mov	r3, r0
 80030b2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f040 8087 	bne.w	80031ca <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a41      	ldr	r2, [pc, #260]	@ (80031dc <HAL_ADC_Start+0x154>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d105      	bne.n	80030e6 <HAL_ADC_Start+0x5e>
 80030da:	4b41      	ldr	r3, [pc, #260]	@ (80031e0 <HAL_ADC_Start+0x158>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d115      	bne.n	8003112 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d026      	beq.n	800314e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003104:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003108:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003110:	e01d      	b.n	800314e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003116:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2f      	ldr	r2, [pc, #188]	@ (80031e0 <HAL_ADC_Start+0x158>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d004      	beq.n	8003132 <HAL_ADC_Start+0xaa>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a2b      	ldr	r2, [pc, #172]	@ (80031dc <HAL_ADC_Start+0x154>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d10d      	bne.n	800314e <HAL_ADC_Start+0xc6>
 8003132:	4b2b      	ldr	r3, [pc, #172]	@ (80031e0 <HAL_ADC_Start+0x158>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003146:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003152:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d006      	beq.n	8003168 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315e:	f023 0206 	bic.w	r2, r3, #6
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003166:	e002      	b.n	800316e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f06f 0202 	mvn.w	r2, #2
 800317e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800318a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800318e:	d113      	bne.n	80031b8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003194:	4a11      	ldr	r2, [pc, #68]	@ (80031dc <HAL_ADC_Start+0x154>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d105      	bne.n	80031a6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800319a:	4b11      	ldr	r3, [pc, #68]	@ (80031e0 <HAL_ADC_Start+0x158>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d108      	bne.n	80031b8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	e00c      	b.n	80031d2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	e003      	b.n	80031d2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40012800 	.word	0x40012800
 80031e0:	40012400 	.word	0x40012400

080031e4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80031fa:	f7ff fe3f 	bl	8002e7c <HAL_GetTick>
 80031fe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003212:	f043 0220 	orr.w	r2, r3, #32
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0d3      	b.n	80033ce <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d131      	bne.n	8003298 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800323e:	2b00      	cmp	r3, #0
 8003240:	d12a      	bne.n	8003298 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003242:	e021      	b.n	8003288 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324a:	d01d      	beq.n	8003288 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d007      	beq.n	8003262 <HAL_ADC_PollForConversion+0x7e>
 8003252:	f7ff fe13 	bl	8002e7c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d212      	bcs.n	8003288 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003274:	f043 0204 	orr.w	r2, r3, #4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e0a2      	b.n	80033ce <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0d6      	beq.n	8003244 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003296:	e070      	b.n	800337a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003298:	4b4f      	ldr	r3, [pc, #316]	@ (80033d8 <HAL_ADC_PollForConversion+0x1f4>)
 800329a:	681c      	ldr	r4, [r3, #0]
 800329c:	2002      	movs	r0, #2
 800329e:	f001 f98d 	bl	80045bc <HAL_RCCEx_GetPeriphCLKFreq>
 80032a2:	4603      	mov	r3, r0
 80032a4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6919      	ldr	r1, [r3, #16]
 80032ae:	4b4b      	ldr	r3, [pc, #300]	@ (80033dc <HAL_ADC_PollForConversion+0x1f8>)
 80032b0:	400b      	ands	r3, r1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d118      	bne.n	80032e8 <HAL_ADC_PollForConversion+0x104>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68d9      	ldr	r1, [r3, #12]
 80032bc:	4b48      	ldr	r3, [pc, #288]	@ (80033e0 <HAL_ADC_PollForConversion+0x1fc>)
 80032be:	400b      	ands	r3, r1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d111      	bne.n	80032e8 <HAL_ADC_PollForConversion+0x104>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6919      	ldr	r1, [r3, #16]
 80032ca:	4b46      	ldr	r3, [pc, #280]	@ (80033e4 <HAL_ADC_PollForConversion+0x200>)
 80032cc:	400b      	ands	r3, r1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d108      	bne.n	80032e4 <HAL_ADC_PollForConversion+0x100>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68d9      	ldr	r1, [r3, #12]
 80032d8:	4b43      	ldr	r3, [pc, #268]	@ (80033e8 <HAL_ADC_PollForConversion+0x204>)
 80032da:	400b      	ands	r3, r1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_ADC_PollForConversion+0x100>
 80032e0:	2314      	movs	r3, #20
 80032e2:	e020      	b.n	8003326 <HAL_ADC_PollForConversion+0x142>
 80032e4:	2329      	movs	r3, #41	@ 0x29
 80032e6:	e01e      	b.n	8003326 <HAL_ADC_PollForConversion+0x142>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6919      	ldr	r1, [r3, #16]
 80032ee:	4b3d      	ldr	r3, [pc, #244]	@ (80033e4 <HAL_ADC_PollForConversion+0x200>)
 80032f0:	400b      	ands	r3, r1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d106      	bne.n	8003304 <HAL_ADC_PollForConversion+0x120>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68d9      	ldr	r1, [r3, #12]
 80032fc:	4b3a      	ldr	r3, [pc, #232]	@ (80033e8 <HAL_ADC_PollForConversion+0x204>)
 80032fe:	400b      	ands	r3, r1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00d      	beq.n	8003320 <HAL_ADC_PollForConversion+0x13c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6919      	ldr	r1, [r3, #16]
 800330a:	4b38      	ldr	r3, [pc, #224]	@ (80033ec <HAL_ADC_PollForConversion+0x208>)
 800330c:	400b      	ands	r3, r1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d108      	bne.n	8003324 <HAL_ADC_PollForConversion+0x140>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68d9      	ldr	r1, [r3, #12]
 8003318:	4b34      	ldr	r3, [pc, #208]	@ (80033ec <HAL_ADC_PollForConversion+0x208>)
 800331a:	400b      	ands	r3, r1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_ADC_PollForConversion+0x140>
 8003320:	2354      	movs	r3, #84	@ 0x54
 8003322:	e000      	b.n	8003326 <HAL_ADC_PollForConversion+0x142>
 8003324:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800332c:	e021      	b.n	8003372 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003334:	d01a      	beq.n	800336c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <HAL_ADC_PollForConversion+0x168>
 800333c:	f7ff fd9e 	bl	8002e7c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d20f      	bcs.n	800336c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	429a      	cmp	r2, r3
 8003352:	d90b      	bls.n	800336c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003358:	f043 0204 	orr.w	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e030      	b.n	80033ce <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	3301      	adds	r3, #1
 8003370:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	429a      	cmp	r2, r3
 8003378:	d8d9      	bhi.n	800332e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f06f 0212 	mvn.w	r2, #18
 8003382:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003388:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800339a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800339e:	d115      	bne.n	80033cc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d111      	bne.n	80033cc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd90      	pop	{r4, r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000124 	.word	0x20000124
 80033dc:	24924924 	.word	0x24924924
 80033e0:	00924924 	.word	0x00924924
 80033e4:	12492492 	.word	0x12492492
 80033e8:	00492492 	.word	0x00492492
 80033ec:	00249249 	.word	0x00249249

080033f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x20>
 8003424:	2302      	movs	r3, #2
 8003426:	e0dc      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x1da>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b06      	cmp	r3, #6
 8003436:	d81c      	bhi.n	8003472 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	3b05      	subs	r3, #5
 800344a:	221f      	movs	r2, #31
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	4019      	ands	r1, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	3b05      	subs	r3, #5
 8003464:	fa00 f203 	lsl.w	r2, r0, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003470:	e03c      	b.n	80034ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d81c      	bhi.n	80034b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	3b23      	subs	r3, #35	@ 0x23
 800348c:	221f      	movs	r2, #31
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	4019      	ands	r1, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	3b23      	subs	r3, #35	@ 0x23
 80034a6:	fa00 f203 	lsl.w	r2, r0, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80034b2:	e01b      	b.n	80034ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	3b41      	subs	r3, #65	@ 0x41
 80034c6:	221f      	movs	r2, #31
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	4019      	ands	r1, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	3b41      	subs	r3, #65	@ 0x41
 80034e0:	fa00 f203 	lsl.w	r2, r0, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b09      	cmp	r3, #9
 80034f2:	d91c      	bls.n	800352e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68d9      	ldr	r1, [r3, #12]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	3b1e      	subs	r3, #30
 8003506:	2207      	movs	r2, #7
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	4019      	ands	r1, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6898      	ldr	r0, [r3, #8]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4413      	add	r3, r2
 800351e:	3b1e      	subs	r3, #30
 8003520:	fa00 f203 	lsl.w	r2, r0, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	60da      	str	r2, [r3, #12]
 800352c:	e019      	b.n	8003562 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6919      	ldr	r1, [r3, #16]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4413      	add	r3, r2
 800353e:	2207      	movs	r2, #7
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	4019      	ands	r1, r3
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	6898      	ldr	r0, [r3, #8]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	fa00 f203 	lsl.w	r2, r0, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b10      	cmp	r3, #16
 8003568:	d003      	beq.n	8003572 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800356e:	2b11      	cmp	r3, #17
 8003570:	d132      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1d      	ldr	r2, [pc, #116]	@ (80035ec <HAL_ADC_ConfigChannel+0x1e4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d125      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d126      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003598:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d11a      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035a2:	4b13      	ldr	r3, [pc, #76]	@ (80035f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a13      	ldr	r2, [pc, #76]	@ (80035f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	0c9a      	lsrs	r2, r3, #18
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035b8:	e002      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	3b01      	subs	r3, #1
 80035be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f9      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x1b2>
 80035c6:	e007      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035cc:	f043 0220 	orr.w	r2, r3, #32
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr
 80035ec:	40012400 	.word	0x40012400
 80035f0:	20000124 	.word	0x20000124
 80035f4:	431bde83 	.word	0x431bde83

080035f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b01      	cmp	r3, #1
 8003614:	d040      	beq.n	8003698 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003626:	4b1f      	ldr	r3, [pc, #124]	@ (80036a4 <ADC_Enable+0xac>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1f      	ldr	r2, [pc, #124]	@ (80036a8 <ADC_Enable+0xb0>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	0c9b      	lsrs	r3, r3, #18
 8003632:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003634:	e002      	b.n	800363c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3b01      	subs	r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f9      	bne.n	8003636 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003642:	f7ff fc1b 	bl	8002e7c <HAL_GetTick>
 8003646:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003648:	e01f      	b.n	800368a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800364a:	f7ff fc17 	bl	8002e7c <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d918      	bls.n	800368a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d011      	beq.n	800368a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	f043 0210 	orr.w	r2, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	f043 0201 	orr.w	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e007      	b.n	800369a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d1d8      	bne.n	800364a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000124 	.word	0x20000124
 80036a8:	431bde83 	.word	0x431bde83

080036ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d12e      	bne.n	8003724 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036d6:	f7ff fbd1 	bl	8002e7c <HAL_GetTick>
 80036da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036dc:	e01b      	b.n	8003716 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036de:	f7ff fbcd 	bl	8002e7c <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d914      	bls.n	8003716 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d10d      	bne.n	8003716 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fe:	f043 0210 	orr.w	r2, r3, #16
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370a:	f043 0201 	orr.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e007      	b.n	8003726 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b01      	cmp	r3, #1
 8003722:	d0dc      	beq.n	80036de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <__NVIC_SetPriorityGrouping>:
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003740:	4b0c      	ldr	r3, [pc, #48]	@ (8003774 <__NVIC_SetPriorityGrouping+0x44>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800374c:	4013      	ands	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003758:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800375c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003762:	4a04      	ldr	r2, [pc, #16]	@ (8003774 <__NVIC_SetPriorityGrouping+0x44>)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	60d3      	str	r3, [r2, #12]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <__NVIC_GetPriorityGrouping>:
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800377c:	4b04      	ldr	r3, [pc, #16]	@ (8003790 <__NVIC_GetPriorityGrouping+0x18>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	0a1b      	lsrs	r3, r3, #8
 8003782:	f003 0307 	and.w	r3, r3, #7
}
 8003786:	4618      	mov	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <__NVIC_SetPriority>:
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	6039      	str	r1, [r7, #0]
 800379e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	db0a      	blt.n	80037be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	490c      	ldr	r1, [pc, #48]	@ (80037e0 <__NVIC_SetPriority+0x4c>)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	0112      	lsls	r2, r2, #4
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	440b      	add	r3, r1
 80037b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80037bc:	e00a      	b.n	80037d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	4908      	ldr	r1, [pc, #32]	@ (80037e4 <__NVIC_SetPriority+0x50>)
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	3b04      	subs	r3, #4
 80037cc:	0112      	lsls	r2, r2, #4
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	440b      	add	r3, r1
 80037d2:	761a      	strb	r2, [r3, #24]
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	e000e100 	.word	0xe000e100
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <NVIC_EncodePriority>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	b089      	sub	sp, #36	@ 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f1c3 0307 	rsb	r3, r3, #7
 8003802:	2b04      	cmp	r3, #4
 8003804:	bf28      	it	cs
 8003806:	2304      	movcs	r3, #4
 8003808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3304      	adds	r3, #4
 800380e:	2b06      	cmp	r3, #6
 8003810:	d902      	bls.n	8003818 <NVIC_EncodePriority+0x30>
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	3b03      	subs	r3, #3
 8003816:	e000      	b.n	800381a <NVIC_EncodePriority+0x32>
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800381c:	f04f 32ff 	mov.w	r2, #4294967295
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43da      	mvns	r2, r3
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	401a      	ands	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003830:	f04f 31ff 	mov.w	r1, #4294967295
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	43d9      	mvns	r1, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	4313      	orrs	r3, r2
}
 8003842:	4618      	mov	r0, r3
 8003844:	3724      	adds	r7, #36	@ 0x24
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800385c:	d301      	bcc.n	8003862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800385e:	2301      	movs	r3, #1
 8003860:	e00f      	b.n	8003882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003862:	4a0a      	ldr	r2, [pc, #40]	@ (800388c <SysTick_Config+0x40>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800386a:	210f      	movs	r1, #15
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	f7ff ff90 	bl	8003794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003874:	4b05      	ldr	r3, [pc, #20]	@ (800388c <SysTick_Config+0x40>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800387a:	4b04      	ldr	r3, [pc, #16]	@ (800388c <SysTick_Config+0x40>)
 800387c:	2207      	movs	r2, #7
 800387e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	e000e010 	.word	0xe000e010

08003890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ff49 	bl	8003730 <__NVIC_SetPriorityGrouping>
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	4603      	mov	r3, r0
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b8:	f7ff ff5e 	bl	8003778 <__NVIC_GetPriorityGrouping>
 80038bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	6978      	ldr	r0, [r7, #20]
 80038c4:	f7ff ff90 	bl	80037e8 <NVIC_EncodePriority>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff5f 	bl	8003794 <__NVIC_SetPriority>
}
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ffb0 	bl	800384c <SysTick_Config>
 80038ec:	4603      	mov	r3, r0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b08b      	sub	sp, #44	@ 0x2c
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003902:	2300      	movs	r3, #0
 8003904:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003906:	2300      	movs	r3, #0
 8003908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800390a:	e169      	b.n	8003be0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800390c:	2201      	movs	r2, #1
 800390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69fa      	ldr	r2, [r7, #28]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	429a      	cmp	r2, r3
 8003926:	f040 8158 	bne.w	8003bda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4a9a      	ldr	r2, [pc, #616]	@ (8003b98 <HAL_GPIO_Init+0x2a0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d05e      	beq.n	80039f2 <HAL_GPIO_Init+0xfa>
 8003934:	4a98      	ldr	r2, [pc, #608]	@ (8003b98 <HAL_GPIO_Init+0x2a0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d875      	bhi.n	8003a26 <HAL_GPIO_Init+0x12e>
 800393a:	4a98      	ldr	r2, [pc, #608]	@ (8003b9c <HAL_GPIO_Init+0x2a4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d058      	beq.n	80039f2 <HAL_GPIO_Init+0xfa>
 8003940:	4a96      	ldr	r2, [pc, #600]	@ (8003b9c <HAL_GPIO_Init+0x2a4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d86f      	bhi.n	8003a26 <HAL_GPIO_Init+0x12e>
 8003946:	4a96      	ldr	r2, [pc, #600]	@ (8003ba0 <HAL_GPIO_Init+0x2a8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d052      	beq.n	80039f2 <HAL_GPIO_Init+0xfa>
 800394c:	4a94      	ldr	r2, [pc, #592]	@ (8003ba0 <HAL_GPIO_Init+0x2a8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d869      	bhi.n	8003a26 <HAL_GPIO_Init+0x12e>
 8003952:	4a94      	ldr	r2, [pc, #592]	@ (8003ba4 <HAL_GPIO_Init+0x2ac>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d04c      	beq.n	80039f2 <HAL_GPIO_Init+0xfa>
 8003958:	4a92      	ldr	r2, [pc, #584]	@ (8003ba4 <HAL_GPIO_Init+0x2ac>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d863      	bhi.n	8003a26 <HAL_GPIO_Init+0x12e>
 800395e:	4a92      	ldr	r2, [pc, #584]	@ (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d046      	beq.n	80039f2 <HAL_GPIO_Init+0xfa>
 8003964:	4a90      	ldr	r2, [pc, #576]	@ (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d85d      	bhi.n	8003a26 <HAL_GPIO_Init+0x12e>
 800396a:	2b12      	cmp	r3, #18
 800396c:	d82a      	bhi.n	80039c4 <HAL_GPIO_Init+0xcc>
 800396e:	2b12      	cmp	r3, #18
 8003970:	d859      	bhi.n	8003a26 <HAL_GPIO_Init+0x12e>
 8003972:	a201      	add	r2, pc, #4	@ (adr r2, 8003978 <HAL_GPIO_Init+0x80>)
 8003974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003978:	080039f3 	.word	0x080039f3
 800397c:	080039cd 	.word	0x080039cd
 8003980:	080039df 	.word	0x080039df
 8003984:	08003a21 	.word	0x08003a21
 8003988:	08003a27 	.word	0x08003a27
 800398c:	08003a27 	.word	0x08003a27
 8003990:	08003a27 	.word	0x08003a27
 8003994:	08003a27 	.word	0x08003a27
 8003998:	08003a27 	.word	0x08003a27
 800399c:	08003a27 	.word	0x08003a27
 80039a0:	08003a27 	.word	0x08003a27
 80039a4:	08003a27 	.word	0x08003a27
 80039a8:	08003a27 	.word	0x08003a27
 80039ac:	08003a27 	.word	0x08003a27
 80039b0:	08003a27 	.word	0x08003a27
 80039b4:	08003a27 	.word	0x08003a27
 80039b8:	08003a27 	.word	0x08003a27
 80039bc:	080039d5 	.word	0x080039d5
 80039c0:	080039e9 	.word	0x080039e9
 80039c4:	4a79      	ldr	r2, [pc, #484]	@ (8003bac <HAL_GPIO_Init+0x2b4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80039ca:	e02c      	b.n	8003a26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	623b      	str	r3, [r7, #32]
          break;
 80039d2:	e029      	b.n	8003a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	3304      	adds	r3, #4
 80039da:	623b      	str	r3, [r7, #32]
          break;
 80039dc:	e024      	b.n	8003a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	3308      	adds	r3, #8
 80039e4:	623b      	str	r3, [r7, #32]
          break;
 80039e6:	e01f      	b.n	8003a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	330c      	adds	r3, #12
 80039ee:	623b      	str	r3, [r7, #32]
          break;
 80039f0:	e01a      	b.n	8003a28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d102      	bne.n	8003a00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039fa:	2304      	movs	r3, #4
 80039fc:	623b      	str	r3, [r7, #32]
          break;
 80039fe:	e013      	b.n	8003a28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d105      	bne.n	8003a14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a08:	2308      	movs	r3, #8
 8003a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	611a      	str	r2, [r3, #16]
          break;
 8003a12:	e009      	b.n	8003a28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a14:	2308      	movs	r3, #8
 8003a16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	615a      	str	r2, [r3, #20]
          break;
 8003a1e:	e003      	b.n	8003a28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a20:	2300      	movs	r3, #0
 8003a22:	623b      	str	r3, [r7, #32]
          break;
 8003a24:	e000      	b.n	8003a28 <HAL_GPIO_Init+0x130>
          break;
 8003a26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	2bff      	cmp	r3, #255	@ 0xff
 8003a2c:	d801      	bhi.n	8003a32 <HAL_GPIO_Init+0x13a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	e001      	b.n	8003a36 <HAL_GPIO_Init+0x13e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3304      	adds	r3, #4
 8003a36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2bff      	cmp	r3, #255	@ 0xff
 8003a3c:	d802      	bhi.n	8003a44 <HAL_GPIO_Init+0x14c>
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	e002      	b.n	8003a4a <HAL_GPIO_Init+0x152>
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	3b08      	subs	r3, #8
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	210f      	movs	r1, #15
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	fa01 f303 	lsl.w	r3, r1, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	6a39      	ldr	r1, [r7, #32]
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	fa01 f303 	lsl.w	r3, r1, r3
 8003a64:	431a      	orrs	r2, r3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80b1 	beq.w	8003bda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a78:	4b4d      	ldr	r3, [pc, #308]	@ (8003bb0 <HAL_GPIO_Init+0x2b8>)
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	4a4c      	ldr	r2, [pc, #304]	@ (8003bb0 <HAL_GPIO_Init+0x2b8>)
 8003a7e:	f043 0301 	orr.w	r3, r3, #1
 8003a82:	6193      	str	r3, [r2, #24]
 8003a84:	4b4a      	ldr	r3, [pc, #296]	@ (8003bb0 <HAL_GPIO_Init+0x2b8>)
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a90:	4a48      	ldr	r2, [pc, #288]	@ (8003bb4 <HAL_GPIO_Init+0x2bc>)
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	3302      	adds	r3, #2
 8003a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	220f      	movs	r2, #15
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a40      	ldr	r2, [pc, #256]	@ (8003bb8 <HAL_GPIO_Init+0x2c0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d013      	beq.n	8003ae4 <HAL_GPIO_Init+0x1ec>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a3f      	ldr	r2, [pc, #252]	@ (8003bbc <HAL_GPIO_Init+0x2c4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_GPIO_Init+0x1e8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a3e      	ldr	r2, [pc, #248]	@ (8003bc0 <HAL_GPIO_Init+0x2c8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d007      	beq.n	8003adc <HAL_GPIO_Init+0x1e4>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a3d      	ldr	r2, [pc, #244]	@ (8003bc4 <HAL_GPIO_Init+0x2cc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d101      	bne.n	8003ad8 <HAL_GPIO_Init+0x1e0>
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e006      	b.n	8003ae6 <HAL_GPIO_Init+0x1ee>
 8003ad8:	2304      	movs	r3, #4
 8003ada:	e004      	b.n	8003ae6 <HAL_GPIO_Init+0x1ee>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e002      	b.n	8003ae6 <HAL_GPIO_Init+0x1ee>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e000      	b.n	8003ae6 <HAL_GPIO_Init+0x1ee>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae8:	f002 0203 	and.w	r2, r2, #3
 8003aec:	0092      	lsls	r2, r2, #2
 8003aee:	4093      	lsls	r3, r2
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003af6:	492f      	ldr	r1, [pc, #188]	@ (8003bb4 <HAL_GPIO_Init+0x2bc>)
 8003af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	3302      	adds	r3, #2
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d006      	beq.n	8003b1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b10:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc8 <HAL_GPIO_Init+0x2d0>)
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	492c      	ldr	r1, [pc, #176]	@ (8003bc8 <HAL_GPIO_Init+0x2d0>)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	608b      	str	r3, [r1, #8]
 8003b1c:	e006      	b.n	8003b2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc8 <HAL_GPIO_Init+0x2d0>)
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	4928      	ldr	r1, [pc, #160]	@ (8003bc8 <HAL_GPIO_Init+0x2d0>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d006      	beq.n	8003b46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b38:	4b23      	ldr	r3, [pc, #140]	@ (8003bc8 <HAL_GPIO_Init+0x2d0>)
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	4922      	ldr	r1, [pc, #136]	@ (8003bc8 <HAL_GPIO_Init+0x2d0>)
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60cb      	str	r3, [r1, #12]
 8003b44:	e006      	b.n	8003b54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b46:	4b20      	ldr	r3, [pc, #128]	@ (8003bc8 <HAL_GPIO_Init+0x2d0>)
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	491e      	ldr	r1, [pc, #120]	@ (8003bc8 <HAL_GPIO_Init+0x2d0>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d006      	beq.n	8003b6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b60:	4b19      	ldr	r3, [pc, #100]	@ (8003bc8 <HAL_GPIO_Init+0x2d0>)
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	4918      	ldr	r1, [pc, #96]	@ (8003bc8 <HAL_GPIO_Init+0x2d0>)
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	604b      	str	r3, [r1, #4]
 8003b6c:	e006      	b.n	8003b7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b6e:	4b16      	ldr	r3, [pc, #88]	@ (8003bc8 <HAL_GPIO_Init+0x2d0>)
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	43db      	mvns	r3, r3
 8003b76:	4914      	ldr	r1, [pc, #80]	@ (8003bc8 <HAL_GPIO_Init+0x2d0>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d021      	beq.n	8003bcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b88:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc8 <HAL_GPIO_Init+0x2d0>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	490e      	ldr	r1, [pc, #56]	@ (8003bc8 <HAL_GPIO_Init+0x2d0>)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	600b      	str	r3, [r1, #0]
 8003b94:	e021      	b.n	8003bda <HAL_GPIO_Init+0x2e2>
 8003b96:	bf00      	nop
 8003b98:	10320000 	.word	0x10320000
 8003b9c:	10310000 	.word	0x10310000
 8003ba0:	10220000 	.word	0x10220000
 8003ba4:	10210000 	.word	0x10210000
 8003ba8:	10120000 	.word	0x10120000
 8003bac:	10110000 	.word	0x10110000
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	40010800 	.word	0x40010800
 8003bbc:	40010c00 	.word	0x40010c00
 8003bc0:	40011000 	.word	0x40011000
 8003bc4:	40011400 	.word	0x40011400
 8003bc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003bfc <HAL_GPIO_Init+0x304>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	4909      	ldr	r1, [pc, #36]	@ (8003bfc <HAL_GPIO_Init+0x304>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	3301      	adds	r3, #1
 8003bde:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f47f ae8e 	bne.w	800390c <HAL_GPIO_Init+0x14>
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	372c      	adds	r7, #44	@ 0x2c
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr
 8003bfc:	40010400 	.word	0x40010400

08003c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	807b      	strh	r3, [r7, #2]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c10:	787b      	ldrb	r3, [r7, #1]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c16:	887a      	ldrh	r2, [r7, #2]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c1c:	e003      	b.n	8003c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c1e:	887b      	ldrh	r3, [r7, #2]
 8003c20:	041a      	lsls	r2, r3, #16
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	611a      	str	r2, [r3, #16]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e272      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 8087 	beq.w	8003d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c50:	4b92      	ldr	r3, [pc, #584]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d00c      	beq.n	8003c76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c5c:	4b8f      	ldr	r3, [pc, #572]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b08      	cmp	r3, #8
 8003c66:	d112      	bne.n	8003c8e <HAL_RCC_OscConfig+0x5e>
 8003c68:	4b8c      	ldr	r3, [pc, #560]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c74:	d10b      	bne.n	8003c8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c76:	4b89      	ldr	r3, [pc, #548]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d06c      	beq.n	8003d5c <HAL_RCC_OscConfig+0x12c>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d168      	bne.n	8003d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e24c      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c96:	d106      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x76>
 8003c98:	4b80      	ldr	r3, [pc, #512]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a7f      	ldr	r2, [pc, #508]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	e02e      	b.n	8003d04 <HAL_RCC_OscConfig+0xd4>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x98>
 8003cae:	4b7b      	ldr	r3, [pc, #492]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a7a      	ldr	r2, [pc, #488]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b78      	ldr	r3, [pc, #480]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a77      	ldr	r2, [pc, #476]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e01d      	b.n	8003d04 <HAL_RCC_OscConfig+0xd4>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCC_OscConfig+0xbc>
 8003cd2:	4b72      	ldr	r3, [pc, #456]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a71      	ldr	r2, [pc, #452]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b6f      	ldr	r3, [pc, #444]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a6e      	ldr	r2, [pc, #440]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	e00b      	b.n	8003d04 <HAL_RCC_OscConfig+0xd4>
 8003cec:	4b6b      	ldr	r3, [pc, #428]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a6a      	ldr	r2, [pc, #424]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4b68      	ldr	r3, [pc, #416]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a67      	ldr	r2, [pc, #412]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003cfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d013      	beq.n	8003d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7ff f8b6 	bl	8002e7c <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d14:	f7ff f8b2 	bl	8002e7c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	@ 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e200      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d26:	4b5d      	ldr	r3, [pc, #372]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0xe4>
 8003d32:	e014      	b.n	8003d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7ff f8a2 	bl	8002e7c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7ff f89e 	bl	8002e7c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	@ 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1ec      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4e:	4b53      	ldr	r3, [pc, #332]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x10c>
 8003d5a:	e000      	b.n	8003d5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d063      	beq.n	8003e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d6a:	4b4c      	ldr	r3, [pc, #304]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d76:	4b49      	ldr	r3, [pc, #292]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d11c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x18c>
 8003d82:	4b46      	ldr	r3, [pc, #280]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d116      	bne.n	8003dbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8e:	4b43      	ldr	r3, [pc, #268]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_RCC_OscConfig+0x176>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e1c0      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da6:	4b3d      	ldr	r3, [pc, #244]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4939      	ldr	r1, [pc, #228]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dba:	e03a      	b.n	8003e32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d020      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc4:	4b36      	ldr	r3, [pc, #216]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dca:	f7ff f857 	bl	8002e7c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd2:	f7ff f853 	bl	8002e7c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e1a1      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de4:	4b2d      	ldr	r3, [pc, #180]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4927      	ldr	r1, [pc, #156]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]
 8003e04:	e015      	b.n	8003e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e06:	4b26      	ldr	r3, [pc, #152]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7ff f836 	bl	8002e7c <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e14:	f7ff f832 	bl	8002e7c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e180      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e26:	4b1d      	ldr	r3, [pc, #116]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d03a      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d019      	beq.n	8003e7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e46:	4b17      	ldr	r3, [pc, #92]	@ (8003ea4 <HAL_RCC_OscConfig+0x274>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4c:	f7ff f816 	bl	8002e7c <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e54:	f7ff f812 	bl	8002e7c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e160      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e66:	4b0d      	ldr	r3, [pc, #52]	@ (8003e9c <HAL_RCC_OscConfig+0x26c>)
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e72:	2001      	movs	r0, #1
 8003e74:	f000 face 	bl	8004414 <RCC_Delay>
 8003e78:	e01c      	b.n	8003eb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea4 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e80:	f7fe fffc 	bl	8002e7c <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e86:	e00f      	b.n	8003ea8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e88:	f7fe fff8 	bl	8002e7c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d908      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e146      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	42420000 	.word	0x42420000
 8003ea4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea8:	4b92      	ldr	r3, [pc, #584]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e9      	bne.n	8003e88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80a6 	beq.w	800400e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec6:	4b8b      	ldr	r3, [pc, #556]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10d      	bne.n	8003eee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed2:	4b88      	ldr	r3, [pc, #544]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	4a87      	ldr	r2, [pc, #540]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003edc:	61d3      	str	r3, [r2, #28]
 8003ede:	4b85      	ldr	r3, [pc, #532]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eea:	2301      	movs	r3, #1
 8003eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eee:	4b82      	ldr	r3, [pc, #520]	@ (80040f8 <HAL_RCC_OscConfig+0x4c8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d118      	bne.n	8003f2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003efa:	4b7f      	ldr	r3, [pc, #508]	@ (80040f8 <HAL_RCC_OscConfig+0x4c8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a7e      	ldr	r2, [pc, #504]	@ (80040f8 <HAL_RCC_OscConfig+0x4c8>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f06:	f7fe ffb9 	bl	8002e7c <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0e:	f7fe ffb5 	bl	8002e7c <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b64      	cmp	r3, #100	@ 0x64
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e103      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f20:	4b75      	ldr	r3, [pc, #468]	@ (80040f8 <HAL_RCC_OscConfig+0x4c8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d106      	bne.n	8003f42 <HAL_RCC_OscConfig+0x312>
 8003f34:	4b6f      	ldr	r3, [pc, #444]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	4a6e      	ldr	r2, [pc, #440]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6213      	str	r3, [r2, #32]
 8003f40:	e02d      	b.n	8003f9e <HAL_RCC_OscConfig+0x36e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10c      	bne.n	8003f64 <HAL_RCC_OscConfig+0x334>
 8003f4a:	4b6a      	ldr	r3, [pc, #424]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	4a69      	ldr	r2, [pc, #420]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	6213      	str	r3, [r2, #32]
 8003f56:	4b67      	ldr	r3, [pc, #412]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4a66      	ldr	r2, [pc, #408]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	f023 0304 	bic.w	r3, r3, #4
 8003f60:	6213      	str	r3, [r2, #32]
 8003f62:	e01c      	b.n	8003f9e <HAL_RCC_OscConfig+0x36e>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b05      	cmp	r3, #5
 8003f6a:	d10c      	bne.n	8003f86 <HAL_RCC_OscConfig+0x356>
 8003f6c:	4b61      	ldr	r3, [pc, #388]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	4a60      	ldr	r2, [pc, #384]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f72:	f043 0304 	orr.w	r3, r3, #4
 8003f76:	6213      	str	r3, [r2, #32]
 8003f78:	4b5e      	ldr	r3, [pc, #376]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	4a5d      	ldr	r2, [pc, #372]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6213      	str	r3, [r2, #32]
 8003f84:	e00b      	b.n	8003f9e <HAL_RCC_OscConfig+0x36e>
 8003f86:	4b5b      	ldr	r3, [pc, #364]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	4a5a      	ldr	r2, [pc, #360]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	6213      	str	r3, [r2, #32]
 8003f92:	4b58      	ldr	r3, [pc, #352]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	4a57      	ldr	r2, [pc, #348]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d015      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa6:	f7fe ff69 	bl	8002e7c <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fe ff65 	bl	8002e7c <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e0b1      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc4:	4b4b      	ldr	r3, [pc, #300]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ee      	beq.n	8003fae <HAL_RCC_OscConfig+0x37e>
 8003fd0:	e014      	b.n	8003ffc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd2:	f7fe ff53 	bl	8002e7c <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fe ff4f 	bl	8002e7c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e09b      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff0:	4b40      	ldr	r3, [pc, #256]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1ee      	bne.n	8003fda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d105      	bne.n	800400e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004002:	4b3c      	ldr	r3, [pc, #240]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	4a3b      	ldr	r2, [pc, #236]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800400c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8087 	beq.w	8004126 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004018:	4b36      	ldr	r3, [pc, #216]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 030c 	and.w	r3, r3, #12
 8004020:	2b08      	cmp	r3, #8
 8004022:	d061      	beq.n	80040e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d146      	bne.n	80040ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402c:	4b33      	ldr	r3, [pc, #204]	@ (80040fc <HAL_RCC_OscConfig+0x4cc>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004032:	f7fe ff23 	bl	8002e7c <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403a:	f7fe ff1f 	bl	8002e7c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e06d      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404c:	4b29      	ldr	r3, [pc, #164]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f0      	bne.n	800403a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004060:	d108      	bne.n	8004074 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004062:	4b24      	ldr	r3, [pc, #144]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	4921      	ldr	r1, [pc, #132]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004074:	4b1f      	ldr	r3, [pc, #124]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a19      	ldr	r1, [r3, #32]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	430b      	orrs	r3, r1
 8004086:	491b      	ldr	r1, [pc, #108]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408c:	4b1b      	ldr	r3, [pc, #108]	@ (80040fc <HAL_RCC_OscConfig+0x4cc>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004092:	f7fe fef3 	bl	8002e7c <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409a:	f7fe feef 	bl	8002e7c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e03d      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040ac:	4b11      	ldr	r3, [pc, #68]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x46a>
 80040b8:	e035      	b.n	8004126 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b10      	ldr	r3, [pc, #64]	@ (80040fc <HAL_RCC_OscConfig+0x4cc>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fe fedc 	bl	8002e7c <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fe fed8 	bl	8002e7c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e026      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040da:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <HAL_RCC_OscConfig+0x4c4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x498>
 80040e6:	e01e      	b.n	8004126 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e019      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40007000 	.word	0x40007000
 80040fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004100:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <HAL_RCC_OscConfig+0x500>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	429a      	cmp	r2, r3
 8004112:	d106      	bne.n	8004122 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411e:	429a      	cmp	r2, r3
 8004120:	d001      	beq.n	8004126 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40021000 	.word	0x40021000

08004134 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0d0      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004148:	4b6a      	ldr	r3, [pc, #424]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d910      	bls.n	8004178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b67      	ldr	r3, [pc, #412]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 0207 	bic.w	r2, r3, #7
 800415e:	4965      	ldr	r1, [pc, #404]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b63      	ldr	r3, [pc, #396]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0b8      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004190:	4b59      	ldr	r3, [pc, #356]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a58      	ldr	r2, [pc, #352]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004196:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800419a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a8:	4b53      	ldr	r3, [pc, #332]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	4a52      	ldr	r2, [pc, #328]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80041b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b4:	4b50      	ldr	r3, [pc, #320]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	494d      	ldr	r1, [pc, #308]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d040      	beq.n	8004254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d107      	bne.n	80041ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	4b47      	ldr	r3, [pc, #284]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d115      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e07f      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d107      	bne.n	8004202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f2:	4b41      	ldr	r3, [pc, #260]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d109      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e073      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004202:	4b3d      	ldr	r3, [pc, #244]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e06b      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004212:	4b39      	ldr	r3, [pc, #228]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f023 0203 	bic.w	r2, r3, #3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4936      	ldr	r1, [pc, #216]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	4313      	orrs	r3, r2
 8004222:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004224:	f7fe fe2a 	bl	8002e7c <HAL_GetTick>
 8004228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	e00a      	b.n	8004242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800422c:	f7fe fe26 	bl	8002e7c <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e053      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	4b2d      	ldr	r3, [pc, #180]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 020c 	and.w	r2, r3, #12
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	429a      	cmp	r2, r3
 8004252:	d1eb      	bne.n	800422c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004254:	4b27      	ldr	r3, [pc, #156]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d210      	bcs.n	8004284 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b24      	ldr	r3, [pc, #144]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 0207 	bic.w	r2, r3, #7
 800426a:	4922      	ldr	r1, [pc, #136]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b20      	ldr	r3, [pc, #128]	@ (80042f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e032      	b.n	80042ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004290:	4b19      	ldr	r3, [pc, #100]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4916      	ldr	r1, [pc, #88]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042ae:	4b12      	ldr	r3, [pc, #72]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	490e      	ldr	r1, [pc, #56]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042c2:	f000 f821 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 80042c6:	4602      	mov	r2, r0
 80042c8:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <HAL_RCC_ClockConfig+0x1c4>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	490a      	ldr	r1, [pc, #40]	@ (80042fc <HAL_RCC_ClockConfig+0x1c8>)
 80042d4:	5ccb      	ldrb	r3, [r1, r3]
 80042d6:	fa22 f303 	lsr.w	r3, r2, r3
 80042da:	4a09      	ldr	r2, [pc, #36]	@ (8004300 <HAL_RCC_ClockConfig+0x1cc>)
 80042dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042de:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <HAL_RCC_ClockConfig+0x1d0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe fd88 	bl	8002df8 <HAL_InitTick>

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40022000 	.word	0x40022000
 80042f8:	40021000 	.word	0x40021000
 80042fc:	0800ac88 	.word	0x0800ac88
 8004300:	20000124 	.word	0x20000124
 8004304:	20000128 	.word	0x20000128

08004308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	2300      	movs	r3, #0
 800431c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004322:	4b1e      	ldr	r3, [pc, #120]	@ (800439c <HAL_RCC_GetSysClockFreq+0x94>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	2b04      	cmp	r3, #4
 8004330:	d002      	beq.n	8004338 <HAL_RCC_GetSysClockFreq+0x30>
 8004332:	2b08      	cmp	r3, #8
 8004334:	d003      	beq.n	800433e <HAL_RCC_GetSysClockFreq+0x36>
 8004336:	e027      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004338:	4b19      	ldr	r3, [pc, #100]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800433a:	613b      	str	r3, [r7, #16]
      break;
 800433c:	e027      	b.n	800438e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	0c9b      	lsrs	r3, r3, #18
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	4a17      	ldr	r2, [pc, #92]	@ (80043a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004348:	5cd3      	ldrb	r3, [r2, r3]
 800434a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d010      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004356:	4b11      	ldr	r3, [pc, #68]	@ (800439c <HAL_RCC_GetSysClockFreq+0x94>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	0c5b      	lsrs	r3, r3, #17
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	4a11      	ldr	r2, [pc, #68]	@ (80043a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004362:	5cd3      	ldrb	r3, [r2, r3]
 8004364:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a0d      	ldr	r2, [pc, #52]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800436a:	fb03 f202 	mul.w	r2, r3, r2
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	e004      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a0c      	ldr	r2, [pc, #48]	@ (80043ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800437c:	fb02 f303 	mul.w	r3, r2, r3
 8004380:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	613b      	str	r3, [r7, #16]
      break;
 8004386:	e002      	b.n	800438e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004388:	4b05      	ldr	r3, [pc, #20]	@ (80043a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800438a:	613b      	str	r3, [r7, #16]
      break;
 800438c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800438e:	693b      	ldr	r3, [r7, #16]
}
 8004390:	4618      	mov	r0, r3
 8004392:	371c      	adds	r7, #28
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40021000 	.word	0x40021000
 80043a0:	007a1200 	.word	0x007a1200
 80043a4:	0800aca0 	.word	0x0800aca0
 80043a8:	0800acb0 	.word	0x0800acb0
 80043ac:	003d0900 	.word	0x003d0900

080043b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b4:	4b02      	ldr	r3, [pc, #8]	@ (80043c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80043b6:	681b      	ldr	r3, [r3, #0]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr
 80043c0:	20000124 	.word	0x20000124

080043c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043c8:	f7ff fff2 	bl	80043b0 <HAL_RCC_GetHCLKFreq>
 80043cc:	4602      	mov	r2, r0
 80043ce:	4b05      	ldr	r3, [pc, #20]	@ (80043e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	4903      	ldr	r1, [pc, #12]	@ (80043e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043da:	5ccb      	ldrb	r3, [r1, r3]
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	40021000 	.word	0x40021000
 80043e8:	0800ac98 	.word	0x0800ac98

080043ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043f0:	f7ff ffde 	bl	80043b0 <HAL_RCC_GetHCLKFreq>
 80043f4:	4602      	mov	r2, r0
 80043f6:	4b05      	ldr	r3, [pc, #20]	@ (800440c <HAL_RCC_GetPCLK2Freq+0x20>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	0adb      	lsrs	r3, r3, #11
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	4903      	ldr	r1, [pc, #12]	@ (8004410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004402:	5ccb      	ldrb	r3, [r1, r3]
 8004404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004408:	4618      	mov	r0, r3
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40021000 	.word	0x40021000
 8004410:	0800ac98 	.word	0x0800ac98

08004414 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800441c:	4b0a      	ldr	r3, [pc, #40]	@ (8004448 <RCC_Delay+0x34>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0a      	ldr	r2, [pc, #40]	@ (800444c <RCC_Delay+0x38>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	0a5b      	lsrs	r3, r3, #9
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	fb02 f303 	mul.w	r3, r2, r3
 800442e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004430:	bf00      	nop
  }
  while (Delay --);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1e5a      	subs	r2, r3, #1
 8004436:	60fa      	str	r2, [r7, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f9      	bne.n	8004430 <RCC_Delay+0x1c>
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr
 8004448:	20000124 	.word	0x20000124
 800444c:	10624dd3 	.word	0x10624dd3

08004450 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	d07d      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800446c:	2300      	movs	r3, #0
 800446e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004470:	4b4f      	ldr	r3, [pc, #316]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10d      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447c:	4b4c      	ldr	r3, [pc, #304]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	4a4b      	ldr	r2, [pc, #300]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004486:	61d3      	str	r3, [r2, #28]
 8004488:	4b49      	ldr	r3, [pc, #292]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004494:	2301      	movs	r3, #1
 8004496:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004498:	4b46      	ldr	r3, [pc, #280]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d118      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044a4:	4b43      	ldr	r3, [pc, #268]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a42      	ldr	r2, [pc, #264]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b0:	f7fe fce4 	bl	8002e7c <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b6:	e008      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b8:	f7fe fce0 	bl	8002e7c <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b64      	cmp	r3, #100	@ 0x64
 80044c4:	d901      	bls.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e06d      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ca:	4b3a      	ldr	r3, [pc, #232]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044d6:	4b36      	ldr	r3, [pc, #216]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d02e      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d027      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044f4:	4b2e      	ldr	r3, [pc, #184]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044fe:	4b2e      	ldr	r3, [pc, #184]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004500:	2201      	movs	r2, #1
 8004502:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004504:	4b2c      	ldr	r3, [pc, #176]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800450a:	4a29      	ldr	r2, [pc, #164]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d014      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451a:	f7fe fcaf 	bl	8002e7c <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004520:	e00a      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004522:	f7fe fcab 	bl	8002e7c <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e036      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004538:	4b1d      	ldr	r3, [pc, #116]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ee      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004544:	4b1a      	ldr	r3, [pc, #104]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	4917      	ldr	r1, [pc, #92]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004552:	4313      	orrs	r3, r2
 8004554:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d105      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455c:	4b14      	ldr	r3, [pc, #80]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	4a13      	ldr	r2, [pc, #76]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004566:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004574:	4b0e      	ldr	r3, [pc, #56]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	490b      	ldr	r1, [pc, #44]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004582:	4313      	orrs	r3, r2
 8004584:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0310 	and.w	r3, r3, #16
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004592:	4b07      	ldr	r3, [pc, #28]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	4904      	ldr	r1, [pc, #16]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40007000 	.word	0x40007000
 80045b8:	42420440 	.word	0x42420440

080045bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	2300      	movs	r3, #0
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	2300      	movs	r3, #0
 80045d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b10      	cmp	r3, #16
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	f200 808a 	bhi.w	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d045      	beq.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d075      	beq.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80045f2:	e082      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80045f4:	4b46      	ldr	r3, [pc, #280]	@ (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80045fa:	4b45      	ldr	r3, [pc, #276]	@ (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d07b      	beq.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	0c9b      	lsrs	r3, r3, #18
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	4a41      	ldr	r2, [pc, #260]	@ (8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004610:	5cd3      	ldrb	r3, [r2, r3]
 8004612:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d015      	beq.n	800464a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800461e:	4b3c      	ldr	r3, [pc, #240]	@ (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	0c5b      	lsrs	r3, r3, #17
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	4a3b      	ldr	r2, [pc, #236]	@ (8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800462a:	5cd3      	ldrb	r3, [r2, r3]
 800462c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00d      	beq.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004638:	4a38      	ldr	r2, [pc, #224]	@ (800471c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	e004      	b.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4a34      	ldr	r2, [pc, #208]	@ (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800464e:	fb02 f303 	mul.w	r3, r2, r3
 8004652:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004654:	4b2e      	ldr	r3, [pc, #184]	@ (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800465c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004660:	d102      	bne.n	8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	61bb      	str	r3, [r7, #24]
      break;
 8004666:	e04a      	b.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	4a2d      	ldr	r2, [pc, #180]	@ (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	085b      	lsrs	r3, r3, #1
 8004674:	61bb      	str	r3, [r7, #24]
      break;
 8004676:	e042      	b.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004678:	4b25      	ldr	r3, [pc, #148]	@ (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004688:	d108      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004694:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004698:	61bb      	str	r3, [r7, #24]
 800469a:	e01f      	b.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a6:	d109      	bne.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80046a8:	4b19      	ldr	r3, [pc, #100]	@ (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80046b4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	e00f      	b.n	80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046c6:	d11c      	bne.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80046c8:	4b11      	ldr	r3, [pc, #68]	@ (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d016      	beq.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80046d4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80046d8:	61bb      	str	r3, [r7, #24]
      break;
 80046da:	e012      	b.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80046dc:	e011      	b.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80046de:	f7ff fe85 	bl	80043ec <HAL_RCC_GetPCLK2Freq>
 80046e2:	4602      	mov	r2, r0
 80046e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	0b9b      	lsrs	r3, r3, #14
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	3301      	adds	r3, #1
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f6:	61bb      	str	r3, [r7, #24]
      break;
 80046f8:	e004      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80046fa:	bf00      	nop
 80046fc:	e002      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80046fe:	bf00      	nop
 8004700:	e000      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004702:	bf00      	nop
    }
  }
  return (frequency);
 8004704:	69bb      	ldr	r3, [r7, #24]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000
 8004714:	0800acb4 	.word	0x0800acb4
 8004718:	0800acc4 	.word	0x0800acc4
 800471c:	007a1200 	.word	0x007a1200
 8004720:	003d0900 	.word	0x003d0900
 8004724:	aaaaaaab 	.word	0xaaaaaaab

08004728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e076      	b.n	8004828 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473e:	2b00      	cmp	r3, #0
 8004740:	d108      	bne.n	8004754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800474a:	d009      	beq.n	8004760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	61da      	str	r2, [r3, #28]
 8004752:	e005      	b.n	8004760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fe f888 	bl	8002890 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004796:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e4:	ea42 0103 	orr.w	r1, r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	0c1a      	lsrs	r2, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f002 0204 	and.w	r2, r2, #4
 8004806:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69da      	ldr	r2, [r3, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004816:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	4613      	mov	r3, r2
 800483e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <HAL_SPI_Transmit+0x22>
 800484e:	2302      	movs	r3, #2
 8004850:	e12d      	b.n	8004aae <HAL_SPI_Transmit+0x27e>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800485a:	f7fe fb0f 	bl	8002e7c <HAL_GetTick>
 800485e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	d002      	beq.n	8004876 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004870:	2302      	movs	r3, #2
 8004872:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004874:	e116      	b.n	8004aa4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_SPI_Transmit+0x52>
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004886:	e10d      	b.n	8004aa4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2203      	movs	r2, #3
 800488c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	88fa      	ldrh	r2, [r7, #6]
 80048a0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	88fa      	ldrh	r2, [r7, #6]
 80048a6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048ce:	d10f      	bne.n	80048f0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fa:	2b40      	cmp	r3, #64	@ 0x40
 80048fc:	d007      	beq.n	800490e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800490c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004916:	d14f      	bne.n	80049b8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_SPI_Transmit+0xf6>
 8004920:	8afb      	ldrh	r3, [r7, #22]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d142      	bne.n	80049ac <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492a:	881a      	ldrh	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	1c9a      	adds	r2, r3, #2
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800494a:	e02f      	b.n	80049ac <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d112      	bne.n	8004980 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495e:	881a      	ldrh	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496a:	1c9a      	adds	r2, r3, #2
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800497e:	e015      	b.n	80049ac <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004980:	f7fe fa7c 	bl	8002e7c <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d803      	bhi.n	8004998 <HAL_SPI_Transmit+0x168>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d102      	bne.n	800499e <HAL_SPI_Transmit+0x16e>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80049aa:	e07b      	b.n	8004aa4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1ca      	bne.n	800494c <HAL_SPI_Transmit+0x11c>
 80049b6:	e050      	b.n	8004a5a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_SPI_Transmit+0x196>
 80049c0:	8afb      	ldrh	r3, [r7, #22]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d144      	bne.n	8004a50 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	7812      	ldrb	r2, [r2, #0]
 80049d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049ec:	e030      	b.n	8004a50 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d113      	bne.n	8004a24 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	330c      	adds	r3, #12
 8004a06:	7812      	ldrb	r2, [r2, #0]
 8004a08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a22:	e015      	b.n	8004a50 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a24:	f7fe fa2a 	bl	8002e7c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d803      	bhi.n	8004a3c <HAL_SPI_Transmit+0x20c>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d102      	bne.n	8004a42 <HAL_SPI_Transmit+0x212>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004a4e:	e029      	b.n	8004aa4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1c9      	bne.n	80049ee <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	6839      	ldr	r1, [r7, #0]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 fbd8 	bl	8005214 <SPI_EndRxTxTransaction>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10a      	bne.n	8004a8e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a78:	2300      	movs	r3, #0
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	613b      	str	r3, [r7, #16]
 8004a8c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	77fb      	strb	r3, [r7, #31]
 8004a9a:	e003      	b.n	8004aa4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004aac:	7ffb      	ldrb	r3, [r7, #31]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3720      	adds	r7, #32
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b088      	sub	sp, #32
 8004aba:	af02      	add	r7, sp, #8
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d002      	beq.n	8004adc <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ada:	e0fb      	b.n	8004cd4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ae4:	d112      	bne.n	8004b0c <HAL_SPI_Receive+0x56>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10e      	bne.n	8004b0c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2204      	movs	r2, #4
 8004af2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004af6:	88fa      	ldrh	r2, [r7, #6]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f8ef 	bl	8004ce6 <HAL_SPI_TransmitReceive>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	e0e8      	b.n	8004cde <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_SPI_Receive+0x64>
 8004b16:	2302      	movs	r3, #2
 8004b18:	e0e1      	b.n	8004cde <HAL_SPI_Receive+0x228>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b22:	f7fe f9ab 	bl	8002e7c <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <HAL_SPI_Receive+0x7e>
 8004b2e:	88fb      	ldrh	r3, [r7, #6]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d102      	bne.n	8004b3a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b38:	e0cc      	b.n	8004cd4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2204      	movs	r2, #4
 8004b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	88fa      	ldrh	r2, [r7, #6]
 8004b52:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b80:	d10f      	bne.n	8004ba2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ba0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bac:	2b40      	cmp	r3, #64	@ 0x40
 8004bae:	d007      	beq.n	8004bc0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bbe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d16a      	bne.n	8004c9e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004bc8:	e032      	b.n	8004c30 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d115      	bne.n	8004c04 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f103 020c 	add.w	r2, r3, #12
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be4:	7812      	ldrb	r2, [r2, #0]
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c02:	e015      	b.n	8004c30 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c04:	f7fe f93a 	bl	8002e7c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d803      	bhi.n	8004c1c <HAL_SPI_Receive+0x166>
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1a:	d102      	bne.n	8004c22 <HAL_SPI_Receive+0x16c>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004c2e:	e051      	b.n	8004cd4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1c7      	bne.n	8004bca <HAL_SPI_Receive+0x114>
 8004c3a:	e035      	b.n	8004ca8 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d113      	bne.n	8004c72 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c54:	b292      	uxth	r2, r2
 8004c56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5c:	1c9a      	adds	r2, r3, #2
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c70:	e015      	b.n	8004c9e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c72:	f7fe f903 	bl	8002e7c <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d803      	bhi.n	8004c8a <HAL_SPI_Receive+0x1d4>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c88:	d102      	bne.n	8004c90 <HAL_SPI_Receive+0x1da>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d106      	bne.n	8004c9e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004c9c:	e01a      	b.n	8004cd4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1c9      	bne.n	8004c3c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	6839      	ldr	r1, [r7, #0]
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 fa5f 	bl	8005170 <SPI_EndRxTransaction>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	75fb      	strb	r3, [r7, #23]
 8004cca:	e003      	b.n	8004cd4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b08c      	sub	sp, #48	@ 0x30
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_SPI_TransmitReceive+0x26>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e198      	b.n	800503e <HAL_SPI_TransmitReceive+0x358>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d14:	f7fe f8b2 	bl	8002e7c <HAL_GetTick>
 8004d18:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d2a:	887b      	ldrh	r3, [r7, #2]
 8004d2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d00f      	beq.n	8004d56 <HAL_SPI_TransmitReceive+0x70>
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d3c:	d107      	bne.n	8004d4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d103      	bne.n	8004d4e <HAL_SPI_TransmitReceive+0x68>
 8004d46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d003      	beq.n	8004d56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d4e:	2302      	movs	r3, #2
 8004d50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004d54:	e16d      	b.n	8005032 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <HAL_SPI_TransmitReceive+0x82>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_SPI_TransmitReceive+0x82>
 8004d62:	887b      	ldrh	r3, [r7, #2]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d103      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004d6e:	e160      	b.n	8005032 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d003      	beq.n	8004d84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2205      	movs	r2, #5
 8004d80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	887a      	ldrh	r2, [r7, #2]
 8004d94:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	887a      	ldrh	r2, [r7, #2]
 8004d9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	887a      	ldrh	r2, [r7, #2]
 8004da6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	887a      	ldrh	r2, [r7, #2]
 8004dac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc4:	2b40      	cmp	r3, #64	@ 0x40
 8004dc6:	d007      	beq.n	8004dd8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004de0:	d17c      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <HAL_SPI_TransmitReceive+0x10a>
 8004dea:	8b7b      	ldrh	r3, [r7, #26]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d16a      	bne.n	8004ec6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df4:	881a      	ldrh	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e00:	1c9a      	adds	r2, r3, #2
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e14:	e057      	b.n	8004ec6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d11b      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x176>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d016      	beq.n	8004e5c <HAL_SPI_TransmitReceive+0x176>
 8004e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d113      	bne.n	8004e5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e38:	881a      	ldrh	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e44:	1c9a      	adds	r2, r3, #2
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d119      	bne.n	8004e9e <HAL_SPI_TransmitReceive+0x1b8>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d014      	beq.n	8004e9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7e:	b292      	uxth	r2, r2
 8004e80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e86:	1c9a      	adds	r2, r3, #2
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e9e:	f7fd ffed 	bl	8002e7c <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d80b      	bhi.n	8004ec6 <HAL_SPI_TransmitReceive+0x1e0>
 8004eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb4:	d007      	beq.n	8004ec6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004ec4:	e0b5      	b.n	8005032 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1a2      	bne.n	8004e16 <HAL_SPI_TransmitReceive+0x130>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d19d      	bne.n	8004e16 <HAL_SPI_TransmitReceive+0x130>
 8004eda:	e080      	b.n	8004fde <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <HAL_SPI_TransmitReceive+0x204>
 8004ee4:	8b7b      	ldrh	r3, [r7, #26]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d16f      	bne.n	8004fca <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	7812      	ldrb	r2, [r2, #0]
 8004ef6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f10:	e05b      	b.n	8004fca <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d11c      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x274>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d017      	beq.n	8004f5a <HAL_SPI_TransmitReceive+0x274>
 8004f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d114      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	7812      	ldrb	r2, [r2, #0]
 8004f3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d119      	bne.n	8004f9c <HAL_SPI_TransmitReceive+0x2b6>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d014      	beq.n	8004f9c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f9c:	f7fd ff6e 	bl	8002e7c <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d803      	bhi.n	8004fb4 <HAL_SPI_TransmitReceive+0x2ce>
 8004fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb2:	d102      	bne.n	8004fba <HAL_SPI_TransmitReceive+0x2d4>
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d107      	bne.n	8004fca <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004fc8:	e033      	b.n	8005032 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d19e      	bne.n	8004f12 <HAL_SPI_TransmitReceive+0x22c>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d199      	bne.n	8004f12 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 f916 	bl	8005214 <SPI_EndRxTxTransaction>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d006      	beq.n	8004ffc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004ffa:	e01a      	b.n	8005032 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10a      	bne.n	800501a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005028:	e003      	b.n	8005032 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800503a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800503e:	4618      	mov	r0, r3
 8005040:	3730      	adds	r7, #48	@ 0x30
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005054:	b2db      	uxtb	r3, r3
}
 8005056:	4618      	mov	r0, r3
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr

08005060 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	4613      	mov	r3, r2
 800506e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005070:	f7fd ff04 	bl	8002e7c <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005078:	1a9b      	subs	r3, r3, r2
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	4413      	add	r3, r2
 800507e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005080:	f7fd fefc 	bl	8002e7c <HAL_GetTick>
 8005084:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005086:	4b39      	ldr	r3, [pc, #228]	@ (800516c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	015b      	lsls	r3, r3, #5
 800508c:	0d1b      	lsrs	r3, r3, #20
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	fb02 f303 	mul.w	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005096:	e054      	b.n	8005142 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509e:	d050      	beq.n	8005142 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050a0:	f7fd feec 	bl	8002e7c <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	69fa      	ldr	r2, [r7, #28]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d902      	bls.n	80050b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d13d      	bne.n	8005132 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050ce:	d111      	bne.n	80050f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050d8:	d004      	beq.n	80050e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e2:	d107      	bne.n	80050f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050fc:	d10f      	bne.n	800511e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800511c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e017      	b.n	8005162 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3b01      	subs	r3, #1
 8005140:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4013      	ands	r3, r2
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	429a      	cmp	r2, r3
 8005150:	bf0c      	ite	eq
 8005152:	2301      	moveq	r3, #1
 8005154:	2300      	movne	r3, #0
 8005156:	b2db      	uxtb	r3, r3
 8005158:	461a      	mov	r2, r3
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	429a      	cmp	r2, r3
 800515e:	d19b      	bne.n	8005098 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	20000124 	.word	0x20000124

08005170 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005184:	d111      	bne.n	80051aa <SPI_EndRxTransaction+0x3a>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800518e:	d004      	beq.n	800519a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005198:	d107      	bne.n	80051aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051a8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051b2:	d117      	bne.n	80051e4 <SPI_EndRxTransaction+0x74>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051bc:	d112      	bne.n	80051e4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2200      	movs	r2, #0
 80051c6:	2101      	movs	r1, #1
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f7ff ff49 	bl	8005060 <SPI_WaitFlagStateUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01a      	beq.n	800520a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e013      	b.n	800520c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2200      	movs	r2, #0
 80051ec:	2180      	movs	r1, #128	@ 0x80
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7ff ff36 	bl	8005060 <SPI_WaitFlagStateUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fe:	f043 0220 	orr.w	r2, r3, #32
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e000      	b.n	800520c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af02      	add	r7, sp, #8
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2200      	movs	r2, #0
 8005228:	2180      	movs	r1, #128	@ 0x80
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7ff ff18 	bl	8005060 <SPI_WaitFlagStateUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d007      	beq.n	8005246 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523a:	f043 0220 	orr.w	r2, r3, #32
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e000      	b.n	8005248 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e042      	b.n	80052e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d106      	bne.n	800527c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fd fcde 	bl	8002c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2224      	movs	r2, #36	@ 0x24
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f9af 	bl	80055f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	695a      	ldr	r2, [r3, #20]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68da      	ldr	r2, [r3, #12]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08a      	sub	sp, #40	@ 0x28
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b20      	cmp	r3, #32
 800530e:	d16d      	bne.n	80053ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_UART_Transmit+0x2c>
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e066      	b.n	80053ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2221      	movs	r2, #33	@ 0x21
 800532a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800532e:	f7fd fda5 	bl	8002e7c <HAL_GetTick>
 8005332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	88fa      	ldrh	r2, [r7, #6]
 8005338:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	88fa      	ldrh	r2, [r7, #6]
 800533e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005348:	d108      	bne.n	800535c <HAL_UART_Transmit+0x6c>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d104      	bne.n	800535c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	e003      	b.n	8005364 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005360:	2300      	movs	r3, #0
 8005362:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005364:	e02a      	b.n	80053bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2200      	movs	r2, #0
 800536e:	2180      	movs	r1, #128	@ 0x80
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f8d2 	bl	800551a <UART_WaitOnFlagUntilTimeout>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e036      	b.n	80053ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10b      	bne.n	800539e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	3302      	adds	r3, #2
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	e007      	b.n	80053ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	781a      	ldrb	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	3301      	adds	r3, #1
 80053ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1cf      	bne.n	8005366 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2200      	movs	r2, #0
 80053ce:	2140      	movs	r1, #64	@ 0x40
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f8a2 	bl	800551a <UART_WaitOnFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e006      	b.n	80053ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	e000      	b.n	80053ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80053ec:	2302      	movs	r3, #2
  }
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3720      	adds	r7, #32
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b08a      	sub	sp, #40	@ 0x28
 80053fa:	af02      	add	r7, sp, #8
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	603b      	str	r3, [r7, #0]
 8005402:	4613      	mov	r3, r2
 8005404:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b20      	cmp	r3, #32
 8005414:	d17c      	bne.n	8005510 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <HAL_UART_Receive+0x2c>
 800541c:	88fb      	ldrh	r3, [r7, #6]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e075      	b.n	8005512 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2222      	movs	r2, #34	@ 0x22
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800543a:	f7fd fd1f 	bl	8002e7c <HAL_GetTick>
 800543e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	88fa      	ldrh	r2, [r7, #6]
 8005444:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	88fa      	ldrh	r2, [r7, #6]
 800544a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005454:	d108      	bne.n	8005468 <HAL_UART_Receive+0x72>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d104      	bne.n	8005468 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	61bb      	str	r3, [r7, #24]
 8005466:	e003      	b.n	8005470 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800546c:	2300      	movs	r3, #0
 800546e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005470:	e043      	b.n	80054fa <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2200      	movs	r2, #0
 800547a:	2120      	movs	r1, #32
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f84c 	bl	800551a <UART_WaitOnFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e042      	b.n	8005512 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10c      	bne.n	80054ac <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	b29b      	uxth	r3, r3
 800549a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800549e:	b29a      	uxth	r2, r3
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	3302      	adds	r3, #2
 80054a8:	61bb      	str	r3, [r7, #24]
 80054aa:	e01f      	b.n	80054ec <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b4:	d007      	beq.n	80054c6 <HAL_UART_Receive+0xd0>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <HAL_UART_Receive+0xde>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d106      	bne.n	80054d4 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	e008      	b.n	80054e6 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	3301      	adds	r3, #1
 80054ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1b6      	bne.n	8005472 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	e000      	b.n	8005512 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005510:	2302      	movs	r3, #2
  }
}
 8005512:	4618      	mov	r0, r3
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b090      	sub	sp, #64	@ 0x40
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	603b      	str	r3, [r7, #0]
 8005526:	4613      	mov	r3, r2
 8005528:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800552a:	e050      	b.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800552c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005532:	d04c      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005534:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005536:	2b00      	cmp	r3, #0
 8005538:	d007      	beq.n	800554a <UART_WaitOnFlagUntilTimeout+0x30>
 800553a:	f7fd fc9f 	bl	8002e7c <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005546:	429a      	cmp	r2, r3
 8005548:	d241      	bcs.n	80055ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	330c      	adds	r3, #12
 8005550:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005554:	e853 3f00 	ldrex	r3, [r3]
 8005558:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	330c      	adds	r3, #12
 8005568:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800556a:	637a      	str	r2, [r7, #52]	@ 0x34
 800556c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005570:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005572:	e841 2300 	strex	r3, r2, [r1]
 8005576:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1e5      	bne.n	800554a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3314      	adds	r3, #20
 8005584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	613b      	str	r3, [r7, #16]
   return(result);
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3314      	adds	r3, #20
 800559c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800559e:	623a      	str	r2, [r7, #32]
 80055a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	69f9      	ldr	r1, [r7, #28]
 80055a4:	6a3a      	ldr	r2, [r7, #32]
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e5      	bne.n	800557e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e00f      	b.n	80055ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4013      	ands	r3, r2
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	429a      	cmp	r2, r3
 80055dc:	bf0c      	ite	eq
 80055de:	2301      	moveq	r3, #1
 80055e0:	2300      	movne	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d09f      	beq.n	800552c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3740      	adds	r7, #64	@ 0x40
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005632:	f023 030c 	bic.w	r3, r3, #12
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	430b      	orrs	r3, r1
 800563e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a2c      	ldr	r2, [pc, #176]	@ (800570c <UART_SetConfig+0x114>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d103      	bne.n	8005668 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005660:	f7fe fec4 	bl	80043ec <HAL_RCC_GetPCLK2Freq>
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	e002      	b.n	800566e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005668:	f7fe feac 	bl	80043c4 <HAL_RCC_GetPCLK1Freq>
 800566c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009a      	lsls	r2, r3, #2
 8005678:	441a      	add	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	fbb2 f3f3 	udiv	r3, r2, r3
 8005684:	4a22      	ldr	r2, [pc, #136]	@ (8005710 <UART_SetConfig+0x118>)
 8005686:	fba2 2303 	umull	r2, r3, r2, r3
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	0119      	lsls	r1, r3, #4
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	009a      	lsls	r2, r3, #2
 8005698:	441a      	add	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005710 <UART_SetConfig+0x118>)
 80056a6:	fba3 0302 	umull	r0, r3, r3, r2
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	2064      	movs	r0, #100	@ 0x64
 80056ae:	fb00 f303 	mul.w	r3, r0, r3
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	3332      	adds	r3, #50	@ 0x32
 80056b8:	4a15      	ldr	r2, [pc, #84]	@ (8005710 <UART_SetConfig+0x118>)
 80056ba:	fba2 2303 	umull	r2, r3, r2, r3
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056c4:	4419      	add	r1, r3
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4613      	mov	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	009a      	lsls	r2, r3, #2
 80056d0:	441a      	add	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80056dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005710 <UART_SetConfig+0x118>)
 80056de:	fba3 0302 	umull	r0, r3, r3, r2
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	2064      	movs	r0, #100	@ 0x64
 80056e6:	fb00 f303 	mul.w	r3, r0, r3
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	3332      	adds	r3, #50	@ 0x32
 80056f0:	4a07      	ldr	r2, [pc, #28]	@ (8005710 <UART_SetConfig+0x118>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	f003 020f 	and.w	r2, r3, #15
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	440a      	add	r2, r1
 8005702:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005704:	bf00      	nop
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40013800 	.word	0x40013800
 8005710:	51eb851f 	.word	0x51eb851f

08005714 <atoi>:
 8005714:	220a      	movs	r2, #10
 8005716:	2100      	movs	r1, #0
 8005718:	f000 be7c 	b.w	8006414 <strtol>

0800571c <sulp>:
 800571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005720:	460f      	mov	r7, r1
 8005722:	4690      	mov	r8, r2
 8005724:	f003 fd9c 	bl	8009260 <__ulp>
 8005728:	4604      	mov	r4, r0
 800572a:	460d      	mov	r5, r1
 800572c:	f1b8 0f00 	cmp.w	r8, #0
 8005730:	d011      	beq.n	8005756 <sulp+0x3a>
 8005732:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005736:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800573a:	2b00      	cmp	r3, #0
 800573c:	dd0b      	ble.n	8005756 <sulp+0x3a>
 800573e:	2400      	movs	r4, #0
 8005740:	051b      	lsls	r3, r3, #20
 8005742:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005746:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800574a:	4622      	mov	r2, r4
 800574c:	462b      	mov	r3, r5
 800574e:	f7fa fec3 	bl	80004d8 <__aeabi_dmul>
 8005752:	4604      	mov	r4, r0
 8005754:	460d      	mov	r5, r1
 8005756:	4620      	mov	r0, r4
 8005758:	4629      	mov	r1, r5
 800575a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005760 <_strtod_l>:
 8005760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	b09f      	sub	sp, #124	@ 0x7c
 8005766:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005768:	2200      	movs	r2, #0
 800576a:	460c      	mov	r4, r1
 800576c:	921a      	str	r2, [sp, #104]	@ 0x68
 800576e:	f04f 0a00 	mov.w	sl, #0
 8005772:	f04f 0b00 	mov.w	fp, #0
 8005776:	460a      	mov	r2, r1
 8005778:	9005      	str	r0, [sp, #20]
 800577a:	9219      	str	r2, [sp, #100]	@ 0x64
 800577c:	7811      	ldrb	r1, [r2, #0]
 800577e:	292b      	cmp	r1, #43	@ 0x2b
 8005780:	d048      	beq.n	8005814 <_strtod_l+0xb4>
 8005782:	d836      	bhi.n	80057f2 <_strtod_l+0x92>
 8005784:	290d      	cmp	r1, #13
 8005786:	d830      	bhi.n	80057ea <_strtod_l+0x8a>
 8005788:	2908      	cmp	r1, #8
 800578a:	d830      	bhi.n	80057ee <_strtod_l+0x8e>
 800578c:	2900      	cmp	r1, #0
 800578e:	d039      	beq.n	8005804 <_strtod_l+0xa4>
 8005790:	2200      	movs	r2, #0
 8005792:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005794:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005796:	782a      	ldrb	r2, [r5, #0]
 8005798:	2a30      	cmp	r2, #48	@ 0x30
 800579a:	f040 80b1 	bne.w	8005900 <_strtod_l+0x1a0>
 800579e:	786a      	ldrb	r2, [r5, #1]
 80057a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80057a4:	2a58      	cmp	r2, #88	@ 0x58
 80057a6:	d16c      	bne.n	8005882 <_strtod_l+0x122>
 80057a8:	9302      	str	r3, [sp, #8]
 80057aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057ac:	4a8e      	ldr	r2, [pc, #568]	@ (80059e8 <_strtod_l+0x288>)
 80057ae:	9301      	str	r3, [sp, #4]
 80057b0:	ab1a      	add	r3, sp, #104	@ 0x68
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	9805      	ldr	r0, [sp, #20]
 80057b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80057b8:	a919      	add	r1, sp, #100	@ 0x64
 80057ba:	f002 fe45 	bl	8008448 <__gethex>
 80057be:	f010 060f 	ands.w	r6, r0, #15
 80057c2:	4604      	mov	r4, r0
 80057c4:	d005      	beq.n	80057d2 <_strtod_l+0x72>
 80057c6:	2e06      	cmp	r6, #6
 80057c8:	d126      	bne.n	8005818 <_strtod_l+0xb8>
 80057ca:	2300      	movs	r3, #0
 80057cc:	3501      	adds	r5, #1
 80057ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80057d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f040 8584 	bne.w	80062e2 <_strtod_l+0xb82>
 80057da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057dc:	b1bb      	cbz	r3, 800580e <_strtod_l+0xae>
 80057de:	4650      	mov	r0, sl
 80057e0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80057e4:	b01f      	add	sp, #124	@ 0x7c
 80057e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ea:	2920      	cmp	r1, #32
 80057ec:	d1d0      	bne.n	8005790 <_strtod_l+0x30>
 80057ee:	3201      	adds	r2, #1
 80057f0:	e7c3      	b.n	800577a <_strtod_l+0x1a>
 80057f2:	292d      	cmp	r1, #45	@ 0x2d
 80057f4:	d1cc      	bne.n	8005790 <_strtod_l+0x30>
 80057f6:	2101      	movs	r1, #1
 80057f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80057fa:	1c51      	adds	r1, r2, #1
 80057fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80057fe:	7852      	ldrb	r2, [r2, #1]
 8005800:	2a00      	cmp	r2, #0
 8005802:	d1c7      	bne.n	8005794 <_strtod_l+0x34>
 8005804:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005806:	9419      	str	r4, [sp, #100]	@ 0x64
 8005808:	2b00      	cmp	r3, #0
 800580a:	f040 8568 	bne.w	80062de <_strtod_l+0xb7e>
 800580e:	4650      	mov	r0, sl
 8005810:	4659      	mov	r1, fp
 8005812:	e7e7      	b.n	80057e4 <_strtod_l+0x84>
 8005814:	2100      	movs	r1, #0
 8005816:	e7ef      	b.n	80057f8 <_strtod_l+0x98>
 8005818:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800581a:	b13a      	cbz	r2, 800582c <_strtod_l+0xcc>
 800581c:	2135      	movs	r1, #53	@ 0x35
 800581e:	a81c      	add	r0, sp, #112	@ 0x70
 8005820:	f003 fe0e 	bl	8009440 <__copybits>
 8005824:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005826:	9805      	ldr	r0, [sp, #20]
 8005828:	f003 f9e8 	bl	8008bfc <_Bfree>
 800582c:	3e01      	subs	r6, #1
 800582e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005830:	2e04      	cmp	r6, #4
 8005832:	d806      	bhi.n	8005842 <_strtod_l+0xe2>
 8005834:	e8df f006 	tbb	[pc, r6]
 8005838:	201d0314 	.word	0x201d0314
 800583c:	14          	.byte	0x14
 800583d:	00          	.byte	0x00
 800583e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005842:	05e1      	lsls	r1, r4, #23
 8005844:	bf48      	it	mi
 8005846:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800584a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800584e:	0d1b      	lsrs	r3, r3, #20
 8005850:	051b      	lsls	r3, r3, #20
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1bd      	bne.n	80057d2 <_strtod_l+0x72>
 8005856:	f001 fe85 	bl	8007564 <__errno>
 800585a:	2322      	movs	r3, #34	@ 0x22
 800585c:	6003      	str	r3, [r0, #0]
 800585e:	e7b8      	b.n	80057d2 <_strtod_l+0x72>
 8005860:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005864:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005868:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800586c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005870:	e7e7      	b.n	8005842 <_strtod_l+0xe2>
 8005872:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80059ec <_strtod_l+0x28c>
 8005876:	e7e4      	b.n	8005842 <_strtod_l+0xe2>
 8005878:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800587c:	f04f 3aff 	mov.w	sl, #4294967295
 8005880:	e7df      	b.n	8005842 <_strtod_l+0xe2>
 8005882:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	9219      	str	r2, [sp, #100]	@ 0x64
 8005888:	785b      	ldrb	r3, [r3, #1]
 800588a:	2b30      	cmp	r3, #48	@ 0x30
 800588c:	d0f9      	beq.n	8005882 <_strtod_l+0x122>
 800588e:	2b00      	cmp	r3, #0
 8005890:	d09f      	beq.n	80057d2 <_strtod_l+0x72>
 8005892:	2301      	movs	r3, #1
 8005894:	9309      	str	r3, [sp, #36]	@ 0x24
 8005896:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005898:	220a      	movs	r2, #10
 800589a:	930c      	str	r3, [sp, #48]	@ 0x30
 800589c:	2300      	movs	r3, #0
 800589e:	461f      	mov	r7, r3
 80058a0:	9308      	str	r3, [sp, #32]
 80058a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80058a4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80058a6:	7805      	ldrb	r5, [r0, #0]
 80058a8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80058ac:	b2d9      	uxtb	r1, r3
 80058ae:	2909      	cmp	r1, #9
 80058b0:	d928      	bls.n	8005904 <_strtod_l+0x1a4>
 80058b2:	2201      	movs	r2, #1
 80058b4:	494e      	ldr	r1, [pc, #312]	@ (80059f0 <_strtod_l+0x290>)
 80058b6:	f001 fdcf 	bl	8007458 <strncmp>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d032      	beq.n	8005924 <_strtod_l+0x1c4>
 80058be:	2000      	movs	r0, #0
 80058c0:	462a      	mov	r2, r5
 80058c2:	4681      	mov	r9, r0
 80058c4:	463d      	mov	r5, r7
 80058c6:	4603      	mov	r3, r0
 80058c8:	2a65      	cmp	r2, #101	@ 0x65
 80058ca:	d001      	beq.n	80058d0 <_strtod_l+0x170>
 80058cc:	2a45      	cmp	r2, #69	@ 0x45
 80058ce:	d114      	bne.n	80058fa <_strtod_l+0x19a>
 80058d0:	b91d      	cbnz	r5, 80058da <_strtod_l+0x17a>
 80058d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058d4:	4302      	orrs	r2, r0
 80058d6:	d095      	beq.n	8005804 <_strtod_l+0xa4>
 80058d8:	2500      	movs	r5, #0
 80058da:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80058dc:	1c62      	adds	r2, r4, #1
 80058de:	9219      	str	r2, [sp, #100]	@ 0x64
 80058e0:	7862      	ldrb	r2, [r4, #1]
 80058e2:	2a2b      	cmp	r2, #43	@ 0x2b
 80058e4:	d077      	beq.n	80059d6 <_strtod_l+0x276>
 80058e6:	2a2d      	cmp	r2, #45	@ 0x2d
 80058e8:	d07b      	beq.n	80059e2 <_strtod_l+0x282>
 80058ea:	f04f 0c00 	mov.w	ip, #0
 80058ee:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80058f2:	2909      	cmp	r1, #9
 80058f4:	f240 8082 	bls.w	80059fc <_strtod_l+0x29c>
 80058f8:	9419      	str	r4, [sp, #100]	@ 0x64
 80058fa:	f04f 0800 	mov.w	r8, #0
 80058fe:	e0a2      	b.n	8005a46 <_strtod_l+0x2e6>
 8005900:	2300      	movs	r3, #0
 8005902:	e7c7      	b.n	8005894 <_strtod_l+0x134>
 8005904:	2f08      	cmp	r7, #8
 8005906:	bfd5      	itete	le
 8005908:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800590a:	9908      	ldrgt	r1, [sp, #32]
 800590c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005910:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005914:	f100 0001 	add.w	r0, r0, #1
 8005918:	bfd4      	ite	le
 800591a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800591c:	9308      	strgt	r3, [sp, #32]
 800591e:	3701      	adds	r7, #1
 8005920:	9019      	str	r0, [sp, #100]	@ 0x64
 8005922:	e7bf      	b.n	80058a4 <_strtod_l+0x144>
 8005924:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	9219      	str	r2, [sp, #100]	@ 0x64
 800592a:	785a      	ldrb	r2, [r3, #1]
 800592c:	b37f      	cbz	r7, 800598e <_strtod_l+0x22e>
 800592e:	4681      	mov	r9, r0
 8005930:	463d      	mov	r5, r7
 8005932:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005936:	2b09      	cmp	r3, #9
 8005938:	d912      	bls.n	8005960 <_strtod_l+0x200>
 800593a:	2301      	movs	r3, #1
 800593c:	e7c4      	b.n	80058c8 <_strtod_l+0x168>
 800593e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005940:	3001      	adds	r0, #1
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	9219      	str	r2, [sp, #100]	@ 0x64
 8005946:	785a      	ldrb	r2, [r3, #1]
 8005948:	2a30      	cmp	r2, #48	@ 0x30
 800594a:	d0f8      	beq.n	800593e <_strtod_l+0x1de>
 800594c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005950:	2b08      	cmp	r3, #8
 8005952:	f200 84cb 	bhi.w	80062ec <_strtod_l+0xb8c>
 8005956:	4681      	mov	r9, r0
 8005958:	2000      	movs	r0, #0
 800595a:	4605      	mov	r5, r0
 800595c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800595e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005960:	3a30      	subs	r2, #48	@ 0x30
 8005962:	f100 0301 	add.w	r3, r0, #1
 8005966:	d02a      	beq.n	80059be <_strtod_l+0x25e>
 8005968:	4499      	add	r9, r3
 800596a:	210a      	movs	r1, #10
 800596c:	462b      	mov	r3, r5
 800596e:	eb00 0c05 	add.w	ip, r0, r5
 8005972:	4563      	cmp	r3, ip
 8005974:	d10d      	bne.n	8005992 <_strtod_l+0x232>
 8005976:	1c69      	adds	r1, r5, #1
 8005978:	4401      	add	r1, r0
 800597a:	4428      	add	r0, r5
 800597c:	2808      	cmp	r0, #8
 800597e:	dc16      	bgt.n	80059ae <_strtod_l+0x24e>
 8005980:	230a      	movs	r3, #10
 8005982:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005984:	fb03 2300 	mla	r3, r3, r0, r2
 8005988:	930a      	str	r3, [sp, #40]	@ 0x28
 800598a:	2300      	movs	r3, #0
 800598c:	e018      	b.n	80059c0 <_strtod_l+0x260>
 800598e:	4638      	mov	r0, r7
 8005990:	e7da      	b.n	8005948 <_strtod_l+0x1e8>
 8005992:	2b08      	cmp	r3, #8
 8005994:	f103 0301 	add.w	r3, r3, #1
 8005998:	dc03      	bgt.n	80059a2 <_strtod_l+0x242>
 800599a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800599c:	434e      	muls	r6, r1
 800599e:	960a      	str	r6, [sp, #40]	@ 0x28
 80059a0:	e7e7      	b.n	8005972 <_strtod_l+0x212>
 80059a2:	2b10      	cmp	r3, #16
 80059a4:	bfde      	ittt	le
 80059a6:	9e08      	ldrle	r6, [sp, #32]
 80059a8:	434e      	mulle	r6, r1
 80059aa:	9608      	strle	r6, [sp, #32]
 80059ac:	e7e1      	b.n	8005972 <_strtod_l+0x212>
 80059ae:	280f      	cmp	r0, #15
 80059b0:	dceb      	bgt.n	800598a <_strtod_l+0x22a>
 80059b2:	230a      	movs	r3, #10
 80059b4:	9808      	ldr	r0, [sp, #32]
 80059b6:	fb03 2300 	mla	r3, r3, r0, r2
 80059ba:	9308      	str	r3, [sp, #32]
 80059bc:	e7e5      	b.n	800598a <_strtod_l+0x22a>
 80059be:	4629      	mov	r1, r5
 80059c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80059c2:	460d      	mov	r5, r1
 80059c4:	1c50      	adds	r0, r2, #1
 80059c6:	9019      	str	r0, [sp, #100]	@ 0x64
 80059c8:	7852      	ldrb	r2, [r2, #1]
 80059ca:	4618      	mov	r0, r3
 80059cc:	e7b1      	b.n	8005932 <_strtod_l+0x1d2>
 80059ce:	f04f 0900 	mov.w	r9, #0
 80059d2:	2301      	movs	r3, #1
 80059d4:	e77d      	b.n	80058d2 <_strtod_l+0x172>
 80059d6:	f04f 0c00 	mov.w	ip, #0
 80059da:	1ca2      	adds	r2, r4, #2
 80059dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80059de:	78a2      	ldrb	r2, [r4, #2]
 80059e0:	e785      	b.n	80058ee <_strtod_l+0x18e>
 80059e2:	f04f 0c01 	mov.w	ip, #1
 80059e6:	e7f8      	b.n	80059da <_strtod_l+0x27a>
 80059e8:	0800acdc 	.word	0x0800acdc
 80059ec:	7ff00000 	.word	0x7ff00000
 80059f0:	0800acc6 	.word	0x0800acc6
 80059f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80059f6:	1c51      	adds	r1, r2, #1
 80059f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80059fa:	7852      	ldrb	r2, [r2, #1]
 80059fc:	2a30      	cmp	r2, #48	@ 0x30
 80059fe:	d0f9      	beq.n	80059f4 <_strtod_l+0x294>
 8005a00:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005a04:	2908      	cmp	r1, #8
 8005a06:	f63f af78 	bhi.w	80058fa <_strtod_l+0x19a>
 8005a0a:	f04f 080a 	mov.w	r8, #10
 8005a0e:	3a30      	subs	r2, #48	@ 0x30
 8005a10:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a14:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005a16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a18:	1c56      	adds	r6, r2, #1
 8005a1a:	9619      	str	r6, [sp, #100]	@ 0x64
 8005a1c:	7852      	ldrb	r2, [r2, #1]
 8005a1e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005a22:	f1be 0f09 	cmp.w	lr, #9
 8005a26:	d939      	bls.n	8005a9c <_strtod_l+0x33c>
 8005a28:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005a2a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005a2e:	1a76      	subs	r6, r6, r1
 8005a30:	2e08      	cmp	r6, #8
 8005a32:	dc03      	bgt.n	8005a3c <_strtod_l+0x2dc>
 8005a34:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005a36:	4588      	cmp	r8, r1
 8005a38:	bfa8      	it	ge
 8005a3a:	4688      	movge	r8, r1
 8005a3c:	f1bc 0f00 	cmp.w	ip, #0
 8005a40:	d001      	beq.n	8005a46 <_strtod_l+0x2e6>
 8005a42:	f1c8 0800 	rsb	r8, r8, #0
 8005a46:	2d00      	cmp	r5, #0
 8005a48:	d14e      	bne.n	8005ae8 <_strtod_l+0x388>
 8005a4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a4c:	4308      	orrs	r0, r1
 8005a4e:	f47f aec0 	bne.w	80057d2 <_strtod_l+0x72>
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f47f aed6 	bne.w	8005804 <_strtod_l+0xa4>
 8005a58:	2a69      	cmp	r2, #105	@ 0x69
 8005a5a:	d028      	beq.n	8005aae <_strtod_l+0x34e>
 8005a5c:	dc25      	bgt.n	8005aaa <_strtod_l+0x34a>
 8005a5e:	2a49      	cmp	r2, #73	@ 0x49
 8005a60:	d025      	beq.n	8005aae <_strtod_l+0x34e>
 8005a62:	2a4e      	cmp	r2, #78	@ 0x4e
 8005a64:	f47f aece 	bne.w	8005804 <_strtod_l+0xa4>
 8005a68:	499a      	ldr	r1, [pc, #616]	@ (8005cd4 <_strtod_l+0x574>)
 8005a6a:	a819      	add	r0, sp, #100	@ 0x64
 8005a6c:	f002 ff0e 	bl	800888c <__match>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	f43f aec7 	beq.w	8005804 <_strtod_l+0xa4>
 8005a76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b28      	cmp	r3, #40	@ 0x28
 8005a7c:	d12e      	bne.n	8005adc <_strtod_l+0x37c>
 8005a7e:	4996      	ldr	r1, [pc, #600]	@ (8005cd8 <_strtod_l+0x578>)
 8005a80:	aa1c      	add	r2, sp, #112	@ 0x70
 8005a82:	a819      	add	r0, sp, #100	@ 0x64
 8005a84:	f002 ff16 	bl	80088b4 <__hexnan>
 8005a88:	2805      	cmp	r0, #5
 8005a8a:	d127      	bne.n	8005adc <_strtod_l+0x37c>
 8005a8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005a8e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005a92:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005a96:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005a9a:	e69a      	b.n	80057d2 <_strtod_l+0x72>
 8005a9c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005a9e:	fb08 2101 	mla	r1, r8, r1, r2
 8005aa2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005aa6:	920e      	str	r2, [sp, #56]	@ 0x38
 8005aa8:	e7b5      	b.n	8005a16 <_strtod_l+0x2b6>
 8005aaa:	2a6e      	cmp	r2, #110	@ 0x6e
 8005aac:	e7da      	b.n	8005a64 <_strtod_l+0x304>
 8005aae:	498b      	ldr	r1, [pc, #556]	@ (8005cdc <_strtod_l+0x57c>)
 8005ab0:	a819      	add	r0, sp, #100	@ 0x64
 8005ab2:	f002 feeb 	bl	800888c <__match>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	f43f aea4 	beq.w	8005804 <_strtod_l+0xa4>
 8005abc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005abe:	4988      	ldr	r1, [pc, #544]	@ (8005ce0 <_strtod_l+0x580>)
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	a819      	add	r0, sp, #100	@ 0x64
 8005ac4:	9319      	str	r3, [sp, #100]	@ 0x64
 8005ac6:	f002 fee1 	bl	800888c <__match>
 8005aca:	b910      	cbnz	r0, 8005ad2 <_strtod_l+0x372>
 8005acc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ace:	3301      	adds	r3, #1
 8005ad0:	9319      	str	r3, [sp, #100]	@ 0x64
 8005ad2:	f04f 0a00 	mov.w	sl, #0
 8005ad6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005ce4 <_strtod_l+0x584>
 8005ada:	e67a      	b.n	80057d2 <_strtod_l+0x72>
 8005adc:	4882      	ldr	r0, [pc, #520]	@ (8005ce8 <_strtod_l+0x588>)
 8005ade:	f001 fd8b 	bl	80075f8 <nan>
 8005ae2:	4682      	mov	sl, r0
 8005ae4:	468b      	mov	fp, r1
 8005ae6:	e674      	b.n	80057d2 <_strtod_l+0x72>
 8005ae8:	eba8 0309 	sub.w	r3, r8, r9
 8005aec:	2f00      	cmp	r7, #0
 8005aee:	bf08      	it	eq
 8005af0:	462f      	moveq	r7, r5
 8005af2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005af4:	2d10      	cmp	r5, #16
 8005af6:	462c      	mov	r4, r5
 8005af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005afa:	bfa8      	it	ge
 8005afc:	2410      	movge	r4, #16
 8005afe:	f7fa fc71 	bl	80003e4 <__aeabi_ui2d>
 8005b02:	2d09      	cmp	r5, #9
 8005b04:	4682      	mov	sl, r0
 8005b06:	468b      	mov	fp, r1
 8005b08:	dc11      	bgt.n	8005b2e <_strtod_l+0x3ce>
 8005b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f43f ae60 	beq.w	80057d2 <_strtod_l+0x72>
 8005b12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b14:	dd76      	ble.n	8005c04 <_strtod_l+0x4a4>
 8005b16:	2b16      	cmp	r3, #22
 8005b18:	dc5d      	bgt.n	8005bd6 <_strtod_l+0x476>
 8005b1a:	4974      	ldr	r1, [pc, #464]	@ (8005cec <_strtod_l+0x58c>)
 8005b1c:	4652      	mov	r2, sl
 8005b1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b22:	465b      	mov	r3, fp
 8005b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b28:	f7fa fcd6 	bl	80004d8 <__aeabi_dmul>
 8005b2c:	e7d9      	b.n	8005ae2 <_strtod_l+0x382>
 8005b2e:	4b6f      	ldr	r3, [pc, #444]	@ (8005cec <_strtod_l+0x58c>)
 8005b30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005b38:	f7fa fcce 	bl	80004d8 <__aeabi_dmul>
 8005b3c:	4682      	mov	sl, r0
 8005b3e:	9808      	ldr	r0, [sp, #32]
 8005b40:	468b      	mov	fp, r1
 8005b42:	f7fa fc4f 	bl	80003e4 <__aeabi_ui2d>
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4650      	mov	r0, sl
 8005b4c:	4659      	mov	r1, fp
 8005b4e:	f7fa fb0d 	bl	800016c <__adddf3>
 8005b52:	2d0f      	cmp	r5, #15
 8005b54:	4682      	mov	sl, r0
 8005b56:	468b      	mov	fp, r1
 8005b58:	ddd7      	ble.n	8005b0a <_strtod_l+0x3aa>
 8005b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b5c:	1b2c      	subs	r4, r5, r4
 8005b5e:	441c      	add	r4, r3
 8005b60:	2c00      	cmp	r4, #0
 8005b62:	f340 8096 	ble.w	8005c92 <_strtod_l+0x532>
 8005b66:	f014 030f 	ands.w	r3, r4, #15
 8005b6a:	d00a      	beq.n	8005b82 <_strtod_l+0x422>
 8005b6c:	495f      	ldr	r1, [pc, #380]	@ (8005cec <_strtod_l+0x58c>)
 8005b6e:	4652      	mov	r2, sl
 8005b70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b78:	465b      	mov	r3, fp
 8005b7a:	f7fa fcad 	bl	80004d8 <__aeabi_dmul>
 8005b7e:	4682      	mov	sl, r0
 8005b80:	468b      	mov	fp, r1
 8005b82:	f034 040f 	bics.w	r4, r4, #15
 8005b86:	d073      	beq.n	8005c70 <_strtod_l+0x510>
 8005b88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005b8c:	dd48      	ble.n	8005c20 <_strtod_l+0x4c0>
 8005b8e:	2400      	movs	r4, #0
 8005b90:	46a0      	mov	r8, r4
 8005b92:	46a1      	mov	r9, r4
 8005b94:	940a      	str	r4, [sp, #40]	@ 0x28
 8005b96:	2322      	movs	r3, #34	@ 0x22
 8005b98:	f04f 0a00 	mov.w	sl, #0
 8005b9c:	9a05      	ldr	r2, [sp, #20]
 8005b9e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005ce4 <_strtod_l+0x584>
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f43f ae13 	beq.w	80057d2 <_strtod_l+0x72>
 8005bac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005bae:	9805      	ldr	r0, [sp, #20]
 8005bb0:	f003 f824 	bl	8008bfc <_Bfree>
 8005bb4:	4649      	mov	r1, r9
 8005bb6:	9805      	ldr	r0, [sp, #20]
 8005bb8:	f003 f820 	bl	8008bfc <_Bfree>
 8005bbc:	4641      	mov	r1, r8
 8005bbe:	9805      	ldr	r0, [sp, #20]
 8005bc0:	f003 f81c 	bl	8008bfc <_Bfree>
 8005bc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005bc6:	9805      	ldr	r0, [sp, #20]
 8005bc8:	f003 f818 	bl	8008bfc <_Bfree>
 8005bcc:	4621      	mov	r1, r4
 8005bce:	9805      	ldr	r0, [sp, #20]
 8005bd0:	f003 f814 	bl	8008bfc <_Bfree>
 8005bd4:	e5fd      	b.n	80057d2 <_strtod_l+0x72>
 8005bd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bd8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	dbbc      	blt.n	8005b5a <_strtod_l+0x3fa>
 8005be0:	4c42      	ldr	r4, [pc, #264]	@ (8005cec <_strtod_l+0x58c>)
 8005be2:	f1c5 050f 	rsb	r5, r5, #15
 8005be6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005bea:	4652      	mov	r2, sl
 8005bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bf0:	465b      	mov	r3, fp
 8005bf2:	f7fa fc71 	bl	80004d8 <__aeabi_dmul>
 8005bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bf8:	1b5d      	subs	r5, r3, r5
 8005bfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005bfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005c02:	e791      	b.n	8005b28 <_strtod_l+0x3c8>
 8005c04:	3316      	adds	r3, #22
 8005c06:	dba8      	blt.n	8005b5a <_strtod_l+0x3fa>
 8005c08:	4b38      	ldr	r3, [pc, #224]	@ (8005cec <_strtod_l+0x58c>)
 8005c0a:	eba9 0808 	sub.w	r8, r9, r8
 8005c0e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005c12:	4650      	mov	r0, sl
 8005c14:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005c18:	4659      	mov	r1, fp
 8005c1a:	f7fa fd87 	bl	800072c <__aeabi_ddiv>
 8005c1e:	e760      	b.n	8005ae2 <_strtod_l+0x382>
 8005c20:	4b33      	ldr	r3, [pc, #204]	@ (8005cf0 <_strtod_l+0x590>)
 8005c22:	4650      	mov	r0, sl
 8005c24:	9308      	str	r3, [sp, #32]
 8005c26:	2300      	movs	r3, #0
 8005c28:	4659      	mov	r1, fp
 8005c2a:	461e      	mov	r6, r3
 8005c2c:	1124      	asrs	r4, r4, #4
 8005c2e:	2c01      	cmp	r4, #1
 8005c30:	dc21      	bgt.n	8005c76 <_strtod_l+0x516>
 8005c32:	b10b      	cbz	r3, 8005c38 <_strtod_l+0x4d8>
 8005c34:	4682      	mov	sl, r0
 8005c36:	468b      	mov	fp, r1
 8005c38:	492d      	ldr	r1, [pc, #180]	@ (8005cf0 <_strtod_l+0x590>)
 8005c3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005c3e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005c42:	4652      	mov	r2, sl
 8005c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c48:	465b      	mov	r3, fp
 8005c4a:	f7fa fc45 	bl	80004d8 <__aeabi_dmul>
 8005c4e:	4b25      	ldr	r3, [pc, #148]	@ (8005ce4 <_strtod_l+0x584>)
 8005c50:	460a      	mov	r2, r1
 8005c52:	400b      	ands	r3, r1
 8005c54:	4927      	ldr	r1, [pc, #156]	@ (8005cf4 <_strtod_l+0x594>)
 8005c56:	4682      	mov	sl, r0
 8005c58:	428b      	cmp	r3, r1
 8005c5a:	d898      	bhi.n	8005b8e <_strtod_l+0x42e>
 8005c5c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005c60:	428b      	cmp	r3, r1
 8005c62:	bf86      	itte	hi
 8005c64:	f04f 3aff 	movhi.w	sl, #4294967295
 8005c68:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005cf8 <_strtod_l+0x598>
 8005c6c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005c70:	2300      	movs	r3, #0
 8005c72:	9308      	str	r3, [sp, #32]
 8005c74:	e07a      	b.n	8005d6c <_strtod_l+0x60c>
 8005c76:	07e2      	lsls	r2, r4, #31
 8005c78:	d505      	bpl.n	8005c86 <_strtod_l+0x526>
 8005c7a:	9b08      	ldr	r3, [sp, #32]
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	f7fa fc2a 	bl	80004d8 <__aeabi_dmul>
 8005c84:	2301      	movs	r3, #1
 8005c86:	9a08      	ldr	r2, [sp, #32]
 8005c88:	3601      	adds	r6, #1
 8005c8a:	3208      	adds	r2, #8
 8005c8c:	1064      	asrs	r4, r4, #1
 8005c8e:	9208      	str	r2, [sp, #32]
 8005c90:	e7cd      	b.n	8005c2e <_strtod_l+0x4ce>
 8005c92:	d0ed      	beq.n	8005c70 <_strtod_l+0x510>
 8005c94:	4264      	negs	r4, r4
 8005c96:	f014 020f 	ands.w	r2, r4, #15
 8005c9a:	d00a      	beq.n	8005cb2 <_strtod_l+0x552>
 8005c9c:	4b13      	ldr	r3, [pc, #76]	@ (8005cec <_strtod_l+0x58c>)
 8005c9e:	4650      	mov	r0, sl
 8005ca0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	f7fa fd3f 	bl	800072c <__aeabi_ddiv>
 8005cae:	4682      	mov	sl, r0
 8005cb0:	468b      	mov	fp, r1
 8005cb2:	1124      	asrs	r4, r4, #4
 8005cb4:	d0dc      	beq.n	8005c70 <_strtod_l+0x510>
 8005cb6:	2c1f      	cmp	r4, #31
 8005cb8:	dd20      	ble.n	8005cfc <_strtod_l+0x59c>
 8005cba:	2400      	movs	r4, #0
 8005cbc:	46a0      	mov	r8, r4
 8005cbe:	46a1      	mov	r9, r4
 8005cc0:	940a      	str	r4, [sp, #40]	@ 0x28
 8005cc2:	2322      	movs	r3, #34	@ 0x22
 8005cc4:	9a05      	ldr	r2, [sp, #20]
 8005cc6:	f04f 0a00 	mov.w	sl, #0
 8005cca:	f04f 0b00 	mov.w	fp, #0
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	e768      	b.n	8005ba4 <_strtod_l+0x444>
 8005cd2:	bf00      	nop
 8005cd4:	0800ae26 	.word	0x0800ae26
 8005cd8:	0800acc8 	.word	0x0800acc8
 8005cdc:	0800ae1e 	.word	0x0800ae1e
 8005ce0:	0800ae97 	.word	0x0800ae97
 8005ce4:	7ff00000 	.word	0x7ff00000
 8005ce8:	0800ae93 	.word	0x0800ae93
 8005cec:	0800b010 	.word	0x0800b010
 8005cf0:	0800afe8 	.word	0x0800afe8
 8005cf4:	7ca00000 	.word	0x7ca00000
 8005cf8:	7fefffff 	.word	0x7fefffff
 8005cfc:	f014 0310 	ands.w	r3, r4, #16
 8005d00:	bf18      	it	ne
 8005d02:	236a      	movne	r3, #106	@ 0x6a
 8005d04:	4650      	mov	r0, sl
 8005d06:	9308      	str	r3, [sp, #32]
 8005d08:	4659      	mov	r1, fp
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	4ea9      	ldr	r6, [pc, #676]	@ (8005fb4 <_strtod_l+0x854>)
 8005d0e:	07e2      	lsls	r2, r4, #31
 8005d10:	d504      	bpl.n	8005d1c <_strtod_l+0x5bc>
 8005d12:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d16:	f7fa fbdf 	bl	80004d8 <__aeabi_dmul>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	1064      	asrs	r4, r4, #1
 8005d1e:	f106 0608 	add.w	r6, r6, #8
 8005d22:	d1f4      	bne.n	8005d0e <_strtod_l+0x5ae>
 8005d24:	b10b      	cbz	r3, 8005d2a <_strtod_l+0x5ca>
 8005d26:	4682      	mov	sl, r0
 8005d28:	468b      	mov	fp, r1
 8005d2a:	9b08      	ldr	r3, [sp, #32]
 8005d2c:	b1b3      	cbz	r3, 8005d5c <_strtod_l+0x5fc>
 8005d2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005d32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	4659      	mov	r1, fp
 8005d3a:	dd0f      	ble.n	8005d5c <_strtod_l+0x5fc>
 8005d3c:	2b1f      	cmp	r3, #31
 8005d3e:	dd57      	ble.n	8005df0 <_strtod_l+0x690>
 8005d40:	2b34      	cmp	r3, #52	@ 0x34
 8005d42:	bfd8      	it	le
 8005d44:	f04f 33ff 	movle.w	r3, #4294967295
 8005d48:	f04f 0a00 	mov.w	sl, #0
 8005d4c:	bfcf      	iteee	gt
 8005d4e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005d52:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005d56:	4093      	lslle	r3, r2
 8005d58:	ea03 0b01 	andle.w	fp, r3, r1
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	2300      	movs	r3, #0
 8005d60:	4650      	mov	r0, sl
 8005d62:	4659      	mov	r1, fp
 8005d64:	f7fa fe20 	bl	80009a8 <__aeabi_dcmpeq>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d1a6      	bne.n	8005cba <_strtod_l+0x55a>
 8005d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d6e:	463a      	mov	r2, r7
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005d74:	462b      	mov	r3, r5
 8005d76:	9805      	ldr	r0, [sp, #20]
 8005d78:	f002 ffa8 	bl	8008ccc <__s2b>
 8005d7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	f43f af05 	beq.w	8005b8e <_strtod_l+0x42e>
 8005d84:	2400      	movs	r4, #0
 8005d86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d88:	eba9 0308 	sub.w	r3, r9, r8
 8005d8c:	2a00      	cmp	r2, #0
 8005d8e:	bfa8      	it	ge
 8005d90:	2300      	movge	r3, #0
 8005d92:	46a0      	mov	r8, r4
 8005d94:	9312      	str	r3, [sp, #72]	@ 0x48
 8005d96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005d9a:	9316      	str	r3, [sp, #88]	@ 0x58
 8005d9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d9e:	9805      	ldr	r0, [sp, #20]
 8005da0:	6859      	ldr	r1, [r3, #4]
 8005da2:	f002 feeb 	bl	8008b7c <_Balloc>
 8005da6:	4681      	mov	r9, r0
 8005da8:	2800      	cmp	r0, #0
 8005daa:	f43f aef4 	beq.w	8005b96 <_strtod_l+0x436>
 8005dae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005db0:	300c      	adds	r0, #12
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	f103 010c 	add.w	r1, r3, #12
 8005db8:	3202      	adds	r2, #2
 8005dba:	0092      	lsls	r2, r2, #2
 8005dbc:	f001 fc0d 	bl	80075da <memcpy>
 8005dc0:	ab1c      	add	r3, sp, #112	@ 0x70
 8005dc2:	9301      	str	r3, [sp, #4]
 8005dc4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	4652      	mov	r2, sl
 8005dca:	465b      	mov	r3, fp
 8005dcc:	9805      	ldr	r0, [sp, #20]
 8005dce:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005dd2:	f003 faad 	bl	8009330 <__d2b>
 8005dd6:	901a      	str	r0, [sp, #104]	@ 0x68
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	f43f aedc 	beq.w	8005b96 <_strtod_l+0x436>
 8005dde:	2101      	movs	r1, #1
 8005de0:	9805      	ldr	r0, [sp, #20]
 8005de2:	f003 f809 	bl	8008df8 <__i2b>
 8005de6:	4680      	mov	r8, r0
 8005de8:	b948      	cbnz	r0, 8005dfe <_strtod_l+0x69e>
 8005dea:	f04f 0800 	mov.w	r8, #0
 8005dee:	e6d2      	b.n	8005b96 <_strtod_l+0x436>
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	ea03 0a0a 	and.w	sl, r3, sl
 8005dfc:	e7ae      	b.n	8005d5c <_strtod_l+0x5fc>
 8005dfe:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005e00:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005e02:	2d00      	cmp	r5, #0
 8005e04:	bfab      	itete	ge
 8005e06:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005e08:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005e0a:	18ef      	addge	r7, r5, r3
 8005e0c:	1b5e      	sublt	r6, r3, r5
 8005e0e:	9b08      	ldr	r3, [sp, #32]
 8005e10:	bfa8      	it	ge
 8005e12:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005e14:	eba5 0503 	sub.w	r5, r5, r3
 8005e18:	4415      	add	r5, r2
 8005e1a:	4b67      	ldr	r3, [pc, #412]	@ (8005fb8 <_strtod_l+0x858>)
 8005e1c:	f105 35ff 	add.w	r5, r5, #4294967295
 8005e20:	bfb8      	it	lt
 8005e22:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005e24:	429d      	cmp	r5, r3
 8005e26:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005e2a:	da50      	bge.n	8005ece <_strtod_l+0x76e>
 8005e2c:	1b5b      	subs	r3, r3, r5
 8005e2e:	2b1f      	cmp	r3, #31
 8005e30:	f04f 0101 	mov.w	r1, #1
 8005e34:	eba2 0203 	sub.w	r2, r2, r3
 8005e38:	dc3d      	bgt.n	8005eb6 <_strtod_l+0x756>
 8005e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e40:	2300      	movs	r3, #0
 8005e42:	9310      	str	r3, [sp, #64]	@ 0x40
 8005e44:	18bd      	adds	r5, r7, r2
 8005e46:	9b08      	ldr	r3, [sp, #32]
 8005e48:	42af      	cmp	r7, r5
 8005e4a:	4416      	add	r6, r2
 8005e4c:	441e      	add	r6, r3
 8005e4e:	463b      	mov	r3, r7
 8005e50:	bfa8      	it	ge
 8005e52:	462b      	movge	r3, r5
 8005e54:	42b3      	cmp	r3, r6
 8005e56:	bfa8      	it	ge
 8005e58:	4633      	movge	r3, r6
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	bfc2      	ittt	gt
 8005e5e:	1aed      	subgt	r5, r5, r3
 8005e60:	1af6      	subgt	r6, r6, r3
 8005e62:	1aff      	subgt	r7, r7, r3
 8005e64:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	dd16      	ble.n	8005e98 <_strtod_l+0x738>
 8005e6a:	4641      	mov	r1, r8
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	9805      	ldr	r0, [sp, #20]
 8005e70:	f003 f880 	bl	8008f74 <__pow5mult>
 8005e74:	4680      	mov	r8, r0
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d0b7      	beq.n	8005dea <_strtod_l+0x68a>
 8005e7a:	4601      	mov	r1, r0
 8005e7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005e7e:	9805      	ldr	r0, [sp, #20]
 8005e80:	f002 ffd0 	bl	8008e24 <__multiply>
 8005e84:	900e      	str	r0, [sp, #56]	@ 0x38
 8005e86:	2800      	cmp	r0, #0
 8005e88:	f43f ae85 	beq.w	8005b96 <_strtod_l+0x436>
 8005e8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e8e:	9805      	ldr	r0, [sp, #20]
 8005e90:	f002 feb4 	bl	8008bfc <_Bfree>
 8005e94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e96:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e98:	2d00      	cmp	r5, #0
 8005e9a:	dc1d      	bgt.n	8005ed8 <_strtod_l+0x778>
 8005e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	dd23      	ble.n	8005eea <_strtod_l+0x78a>
 8005ea2:	4649      	mov	r1, r9
 8005ea4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005ea6:	9805      	ldr	r0, [sp, #20]
 8005ea8:	f003 f864 	bl	8008f74 <__pow5mult>
 8005eac:	4681      	mov	r9, r0
 8005eae:	b9e0      	cbnz	r0, 8005eea <_strtod_l+0x78a>
 8005eb0:	f04f 0900 	mov.w	r9, #0
 8005eb4:	e66f      	b.n	8005b96 <_strtod_l+0x436>
 8005eb6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005eba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005ebe:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005ec2:	35e2      	adds	r5, #226	@ 0xe2
 8005ec4:	fa01 f305 	lsl.w	r3, r1, r5
 8005ec8:	9310      	str	r3, [sp, #64]	@ 0x40
 8005eca:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005ecc:	e7ba      	b.n	8005e44 <_strtod_l+0x6e4>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ed6:	e7b5      	b.n	8005e44 <_strtod_l+0x6e4>
 8005ed8:	462a      	mov	r2, r5
 8005eda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005edc:	9805      	ldr	r0, [sp, #20]
 8005ede:	f003 f8a3 	bl	8009028 <__lshift>
 8005ee2:	901a      	str	r0, [sp, #104]	@ 0x68
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d1d9      	bne.n	8005e9c <_strtod_l+0x73c>
 8005ee8:	e655      	b.n	8005b96 <_strtod_l+0x436>
 8005eea:	2e00      	cmp	r6, #0
 8005eec:	dd07      	ble.n	8005efe <_strtod_l+0x79e>
 8005eee:	4649      	mov	r1, r9
 8005ef0:	4632      	mov	r2, r6
 8005ef2:	9805      	ldr	r0, [sp, #20]
 8005ef4:	f003 f898 	bl	8009028 <__lshift>
 8005ef8:	4681      	mov	r9, r0
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d0d8      	beq.n	8005eb0 <_strtod_l+0x750>
 8005efe:	2f00      	cmp	r7, #0
 8005f00:	dd08      	ble.n	8005f14 <_strtod_l+0x7b4>
 8005f02:	4641      	mov	r1, r8
 8005f04:	463a      	mov	r2, r7
 8005f06:	9805      	ldr	r0, [sp, #20]
 8005f08:	f003 f88e 	bl	8009028 <__lshift>
 8005f0c:	4680      	mov	r8, r0
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	f43f ae41 	beq.w	8005b96 <_strtod_l+0x436>
 8005f14:	464a      	mov	r2, r9
 8005f16:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f18:	9805      	ldr	r0, [sp, #20]
 8005f1a:	f003 f90d 	bl	8009138 <__mdiff>
 8005f1e:	4604      	mov	r4, r0
 8005f20:	2800      	cmp	r0, #0
 8005f22:	f43f ae38 	beq.w	8005b96 <_strtod_l+0x436>
 8005f26:	68c3      	ldr	r3, [r0, #12]
 8005f28:	4641      	mov	r1, r8
 8005f2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60c3      	str	r3, [r0, #12]
 8005f30:	f003 f8e6 	bl	8009100 <__mcmp>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	da45      	bge.n	8005fc4 <_strtod_l+0x864>
 8005f38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f3a:	ea53 030a 	orrs.w	r3, r3, sl
 8005f3e:	d16b      	bne.n	8006018 <_strtod_l+0x8b8>
 8005f40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d167      	bne.n	8006018 <_strtod_l+0x8b8>
 8005f48:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005f4c:	0d1b      	lsrs	r3, r3, #20
 8005f4e:	051b      	lsls	r3, r3, #20
 8005f50:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005f54:	d960      	bls.n	8006018 <_strtod_l+0x8b8>
 8005f56:	6963      	ldr	r3, [r4, #20]
 8005f58:	b913      	cbnz	r3, 8005f60 <_strtod_l+0x800>
 8005f5a:	6923      	ldr	r3, [r4, #16]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	dd5b      	ble.n	8006018 <_strtod_l+0x8b8>
 8005f60:	4621      	mov	r1, r4
 8005f62:	2201      	movs	r2, #1
 8005f64:	9805      	ldr	r0, [sp, #20]
 8005f66:	f003 f85f 	bl	8009028 <__lshift>
 8005f6a:	4641      	mov	r1, r8
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	f003 f8c7 	bl	8009100 <__mcmp>
 8005f72:	2800      	cmp	r0, #0
 8005f74:	dd50      	ble.n	8006018 <_strtod_l+0x8b8>
 8005f76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005f7a:	9a08      	ldr	r2, [sp, #32]
 8005f7c:	0d1b      	lsrs	r3, r3, #20
 8005f7e:	051b      	lsls	r3, r3, #20
 8005f80:	2a00      	cmp	r2, #0
 8005f82:	d06a      	beq.n	800605a <_strtod_l+0x8fa>
 8005f84:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005f88:	d867      	bhi.n	800605a <_strtod_l+0x8fa>
 8005f8a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005f8e:	f67f ae98 	bls.w	8005cc2 <_strtod_l+0x562>
 8005f92:	4650      	mov	r0, sl
 8005f94:	4659      	mov	r1, fp
 8005f96:	4b09      	ldr	r3, [pc, #36]	@ (8005fbc <_strtod_l+0x85c>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f7fa fa9d 	bl	80004d8 <__aeabi_dmul>
 8005f9e:	4b08      	ldr	r3, [pc, #32]	@ (8005fc0 <_strtod_l+0x860>)
 8005fa0:	4682      	mov	sl, r0
 8005fa2:	400b      	ands	r3, r1
 8005fa4:	468b      	mov	fp, r1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f47f ae00 	bne.w	8005bac <_strtod_l+0x44c>
 8005fac:	2322      	movs	r3, #34	@ 0x22
 8005fae:	9a05      	ldr	r2, [sp, #20]
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	e5fb      	b.n	8005bac <_strtod_l+0x44c>
 8005fb4:	0800acf0 	.word	0x0800acf0
 8005fb8:	fffffc02 	.word	0xfffffc02
 8005fbc:	39500000 	.word	0x39500000
 8005fc0:	7ff00000 	.word	0x7ff00000
 8005fc4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005fc8:	d165      	bne.n	8006096 <_strtod_l+0x936>
 8005fca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005fcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fd0:	b35a      	cbz	r2, 800602a <_strtod_l+0x8ca>
 8005fd2:	4a99      	ldr	r2, [pc, #612]	@ (8006238 <_strtod_l+0xad8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d12b      	bne.n	8006030 <_strtod_l+0x8d0>
 8005fd8:	9b08      	ldr	r3, [sp, #32]
 8005fda:	4651      	mov	r1, sl
 8005fdc:	b303      	cbz	r3, 8006020 <_strtod_l+0x8c0>
 8005fde:	465a      	mov	r2, fp
 8005fe0:	4b96      	ldr	r3, [pc, #600]	@ (800623c <_strtod_l+0xadc>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fec:	d81b      	bhi.n	8006026 <_strtod_l+0x8c6>
 8005fee:	0d1b      	lsrs	r3, r3, #20
 8005ff0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	4299      	cmp	r1, r3
 8005ffa:	d119      	bne.n	8006030 <_strtod_l+0x8d0>
 8005ffc:	4b90      	ldr	r3, [pc, #576]	@ (8006240 <_strtod_l+0xae0>)
 8005ffe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006000:	429a      	cmp	r2, r3
 8006002:	d102      	bne.n	800600a <_strtod_l+0x8aa>
 8006004:	3101      	adds	r1, #1
 8006006:	f43f adc6 	beq.w	8005b96 <_strtod_l+0x436>
 800600a:	f04f 0a00 	mov.w	sl, #0
 800600e:	4b8b      	ldr	r3, [pc, #556]	@ (800623c <_strtod_l+0xadc>)
 8006010:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006012:	401a      	ands	r2, r3
 8006014:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006018:	9b08      	ldr	r3, [sp, #32]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1b9      	bne.n	8005f92 <_strtod_l+0x832>
 800601e:	e5c5      	b.n	8005bac <_strtod_l+0x44c>
 8006020:	f04f 33ff 	mov.w	r3, #4294967295
 8006024:	e7e8      	b.n	8005ff8 <_strtod_l+0x898>
 8006026:	4613      	mov	r3, r2
 8006028:	e7e6      	b.n	8005ff8 <_strtod_l+0x898>
 800602a:	ea53 030a 	orrs.w	r3, r3, sl
 800602e:	d0a2      	beq.n	8005f76 <_strtod_l+0x816>
 8006030:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006032:	b1db      	cbz	r3, 800606c <_strtod_l+0x90c>
 8006034:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006036:	4213      	tst	r3, r2
 8006038:	d0ee      	beq.n	8006018 <_strtod_l+0x8b8>
 800603a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800603c:	4650      	mov	r0, sl
 800603e:	4659      	mov	r1, fp
 8006040:	9a08      	ldr	r2, [sp, #32]
 8006042:	b1bb      	cbz	r3, 8006074 <_strtod_l+0x914>
 8006044:	f7ff fb6a 	bl	800571c <sulp>
 8006048:	4602      	mov	r2, r0
 800604a:	460b      	mov	r3, r1
 800604c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006050:	f7fa f88c 	bl	800016c <__adddf3>
 8006054:	4682      	mov	sl, r0
 8006056:	468b      	mov	fp, r1
 8006058:	e7de      	b.n	8006018 <_strtod_l+0x8b8>
 800605a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800605e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006062:	f04f 3aff 	mov.w	sl, #4294967295
 8006066:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800606a:	e7d5      	b.n	8006018 <_strtod_l+0x8b8>
 800606c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800606e:	ea13 0f0a 	tst.w	r3, sl
 8006072:	e7e1      	b.n	8006038 <_strtod_l+0x8d8>
 8006074:	f7ff fb52 	bl	800571c <sulp>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006080:	f7fa f872 	bl	8000168 <__aeabi_dsub>
 8006084:	2200      	movs	r2, #0
 8006086:	2300      	movs	r3, #0
 8006088:	4682      	mov	sl, r0
 800608a:	468b      	mov	fp, r1
 800608c:	f7fa fc8c 	bl	80009a8 <__aeabi_dcmpeq>
 8006090:	2800      	cmp	r0, #0
 8006092:	d0c1      	beq.n	8006018 <_strtod_l+0x8b8>
 8006094:	e615      	b.n	8005cc2 <_strtod_l+0x562>
 8006096:	4641      	mov	r1, r8
 8006098:	4620      	mov	r0, r4
 800609a:	f003 f9a1 	bl	80093e0 <__ratio>
 800609e:	2200      	movs	r2, #0
 80060a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80060a4:	4606      	mov	r6, r0
 80060a6:	460f      	mov	r7, r1
 80060a8:	f7fa fc92 	bl	80009d0 <__aeabi_dcmple>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d06d      	beq.n	800618c <_strtod_l+0xa2c>
 80060b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d178      	bne.n	80061a8 <_strtod_l+0xa48>
 80060b6:	f1ba 0f00 	cmp.w	sl, #0
 80060ba:	d156      	bne.n	800616a <_strtod_l+0xa0a>
 80060bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d158      	bne.n	8006178 <_strtod_l+0xa18>
 80060c6:	2200      	movs	r2, #0
 80060c8:	4630      	mov	r0, r6
 80060ca:	4639      	mov	r1, r7
 80060cc:	4b5d      	ldr	r3, [pc, #372]	@ (8006244 <_strtod_l+0xae4>)
 80060ce:	f7fa fc75 	bl	80009bc <__aeabi_dcmplt>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d157      	bne.n	8006186 <_strtod_l+0xa26>
 80060d6:	4630      	mov	r0, r6
 80060d8:	4639      	mov	r1, r7
 80060da:	2200      	movs	r2, #0
 80060dc:	4b5a      	ldr	r3, [pc, #360]	@ (8006248 <_strtod_l+0xae8>)
 80060de:	f7fa f9fb 	bl	80004d8 <__aeabi_dmul>
 80060e2:	4606      	mov	r6, r0
 80060e4:	460f      	mov	r7, r1
 80060e6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80060ea:	9606      	str	r6, [sp, #24]
 80060ec:	9307      	str	r3, [sp, #28]
 80060ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060f2:	4d52      	ldr	r5, [pc, #328]	@ (800623c <_strtod_l+0xadc>)
 80060f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80060f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060fa:	401d      	ands	r5, r3
 80060fc:	4b53      	ldr	r3, [pc, #332]	@ (800624c <_strtod_l+0xaec>)
 80060fe:	429d      	cmp	r5, r3
 8006100:	f040 80aa 	bne.w	8006258 <_strtod_l+0xaf8>
 8006104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006106:	4650      	mov	r0, sl
 8006108:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800610c:	4659      	mov	r1, fp
 800610e:	f003 f8a7 	bl	8009260 <__ulp>
 8006112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006116:	f7fa f9df 	bl	80004d8 <__aeabi_dmul>
 800611a:	4652      	mov	r2, sl
 800611c:	465b      	mov	r3, fp
 800611e:	f7fa f825 	bl	800016c <__adddf3>
 8006122:	460b      	mov	r3, r1
 8006124:	4945      	ldr	r1, [pc, #276]	@ (800623c <_strtod_l+0xadc>)
 8006126:	4a4a      	ldr	r2, [pc, #296]	@ (8006250 <_strtod_l+0xaf0>)
 8006128:	4019      	ands	r1, r3
 800612a:	4291      	cmp	r1, r2
 800612c:	4682      	mov	sl, r0
 800612e:	d942      	bls.n	80061b6 <_strtod_l+0xa56>
 8006130:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006132:	4b43      	ldr	r3, [pc, #268]	@ (8006240 <_strtod_l+0xae0>)
 8006134:	429a      	cmp	r2, r3
 8006136:	d103      	bne.n	8006140 <_strtod_l+0x9e0>
 8006138:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800613a:	3301      	adds	r3, #1
 800613c:	f43f ad2b 	beq.w	8005b96 <_strtod_l+0x436>
 8006140:	f04f 3aff 	mov.w	sl, #4294967295
 8006144:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006240 <_strtod_l+0xae0>
 8006148:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800614a:	9805      	ldr	r0, [sp, #20]
 800614c:	f002 fd56 	bl	8008bfc <_Bfree>
 8006150:	4649      	mov	r1, r9
 8006152:	9805      	ldr	r0, [sp, #20]
 8006154:	f002 fd52 	bl	8008bfc <_Bfree>
 8006158:	4641      	mov	r1, r8
 800615a:	9805      	ldr	r0, [sp, #20]
 800615c:	f002 fd4e 	bl	8008bfc <_Bfree>
 8006160:	4621      	mov	r1, r4
 8006162:	9805      	ldr	r0, [sp, #20]
 8006164:	f002 fd4a 	bl	8008bfc <_Bfree>
 8006168:	e618      	b.n	8005d9c <_strtod_l+0x63c>
 800616a:	f1ba 0f01 	cmp.w	sl, #1
 800616e:	d103      	bne.n	8006178 <_strtod_l+0xa18>
 8006170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006172:	2b00      	cmp	r3, #0
 8006174:	f43f ada5 	beq.w	8005cc2 <_strtod_l+0x562>
 8006178:	2200      	movs	r2, #0
 800617a:	4b36      	ldr	r3, [pc, #216]	@ (8006254 <_strtod_l+0xaf4>)
 800617c:	2600      	movs	r6, #0
 800617e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006182:	4f30      	ldr	r7, [pc, #192]	@ (8006244 <_strtod_l+0xae4>)
 8006184:	e7b3      	b.n	80060ee <_strtod_l+0x98e>
 8006186:	2600      	movs	r6, #0
 8006188:	4f2f      	ldr	r7, [pc, #188]	@ (8006248 <_strtod_l+0xae8>)
 800618a:	e7ac      	b.n	80060e6 <_strtod_l+0x986>
 800618c:	4630      	mov	r0, r6
 800618e:	4639      	mov	r1, r7
 8006190:	4b2d      	ldr	r3, [pc, #180]	@ (8006248 <_strtod_l+0xae8>)
 8006192:	2200      	movs	r2, #0
 8006194:	f7fa f9a0 	bl	80004d8 <__aeabi_dmul>
 8006198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800619a:	4606      	mov	r6, r0
 800619c:	460f      	mov	r7, r1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0a1      	beq.n	80060e6 <_strtod_l+0x986>
 80061a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80061a6:	e7a2      	b.n	80060ee <_strtod_l+0x98e>
 80061a8:	2200      	movs	r2, #0
 80061aa:	4b26      	ldr	r3, [pc, #152]	@ (8006244 <_strtod_l+0xae4>)
 80061ac:	4616      	mov	r6, r2
 80061ae:	461f      	mov	r7, r3
 80061b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80061b4:	e79b      	b.n	80060ee <_strtod_l+0x98e>
 80061b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80061ba:	9b08      	ldr	r3, [sp, #32]
 80061bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1c1      	bne.n	8006148 <_strtod_l+0x9e8>
 80061c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80061c8:	0d1b      	lsrs	r3, r3, #20
 80061ca:	051b      	lsls	r3, r3, #20
 80061cc:	429d      	cmp	r5, r3
 80061ce:	d1bb      	bne.n	8006148 <_strtod_l+0x9e8>
 80061d0:	4630      	mov	r0, r6
 80061d2:	4639      	mov	r1, r7
 80061d4:	f7fa ffc2 	bl	800115c <__aeabi_d2lz>
 80061d8:	f7fa f950 	bl	800047c <__aeabi_l2d>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4630      	mov	r0, r6
 80061e2:	4639      	mov	r1, r7
 80061e4:	f7f9 ffc0 	bl	8000168 <__aeabi_dsub>
 80061e8:	460b      	mov	r3, r1
 80061ea:	4602      	mov	r2, r0
 80061ec:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80061f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80061f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061f6:	ea46 060a 	orr.w	r6, r6, sl
 80061fa:	431e      	orrs	r6, r3
 80061fc:	d069      	beq.n	80062d2 <_strtod_l+0xb72>
 80061fe:	a30a      	add	r3, pc, #40	@ (adr r3, 8006228 <_strtod_l+0xac8>)
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	f7fa fbda 	bl	80009bc <__aeabi_dcmplt>
 8006208:	2800      	cmp	r0, #0
 800620a:	f47f accf 	bne.w	8005bac <_strtod_l+0x44c>
 800620e:	a308      	add	r3, pc, #32	@ (adr r3, 8006230 <_strtod_l+0xad0>)
 8006210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006214:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006218:	f7fa fbee 	bl	80009f8 <__aeabi_dcmpgt>
 800621c:	2800      	cmp	r0, #0
 800621e:	d093      	beq.n	8006148 <_strtod_l+0x9e8>
 8006220:	e4c4      	b.n	8005bac <_strtod_l+0x44c>
 8006222:	bf00      	nop
 8006224:	f3af 8000 	nop.w
 8006228:	94a03595 	.word	0x94a03595
 800622c:	3fdfffff 	.word	0x3fdfffff
 8006230:	35afe535 	.word	0x35afe535
 8006234:	3fe00000 	.word	0x3fe00000
 8006238:	000fffff 	.word	0x000fffff
 800623c:	7ff00000 	.word	0x7ff00000
 8006240:	7fefffff 	.word	0x7fefffff
 8006244:	3ff00000 	.word	0x3ff00000
 8006248:	3fe00000 	.word	0x3fe00000
 800624c:	7fe00000 	.word	0x7fe00000
 8006250:	7c9fffff 	.word	0x7c9fffff
 8006254:	bff00000 	.word	0xbff00000
 8006258:	9b08      	ldr	r3, [sp, #32]
 800625a:	b323      	cbz	r3, 80062a6 <_strtod_l+0xb46>
 800625c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006260:	d821      	bhi.n	80062a6 <_strtod_l+0xb46>
 8006262:	a327      	add	r3, pc, #156	@ (adr r3, 8006300 <_strtod_l+0xba0>)
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	4630      	mov	r0, r6
 800626a:	4639      	mov	r1, r7
 800626c:	f7fa fbb0 	bl	80009d0 <__aeabi_dcmple>
 8006270:	b1a0      	cbz	r0, 800629c <_strtod_l+0xb3c>
 8006272:	4639      	mov	r1, r7
 8006274:	4630      	mov	r0, r6
 8006276:	f7fa fc07 	bl	8000a88 <__aeabi_d2uiz>
 800627a:	2801      	cmp	r0, #1
 800627c:	bf38      	it	cc
 800627e:	2001      	movcc	r0, #1
 8006280:	f7fa f8b0 	bl	80003e4 <__aeabi_ui2d>
 8006284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006286:	4606      	mov	r6, r0
 8006288:	460f      	mov	r7, r1
 800628a:	b9fb      	cbnz	r3, 80062cc <_strtod_l+0xb6c>
 800628c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006290:	9014      	str	r0, [sp, #80]	@ 0x50
 8006292:	9315      	str	r3, [sp, #84]	@ 0x54
 8006294:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006298:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800629c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800629e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80062a2:	1b5b      	subs	r3, r3, r5
 80062a4:	9311      	str	r3, [sp, #68]	@ 0x44
 80062a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062aa:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80062ae:	f002 ffd7 	bl	8009260 <__ulp>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4650      	mov	r0, sl
 80062b8:	4659      	mov	r1, fp
 80062ba:	f7fa f90d 	bl	80004d8 <__aeabi_dmul>
 80062be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80062c2:	f7f9 ff53 	bl	800016c <__adddf3>
 80062c6:	4682      	mov	sl, r0
 80062c8:	468b      	mov	fp, r1
 80062ca:	e776      	b.n	80061ba <_strtod_l+0xa5a>
 80062cc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80062d0:	e7e0      	b.n	8006294 <_strtod_l+0xb34>
 80062d2:	a30d      	add	r3, pc, #52	@ (adr r3, 8006308 <_strtod_l+0xba8>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f7fa fb70 	bl	80009bc <__aeabi_dcmplt>
 80062dc:	e79e      	b.n	800621c <_strtod_l+0xabc>
 80062de:	2300      	movs	r3, #0
 80062e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80062e4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	f7ff ba77 	b.w	80057da <_strtod_l+0x7a>
 80062ec:	2a65      	cmp	r2, #101	@ 0x65
 80062ee:	f43f ab6e 	beq.w	80059ce <_strtod_l+0x26e>
 80062f2:	2a45      	cmp	r2, #69	@ 0x45
 80062f4:	f43f ab6b 	beq.w	80059ce <_strtod_l+0x26e>
 80062f8:	2301      	movs	r3, #1
 80062fa:	f7ff bba6 	b.w	8005a4a <_strtod_l+0x2ea>
 80062fe:	bf00      	nop
 8006300:	ffc00000 	.word	0xffc00000
 8006304:	41dfffff 	.word	0x41dfffff
 8006308:	94a03595 	.word	0x94a03595
 800630c:	3fcfffff 	.word	0x3fcfffff

08006310 <_strtod_r>:
 8006310:	4b01      	ldr	r3, [pc, #4]	@ (8006318 <_strtod_r+0x8>)
 8006312:	f7ff ba25 	b.w	8005760 <_strtod_l>
 8006316:	bf00      	nop
 8006318:	2000013c 	.word	0x2000013c

0800631c <_strtol_l.constprop.0>:
 800631c:	2b24      	cmp	r3, #36	@ 0x24
 800631e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006322:	4686      	mov	lr, r0
 8006324:	4690      	mov	r8, r2
 8006326:	d801      	bhi.n	800632c <_strtol_l.constprop.0+0x10>
 8006328:	2b01      	cmp	r3, #1
 800632a:	d106      	bne.n	800633a <_strtol_l.constprop.0+0x1e>
 800632c:	f001 f91a 	bl	8007564 <__errno>
 8006330:	2316      	movs	r3, #22
 8006332:	6003      	str	r3, [r0, #0]
 8006334:	2000      	movs	r0, #0
 8006336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633a:	460d      	mov	r5, r1
 800633c:	4833      	ldr	r0, [pc, #204]	@ (800640c <_strtol_l.constprop.0+0xf0>)
 800633e:	462a      	mov	r2, r5
 8006340:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006344:	5d06      	ldrb	r6, [r0, r4]
 8006346:	f016 0608 	ands.w	r6, r6, #8
 800634a:	d1f8      	bne.n	800633e <_strtol_l.constprop.0+0x22>
 800634c:	2c2d      	cmp	r4, #45	@ 0x2d
 800634e:	d12d      	bne.n	80063ac <_strtol_l.constprop.0+0x90>
 8006350:	2601      	movs	r6, #1
 8006352:	782c      	ldrb	r4, [r5, #0]
 8006354:	1c95      	adds	r5, r2, #2
 8006356:	f033 0210 	bics.w	r2, r3, #16
 800635a:	d109      	bne.n	8006370 <_strtol_l.constprop.0+0x54>
 800635c:	2c30      	cmp	r4, #48	@ 0x30
 800635e:	d12a      	bne.n	80063b6 <_strtol_l.constprop.0+0x9a>
 8006360:	782a      	ldrb	r2, [r5, #0]
 8006362:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006366:	2a58      	cmp	r2, #88	@ 0x58
 8006368:	d125      	bne.n	80063b6 <_strtol_l.constprop.0+0x9a>
 800636a:	2310      	movs	r3, #16
 800636c:	786c      	ldrb	r4, [r5, #1]
 800636e:	3502      	adds	r5, #2
 8006370:	2200      	movs	r2, #0
 8006372:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006376:	f10c 3cff 	add.w	ip, ip, #4294967295
 800637a:	fbbc f9f3 	udiv	r9, ip, r3
 800637e:	4610      	mov	r0, r2
 8006380:	fb03 ca19 	mls	sl, r3, r9, ip
 8006384:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006388:	2f09      	cmp	r7, #9
 800638a:	d81b      	bhi.n	80063c4 <_strtol_l.constprop.0+0xa8>
 800638c:	463c      	mov	r4, r7
 800638e:	42a3      	cmp	r3, r4
 8006390:	dd27      	ble.n	80063e2 <_strtol_l.constprop.0+0xc6>
 8006392:	1c57      	adds	r7, r2, #1
 8006394:	d007      	beq.n	80063a6 <_strtol_l.constprop.0+0x8a>
 8006396:	4581      	cmp	r9, r0
 8006398:	d320      	bcc.n	80063dc <_strtol_l.constprop.0+0xc0>
 800639a:	d101      	bne.n	80063a0 <_strtol_l.constprop.0+0x84>
 800639c:	45a2      	cmp	sl, r4
 800639e:	db1d      	blt.n	80063dc <_strtol_l.constprop.0+0xc0>
 80063a0:	2201      	movs	r2, #1
 80063a2:	fb00 4003 	mla	r0, r0, r3, r4
 80063a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063aa:	e7eb      	b.n	8006384 <_strtol_l.constprop.0+0x68>
 80063ac:	2c2b      	cmp	r4, #43	@ 0x2b
 80063ae:	bf04      	itt	eq
 80063b0:	782c      	ldrbeq	r4, [r5, #0]
 80063b2:	1c95      	addeq	r5, r2, #2
 80063b4:	e7cf      	b.n	8006356 <_strtol_l.constprop.0+0x3a>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1da      	bne.n	8006370 <_strtol_l.constprop.0+0x54>
 80063ba:	2c30      	cmp	r4, #48	@ 0x30
 80063bc:	bf0c      	ite	eq
 80063be:	2308      	moveq	r3, #8
 80063c0:	230a      	movne	r3, #10
 80063c2:	e7d5      	b.n	8006370 <_strtol_l.constprop.0+0x54>
 80063c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80063c8:	2f19      	cmp	r7, #25
 80063ca:	d801      	bhi.n	80063d0 <_strtol_l.constprop.0+0xb4>
 80063cc:	3c37      	subs	r4, #55	@ 0x37
 80063ce:	e7de      	b.n	800638e <_strtol_l.constprop.0+0x72>
 80063d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80063d4:	2f19      	cmp	r7, #25
 80063d6:	d804      	bhi.n	80063e2 <_strtol_l.constprop.0+0xc6>
 80063d8:	3c57      	subs	r4, #87	@ 0x57
 80063da:	e7d8      	b.n	800638e <_strtol_l.constprop.0+0x72>
 80063dc:	f04f 32ff 	mov.w	r2, #4294967295
 80063e0:	e7e1      	b.n	80063a6 <_strtol_l.constprop.0+0x8a>
 80063e2:	1c53      	adds	r3, r2, #1
 80063e4:	d108      	bne.n	80063f8 <_strtol_l.constprop.0+0xdc>
 80063e6:	2322      	movs	r3, #34	@ 0x22
 80063e8:	4660      	mov	r0, ip
 80063ea:	f8ce 3000 	str.w	r3, [lr]
 80063ee:	f1b8 0f00 	cmp.w	r8, #0
 80063f2:	d0a0      	beq.n	8006336 <_strtol_l.constprop.0+0x1a>
 80063f4:	1e69      	subs	r1, r5, #1
 80063f6:	e006      	b.n	8006406 <_strtol_l.constprop.0+0xea>
 80063f8:	b106      	cbz	r6, 80063fc <_strtol_l.constprop.0+0xe0>
 80063fa:	4240      	negs	r0, r0
 80063fc:	f1b8 0f00 	cmp.w	r8, #0
 8006400:	d099      	beq.n	8006336 <_strtol_l.constprop.0+0x1a>
 8006402:	2a00      	cmp	r2, #0
 8006404:	d1f6      	bne.n	80063f4 <_strtol_l.constprop.0+0xd8>
 8006406:	f8c8 1000 	str.w	r1, [r8]
 800640a:	e794      	b.n	8006336 <_strtol_l.constprop.0+0x1a>
 800640c:	0800ad19 	.word	0x0800ad19

08006410 <_strtol_r>:
 8006410:	f7ff bf84 	b.w	800631c <_strtol_l.constprop.0>

08006414 <strtol>:
 8006414:	4613      	mov	r3, r2
 8006416:	460a      	mov	r2, r1
 8006418:	4601      	mov	r1, r0
 800641a:	4802      	ldr	r0, [pc, #8]	@ (8006424 <strtol+0x10>)
 800641c:	6800      	ldr	r0, [r0, #0]
 800641e:	f7ff bf7d 	b.w	800631c <_strtol_l.constprop.0>
 8006422:	bf00      	nop
 8006424:	200002a8 	.word	0x200002a8

08006428 <__cvt>:
 8006428:	2b00      	cmp	r3, #0
 800642a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800642e:	461d      	mov	r5, r3
 8006430:	bfbb      	ittet	lt
 8006432:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006436:	461d      	movlt	r5, r3
 8006438:	2300      	movge	r3, #0
 800643a:	232d      	movlt	r3, #45	@ 0x2d
 800643c:	b088      	sub	sp, #32
 800643e:	4614      	mov	r4, r2
 8006440:	bfb8      	it	lt
 8006442:	4614      	movlt	r4, r2
 8006444:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006446:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006448:	7013      	strb	r3, [r2, #0]
 800644a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800644c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006450:	f023 0820 	bic.w	r8, r3, #32
 8006454:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006458:	d005      	beq.n	8006466 <__cvt+0x3e>
 800645a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800645e:	d100      	bne.n	8006462 <__cvt+0x3a>
 8006460:	3601      	adds	r6, #1
 8006462:	2302      	movs	r3, #2
 8006464:	e000      	b.n	8006468 <__cvt+0x40>
 8006466:	2303      	movs	r3, #3
 8006468:	aa07      	add	r2, sp, #28
 800646a:	9204      	str	r2, [sp, #16]
 800646c:	aa06      	add	r2, sp, #24
 800646e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006472:	e9cd 3600 	strd	r3, r6, [sp]
 8006476:	4622      	mov	r2, r4
 8006478:	462b      	mov	r3, r5
 800647a:	f001 f96d 	bl	8007758 <_dtoa_r>
 800647e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006482:	4607      	mov	r7, r0
 8006484:	d119      	bne.n	80064ba <__cvt+0x92>
 8006486:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006488:	07db      	lsls	r3, r3, #31
 800648a:	d50e      	bpl.n	80064aa <__cvt+0x82>
 800648c:	eb00 0906 	add.w	r9, r0, r6
 8006490:	2200      	movs	r2, #0
 8006492:	2300      	movs	r3, #0
 8006494:	4620      	mov	r0, r4
 8006496:	4629      	mov	r1, r5
 8006498:	f7fa fa86 	bl	80009a8 <__aeabi_dcmpeq>
 800649c:	b108      	cbz	r0, 80064a2 <__cvt+0x7a>
 800649e:	f8cd 901c 	str.w	r9, [sp, #28]
 80064a2:	2230      	movs	r2, #48	@ 0x30
 80064a4:	9b07      	ldr	r3, [sp, #28]
 80064a6:	454b      	cmp	r3, r9
 80064a8:	d31e      	bcc.n	80064e8 <__cvt+0xc0>
 80064aa:	4638      	mov	r0, r7
 80064ac:	9b07      	ldr	r3, [sp, #28]
 80064ae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80064b0:	1bdb      	subs	r3, r3, r7
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	b008      	add	sp, #32
 80064b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064be:	eb00 0906 	add.w	r9, r0, r6
 80064c2:	d1e5      	bne.n	8006490 <__cvt+0x68>
 80064c4:	7803      	ldrb	r3, [r0, #0]
 80064c6:	2b30      	cmp	r3, #48	@ 0x30
 80064c8:	d10a      	bne.n	80064e0 <__cvt+0xb8>
 80064ca:	2200      	movs	r2, #0
 80064cc:	2300      	movs	r3, #0
 80064ce:	4620      	mov	r0, r4
 80064d0:	4629      	mov	r1, r5
 80064d2:	f7fa fa69 	bl	80009a8 <__aeabi_dcmpeq>
 80064d6:	b918      	cbnz	r0, 80064e0 <__cvt+0xb8>
 80064d8:	f1c6 0601 	rsb	r6, r6, #1
 80064dc:	f8ca 6000 	str.w	r6, [sl]
 80064e0:	f8da 3000 	ldr.w	r3, [sl]
 80064e4:	4499      	add	r9, r3
 80064e6:	e7d3      	b.n	8006490 <__cvt+0x68>
 80064e8:	1c59      	adds	r1, r3, #1
 80064ea:	9107      	str	r1, [sp, #28]
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	e7d9      	b.n	80064a4 <__cvt+0x7c>

080064f0 <__exponent>:
 80064f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064f2:	2900      	cmp	r1, #0
 80064f4:	bfb6      	itet	lt
 80064f6:	232d      	movlt	r3, #45	@ 0x2d
 80064f8:	232b      	movge	r3, #43	@ 0x2b
 80064fa:	4249      	neglt	r1, r1
 80064fc:	2909      	cmp	r1, #9
 80064fe:	7002      	strb	r2, [r0, #0]
 8006500:	7043      	strb	r3, [r0, #1]
 8006502:	dd29      	ble.n	8006558 <__exponent+0x68>
 8006504:	f10d 0307 	add.w	r3, sp, #7
 8006508:	461d      	mov	r5, r3
 800650a:	270a      	movs	r7, #10
 800650c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006510:	461a      	mov	r2, r3
 8006512:	fb07 1416 	mls	r4, r7, r6, r1
 8006516:	3430      	adds	r4, #48	@ 0x30
 8006518:	f802 4c01 	strb.w	r4, [r2, #-1]
 800651c:	460c      	mov	r4, r1
 800651e:	2c63      	cmp	r4, #99	@ 0x63
 8006520:	4631      	mov	r1, r6
 8006522:	f103 33ff 	add.w	r3, r3, #4294967295
 8006526:	dcf1      	bgt.n	800650c <__exponent+0x1c>
 8006528:	3130      	adds	r1, #48	@ 0x30
 800652a:	1e94      	subs	r4, r2, #2
 800652c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006530:	4623      	mov	r3, r4
 8006532:	1c41      	adds	r1, r0, #1
 8006534:	42ab      	cmp	r3, r5
 8006536:	d30a      	bcc.n	800654e <__exponent+0x5e>
 8006538:	f10d 0309 	add.w	r3, sp, #9
 800653c:	1a9b      	subs	r3, r3, r2
 800653e:	42ac      	cmp	r4, r5
 8006540:	bf88      	it	hi
 8006542:	2300      	movhi	r3, #0
 8006544:	3302      	adds	r3, #2
 8006546:	4403      	add	r3, r0
 8006548:	1a18      	subs	r0, r3, r0
 800654a:	b003      	add	sp, #12
 800654c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800654e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006552:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006556:	e7ed      	b.n	8006534 <__exponent+0x44>
 8006558:	2330      	movs	r3, #48	@ 0x30
 800655a:	3130      	adds	r1, #48	@ 0x30
 800655c:	7083      	strb	r3, [r0, #2]
 800655e:	70c1      	strb	r1, [r0, #3]
 8006560:	1d03      	adds	r3, r0, #4
 8006562:	e7f1      	b.n	8006548 <__exponent+0x58>

08006564 <_printf_float>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	b091      	sub	sp, #68	@ 0x44
 800656a:	460c      	mov	r4, r1
 800656c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006570:	4616      	mov	r6, r2
 8006572:	461f      	mov	r7, r3
 8006574:	4605      	mov	r5, r0
 8006576:	f000 ffab 	bl	80074d0 <_localeconv_r>
 800657a:	6803      	ldr	r3, [r0, #0]
 800657c:	4618      	mov	r0, r3
 800657e:	9308      	str	r3, [sp, #32]
 8006580:	f7f9 fde6 	bl	8000150 <strlen>
 8006584:	2300      	movs	r3, #0
 8006586:	930e      	str	r3, [sp, #56]	@ 0x38
 8006588:	f8d8 3000 	ldr.w	r3, [r8]
 800658c:	9009      	str	r0, [sp, #36]	@ 0x24
 800658e:	3307      	adds	r3, #7
 8006590:	f023 0307 	bic.w	r3, r3, #7
 8006594:	f103 0208 	add.w	r2, r3, #8
 8006598:	f894 a018 	ldrb.w	sl, [r4, #24]
 800659c:	f8d4 b000 	ldr.w	fp, [r4]
 80065a0:	f8c8 2000 	str.w	r2, [r8]
 80065a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80065ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065ae:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80065b2:	f04f 32ff 	mov.w	r2, #4294967295
 80065b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80065ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80065be:	4b9c      	ldr	r3, [pc, #624]	@ (8006830 <_printf_float+0x2cc>)
 80065c0:	f7fa fa24 	bl	8000a0c <__aeabi_dcmpun>
 80065c4:	bb70      	cbnz	r0, 8006624 <_printf_float+0xc0>
 80065c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80065ca:	f04f 32ff 	mov.w	r2, #4294967295
 80065ce:	4b98      	ldr	r3, [pc, #608]	@ (8006830 <_printf_float+0x2cc>)
 80065d0:	f7fa f9fe 	bl	80009d0 <__aeabi_dcmple>
 80065d4:	bb30      	cbnz	r0, 8006624 <_printf_float+0xc0>
 80065d6:	2200      	movs	r2, #0
 80065d8:	2300      	movs	r3, #0
 80065da:	4640      	mov	r0, r8
 80065dc:	4649      	mov	r1, r9
 80065de:	f7fa f9ed 	bl	80009bc <__aeabi_dcmplt>
 80065e2:	b110      	cbz	r0, 80065ea <_printf_float+0x86>
 80065e4:	232d      	movs	r3, #45	@ 0x2d
 80065e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065ea:	4a92      	ldr	r2, [pc, #584]	@ (8006834 <_printf_float+0x2d0>)
 80065ec:	4b92      	ldr	r3, [pc, #584]	@ (8006838 <_printf_float+0x2d4>)
 80065ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80065f2:	bf94      	ite	ls
 80065f4:	4690      	movls	r8, r2
 80065f6:	4698      	movhi	r8, r3
 80065f8:	2303      	movs	r3, #3
 80065fa:	f04f 0900 	mov.w	r9, #0
 80065fe:	6123      	str	r3, [r4, #16]
 8006600:	f02b 0304 	bic.w	r3, fp, #4
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	4633      	mov	r3, r6
 8006608:	4621      	mov	r1, r4
 800660a:	4628      	mov	r0, r5
 800660c:	9700      	str	r7, [sp, #0]
 800660e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006610:	f000 f9d4 	bl	80069bc <_printf_common>
 8006614:	3001      	adds	r0, #1
 8006616:	f040 8090 	bne.w	800673a <_printf_float+0x1d6>
 800661a:	f04f 30ff 	mov.w	r0, #4294967295
 800661e:	b011      	add	sp, #68	@ 0x44
 8006620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006624:	4642      	mov	r2, r8
 8006626:	464b      	mov	r3, r9
 8006628:	4640      	mov	r0, r8
 800662a:	4649      	mov	r1, r9
 800662c:	f7fa f9ee 	bl	8000a0c <__aeabi_dcmpun>
 8006630:	b148      	cbz	r0, 8006646 <_printf_float+0xe2>
 8006632:	464b      	mov	r3, r9
 8006634:	2b00      	cmp	r3, #0
 8006636:	bfb8      	it	lt
 8006638:	232d      	movlt	r3, #45	@ 0x2d
 800663a:	4a80      	ldr	r2, [pc, #512]	@ (800683c <_printf_float+0x2d8>)
 800663c:	bfb8      	it	lt
 800663e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006642:	4b7f      	ldr	r3, [pc, #508]	@ (8006840 <_printf_float+0x2dc>)
 8006644:	e7d3      	b.n	80065ee <_printf_float+0x8a>
 8006646:	6863      	ldr	r3, [r4, #4]
 8006648:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	d13f      	bne.n	80066d0 <_printf_float+0x16c>
 8006650:	2306      	movs	r3, #6
 8006652:	6063      	str	r3, [r4, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800665a:	6023      	str	r3, [r4, #0]
 800665c:	9206      	str	r2, [sp, #24]
 800665e:	aa0e      	add	r2, sp, #56	@ 0x38
 8006660:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006664:	aa0d      	add	r2, sp, #52	@ 0x34
 8006666:	9203      	str	r2, [sp, #12]
 8006668:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800666c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006670:	6863      	ldr	r3, [r4, #4]
 8006672:	4642      	mov	r2, r8
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	4628      	mov	r0, r5
 8006678:	464b      	mov	r3, r9
 800667a:	910a      	str	r1, [sp, #40]	@ 0x28
 800667c:	f7ff fed4 	bl	8006428 <__cvt>
 8006680:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006682:	4680      	mov	r8, r0
 8006684:	2947      	cmp	r1, #71	@ 0x47
 8006686:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006688:	d128      	bne.n	80066dc <_printf_float+0x178>
 800668a:	1cc8      	adds	r0, r1, #3
 800668c:	db02      	blt.n	8006694 <_printf_float+0x130>
 800668e:	6863      	ldr	r3, [r4, #4]
 8006690:	4299      	cmp	r1, r3
 8006692:	dd40      	ble.n	8006716 <_printf_float+0x1b2>
 8006694:	f1aa 0a02 	sub.w	sl, sl, #2
 8006698:	fa5f fa8a 	uxtb.w	sl, sl
 800669c:	4652      	mov	r2, sl
 800669e:	3901      	subs	r1, #1
 80066a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80066a4:	910d      	str	r1, [sp, #52]	@ 0x34
 80066a6:	f7ff ff23 	bl	80064f0 <__exponent>
 80066aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066ac:	4681      	mov	r9, r0
 80066ae:	1813      	adds	r3, r2, r0
 80066b0:	2a01      	cmp	r2, #1
 80066b2:	6123      	str	r3, [r4, #16]
 80066b4:	dc02      	bgt.n	80066bc <_printf_float+0x158>
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	07d2      	lsls	r2, r2, #31
 80066ba:	d501      	bpl.n	80066c0 <_printf_float+0x15c>
 80066bc:	3301      	adds	r3, #1
 80066be:	6123      	str	r3, [r4, #16]
 80066c0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d09e      	beq.n	8006606 <_printf_float+0xa2>
 80066c8:	232d      	movs	r3, #45	@ 0x2d
 80066ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066ce:	e79a      	b.n	8006606 <_printf_float+0xa2>
 80066d0:	2947      	cmp	r1, #71	@ 0x47
 80066d2:	d1bf      	bne.n	8006654 <_printf_float+0xf0>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1bd      	bne.n	8006654 <_printf_float+0xf0>
 80066d8:	2301      	movs	r3, #1
 80066da:	e7ba      	b.n	8006652 <_printf_float+0xee>
 80066dc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066e0:	d9dc      	bls.n	800669c <_printf_float+0x138>
 80066e2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80066e6:	d118      	bne.n	800671a <_printf_float+0x1b6>
 80066e8:	2900      	cmp	r1, #0
 80066ea:	6863      	ldr	r3, [r4, #4]
 80066ec:	dd0b      	ble.n	8006706 <_printf_float+0x1a2>
 80066ee:	6121      	str	r1, [r4, #16]
 80066f0:	b913      	cbnz	r3, 80066f8 <_printf_float+0x194>
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	07d0      	lsls	r0, r2, #31
 80066f6:	d502      	bpl.n	80066fe <_printf_float+0x19a>
 80066f8:	3301      	adds	r3, #1
 80066fa:	440b      	add	r3, r1
 80066fc:	6123      	str	r3, [r4, #16]
 80066fe:	f04f 0900 	mov.w	r9, #0
 8006702:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006704:	e7dc      	b.n	80066c0 <_printf_float+0x15c>
 8006706:	b913      	cbnz	r3, 800670e <_printf_float+0x1aa>
 8006708:	6822      	ldr	r2, [r4, #0]
 800670a:	07d2      	lsls	r2, r2, #31
 800670c:	d501      	bpl.n	8006712 <_printf_float+0x1ae>
 800670e:	3302      	adds	r3, #2
 8006710:	e7f4      	b.n	80066fc <_printf_float+0x198>
 8006712:	2301      	movs	r3, #1
 8006714:	e7f2      	b.n	80066fc <_printf_float+0x198>
 8006716:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800671a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800671c:	4299      	cmp	r1, r3
 800671e:	db05      	blt.n	800672c <_printf_float+0x1c8>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	6121      	str	r1, [r4, #16]
 8006724:	07d8      	lsls	r0, r3, #31
 8006726:	d5ea      	bpl.n	80066fe <_printf_float+0x19a>
 8006728:	1c4b      	adds	r3, r1, #1
 800672a:	e7e7      	b.n	80066fc <_printf_float+0x198>
 800672c:	2900      	cmp	r1, #0
 800672e:	bfcc      	ite	gt
 8006730:	2201      	movgt	r2, #1
 8006732:	f1c1 0202 	rsble	r2, r1, #2
 8006736:	4413      	add	r3, r2
 8006738:	e7e0      	b.n	80066fc <_printf_float+0x198>
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	055a      	lsls	r2, r3, #21
 800673e:	d407      	bmi.n	8006750 <_printf_float+0x1ec>
 8006740:	6923      	ldr	r3, [r4, #16]
 8006742:	4642      	mov	r2, r8
 8006744:	4631      	mov	r1, r6
 8006746:	4628      	mov	r0, r5
 8006748:	47b8      	blx	r7
 800674a:	3001      	adds	r0, #1
 800674c:	d12b      	bne.n	80067a6 <_printf_float+0x242>
 800674e:	e764      	b.n	800661a <_printf_float+0xb6>
 8006750:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006754:	f240 80dc 	bls.w	8006910 <_printf_float+0x3ac>
 8006758:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800675c:	2200      	movs	r2, #0
 800675e:	2300      	movs	r3, #0
 8006760:	f7fa f922 	bl	80009a8 <__aeabi_dcmpeq>
 8006764:	2800      	cmp	r0, #0
 8006766:	d033      	beq.n	80067d0 <_printf_float+0x26c>
 8006768:	2301      	movs	r3, #1
 800676a:	4631      	mov	r1, r6
 800676c:	4628      	mov	r0, r5
 800676e:	4a35      	ldr	r2, [pc, #212]	@ (8006844 <_printf_float+0x2e0>)
 8006770:	47b8      	blx	r7
 8006772:	3001      	adds	r0, #1
 8006774:	f43f af51 	beq.w	800661a <_printf_float+0xb6>
 8006778:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800677c:	4543      	cmp	r3, r8
 800677e:	db02      	blt.n	8006786 <_printf_float+0x222>
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	07d8      	lsls	r0, r3, #31
 8006784:	d50f      	bpl.n	80067a6 <_printf_float+0x242>
 8006786:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800678a:	4631      	mov	r1, r6
 800678c:	4628      	mov	r0, r5
 800678e:	47b8      	blx	r7
 8006790:	3001      	adds	r0, #1
 8006792:	f43f af42 	beq.w	800661a <_printf_float+0xb6>
 8006796:	f04f 0900 	mov.w	r9, #0
 800679a:	f108 38ff 	add.w	r8, r8, #4294967295
 800679e:	f104 0a1a 	add.w	sl, r4, #26
 80067a2:	45c8      	cmp	r8, r9
 80067a4:	dc09      	bgt.n	80067ba <_printf_float+0x256>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	079b      	lsls	r3, r3, #30
 80067aa:	f100 8102 	bmi.w	80069b2 <_printf_float+0x44e>
 80067ae:	68e0      	ldr	r0, [r4, #12]
 80067b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067b2:	4298      	cmp	r0, r3
 80067b4:	bfb8      	it	lt
 80067b6:	4618      	movlt	r0, r3
 80067b8:	e731      	b.n	800661e <_printf_float+0xba>
 80067ba:	2301      	movs	r3, #1
 80067bc:	4652      	mov	r2, sl
 80067be:	4631      	mov	r1, r6
 80067c0:	4628      	mov	r0, r5
 80067c2:	47b8      	blx	r7
 80067c4:	3001      	adds	r0, #1
 80067c6:	f43f af28 	beq.w	800661a <_printf_float+0xb6>
 80067ca:	f109 0901 	add.w	r9, r9, #1
 80067ce:	e7e8      	b.n	80067a2 <_printf_float+0x23e>
 80067d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	dc38      	bgt.n	8006848 <_printf_float+0x2e4>
 80067d6:	2301      	movs	r3, #1
 80067d8:	4631      	mov	r1, r6
 80067da:	4628      	mov	r0, r5
 80067dc:	4a19      	ldr	r2, [pc, #100]	@ (8006844 <_printf_float+0x2e0>)
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	f43f af1a 	beq.w	800661a <_printf_float+0xb6>
 80067e6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80067ea:	ea59 0303 	orrs.w	r3, r9, r3
 80067ee:	d102      	bne.n	80067f6 <_printf_float+0x292>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	07d9      	lsls	r1, r3, #31
 80067f4:	d5d7      	bpl.n	80067a6 <_printf_float+0x242>
 80067f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067fa:	4631      	mov	r1, r6
 80067fc:	4628      	mov	r0, r5
 80067fe:	47b8      	blx	r7
 8006800:	3001      	adds	r0, #1
 8006802:	f43f af0a 	beq.w	800661a <_printf_float+0xb6>
 8006806:	f04f 0a00 	mov.w	sl, #0
 800680a:	f104 0b1a 	add.w	fp, r4, #26
 800680e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006810:	425b      	negs	r3, r3
 8006812:	4553      	cmp	r3, sl
 8006814:	dc01      	bgt.n	800681a <_printf_float+0x2b6>
 8006816:	464b      	mov	r3, r9
 8006818:	e793      	b.n	8006742 <_printf_float+0x1de>
 800681a:	2301      	movs	r3, #1
 800681c:	465a      	mov	r2, fp
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	f43f aef8 	beq.w	800661a <_printf_float+0xb6>
 800682a:	f10a 0a01 	add.w	sl, sl, #1
 800682e:	e7ee      	b.n	800680e <_printf_float+0x2aa>
 8006830:	7fefffff 	.word	0x7fefffff
 8006834:	0800ae19 	.word	0x0800ae19
 8006838:	0800ae1d 	.word	0x0800ae1d
 800683c:	0800ae21 	.word	0x0800ae21
 8006840:	0800ae25 	.word	0x0800ae25
 8006844:	0800b0ff 	.word	0x0800b0ff
 8006848:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800684a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800684e:	4553      	cmp	r3, sl
 8006850:	bfa8      	it	ge
 8006852:	4653      	movge	r3, sl
 8006854:	2b00      	cmp	r3, #0
 8006856:	4699      	mov	r9, r3
 8006858:	dc36      	bgt.n	80068c8 <_printf_float+0x364>
 800685a:	f04f 0b00 	mov.w	fp, #0
 800685e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006862:	f104 021a 	add.w	r2, r4, #26
 8006866:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006868:	930a      	str	r3, [sp, #40]	@ 0x28
 800686a:	eba3 0309 	sub.w	r3, r3, r9
 800686e:	455b      	cmp	r3, fp
 8006870:	dc31      	bgt.n	80068d6 <_printf_float+0x372>
 8006872:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006874:	459a      	cmp	sl, r3
 8006876:	dc3a      	bgt.n	80068ee <_printf_float+0x38a>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	07da      	lsls	r2, r3, #31
 800687c:	d437      	bmi.n	80068ee <_printf_float+0x38a>
 800687e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006880:	ebaa 0903 	sub.w	r9, sl, r3
 8006884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006886:	ebaa 0303 	sub.w	r3, sl, r3
 800688a:	4599      	cmp	r9, r3
 800688c:	bfa8      	it	ge
 800688e:	4699      	movge	r9, r3
 8006890:	f1b9 0f00 	cmp.w	r9, #0
 8006894:	dc33      	bgt.n	80068fe <_printf_float+0x39a>
 8006896:	f04f 0800 	mov.w	r8, #0
 800689a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800689e:	f104 0b1a 	add.w	fp, r4, #26
 80068a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068a4:	ebaa 0303 	sub.w	r3, sl, r3
 80068a8:	eba3 0309 	sub.w	r3, r3, r9
 80068ac:	4543      	cmp	r3, r8
 80068ae:	f77f af7a 	ble.w	80067a6 <_printf_float+0x242>
 80068b2:	2301      	movs	r3, #1
 80068b4:	465a      	mov	r2, fp
 80068b6:	4631      	mov	r1, r6
 80068b8:	4628      	mov	r0, r5
 80068ba:	47b8      	blx	r7
 80068bc:	3001      	adds	r0, #1
 80068be:	f43f aeac 	beq.w	800661a <_printf_float+0xb6>
 80068c2:	f108 0801 	add.w	r8, r8, #1
 80068c6:	e7ec      	b.n	80068a2 <_printf_float+0x33e>
 80068c8:	4642      	mov	r2, r8
 80068ca:	4631      	mov	r1, r6
 80068cc:	4628      	mov	r0, r5
 80068ce:	47b8      	blx	r7
 80068d0:	3001      	adds	r0, #1
 80068d2:	d1c2      	bne.n	800685a <_printf_float+0x2f6>
 80068d4:	e6a1      	b.n	800661a <_printf_float+0xb6>
 80068d6:	2301      	movs	r3, #1
 80068d8:	4631      	mov	r1, r6
 80068da:	4628      	mov	r0, r5
 80068dc:	920a      	str	r2, [sp, #40]	@ 0x28
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f ae9a 	beq.w	800661a <_printf_float+0xb6>
 80068e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80068e8:	f10b 0b01 	add.w	fp, fp, #1
 80068ec:	e7bb      	b.n	8006866 <_printf_float+0x302>
 80068ee:	4631      	mov	r1, r6
 80068f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b8      	blx	r7
 80068f8:	3001      	adds	r0, #1
 80068fa:	d1c0      	bne.n	800687e <_printf_float+0x31a>
 80068fc:	e68d      	b.n	800661a <_printf_float+0xb6>
 80068fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006900:	464b      	mov	r3, r9
 8006902:	4631      	mov	r1, r6
 8006904:	4628      	mov	r0, r5
 8006906:	4442      	add	r2, r8
 8006908:	47b8      	blx	r7
 800690a:	3001      	adds	r0, #1
 800690c:	d1c3      	bne.n	8006896 <_printf_float+0x332>
 800690e:	e684      	b.n	800661a <_printf_float+0xb6>
 8006910:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006914:	f1ba 0f01 	cmp.w	sl, #1
 8006918:	dc01      	bgt.n	800691e <_printf_float+0x3ba>
 800691a:	07db      	lsls	r3, r3, #31
 800691c:	d536      	bpl.n	800698c <_printf_float+0x428>
 800691e:	2301      	movs	r3, #1
 8006920:	4642      	mov	r2, r8
 8006922:	4631      	mov	r1, r6
 8006924:	4628      	mov	r0, r5
 8006926:	47b8      	blx	r7
 8006928:	3001      	adds	r0, #1
 800692a:	f43f ae76 	beq.w	800661a <_printf_float+0xb6>
 800692e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006932:	4631      	mov	r1, r6
 8006934:	4628      	mov	r0, r5
 8006936:	47b8      	blx	r7
 8006938:	3001      	adds	r0, #1
 800693a:	f43f ae6e 	beq.w	800661a <_printf_float+0xb6>
 800693e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006942:	2200      	movs	r2, #0
 8006944:	2300      	movs	r3, #0
 8006946:	f10a 3aff 	add.w	sl, sl, #4294967295
 800694a:	f7fa f82d 	bl	80009a8 <__aeabi_dcmpeq>
 800694e:	b9c0      	cbnz	r0, 8006982 <_printf_float+0x41e>
 8006950:	4653      	mov	r3, sl
 8006952:	f108 0201 	add.w	r2, r8, #1
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	47b8      	blx	r7
 800695c:	3001      	adds	r0, #1
 800695e:	d10c      	bne.n	800697a <_printf_float+0x416>
 8006960:	e65b      	b.n	800661a <_printf_float+0xb6>
 8006962:	2301      	movs	r3, #1
 8006964:	465a      	mov	r2, fp
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	f43f ae54 	beq.w	800661a <_printf_float+0xb6>
 8006972:	f108 0801 	add.w	r8, r8, #1
 8006976:	45d0      	cmp	r8, sl
 8006978:	dbf3      	blt.n	8006962 <_printf_float+0x3fe>
 800697a:	464b      	mov	r3, r9
 800697c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006980:	e6e0      	b.n	8006744 <_printf_float+0x1e0>
 8006982:	f04f 0800 	mov.w	r8, #0
 8006986:	f104 0b1a 	add.w	fp, r4, #26
 800698a:	e7f4      	b.n	8006976 <_printf_float+0x412>
 800698c:	2301      	movs	r3, #1
 800698e:	4642      	mov	r2, r8
 8006990:	e7e1      	b.n	8006956 <_printf_float+0x3f2>
 8006992:	2301      	movs	r3, #1
 8006994:	464a      	mov	r2, r9
 8006996:	4631      	mov	r1, r6
 8006998:	4628      	mov	r0, r5
 800699a:	47b8      	blx	r7
 800699c:	3001      	adds	r0, #1
 800699e:	f43f ae3c 	beq.w	800661a <_printf_float+0xb6>
 80069a2:	f108 0801 	add.w	r8, r8, #1
 80069a6:	68e3      	ldr	r3, [r4, #12]
 80069a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80069aa:	1a5b      	subs	r3, r3, r1
 80069ac:	4543      	cmp	r3, r8
 80069ae:	dcf0      	bgt.n	8006992 <_printf_float+0x42e>
 80069b0:	e6fd      	b.n	80067ae <_printf_float+0x24a>
 80069b2:	f04f 0800 	mov.w	r8, #0
 80069b6:	f104 0919 	add.w	r9, r4, #25
 80069ba:	e7f4      	b.n	80069a6 <_printf_float+0x442>

080069bc <_printf_common>:
 80069bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c0:	4616      	mov	r6, r2
 80069c2:	4698      	mov	r8, r3
 80069c4:	688a      	ldr	r2, [r1, #8]
 80069c6:	690b      	ldr	r3, [r1, #16]
 80069c8:	4607      	mov	r7, r0
 80069ca:	4293      	cmp	r3, r2
 80069cc:	bfb8      	it	lt
 80069ce:	4613      	movlt	r3, r2
 80069d0:	6033      	str	r3, [r6, #0]
 80069d2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069d6:	460c      	mov	r4, r1
 80069d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069dc:	b10a      	cbz	r2, 80069e2 <_printf_common+0x26>
 80069de:	3301      	adds	r3, #1
 80069e0:	6033      	str	r3, [r6, #0]
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	0699      	lsls	r1, r3, #26
 80069e6:	bf42      	ittt	mi
 80069e8:	6833      	ldrmi	r3, [r6, #0]
 80069ea:	3302      	addmi	r3, #2
 80069ec:	6033      	strmi	r3, [r6, #0]
 80069ee:	6825      	ldr	r5, [r4, #0]
 80069f0:	f015 0506 	ands.w	r5, r5, #6
 80069f4:	d106      	bne.n	8006a04 <_printf_common+0x48>
 80069f6:	f104 0a19 	add.w	sl, r4, #25
 80069fa:	68e3      	ldr	r3, [r4, #12]
 80069fc:	6832      	ldr	r2, [r6, #0]
 80069fe:	1a9b      	subs	r3, r3, r2
 8006a00:	42ab      	cmp	r3, r5
 8006a02:	dc2b      	bgt.n	8006a5c <_printf_common+0xa0>
 8006a04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a08:	6822      	ldr	r2, [r4, #0]
 8006a0a:	3b00      	subs	r3, #0
 8006a0c:	bf18      	it	ne
 8006a0e:	2301      	movne	r3, #1
 8006a10:	0692      	lsls	r2, r2, #26
 8006a12:	d430      	bmi.n	8006a76 <_printf_common+0xba>
 8006a14:	4641      	mov	r1, r8
 8006a16:	4638      	mov	r0, r7
 8006a18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a1c:	47c8      	blx	r9
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d023      	beq.n	8006a6a <_printf_common+0xae>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	6922      	ldr	r2, [r4, #16]
 8006a26:	f003 0306 	and.w	r3, r3, #6
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	bf14      	ite	ne
 8006a2e:	2500      	movne	r5, #0
 8006a30:	6833      	ldreq	r3, [r6, #0]
 8006a32:	f04f 0600 	mov.w	r6, #0
 8006a36:	bf08      	it	eq
 8006a38:	68e5      	ldreq	r5, [r4, #12]
 8006a3a:	f104 041a 	add.w	r4, r4, #26
 8006a3e:	bf08      	it	eq
 8006a40:	1aed      	subeq	r5, r5, r3
 8006a42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006a46:	bf08      	it	eq
 8006a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	bfc4      	itt	gt
 8006a50:	1a9b      	subgt	r3, r3, r2
 8006a52:	18ed      	addgt	r5, r5, r3
 8006a54:	42b5      	cmp	r5, r6
 8006a56:	d11a      	bne.n	8006a8e <_printf_common+0xd2>
 8006a58:	2000      	movs	r0, #0
 8006a5a:	e008      	b.n	8006a6e <_printf_common+0xb2>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	4652      	mov	r2, sl
 8006a60:	4641      	mov	r1, r8
 8006a62:	4638      	mov	r0, r7
 8006a64:	47c8      	blx	r9
 8006a66:	3001      	adds	r0, #1
 8006a68:	d103      	bne.n	8006a72 <_printf_common+0xb6>
 8006a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a72:	3501      	adds	r5, #1
 8006a74:	e7c1      	b.n	80069fa <_printf_common+0x3e>
 8006a76:	2030      	movs	r0, #48	@ 0x30
 8006a78:	18e1      	adds	r1, r4, r3
 8006a7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a84:	4422      	add	r2, r4
 8006a86:	3302      	adds	r3, #2
 8006a88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a8c:	e7c2      	b.n	8006a14 <_printf_common+0x58>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4622      	mov	r2, r4
 8006a92:	4641      	mov	r1, r8
 8006a94:	4638      	mov	r0, r7
 8006a96:	47c8      	blx	r9
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d0e6      	beq.n	8006a6a <_printf_common+0xae>
 8006a9c:	3601      	adds	r6, #1
 8006a9e:	e7d9      	b.n	8006a54 <_printf_common+0x98>

08006aa0 <_printf_i>:
 8006aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa4:	7e0f      	ldrb	r7, [r1, #24]
 8006aa6:	4691      	mov	r9, r2
 8006aa8:	2f78      	cmp	r7, #120	@ 0x78
 8006aaa:	4680      	mov	r8, r0
 8006aac:	460c      	mov	r4, r1
 8006aae:	469a      	mov	sl, r3
 8006ab0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ab2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ab6:	d807      	bhi.n	8006ac8 <_printf_i+0x28>
 8006ab8:	2f62      	cmp	r7, #98	@ 0x62
 8006aba:	d80a      	bhi.n	8006ad2 <_printf_i+0x32>
 8006abc:	2f00      	cmp	r7, #0
 8006abe:	f000 80d3 	beq.w	8006c68 <_printf_i+0x1c8>
 8006ac2:	2f58      	cmp	r7, #88	@ 0x58
 8006ac4:	f000 80ba 	beq.w	8006c3c <_printf_i+0x19c>
 8006ac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006acc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ad0:	e03a      	b.n	8006b48 <_printf_i+0xa8>
 8006ad2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ad6:	2b15      	cmp	r3, #21
 8006ad8:	d8f6      	bhi.n	8006ac8 <_printf_i+0x28>
 8006ada:	a101      	add	r1, pc, #4	@ (adr r1, 8006ae0 <_printf_i+0x40>)
 8006adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ae0:	08006b39 	.word	0x08006b39
 8006ae4:	08006b4d 	.word	0x08006b4d
 8006ae8:	08006ac9 	.word	0x08006ac9
 8006aec:	08006ac9 	.word	0x08006ac9
 8006af0:	08006ac9 	.word	0x08006ac9
 8006af4:	08006ac9 	.word	0x08006ac9
 8006af8:	08006b4d 	.word	0x08006b4d
 8006afc:	08006ac9 	.word	0x08006ac9
 8006b00:	08006ac9 	.word	0x08006ac9
 8006b04:	08006ac9 	.word	0x08006ac9
 8006b08:	08006ac9 	.word	0x08006ac9
 8006b0c:	08006c4f 	.word	0x08006c4f
 8006b10:	08006b77 	.word	0x08006b77
 8006b14:	08006c09 	.word	0x08006c09
 8006b18:	08006ac9 	.word	0x08006ac9
 8006b1c:	08006ac9 	.word	0x08006ac9
 8006b20:	08006c71 	.word	0x08006c71
 8006b24:	08006ac9 	.word	0x08006ac9
 8006b28:	08006b77 	.word	0x08006b77
 8006b2c:	08006ac9 	.word	0x08006ac9
 8006b30:	08006ac9 	.word	0x08006ac9
 8006b34:	08006c11 	.word	0x08006c11
 8006b38:	6833      	ldr	r3, [r6, #0]
 8006b3a:	1d1a      	adds	r2, r3, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6032      	str	r2, [r6, #0]
 8006b40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e09e      	b.n	8006c8a <_printf_i+0x1ea>
 8006b4c:	6833      	ldr	r3, [r6, #0]
 8006b4e:	6820      	ldr	r0, [r4, #0]
 8006b50:	1d19      	adds	r1, r3, #4
 8006b52:	6031      	str	r1, [r6, #0]
 8006b54:	0606      	lsls	r6, r0, #24
 8006b56:	d501      	bpl.n	8006b5c <_printf_i+0xbc>
 8006b58:	681d      	ldr	r5, [r3, #0]
 8006b5a:	e003      	b.n	8006b64 <_printf_i+0xc4>
 8006b5c:	0645      	lsls	r5, r0, #25
 8006b5e:	d5fb      	bpl.n	8006b58 <_printf_i+0xb8>
 8006b60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b64:	2d00      	cmp	r5, #0
 8006b66:	da03      	bge.n	8006b70 <_printf_i+0xd0>
 8006b68:	232d      	movs	r3, #45	@ 0x2d
 8006b6a:	426d      	negs	r5, r5
 8006b6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b70:	230a      	movs	r3, #10
 8006b72:	4859      	ldr	r0, [pc, #356]	@ (8006cd8 <_printf_i+0x238>)
 8006b74:	e011      	b.n	8006b9a <_printf_i+0xfa>
 8006b76:	6821      	ldr	r1, [r4, #0]
 8006b78:	6833      	ldr	r3, [r6, #0]
 8006b7a:	0608      	lsls	r0, r1, #24
 8006b7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b80:	d402      	bmi.n	8006b88 <_printf_i+0xe8>
 8006b82:	0649      	lsls	r1, r1, #25
 8006b84:	bf48      	it	mi
 8006b86:	b2ad      	uxthmi	r5, r5
 8006b88:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b8a:	6033      	str	r3, [r6, #0]
 8006b8c:	bf14      	ite	ne
 8006b8e:	230a      	movne	r3, #10
 8006b90:	2308      	moveq	r3, #8
 8006b92:	4851      	ldr	r0, [pc, #324]	@ (8006cd8 <_printf_i+0x238>)
 8006b94:	2100      	movs	r1, #0
 8006b96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b9a:	6866      	ldr	r6, [r4, #4]
 8006b9c:	2e00      	cmp	r6, #0
 8006b9e:	bfa8      	it	ge
 8006ba0:	6821      	ldrge	r1, [r4, #0]
 8006ba2:	60a6      	str	r6, [r4, #8]
 8006ba4:	bfa4      	itt	ge
 8006ba6:	f021 0104 	bicge.w	r1, r1, #4
 8006baa:	6021      	strge	r1, [r4, #0]
 8006bac:	b90d      	cbnz	r5, 8006bb2 <_printf_i+0x112>
 8006bae:	2e00      	cmp	r6, #0
 8006bb0:	d04b      	beq.n	8006c4a <_printf_i+0x1aa>
 8006bb2:	4616      	mov	r6, r2
 8006bb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bb8:	fb03 5711 	mls	r7, r3, r1, r5
 8006bbc:	5dc7      	ldrb	r7, [r0, r7]
 8006bbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bc2:	462f      	mov	r7, r5
 8006bc4:	42bb      	cmp	r3, r7
 8006bc6:	460d      	mov	r5, r1
 8006bc8:	d9f4      	bls.n	8006bb4 <_printf_i+0x114>
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	d10b      	bne.n	8006be6 <_printf_i+0x146>
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	07df      	lsls	r7, r3, #31
 8006bd2:	d508      	bpl.n	8006be6 <_printf_i+0x146>
 8006bd4:	6923      	ldr	r3, [r4, #16]
 8006bd6:	6861      	ldr	r1, [r4, #4]
 8006bd8:	4299      	cmp	r1, r3
 8006bda:	bfde      	ittt	le
 8006bdc:	2330      	movle	r3, #48	@ 0x30
 8006bde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006be2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006be6:	1b92      	subs	r2, r2, r6
 8006be8:	6122      	str	r2, [r4, #16]
 8006bea:	464b      	mov	r3, r9
 8006bec:	4621      	mov	r1, r4
 8006bee:	4640      	mov	r0, r8
 8006bf0:	f8cd a000 	str.w	sl, [sp]
 8006bf4:	aa03      	add	r2, sp, #12
 8006bf6:	f7ff fee1 	bl	80069bc <_printf_common>
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	d14a      	bne.n	8006c94 <_printf_i+0x1f4>
 8006bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006c02:	b004      	add	sp, #16
 8006c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	f043 0320 	orr.w	r3, r3, #32
 8006c0e:	6023      	str	r3, [r4, #0]
 8006c10:	2778      	movs	r7, #120	@ 0x78
 8006c12:	4832      	ldr	r0, [pc, #200]	@ (8006cdc <_printf_i+0x23c>)
 8006c14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	6831      	ldr	r1, [r6, #0]
 8006c1c:	061f      	lsls	r7, r3, #24
 8006c1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c22:	d402      	bmi.n	8006c2a <_printf_i+0x18a>
 8006c24:	065f      	lsls	r7, r3, #25
 8006c26:	bf48      	it	mi
 8006c28:	b2ad      	uxthmi	r5, r5
 8006c2a:	6031      	str	r1, [r6, #0]
 8006c2c:	07d9      	lsls	r1, r3, #31
 8006c2e:	bf44      	itt	mi
 8006c30:	f043 0320 	orrmi.w	r3, r3, #32
 8006c34:	6023      	strmi	r3, [r4, #0]
 8006c36:	b11d      	cbz	r5, 8006c40 <_printf_i+0x1a0>
 8006c38:	2310      	movs	r3, #16
 8006c3a:	e7ab      	b.n	8006b94 <_printf_i+0xf4>
 8006c3c:	4826      	ldr	r0, [pc, #152]	@ (8006cd8 <_printf_i+0x238>)
 8006c3e:	e7e9      	b.n	8006c14 <_printf_i+0x174>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	f023 0320 	bic.w	r3, r3, #32
 8006c46:	6023      	str	r3, [r4, #0]
 8006c48:	e7f6      	b.n	8006c38 <_printf_i+0x198>
 8006c4a:	4616      	mov	r6, r2
 8006c4c:	e7bd      	b.n	8006bca <_printf_i+0x12a>
 8006c4e:	6833      	ldr	r3, [r6, #0]
 8006c50:	6825      	ldr	r5, [r4, #0]
 8006c52:	1d18      	adds	r0, r3, #4
 8006c54:	6961      	ldr	r1, [r4, #20]
 8006c56:	6030      	str	r0, [r6, #0]
 8006c58:	062e      	lsls	r6, r5, #24
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	d501      	bpl.n	8006c62 <_printf_i+0x1c2>
 8006c5e:	6019      	str	r1, [r3, #0]
 8006c60:	e002      	b.n	8006c68 <_printf_i+0x1c8>
 8006c62:	0668      	lsls	r0, r5, #25
 8006c64:	d5fb      	bpl.n	8006c5e <_printf_i+0x1be>
 8006c66:	8019      	strh	r1, [r3, #0]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	4616      	mov	r6, r2
 8006c6c:	6123      	str	r3, [r4, #16]
 8006c6e:	e7bc      	b.n	8006bea <_printf_i+0x14a>
 8006c70:	6833      	ldr	r3, [r6, #0]
 8006c72:	2100      	movs	r1, #0
 8006c74:	1d1a      	adds	r2, r3, #4
 8006c76:	6032      	str	r2, [r6, #0]
 8006c78:	681e      	ldr	r6, [r3, #0]
 8006c7a:	6862      	ldr	r2, [r4, #4]
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	f000 fc9e 	bl	80075be <memchr>
 8006c82:	b108      	cbz	r0, 8006c88 <_printf_i+0x1e8>
 8006c84:	1b80      	subs	r0, r0, r6
 8006c86:	6060      	str	r0, [r4, #4]
 8006c88:	6863      	ldr	r3, [r4, #4]
 8006c8a:	6123      	str	r3, [r4, #16]
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c92:	e7aa      	b.n	8006bea <_printf_i+0x14a>
 8006c94:	4632      	mov	r2, r6
 8006c96:	4649      	mov	r1, r9
 8006c98:	4640      	mov	r0, r8
 8006c9a:	6923      	ldr	r3, [r4, #16]
 8006c9c:	47d0      	blx	sl
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	d0ad      	beq.n	8006bfe <_printf_i+0x15e>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	079b      	lsls	r3, r3, #30
 8006ca6:	d413      	bmi.n	8006cd0 <_printf_i+0x230>
 8006ca8:	68e0      	ldr	r0, [r4, #12]
 8006caa:	9b03      	ldr	r3, [sp, #12]
 8006cac:	4298      	cmp	r0, r3
 8006cae:	bfb8      	it	lt
 8006cb0:	4618      	movlt	r0, r3
 8006cb2:	e7a6      	b.n	8006c02 <_printf_i+0x162>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	4632      	mov	r2, r6
 8006cb8:	4649      	mov	r1, r9
 8006cba:	4640      	mov	r0, r8
 8006cbc:	47d0      	blx	sl
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	d09d      	beq.n	8006bfe <_printf_i+0x15e>
 8006cc2:	3501      	adds	r5, #1
 8006cc4:	68e3      	ldr	r3, [r4, #12]
 8006cc6:	9903      	ldr	r1, [sp, #12]
 8006cc8:	1a5b      	subs	r3, r3, r1
 8006cca:	42ab      	cmp	r3, r5
 8006ccc:	dcf2      	bgt.n	8006cb4 <_printf_i+0x214>
 8006cce:	e7eb      	b.n	8006ca8 <_printf_i+0x208>
 8006cd0:	2500      	movs	r5, #0
 8006cd2:	f104 0619 	add.w	r6, r4, #25
 8006cd6:	e7f5      	b.n	8006cc4 <_printf_i+0x224>
 8006cd8:	0800ae29 	.word	0x0800ae29
 8006cdc:	0800ae3a 	.word	0x0800ae3a

08006ce0 <_scanf_float>:
 8006ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce4:	b087      	sub	sp, #28
 8006ce6:	9303      	str	r3, [sp, #12]
 8006ce8:	688b      	ldr	r3, [r1, #8]
 8006cea:	4617      	mov	r7, r2
 8006cec:	1e5a      	subs	r2, r3, #1
 8006cee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006cf2:	bf82      	ittt	hi
 8006cf4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006cf8:	eb03 0b05 	addhi.w	fp, r3, r5
 8006cfc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006d00:	460a      	mov	r2, r1
 8006d02:	f04f 0500 	mov.w	r5, #0
 8006d06:	bf88      	it	hi
 8006d08:	608b      	strhi	r3, [r1, #8]
 8006d0a:	680b      	ldr	r3, [r1, #0]
 8006d0c:	4680      	mov	r8, r0
 8006d0e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006d12:	f842 3b1c 	str.w	r3, [r2], #28
 8006d16:	460c      	mov	r4, r1
 8006d18:	bf98      	it	ls
 8006d1a:	f04f 0b00 	movls.w	fp, #0
 8006d1e:	4616      	mov	r6, r2
 8006d20:	46aa      	mov	sl, r5
 8006d22:	46a9      	mov	r9, r5
 8006d24:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006d28:	9201      	str	r2, [sp, #4]
 8006d2a:	9502      	str	r5, [sp, #8]
 8006d2c:	68a2      	ldr	r2, [r4, #8]
 8006d2e:	b152      	cbz	r2, 8006d46 <_scanf_float+0x66>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	2b4e      	cmp	r3, #78	@ 0x4e
 8006d36:	d865      	bhi.n	8006e04 <_scanf_float+0x124>
 8006d38:	2b40      	cmp	r3, #64	@ 0x40
 8006d3a:	d83d      	bhi.n	8006db8 <_scanf_float+0xd8>
 8006d3c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006d40:	b2c8      	uxtb	r0, r1
 8006d42:	280e      	cmp	r0, #14
 8006d44:	d93b      	bls.n	8006dbe <_scanf_float+0xde>
 8006d46:	f1b9 0f00 	cmp.w	r9, #0
 8006d4a:	d003      	beq.n	8006d54 <_scanf_float+0x74>
 8006d4c:	6823      	ldr	r3, [r4, #0]
 8006d4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d52:	6023      	str	r3, [r4, #0]
 8006d54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d58:	f1ba 0f01 	cmp.w	sl, #1
 8006d5c:	f200 8118 	bhi.w	8006f90 <_scanf_float+0x2b0>
 8006d60:	9b01      	ldr	r3, [sp, #4]
 8006d62:	429e      	cmp	r6, r3
 8006d64:	f200 8109 	bhi.w	8006f7a <_scanf_float+0x29a>
 8006d68:	2001      	movs	r0, #1
 8006d6a:	b007      	add	sp, #28
 8006d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d70:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006d74:	2a0d      	cmp	r2, #13
 8006d76:	d8e6      	bhi.n	8006d46 <_scanf_float+0x66>
 8006d78:	a101      	add	r1, pc, #4	@ (adr r1, 8006d80 <_scanf_float+0xa0>)
 8006d7a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d7e:	bf00      	nop
 8006d80:	08006ec7 	.word	0x08006ec7
 8006d84:	08006d47 	.word	0x08006d47
 8006d88:	08006d47 	.word	0x08006d47
 8006d8c:	08006d47 	.word	0x08006d47
 8006d90:	08006f27 	.word	0x08006f27
 8006d94:	08006eff 	.word	0x08006eff
 8006d98:	08006d47 	.word	0x08006d47
 8006d9c:	08006d47 	.word	0x08006d47
 8006da0:	08006ed5 	.word	0x08006ed5
 8006da4:	08006d47 	.word	0x08006d47
 8006da8:	08006d47 	.word	0x08006d47
 8006dac:	08006d47 	.word	0x08006d47
 8006db0:	08006d47 	.word	0x08006d47
 8006db4:	08006e8d 	.word	0x08006e8d
 8006db8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006dbc:	e7da      	b.n	8006d74 <_scanf_float+0x94>
 8006dbe:	290e      	cmp	r1, #14
 8006dc0:	d8c1      	bhi.n	8006d46 <_scanf_float+0x66>
 8006dc2:	a001      	add	r0, pc, #4	@ (adr r0, 8006dc8 <_scanf_float+0xe8>)
 8006dc4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006dc8:	08006e7d 	.word	0x08006e7d
 8006dcc:	08006d47 	.word	0x08006d47
 8006dd0:	08006e7d 	.word	0x08006e7d
 8006dd4:	08006f13 	.word	0x08006f13
 8006dd8:	08006d47 	.word	0x08006d47
 8006ddc:	08006e25 	.word	0x08006e25
 8006de0:	08006e63 	.word	0x08006e63
 8006de4:	08006e63 	.word	0x08006e63
 8006de8:	08006e63 	.word	0x08006e63
 8006dec:	08006e63 	.word	0x08006e63
 8006df0:	08006e63 	.word	0x08006e63
 8006df4:	08006e63 	.word	0x08006e63
 8006df8:	08006e63 	.word	0x08006e63
 8006dfc:	08006e63 	.word	0x08006e63
 8006e00:	08006e63 	.word	0x08006e63
 8006e04:	2b6e      	cmp	r3, #110	@ 0x6e
 8006e06:	d809      	bhi.n	8006e1c <_scanf_float+0x13c>
 8006e08:	2b60      	cmp	r3, #96	@ 0x60
 8006e0a:	d8b1      	bhi.n	8006d70 <_scanf_float+0x90>
 8006e0c:	2b54      	cmp	r3, #84	@ 0x54
 8006e0e:	d07b      	beq.n	8006f08 <_scanf_float+0x228>
 8006e10:	2b59      	cmp	r3, #89	@ 0x59
 8006e12:	d198      	bne.n	8006d46 <_scanf_float+0x66>
 8006e14:	2d07      	cmp	r5, #7
 8006e16:	d196      	bne.n	8006d46 <_scanf_float+0x66>
 8006e18:	2508      	movs	r5, #8
 8006e1a:	e02c      	b.n	8006e76 <_scanf_float+0x196>
 8006e1c:	2b74      	cmp	r3, #116	@ 0x74
 8006e1e:	d073      	beq.n	8006f08 <_scanf_float+0x228>
 8006e20:	2b79      	cmp	r3, #121	@ 0x79
 8006e22:	e7f6      	b.n	8006e12 <_scanf_float+0x132>
 8006e24:	6821      	ldr	r1, [r4, #0]
 8006e26:	05c8      	lsls	r0, r1, #23
 8006e28:	d51b      	bpl.n	8006e62 <_scanf_float+0x182>
 8006e2a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006e2e:	6021      	str	r1, [r4, #0]
 8006e30:	f109 0901 	add.w	r9, r9, #1
 8006e34:	f1bb 0f00 	cmp.w	fp, #0
 8006e38:	d003      	beq.n	8006e42 <_scanf_float+0x162>
 8006e3a:	3201      	adds	r2, #1
 8006e3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e40:	60a2      	str	r2, [r4, #8]
 8006e42:	68a3      	ldr	r3, [r4, #8]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	60a3      	str	r3, [r4, #8]
 8006e48:	6923      	ldr	r3, [r4, #16]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	6123      	str	r3, [r4, #16]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	607b      	str	r3, [r7, #4]
 8006e56:	f340 8087 	ble.w	8006f68 <_scanf_float+0x288>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	603b      	str	r3, [r7, #0]
 8006e60:	e764      	b.n	8006d2c <_scanf_float+0x4c>
 8006e62:	eb1a 0105 	adds.w	r1, sl, r5
 8006e66:	f47f af6e 	bne.w	8006d46 <_scanf_float+0x66>
 8006e6a:	460d      	mov	r5, r1
 8006e6c:	468a      	mov	sl, r1
 8006e6e:	6822      	ldr	r2, [r4, #0]
 8006e70:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006e74:	6022      	str	r2, [r4, #0]
 8006e76:	f806 3b01 	strb.w	r3, [r6], #1
 8006e7a:	e7e2      	b.n	8006e42 <_scanf_float+0x162>
 8006e7c:	6822      	ldr	r2, [r4, #0]
 8006e7e:	0610      	lsls	r0, r2, #24
 8006e80:	f57f af61 	bpl.w	8006d46 <_scanf_float+0x66>
 8006e84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e88:	6022      	str	r2, [r4, #0]
 8006e8a:	e7f4      	b.n	8006e76 <_scanf_float+0x196>
 8006e8c:	f1ba 0f00 	cmp.w	sl, #0
 8006e90:	d10e      	bne.n	8006eb0 <_scanf_float+0x1d0>
 8006e92:	f1b9 0f00 	cmp.w	r9, #0
 8006e96:	d10e      	bne.n	8006eb6 <_scanf_float+0x1d6>
 8006e98:	6822      	ldr	r2, [r4, #0]
 8006e9a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e9e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006ea2:	d108      	bne.n	8006eb6 <_scanf_float+0x1d6>
 8006ea4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ea8:	f04f 0a01 	mov.w	sl, #1
 8006eac:	6022      	str	r2, [r4, #0]
 8006eae:	e7e2      	b.n	8006e76 <_scanf_float+0x196>
 8006eb0:	f1ba 0f02 	cmp.w	sl, #2
 8006eb4:	d055      	beq.n	8006f62 <_scanf_float+0x282>
 8006eb6:	2d01      	cmp	r5, #1
 8006eb8:	d002      	beq.n	8006ec0 <_scanf_float+0x1e0>
 8006eba:	2d04      	cmp	r5, #4
 8006ebc:	f47f af43 	bne.w	8006d46 <_scanf_float+0x66>
 8006ec0:	3501      	adds	r5, #1
 8006ec2:	b2ed      	uxtb	r5, r5
 8006ec4:	e7d7      	b.n	8006e76 <_scanf_float+0x196>
 8006ec6:	f1ba 0f01 	cmp.w	sl, #1
 8006eca:	f47f af3c 	bne.w	8006d46 <_scanf_float+0x66>
 8006ece:	f04f 0a02 	mov.w	sl, #2
 8006ed2:	e7d0      	b.n	8006e76 <_scanf_float+0x196>
 8006ed4:	b97d      	cbnz	r5, 8006ef6 <_scanf_float+0x216>
 8006ed6:	f1b9 0f00 	cmp.w	r9, #0
 8006eda:	f47f af37 	bne.w	8006d4c <_scanf_float+0x6c>
 8006ede:	6822      	ldr	r2, [r4, #0]
 8006ee0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006ee4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006ee8:	f040 8103 	bne.w	80070f2 <_scanf_float+0x412>
 8006eec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ef0:	2501      	movs	r5, #1
 8006ef2:	6022      	str	r2, [r4, #0]
 8006ef4:	e7bf      	b.n	8006e76 <_scanf_float+0x196>
 8006ef6:	2d03      	cmp	r5, #3
 8006ef8:	d0e2      	beq.n	8006ec0 <_scanf_float+0x1e0>
 8006efa:	2d05      	cmp	r5, #5
 8006efc:	e7de      	b.n	8006ebc <_scanf_float+0x1dc>
 8006efe:	2d02      	cmp	r5, #2
 8006f00:	f47f af21 	bne.w	8006d46 <_scanf_float+0x66>
 8006f04:	2503      	movs	r5, #3
 8006f06:	e7b6      	b.n	8006e76 <_scanf_float+0x196>
 8006f08:	2d06      	cmp	r5, #6
 8006f0a:	f47f af1c 	bne.w	8006d46 <_scanf_float+0x66>
 8006f0e:	2507      	movs	r5, #7
 8006f10:	e7b1      	b.n	8006e76 <_scanf_float+0x196>
 8006f12:	6822      	ldr	r2, [r4, #0]
 8006f14:	0591      	lsls	r1, r2, #22
 8006f16:	f57f af16 	bpl.w	8006d46 <_scanf_float+0x66>
 8006f1a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006f1e:	6022      	str	r2, [r4, #0]
 8006f20:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f24:	e7a7      	b.n	8006e76 <_scanf_float+0x196>
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006f2c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006f30:	d006      	beq.n	8006f40 <_scanf_float+0x260>
 8006f32:	0550      	lsls	r0, r2, #21
 8006f34:	f57f af07 	bpl.w	8006d46 <_scanf_float+0x66>
 8006f38:	f1b9 0f00 	cmp.w	r9, #0
 8006f3c:	f000 80d9 	beq.w	80070f2 <_scanf_float+0x412>
 8006f40:	0591      	lsls	r1, r2, #22
 8006f42:	bf58      	it	pl
 8006f44:	9902      	ldrpl	r1, [sp, #8]
 8006f46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f4a:	bf58      	it	pl
 8006f4c:	eba9 0101 	subpl.w	r1, r9, r1
 8006f50:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006f54:	f04f 0900 	mov.w	r9, #0
 8006f58:	bf58      	it	pl
 8006f5a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006f5e:	6022      	str	r2, [r4, #0]
 8006f60:	e789      	b.n	8006e76 <_scanf_float+0x196>
 8006f62:	f04f 0a03 	mov.w	sl, #3
 8006f66:	e786      	b.n	8006e76 <_scanf_float+0x196>
 8006f68:	4639      	mov	r1, r7
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006f70:	4798      	blx	r3
 8006f72:	2800      	cmp	r0, #0
 8006f74:	f43f aeda 	beq.w	8006d2c <_scanf_float+0x4c>
 8006f78:	e6e5      	b.n	8006d46 <_scanf_float+0x66>
 8006f7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f7e:	463a      	mov	r2, r7
 8006f80:	4640      	mov	r0, r8
 8006f82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f86:	4798      	blx	r3
 8006f88:	6923      	ldr	r3, [r4, #16]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	6123      	str	r3, [r4, #16]
 8006f8e:	e6e7      	b.n	8006d60 <_scanf_float+0x80>
 8006f90:	1e6b      	subs	r3, r5, #1
 8006f92:	2b06      	cmp	r3, #6
 8006f94:	d824      	bhi.n	8006fe0 <_scanf_float+0x300>
 8006f96:	2d02      	cmp	r5, #2
 8006f98:	d836      	bhi.n	8007008 <_scanf_float+0x328>
 8006f9a:	9b01      	ldr	r3, [sp, #4]
 8006f9c:	429e      	cmp	r6, r3
 8006f9e:	f67f aee3 	bls.w	8006d68 <_scanf_float+0x88>
 8006fa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fa6:	463a      	mov	r2, r7
 8006fa8:	4640      	mov	r0, r8
 8006faa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fae:	4798      	blx	r3
 8006fb0:	6923      	ldr	r3, [r4, #16]
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	6123      	str	r3, [r4, #16]
 8006fb6:	e7f0      	b.n	8006f9a <_scanf_float+0x2ba>
 8006fb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fbc:	463a      	mov	r2, r7
 8006fbe:	4640      	mov	r0, r8
 8006fc0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006fc4:	4798      	blx	r3
 8006fc6:	6923      	ldr	r3, [r4, #16]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	6123      	str	r3, [r4, #16]
 8006fcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fd0:	fa5f fa8a 	uxtb.w	sl, sl
 8006fd4:	f1ba 0f02 	cmp.w	sl, #2
 8006fd8:	d1ee      	bne.n	8006fb8 <_scanf_float+0x2d8>
 8006fda:	3d03      	subs	r5, #3
 8006fdc:	b2ed      	uxtb	r5, r5
 8006fde:	1b76      	subs	r6, r6, r5
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	05da      	lsls	r2, r3, #23
 8006fe4:	d530      	bpl.n	8007048 <_scanf_float+0x368>
 8006fe6:	055b      	lsls	r3, r3, #21
 8006fe8:	d511      	bpl.n	800700e <_scanf_float+0x32e>
 8006fea:	9b01      	ldr	r3, [sp, #4]
 8006fec:	429e      	cmp	r6, r3
 8006fee:	f67f aebb 	bls.w	8006d68 <_scanf_float+0x88>
 8006ff2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ff6:	463a      	mov	r2, r7
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ffe:	4798      	blx	r3
 8007000:	6923      	ldr	r3, [r4, #16]
 8007002:	3b01      	subs	r3, #1
 8007004:	6123      	str	r3, [r4, #16]
 8007006:	e7f0      	b.n	8006fea <_scanf_float+0x30a>
 8007008:	46aa      	mov	sl, r5
 800700a:	46b3      	mov	fp, r6
 800700c:	e7de      	b.n	8006fcc <_scanf_float+0x2ec>
 800700e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007012:	6923      	ldr	r3, [r4, #16]
 8007014:	2965      	cmp	r1, #101	@ 0x65
 8007016:	f103 33ff 	add.w	r3, r3, #4294967295
 800701a:	f106 35ff 	add.w	r5, r6, #4294967295
 800701e:	6123      	str	r3, [r4, #16]
 8007020:	d00c      	beq.n	800703c <_scanf_float+0x35c>
 8007022:	2945      	cmp	r1, #69	@ 0x45
 8007024:	d00a      	beq.n	800703c <_scanf_float+0x35c>
 8007026:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800702a:	463a      	mov	r2, r7
 800702c:	4640      	mov	r0, r8
 800702e:	4798      	blx	r3
 8007030:	6923      	ldr	r3, [r4, #16]
 8007032:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007036:	3b01      	subs	r3, #1
 8007038:	1eb5      	subs	r5, r6, #2
 800703a:	6123      	str	r3, [r4, #16]
 800703c:	463a      	mov	r2, r7
 800703e:	4640      	mov	r0, r8
 8007040:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007044:	4798      	blx	r3
 8007046:	462e      	mov	r6, r5
 8007048:	6822      	ldr	r2, [r4, #0]
 800704a:	f012 0210 	ands.w	r2, r2, #16
 800704e:	d001      	beq.n	8007054 <_scanf_float+0x374>
 8007050:	2000      	movs	r0, #0
 8007052:	e68a      	b.n	8006d6a <_scanf_float+0x8a>
 8007054:	7032      	strb	r2, [r6, #0]
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800705c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007060:	d11c      	bne.n	800709c <_scanf_float+0x3bc>
 8007062:	9b02      	ldr	r3, [sp, #8]
 8007064:	454b      	cmp	r3, r9
 8007066:	eba3 0209 	sub.w	r2, r3, r9
 800706a:	d123      	bne.n	80070b4 <_scanf_float+0x3d4>
 800706c:	2200      	movs	r2, #0
 800706e:	4640      	mov	r0, r8
 8007070:	9901      	ldr	r1, [sp, #4]
 8007072:	f7ff f94d 	bl	8006310 <_strtod_r>
 8007076:	9b03      	ldr	r3, [sp, #12]
 8007078:	6825      	ldr	r5, [r4, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f015 0f02 	tst.w	r5, #2
 8007080:	4606      	mov	r6, r0
 8007082:	460f      	mov	r7, r1
 8007084:	f103 0204 	add.w	r2, r3, #4
 8007088:	d01f      	beq.n	80070ca <_scanf_float+0x3ea>
 800708a:	9903      	ldr	r1, [sp, #12]
 800708c:	600a      	str	r2, [r1, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	e9c3 6700 	strd	r6, r7, [r3]
 8007094:	68e3      	ldr	r3, [r4, #12]
 8007096:	3301      	adds	r3, #1
 8007098:	60e3      	str	r3, [r4, #12]
 800709a:	e7d9      	b.n	8007050 <_scanf_float+0x370>
 800709c:	9b04      	ldr	r3, [sp, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0e4      	beq.n	800706c <_scanf_float+0x38c>
 80070a2:	9905      	ldr	r1, [sp, #20]
 80070a4:	230a      	movs	r3, #10
 80070a6:	4640      	mov	r0, r8
 80070a8:	3101      	adds	r1, #1
 80070aa:	f7ff f9b1 	bl	8006410 <_strtol_r>
 80070ae:	9b04      	ldr	r3, [sp, #16]
 80070b0:	9e05      	ldr	r6, [sp, #20]
 80070b2:	1ac2      	subs	r2, r0, r3
 80070b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80070b8:	429e      	cmp	r6, r3
 80070ba:	bf28      	it	cs
 80070bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80070c0:	4630      	mov	r0, r6
 80070c2:	490d      	ldr	r1, [pc, #52]	@ (80070f8 <_scanf_float+0x418>)
 80070c4:	f000 f924 	bl	8007310 <siprintf>
 80070c8:	e7d0      	b.n	800706c <_scanf_float+0x38c>
 80070ca:	076d      	lsls	r5, r5, #29
 80070cc:	d4dd      	bmi.n	800708a <_scanf_float+0x3aa>
 80070ce:	9d03      	ldr	r5, [sp, #12]
 80070d0:	602a      	str	r2, [r5, #0]
 80070d2:	681d      	ldr	r5, [r3, #0]
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	f7f9 fc98 	bl	8000a0c <__aeabi_dcmpun>
 80070dc:	b120      	cbz	r0, 80070e8 <_scanf_float+0x408>
 80070de:	4807      	ldr	r0, [pc, #28]	@ (80070fc <_scanf_float+0x41c>)
 80070e0:	f000 fa90 	bl	8007604 <nanf>
 80070e4:	6028      	str	r0, [r5, #0]
 80070e6:	e7d5      	b.n	8007094 <_scanf_float+0x3b4>
 80070e8:	4630      	mov	r0, r6
 80070ea:	4639      	mov	r1, r7
 80070ec:	f7f9 fcec 	bl	8000ac8 <__aeabi_d2f>
 80070f0:	e7f8      	b.n	80070e4 <_scanf_float+0x404>
 80070f2:	f04f 0900 	mov.w	r9, #0
 80070f6:	e62d      	b.n	8006d54 <_scanf_float+0x74>
 80070f8:	0800ae4b 	.word	0x0800ae4b
 80070fc:	0800ae93 	.word	0x0800ae93

08007100 <std>:
 8007100:	2300      	movs	r3, #0
 8007102:	b510      	push	{r4, lr}
 8007104:	4604      	mov	r4, r0
 8007106:	e9c0 3300 	strd	r3, r3, [r0]
 800710a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800710e:	6083      	str	r3, [r0, #8]
 8007110:	8181      	strh	r1, [r0, #12]
 8007112:	6643      	str	r3, [r0, #100]	@ 0x64
 8007114:	81c2      	strh	r2, [r0, #14]
 8007116:	6183      	str	r3, [r0, #24]
 8007118:	4619      	mov	r1, r3
 800711a:	2208      	movs	r2, #8
 800711c:	305c      	adds	r0, #92	@ 0x5c
 800711e:	f000 f986 	bl	800742e <memset>
 8007122:	4b0d      	ldr	r3, [pc, #52]	@ (8007158 <std+0x58>)
 8007124:	6224      	str	r4, [r4, #32]
 8007126:	6263      	str	r3, [r4, #36]	@ 0x24
 8007128:	4b0c      	ldr	r3, [pc, #48]	@ (800715c <std+0x5c>)
 800712a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800712c:	4b0c      	ldr	r3, [pc, #48]	@ (8007160 <std+0x60>)
 800712e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007130:	4b0c      	ldr	r3, [pc, #48]	@ (8007164 <std+0x64>)
 8007132:	6323      	str	r3, [r4, #48]	@ 0x30
 8007134:	4b0c      	ldr	r3, [pc, #48]	@ (8007168 <std+0x68>)
 8007136:	429c      	cmp	r4, r3
 8007138:	d006      	beq.n	8007148 <std+0x48>
 800713a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800713e:	4294      	cmp	r4, r2
 8007140:	d002      	beq.n	8007148 <std+0x48>
 8007142:	33d0      	adds	r3, #208	@ 0xd0
 8007144:	429c      	cmp	r4, r3
 8007146:	d105      	bne.n	8007154 <std+0x54>
 8007148:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800714c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007150:	f000 ba32 	b.w	80075b8 <__retarget_lock_init_recursive>
 8007154:	bd10      	pop	{r4, pc}
 8007156:	bf00      	nop
 8007158:	080073a5 	.word	0x080073a5
 800715c:	080073cb 	.word	0x080073cb
 8007160:	08007403 	.word	0x08007403
 8007164:	08007427 	.word	0x08007427
 8007168:	20000a58 	.word	0x20000a58

0800716c <stdio_exit_handler>:
 800716c:	4a02      	ldr	r2, [pc, #8]	@ (8007178 <stdio_exit_handler+0xc>)
 800716e:	4903      	ldr	r1, [pc, #12]	@ (800717c <stdio_exit_handler+0x10>)
 8007170:	4803      	ldr	r0, [pc, #12]	@ (8007180 <stdio_exit_handler+0x14>)
 8007172:	f000 b869 	b.w	8007248 <_fwalk_sglue>
 8007176:	bf00      	nop
 8007178:	20000130 	.word	0x20000130
 800717c:	0800a13d 	.word	0x0800a13d
 8007180:	200002ac 	.word	0x200002ac

08007184 <cleanup_stdio>:
 8007184:	6841      	ldr	r1, [r0, #4]
 8007186:	4b0c      	ldr	r3, [pc, #48]	@ (80071b8 <cleanup_stdio+0x34>)
 8007188:	b510      	push	{r4, lr}
 800718a:	4299      	cmp	r1, r3
 800718c:	4604      	mov	r4, r0
 800718e:	d001      	beq.n	8007194 <cleanup_stdio+0x10>
 8007190:	f002 ffd4 	bl	800a13c <_fflush_r>
 8007194:	68a1      	ldr	r1, [r4, #8]
 8007196:	4b09      	ldr	r3, [pc, #36]	@ (80071bc <cleanup_stdio+0x38>)
 8007198:	4299      	cmp	r1, r3
 800719a:	d002      	beq.n	80071a2 <cleanup_stdio+0x1e>
 800719c:	4620      	mov	r0, r4
 800719e:	f002 ffcd 	bl	800a13c <_fflush_r>
 80071a2:	68e1      	ldr	r1, [r4, #12]
 80071a4:	4b06      	ldr	r3, [pc, #24]	@ (80071c0 <cleanup_stdio+0x3c>)
 80071a6:	4299      	cmp	r1, r3
 80071a8:	d004      	beq.n	80071b4 <cleanup_stdio+0x30>
 80071aa:	4620      	mov	r0, r4
 80071ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b0:	f002 bfc4 	b.w	800a13c <_fflush_r>
 80071b4:	bd10      	pop	{r4, pc}
 80071b6:	bf00      	nop
 80071b8:	20000a58 	.word	0x20000a58
 80071bc:	20000ac0 	.word	0x20000ac0
 80071c0:	20000b28 	.word	0x20000b28

080071c4 <global_stdio_init.part.0>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	4b0b      	ldr	r3, [pc, #44]	@ (80071f4 <global_stdio_init.part.0+0x30>)
 80071c8:	4c0b      	ldr	r4, [pc, #44]	@ (80071f8 <global_stdio_init.part.0+0x34>)
 80071ca:	4a0c      	ldr	r2, [pc, #48]	@ (80071fc <global_stdio_init.part.0+0x38>)
 80071cc:	4620      	mov	r0, r4
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	2104      	movs	r1, #4
 80071d2:	2200      	movs	r2, #0
 80071d4:	f7ff ff94 	bl	8007100 <std>
 80071d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80071dc:	2201      	movs	r2, #1
 80071de:	2109      	movs	r1, #9
 80071e0:	f7ff ff8e 	bl	8007100 <std>
 80071e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80071e8:	2202      	movs	r2, #2
 80071ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071ee:	2112      	movs	r1, #18
 80071f0:	f7ff bf86 	b.w	8007100 <std>
 80071f4:	20000b90 	.word	0x20000b90
 80071f8:	20000a58 	.word	0x20000a58
 80071fc:	0800716d 	.word	0x0800716d

08007200 <__sfp_lock_acquire>:
 8007200:	4801      	ldr	r0, [pc, #4]	@ (8007208 <__sfp_lock_acquire+0x8>)
 8007202:	f000 b9da 	b.w	80075ba <__retarget_lock_acquire_recursive>
 8007206:	bf00      	nop
 8007208:	20000b99 	.word	0x20000b99

0800720c <__sfp_lock_release>:
 800720c:	4801      	ldr	r0, [pc, #4]	@ (8007214 <__sfp_lock_release+0x8>)
 800720e:	f000 b9d5 	b.w	80075bc <__retarget_lock_release_recursive>
 8007212:	bf00      	nop
 8007214:	20000b99 	.word	0x20000b99

08007218 <__sinit>:
 8007218:	b510      	push	{r4, lr}
 800721a:	4604      	mov	r4, r0
 800721c:	f7ff fff0 	bl	8007200 <__sfp_lock_acquire>
 8007220:	6a23      	ldr	r3, [r4, #32]
 8007222:	b11b      	cbz	r3, 800722c <__sinit+0x14>
 8007224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007228:	f7ff bff0 	b.w	800720c <__sfp_lock_release>
 800722c:	4b04      	ldr	r3, [pc, #16]	@ (8007240 <__sinit+0x28>)
 800722e:	6223      	str	r3, [r4, #32]
 8007230:	4b04      	ldr	r3, [pc, #16]	@ (8007244 <__sinit+0x2c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1f5      	bne.n	8007224 <__sinit+0xc>
 8007238:	f7ff ffc4 	bl	80071c4 <global_stdio_init.part.0>
 800723c:	e7f2      	b.n	8007224 <__sinit+0xc>
 800723e:	bf00      	nop
 8007240:	08007185 	.word	0x08007185
 8007244:	20000b90 	.word	0x20000b90

08007248 <_fwalk_sglue>:
 8007248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800724c:	4607      	mov	r7, r0
 800724e:	4688      	mov	r8, r1
 8007250:	4614      	mov	r4, r2
 8007252:	2600      	movs	r6, #0
 8007254:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007258:	f1b9 0901 	subs.w	r9, r9, #1
 800725c:	d505      	bpl.n	800726a <_fwalk_sglue+0x22>
 800725e:	6824      	ldr	r4, [r4, #0]
 8007260:	2c00      	cmp	r4, #0
 8007262:	d1f7      	bne.n	8007254 <_fwalk_sglue+0xc>
 8007264:	4630      	mov	r0, r6
 8007266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800726a:	89ab      	ldrh	r3, [r5, #12]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d907      	bls.n	8007280 <_fwalk_sglue+0x38>
 8007270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007274:	3301      	adds	r3, #1
 8007276:	d003      	beq.n	8007280 <_fwalk_sglue+0x38>
 8007278:	4629      	mov	r1, r5
 800727a:	4638      	mov	r0, r7
 800727c:	47c0      	blx	r8
 800727e:	4306      	orrs	r6, r0
 8007280:	3568      	adds	r5, #104	@ 0x68
 8007282:	e7e9      	b.n	8007258 <_fwalk_sglue+0x10>

08007284 <iprintf>:
 8007284:	b40f      	push	{r0, r1, r2, r3}
 8007286:	b507      	push	{r0, r1, r2, lr}
 8007288:	4906      	ldr	r1, [pc, #24]	@ (80072a4 <iprintf+0x20>)
 800728a:	ab04      	add	r3, sp, #16
 800728c:	6808      	ldr	r0, [r1, #0]
 800728e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007292:	6881      	ldr	r1, [r0, #8]
 8007294:	9301      	str	r3, [sp, #4]
 8007296:	f002 fc6d 	bl	8009b74 <_vfiprintf_r>
 800729a:	b003      	add	sp, #12
 800729c:	f85d eb04 	ldr.w	lr, [sp], #4
 80072a0:	b004      	add	sp, #16
 80072a2:	4770      	bx	lr
 80072a4:	200002a8 	.word	0x200002a8

080072a8 <sniprintf>:
 80072a8:	b40c      	push	{r2, r3}
 80072aa:	b530      	push	{r4, r5, lr}
 80072ac:	4b17      	ldr	r3, [pc, #92]	@ (800730c <sniprintf+0x64>)
 80072ae:	1e0c      	subs	r4, r1, #0
 80072b0:	681d      	ldr	r5, [r3, #0]
 80072b2:	b09d      	sub	sp, #116	@ 0x74
 80072b4:	da08      	bge.n	80072c8 <sniprintf+0x20>
 80072b6:	238b      	movs	r3, #139	@ 0x8b
 80072b8:	f04f 30ff 	mov.w	r0, #4294967295
 80072bc:	602b      	str	r3, [r5, #0]
 80072be:	b01d      	add	sp, #116	@ 0x74
 80072c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072c4:	b002      	add	sp, #8
 80072c6:	4770      	bx	lr
 80072c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80072cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80072d0:	bf0c      	ite	eq
 80072d2:	4623      	moveq	r3, r4
 80072d4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	9307      	str	r3, [sp, #28]
 80072dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80072e0:	9002      	str	r0, [sp, #8]
 80072e2:	9006      	str	r0, [sp, #24]
 80072e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80072e8:	4628      	mov	r0, r5
 80072ea:	ab21      	add	r3, sp, #132	@ 0x84
 80072ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80072ee:	a902      	add	r1, sp, #8
 80072f0:	9301      	str	r3, [sp, #4]
 80072f2:	f002 f951 	bl	8009598 <_svfiprintf_r>
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	bfbc      	itt	lt
 80072fa:	238b      	movlt	r3, #139	@ 0x8b
 80072fc:	602b      	strlt	r3, [r5, #0]
 80072fe:	2c00      	cmp	r4, #0
 8007300:	d0dd      	beq.n	80072be <sniprintf+0x16>
 8007302:	2200      	movs	r2, #0
 8007304:	9b02      	ldr	r3, [sp, #8]
 8007306:	701a      	strb	r2, [r3, #0]
 8007308:	e7d9      	b.n	80072be <sniprintf+0x16>
 800730a:	bf00      	nop
 800730c:	200002a8 	.word	0x200002a8

08007310 <siprintf>:
 8007310:	b40e      	push	{r1, r2, r3}
 8007312:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007316:	b500      	push	{lr}
 8007318:	b09c      	sub	sp, #112	@ 0x70
 800731a:	ab1d      	add	r3, sp, #116	@ 0x74
 800731c:	9002      	str	r0, [sp, #8]
 800731e:	9006      	str	r0, [sp, #24]
 8007320:	9107      	str	r1, [sp, #28]
 8007322:	9104      	str	r1, [sp, #16]
 8007324:	4808      	ldr	r0, [pc, #32]	@ (8007348 <siprintf+0x38>)
 8007326:	4909      	ldr	r1, [pc, #36]	@ (800734c <siprintf+0x3c>)
 8007328:	f853 2b04 	ldr.w	r2, [r3], #4
 800732c:	9105      	str	r1, [sp, #20]
 800732e:	6800      	ldr	r0, [r0, #0]
 8007330:	a902      	add	r1, sp, #8
 8007332:	9301      	str	r3, [sp, #4]
 8007334:	f002 f930 	bl	8009598 <_svfiprintf_r>
 8007338:	2200      	movs	r2, #0
 800733a:	9b02      	ldr	r3, [sp, #8]
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	b01c      	add	sp, #112	@ 0x70
 8007340:	f85d eb04 	ldr.w	lr, [sp], #4
 8007344:	b003      	add	sp, #12
 8007346:	4770      	bx	lr
 8007348:	200002a8 	.word	0x200002a8
 800734c:	ffff0208 	.word	0xffff0208

08007350 <siscanf>:
 8007350:	b40e      	push	{r1, r2, r3}
 8007352:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007356:	b530      	push	{r4, r5, lr}
 8007358:	b09c      	sub	sp, #112	@ 0x70
 800735a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800735c:	f854 5b04 	ldr.w	r5, [r4], #4
 8007360:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007364:	9002      	str	r0, [sp, #8]
 8007366:	9006      	str	r0, [sp, #24]
 8007368:	f7f8 fef2 	bl	8000150 <strlen>
 800736c:	4b0b      	ldr	r3, [pc, #44]	@ (800739c <siscanf+0x4c>)
 800736e:	9003      	str	r0, [sp, #12]
 8007370:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007372:	2300      	movs	r3, #0
 8007374:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007376:	9314      	str	r3, [sp, #80]	@ 0x50
 8007378:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800737c:	9007      	str	r0, [sp, #28]
 800737e:	4808      	ldr	r0, [pc, #32]	@ (80073a0 <siscanf+0x50>)
 8007380:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007384:	462a      	mov	r2, r5
 8007386:	4623      	mov	r3, r4
 8007388:	a902      	add	r1, sp, #8
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	9401      	str	r4, [sp, #4]
 800738e:	f002 fa57 	bl	8009840 <__ssvfiscanf_r>
 8007392:	b01c      	add	sp, #112	@ 0x70
 8007394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007398:	b003      	add	sp, #12
 800739a:	4770      	bx	lr
 800739c:	080073c7 	.word	0x080073c7
 80073a0:	200002a8 	.word	0x200002a8

080073a4 <__sread>:
 80073a4:	b510      	push	{r4, lr}
 80073a6:	460c      	mov	r4, r1
 80073a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ac:	f000 f8b6 	bl	800751c <_read_r>
 80073b0:	2800      	cmp	r0, #0
 80073b2:	bfab      	itete	ge
 80073b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073b6:	89a3      	ldrhlt	r3, [r4, #12]
 80073b8:	181b      	addge	r3, r3, r0
 80073ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073be:	bfac      	ite	ge
 80073c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073c2:	81a3      	strhlt	r3, [r4, #12]
 80073c4:	bd10      	pop	{r4, pc}

080073c6 <__seofread>:
 80073c6:	2000      	movs	r0, #0
 80073c8:	4770      	bx	lr

080073ca <__swrite>:
 80073ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ce:	461f      	mov	r7, r3
 80073d0:	898b      	ldrh	r3, [r1, #12]
 80073d2:	4605      	mov	r5, r0
 80073d4:	05db      	lsls	r3, r3, #23
 80073d6:	460c      	mov	r4, r1
 80073d8:	4616      	mov	r6, r2
 80073da:	d505      	bpl.n	80073e8 <__swrite+0x1e>
 80073dc:	2302      	movs	r3, #2
 80073de:	2200      	movs	r2, #0
 80073e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e4:	f000 f888 	bl	80074f8 <_lseek_r>
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	4632      	mov	r2, r6
 80073ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073f0:	81a3      	strh	r3, [r4, #12]
 80073f2:	4628      	mov	r0, r5
 80073f4:	463b      	mov	r3, r7
 80073f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073fe:	f000 b89f 	b.w	8007540 <_write_r>

08007402 <__sseek>:
 8007402:	b510      	push	{r4, lr}
 8007404:	460c      	mov	r4, r1
 8007406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740a:	f000 f875 	bl	80074f8 <_lseek_r>
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	bf15      	itete	ne
 8007414:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007416:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800741a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800741e:	81a3      	strheq	r3, [r4, #12]
 8007420:	bf18      	it	ne
 8007422:	81a3      	strhne	r3, [r4, #12]
 8007424:	bd10      	pop	{r4, pc}

08007426 <__sclose>:
 8007426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742a:	f000 b855 	b.w	80074d8 <_close_r>

0800742e <memset>:
 800742e:	4603      	mov	r3, r0
 8007430:	4402      	add	r2, r0
 8007432:	4293      	cmp	r3, r2
 8007434:	d100      	bne.n	8007438 <memset+0xa>
 8007436:	4770      	bx	lr
 8007438:	f803 1b01 	strb.w	r1, [r3], #1
 800743c:	e7f9      	b.n	8007432 <memset+0x4>

0800743e <strchr>:
 800743e:	4603      	mov	r3, r0
 8007440:	b2c9      	uxtb	r1, r1
 8007442:	4618      	mov	r0, r3
 8007444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007448:	b112      	cbz	r2, 8007450 <strchr+0x12>
 800744a:	428a      	cmp	r2, r1
 800744c:	d1f9      	bne.n	8007442 <strchr+0x4>
 800744e:	4770      	bx	lr
 8007450:	2900      	cmp	r1, #0
 8007452:	bf18      	it	ne
 8007454:	2000      	movne	r0, #0
 8007456:	4770      	bx	lr

08007458 <strncmp>:
 8007458:	b510      	push	{r4, lr}
 800745a:	b16a      	cbz	r2, 8007478 <strncmp+0x20>
 800745c:	3901      	subs	r1, #1
 800745e:	1884      	adds	r4, r0, r2
 8007460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007464:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007468:	429a      	cmp	r2, r3
 800746a:	d103      	bne.n	8007474 <strncmp+0x1c>
 800746c:	42a0      	cmp	r0, r4
 800746e:	d001      	beq.n	8007474 <strncmp+0x1c>
 8007470:	2a00      	cmp	r2, #0
 8007472:	d1f5      	bne.n	8007460 <strncmp+0x8>
 8007474:	1ad0      	subs	r0, r2, r3
 8007476:	bd10      	pop	{r4, pc}
 8007478:	4610      	mov	r0, r2
 800747a:	e7fc      	b.n	8007476 <strncmp+0x1e>

0800747c <strncpy>:
 800747c:	4603      	mov	r3, r0
 800747e:	b510      	push	{r4, lr}
 8007480:	3901      	subs	r1, #1
 8007482:	b132      	cbz	r2, 8007492 <strncpy+0x16>
 8007484:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007488:	3a01      	subs	r2, #1
 800748a:	f803 4b01 	strb.w	r4, [r3], #1
 800748e:	2c00      	cmp	r4, #0
 8007490:	d1f7      	bne.n	8007482 <strncpy+0x6>
 8007492:	2100      	movs	r1, #0
 8007494:	441a      	add	r2, r3
 8007496:	4293      	cmp	r3, r2
 8007498:	d100      	bne.n	800749c <strncpy+0x20>
 800749a:	bd10      	pop	{r4, pc}
 800749c:	f803 1b01 	strb.w	r1, [r3], #1
 80074a0:	e7f9      	b.n	8007496 <strncpy+0x1a>

080074a2 <strstr>:
 80074a2:	780a      	ldrb	r2, [r1, #0]
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	b96a      	cbnz	r2, 80074c4 <strstr+0x22>
 80074a8:	bd70      	pop	{r4, r5, r6, pc}
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d109      	bne.n	80074c2 <strstr+0x20>
 80074ae:	460c      	mov	r4, r1
 80074b0:	4605      	mov	r5, r0
 80074b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0f6      	beq.n	80074a8 <strstr+0x6>
 80074ba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80074be:	429e      	cmp	r6, r3
 80074c0:	d0f7      	beq.n	80074b2 <strstr+0x10>
 80074c2:	3001      	adds	r0, #1
 80074c4:	7803      	ldrb	r3, [r0, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1ef      	bne.n	80074aa <strstr+0x8>
 80074ca:	4618      	mov	r0, r3
 80074cc:	e7ec      	b.n	80074a8 <strstr+0x6>
	...

080074d0 <_localeconv_r>:
 80074d0:	4800      	ldr	r0, [pc, #0]	@ (80074d4 <_localeconv_r+0x4>)
 80074d2:	4770      	bx	lr
 80074d4:	2000022c 	.word	0x2000022c

080074d8 <_close_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	2300      	movs	r3, #0
 80074dc:	4d05      	ldr	r5, [pc, #20]	@ (80074f4 <_close_r+0x1c>)
 80074de:	4604      	mov	r4, r0
 80074e0:	4608      	mov	r0, r1
 80074e2:	602b      	str	r3, [r5, #0]
 80074e4:	f7fb fae7 	bl	8002ab6 <_close>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_close_r+0x1a>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_close_r+0x1a>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	20000b94 	.word	0x20000b94

080074f8 <_lseek_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4604      	mov	r4, r0
 80074fc:	4608      	mov	r0, r1
 80074fe:	4611      	mov	r1, r2
 8007500:	2200      	movs	r2, #0
 8007502:	4d05      	ldr	r5, [pc, #20]	@ (8007518 <_lseek_r+0x20>)
 8007504:	602a      	str	r2, [r5, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	f7fb faf9 	bl	8002afe <_lseek>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	d102      	bne.n	8007516 <_lseek_r+0x1e>
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	b103      	cbz	r3, 8007516 <_lseek_r+0x1e>
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	bd38      	pop	{r3, r4, r5, pc}
 8007518:	20000b94 	.word	0x20000b94

0800751c <_read_r>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	4604      	mov	r4, r0
 8007520:	4608      	mov	r0, r1
 8007522:	4611      	mov	r1, r2
 8007524:	2200      	movs	r2, #0
 8007526:	4d05      	ldr	r5, [pc, #20]	@ (800753c <_read_r+0x20>)
 8007528:	602a      	str	r2, [r5, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	f7fb fa8a 	bl	8002a44 <_read>
 8007530:	1c43      	adds	r3, r0, #1
 8007532:	d102      	bne.n	800753a <_read_r+0x1e>
 8007534:	682b      	ldr	r3, [r5, #0]
 8007536:	b103      	cbz	r3, 800753a <_read_r+0x1e>
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	20000b94 	.word	0x20000b94

08007540 <_write_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4604      	mov	r4, r0
 8007544:	4608      	mov	r0, r1
 8007546:	4611      	mov	r1, r2
 8007548:	2200      	movs	r2, #0
 800754a:	4d05      	ldr	r5, [pc, #20]	@ (8007560 <_write_r+0x20>)
 800754c:	602a      	str	r2, [r5, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	f7fb fa95 	bl	8002a7e <_write>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d102      	bne.n	800755e <_write_r+0x1e>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	b103      	cbz	r3, 800755e <_write_r+0x1e>
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	bd38      	pop	{r3, r4, r5, pc}
 8007560:	20000b94 	.word	0x20000b94

08007564 <__errno>:
 8007564:	4b01      	ldr	r3, [pc, #4]	@ (800756c <__errno+0x8>)
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	200002a8 	.word	0x200002a8

08007570 <__libc_init_array>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	2600      	movs	r6, #0
 8007574:	4d0c      	ldr	r5, [pc, #48]	@ (80075a8 <__libc_init_array+0x38>)
 8007576:	4c0d      	ldr	r4, [pc, #52]	@ (80075ac <__libc_init_array+0x3c>)
 8007578:	1b64      	subs	r4, r4, r5
 800757a:	10a4      	asrs	r4, r4, #2
 800757c:	42a6      	cmp	r6, r4
 800757e:	d109      	bne.n	8007594 <__libc_init_array+0x24>
 8007580:	f003 f8d0 	bl	800a724 <_init>
 8007584:	2600      	movs	r6, #0
 8007586:	4d0a      	ldr	r5, [pc, #40]	@ (80075b0 <__libc_init_array+0x40>)
 8007588:	4c0a      	ldr	r4, [pc, #40]	@ (80075b4 <__libc_init_array+0x44>)
 800758a:	1b64      	subs	r4, r4, r5
 800758c:	10a4      	asrs	r4, r4, #2
 800758e:	42a6      	cmp	r6, r4
 8007590:	d105      	bne.n	800759e <__libc_init_array+0x2e>
 8007592:	bd70      	pop	{r4, r5, r6, pc}
 8007594:	f855 3b04 	ldr.w	r3, [r5], #4
 8007598:	4798      	blx	r3
 800759a:	3601      	adds	r6, #1
 800759c:	e7ee      	b.n	800757c <__libc_init_array+0xc>
 800759e:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a2:	4798      	blx	r3
 80075a4:	3601      	adds	r6, #1
 80075a6:	e7f2      	b.n	800758e <__libc_init_array+0x1e>
 80075a8:	0800b10c 	.word	0x0800b10c
 80075ac:	0800b10c 	.word	0x0800b10c
 80075b0:	0800b10c 	.word	0x0800b10c
 80075b4:	0800b110 	.word	0x0800b110

080075b8 <__retarget_lock_init_recursive>:
 80075b8:	4770      	bx	lr

080075ba <__retarget_lock_acquire_recursive>:
 80075ba:	4770      	bx	lr

080075bc <__retarget_lock_release_recursive>:
 80075bc:	4770      	bx	lr

080075be <memchr>:
 80075be:	4603      	mov	r3, r0
 80075c0:	b510      	push	{r4, lr}
 80075c2:	b2c9      	uxtb	r1, r1
 80075c4:	4402      	add	r2, r0
 80075c6:	4293      	cmp	r3, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	d101      	bne.n	80075d0 <memchr+0x12>
 80075cc:	2000      	movs	r0, #0
 80075ce:	e003      	b.n	80075d8 <memchr+0x1a>
 80075d0:	7804      	ldrb	r4, [r0, #0]
 80075d2:	3301      	adds	r3, #1
 80075d4:	428c      	cmp	r4, r1
 80075d6:	d1f6      	bne.n	80075c6 <memchr+0x8>
 80075d8:	bd10      	pop	{r4, pc}

080075da <memcpy>:
 80075da:	440a      	add	r2, r1
 80075dc:	4291      	cmp	r1, r2
 80075de:	f100 33ff 	add.w	r3, r0, #4294967295
 80075e2:	d100      	bne.n	80075e6 <memcpy+0xc>
 80075e4:	4770      	bx	lr
 80075e6:	b510      	push	{r4, lr}
 80075e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ec:	4291      	cmp	r1, r2
 80075ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075f2:	d1f9      	bne.n	80075e8 <memcpy+0xe>
 80075f4:	bd10      	pop	{r4, pc}
	...

080075f8 <nan>:
 80075f8:	2000      	movs	r0, #0
 80075fa:	4901      	ldr	r1, [pc, #4]	@ (8007600 <nan+0x8>)
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	7ff80000 	.word	0x7ff80000

08007604 <nanf>:
 8007604:	4800      	ldr	r0, [pc, #0]	@ (8007608 <nanf+0x4>)
 8007606:	4770      	bx	lr
 8007608:	7fc00000 	.word	0x7fc00000

0800760c <__assert_func>:
 800760c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800760e:	4614      	mov	r4, r2
 8007610:	461a      	mov	r2, r3
 8007612:	4b09      	ldr	r3, [pc, #36]	@ (8007638 <__assert_func+0x2c>)
 8007614:	4605      	mov	r5, r0
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68d8      	ldr	r0, [r3, #12]
 800761a:	b954      	cbnz	r4, 8007632 <__assert_func+0x26>
 800761c:	4b07      	ldr	r3, [pc, #28]	@ (800763c <__assert_func+0x30>)
 800761e:	461c      	mov	r4, r3
 8007620:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007624:	9100      	str	r1, [sp, #0]
 8007626:	462b      	mov	r3, r5
 8007628:	4905      	ldr	r1, [pc, #20]	@ (8007640 <__assert_func+0x34>)
 800762a:	f002 fdaf 	bl	800a18c <fiprintf>
 800762e:	f002 feef 	bl	800a410 <abort>
 8007632:	4b04      	ldr	r3, [pc, #16]	@ (8007644 <__assert_func+0x38>)
 8007634:	e7f4      	b.n	8007620 <__assert_func+0x14>
 8007636:	bf00      	nop
 8007638:	200002a8 	.word	0x200002a8
 800763c:	0800ae93 	.word	0x0800ae93
 8007640:	0800ae65 	.word	0x0800ae65
 8007644:	0800ae58 	.word	0x0800ae58

08007648 <quorem>:
 8007648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	6903      	ldr	r3, [r0, #16]
 800764e:	690c      	ldr	r4, [r1, #16]
 8007650:	4607      	mov	r7, r0
 8007652:	42a3      	cmp	r3, r4
 8007654:	db7e      	blt.n	8007754 <quorem+0x10c>
 8007656:	3c01      	subs	r4, #1
 8007658:	00a3      	lsls	r3, r4, #2
 800765a:	f100 0514 	add.w	r5, r0, #20
 800765e:	f101 0814 	add.w	r8, r1, #20
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007668:	9301      	str	r3, [sp, #4]
 800766a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800766e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007672:	3301      	adds	r3, #1
 8007674:	429a      	cmp	r2, r3
 8007676:	fbb2 f6f3 	udiv	r6, r2, r3
 800767a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800767e:	d32e      	bcc.n	80076de <quorem+0x96>
 8007680:	f04f 0a00 	mov.w	sl, #0
 8007684:	46c4      	mov	ip, r8
 8007686:	46ae      	mov	lr, r5
 8007688:	46d3      	mov	fp, sl
 800768a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800768e:	b298      	uxth	r0, r3
 8007690:	fb06 a000 	mla	r0, r6, r0, sl
 8007694:	0c1b      	lsrs	r3, r3, #16
 8007696:	0c02      	lsrs	r2, r0, #16
 8007698:	fb06 2303 	mla	r3, r6, r3, r2
 800769c:	f8de 2000 	ldr.w	r2, [lr]
 80076a0:	b280      	uxth	r0, r0
 80076a2:	b292      	uxth	r2, r2
 80076a4:	1a12      	subs	r2, r2, r0
 80076a6:	445a      	add	r2, fp
 80076a8:	f8de 0000 	ldr.w	r0, [lr]
 80076ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80076b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80076ba:	b292      	uxth	r2, r2
 80076bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80076c0:	45e1      	cmp	r9, ip
 80076c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80076c6:	f84e 2b04 	str.w	r2, [lr], #4
 80076ca:	d2de      	bcs.n	800768a <quorem+0x42>
 80076cc:	9b00      	ldr	r3, [sp, #0]
 80076ce:	58eb      	ldr	r3, [r5, r3]
 80076d0:	b92b      	cbnz	r3, 80076de <quorem+0x96>
 80076d2:	9b01      	ldr	r3, [sp, #4]
 80076d4:	3b04      	subs	r3, #4
 80076d6:	429d      	cmp	r5, r3
 80076d8:	461a      	mov	r2, r3
 80076da:	d32f      	bcc.n	800773c <quorem+0xf4>
 80076dc:	613c      	str	r4, [r7, #16]
 80076de:	4638      	mov	r0, r7
 80076e0:	f001 fd0e 	bl	8009100 <__mcmp>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	db25      	blt.n	8007734 <quorem+0xec>
 80076e8:	4629      	mov	r1, r5
 80076ea:	2000      	movs	r0, #0
 80076ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80076f0:	f8d1 c000 	ldr.w	ip, [r1]
 80076f4:	fa1f fe82 	uxth.w	lr, r2
 80076f8:	fa1f f38c 	uxth.w	r3, ip
 80076fc:	eba3 030e 	sub.w	r3, r3, lr
 8007700:	4403      	add	r3, r0
 8007702:	0c12      	lsrs	r2, r2, #16
 8007704:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007708:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800770c:	b29b      	uxth	r3, r3
 800770e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007712:	45c1      	cmp	r9, r8
 8007714:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007718:	f841 3b04 	str.w	r3, [r1], #4
 800771c:	d2e6      	bcs.n	80076ec <quorem+0xa4>
 800771e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007722:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007726:	b922      	cbnz	r2, 8007732 <quorem+0xea>
 8007728:	3b04      	subs	r3, #4
 800772a:	429d      	cmp	r5, r3
 800772c:	461a      	mov	r2, r3
 800772e:	d30b      	bcc.n	8007748 <quorem+0x100>
 8007730:	613c      	str	r4, [r7, #16]
 8007732:	3601      	adds	r6, #1
 8007734:	4630      	mov	r0, r6
 8007736:	b003      	add	sp, #12
 8007738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773c:	6812      	ldr	r2, [r2, #0]
 800773e:	3b04      	subs	r3, #4
 8007740:	2a00      	cmp	r2, #0
 8007742:	d1cb      	bne.n	80076dc <quorem+0x94>
 8007744:	3c01      	subs	r4, #1
 8007746:	e7c6      	b.n	80076d6 <quorem+0x8e>
 8007748:	6812      	ldr	r2, [r2, #0]
 800774a:	3b04      	subs	r3, #4
 800774c:	2a00      	cmp	r2, #0
 800774e:	d1ef      	bne.n	8007730 <quorem+0xe8>
 8007750:	3c01      	subs	r4, #1
 8007752:	e7ea      	b.n	800772a <quorem+0xe2>
 8007754:	2000      	movs	r0, #0
 8007756:	e7ee      	b.n	8007736 <quorem+0xee>

08007758 <_dtoa_r>:
 8007758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	4614      	mov	r4, r2
 800775e:	461d      	mov	r5, r3
 8007760:	69c7      	ldr	r7, [r0, #28]
 8007762:	b097      	sub	sp, #92	@ 0x5c
 8007764:	4683      	mov	fp, r0
 8007766:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800776a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800776c:	b97f      	cbnz	r7, 800778e <_dtoa_r+0x36>
 800776e:	2010      	movs	r0, #16
 8007770:	f001 f93c 	bl	80089ec <malloc>
 8007774:	4602      	mov	r2, r0
 8007776:	f8cb 001c 	str.w	r0, [fp, #28]
 800777a:	b920      	cbnz	r0, 8007786 <_dtoa_r+0x2e>
 800777c:	21ef      	movs	r1, #239	@ 0xef
 800777e:	4ba8      	ldr	r3, [pc, #672]	@ (8007a20 <_dtoa_r+0x2c8>)
 8007780:	48a8      	ldr	r0, [pc, #672]	@ (8007a24 <_dtoa_r+0x2cc>)
 8007782:	f7ff ff43 	bl	800760c <__assert_func>
 8007786:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800778a:	6007      	str	r7, [r0, #0]
 800778c:	60c7      	str	r7, [r0, #12]
 800778e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007792:	6819      	ldr	r1, [r3, #0]
 8007794:	b159      	cbz	r1, 80077ae <_dtoa_r+0x56>
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	2301      	movs	r3, #1
 800779a:	4093      	lsls	r3, r2
 800779c:	604a      	str	r2, [r1, #4]
 800779e:	608b      	str	r3, [r1, #8]
 80077a0:	4658      	mov	r0, fp
 80077a2:	f001 fa2b 	bl	8008bfc <_Bfree>
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	1e2b      	subs	r3, r5, #0
 80077b0:	bfaf      	iteee	ge
 80077b2:	2300      	movge	r3, #0
 80077b4:	2201      	movlt	r2, #1
 80077b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80077ba:	9303      	strlt	r3, [sp, #12]
 80077bc:	bfa8      	it	ge
 80077be:	6033      	strge	r3, [r6, #0]
 80077c0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80077c4:	4b98      	ldr	r3, [pc, #608]	@ (8007a28 <_dtoa_r+0x2d0>)
 80077c6:	bfb8      	it	lt
 80077c8:	6032      	strlt	r2, [r6, #0]
 80077ca:	ea33 0308 	bics.w	r3, r3, r8
 80077ce:	d112      	bne.n	80077f6 <_dtoa_r+0x9e>
 80077d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80077d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80077dc:	4323      	orrs	r3, r4
 80077de:	f000 8550 	beq.w	8008282 <_dtoa_r+0xb2a>
 80077e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80077e4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007a2c <_dtoa_r+0x2d4>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 8552 	beq.w	8008292 <_dtoa_r+0xb3a>
 80077ee:	f10a 0303 	add.w	r3, sl, #3
 80077f2:	f000 bd4c 	b.w	800828e <_dtoa_r+0xb36>
 80077f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80077fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007802:	2200      	movs	r2, #0
 8007804:	2300      	movs	r3, #0
 8007806:	f7f9 f8cf 	bl	80009a8 <__aeabi_dcmpeq>
 800780a:	4607      	mov	r7, r0
 800780c:	b158      	cbz	r0, 8007826 <_dtoa_r+0xce>
 800780e:	2301      	movs	r3, #1
 8007810:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007816:	b113      	cbz	r3, 800781e <_dtoa_r+0xc6>
 8007818:	4b85      	ldr	r3, [pc, #532]	@ (8007a30 <_dtoa_r+0x2d8>)
 800781a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007a34 <_dtoa_r+0x2dc>
 8007822:	f000 bd36 	b.w	8008292 <_dtoa_r+0xb3a>
 8007826:	ab14      	add	r3, sp, #80	@ 0x50
 8007828:	9301      	str	r3, [sp, #4]
 800782a:	ab15      	add	r3, sp, #84	@ 0x54
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	4658      	mov	r0, fp
 8007830:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007834:	f001 fd7c 	bl	8009330 <__d2b>
 8007838:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800783c:	4681      	mov	r9, r0
 800783e:	2e00      	cmp	r6, #0
 8007840:	d077      	beq.n	8007932 <_dtoa_r+0x1da>
 8007842:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007846:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007848:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800784c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007850:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007854:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007858:	9712      	str	r7, [sp, #72]	@ 0x48
 800785a:	4619      	mov	r1, r3
 800785c:	2200      	movs	r2, #0
 800785e:	4b76      	ldr	r3, [pc, #472]	@ (8007a38 <_dtoa_r+0x2e0>)
 8007860:	f7f8 fc82 	bl	8000168 <__aeabi_dsub>
 8007864:	a368      	add	r3, pc, #416	@ (adr r3, 8007a08 <_dtoa_r+0x2b0>)
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	f7f8 fe35 	bl	80004d8 <__aeabi_dmul>
 800786e:	a368      	add	r3, pc, #416	@ (adr r3, 8007a10 <_dtoa_r+0x2b8>)
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f7f8 fc7a 	bl	800016c <__adddf3>
 8007878:	4604      	mov	r4, r0
 800787a:	4630      	mov	r0, r6
 800787c:	460d      	mov	r5, r1
 800787e:	f7f8 fdc1 	bl	8000404 <__aeabi_i2d>
 8007882:	a365      	add	r3, pc, #404	@ (adr r3, 8007a18 <_dtoa_r+0x2c0>)
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	f7f8 fe26 	bl	80004d8 <__aeabi_dmul>
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	4620      	mov	r0, r4
 8007892:	4629      	mov	r1, r5
 8007894:	f7f8 fc6a 	bl	800016c <__adddf3>
 8007898:	4604      	mov	r4, r0
 800789a:	460d      	mov	r5, r1
 800789c:	f7f9 f8cc 	bl	8000a38 <__aeabi_d2iz>
 80078a0:	2200      	movs	r2, #0
 80078a2:	4607      	mov	r7, r0
 80078a4:	2300      	movs	r3, #0
 80078a6:	4620      	mov	r0, r4
 80078a8:	4629      	mov	r1, r5
 80078aa:	f7f9 f887 	bl	80009bc <__aeabi_dcmplt>
 80078ae:	b140      	cbz	r0, 80078c2 <_dtoa_r+0x16a>
 80078b0:	4638      	mov	r0, r7
 80078b2:	f7f8 fda7 	bl	8000404 <__aeabi_i2d>
 80078b6:	4622      	mov	r2, r4
 80078b8:	462b      	mov	r3, r5
 80078ba:	f7f9 f875 	bl	80009a8 <__aeabi_dcmpeq>
 80078be:	b900      	cbnz	r0, 80078c2 <_dtoa_r+0x16a>
 80078c0:	3f01      	subs	r7, #1
 80078c2:	2f16      	cmp	r7, #22
 80078c4:	d853      	bhi.n	800796e <_dtoa_r+0x216>
 80078c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078ca:	4b5c      	ldr	r3, [pc, #368]	@ (8007a3c <_dtoa_r+0x2e4>)
 80078cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d4:	f7f9 f872 	bl	80009bc <__aeabi_dcmplt>
 80078d8:	2800      	cmp	r0, #0
 80078da:	d04a      	beq.n	8007972 <_dtoa_r+0x21a>
 80078dc:	2300      	movs	r3, #0
 80078de:	3f01      	subs	r7, #1
 80078e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078e4:	1b9b      	subs	r3, r3, r6
 80078e6:	1e5a      	subs	r2, r3, #1
 80078e8:	bf46      	itte	mi
 80078ea:	f1c3 0801 	rsbmi	r8, r3, #1
 80078ee:	2300      	movmi	r3, #0
 80078f0:	f04f 0800 	movpl.w	r8, #0
 80078f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80078f6:	bf48      	it	mi
 80078f8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80078fa:	2f00      	cmp	r7, #0
 80078fc:	db3b      	blt.n	8007976 <_dtoa_r+0x21e>
 80078fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007900:	970e      	str	r7, [sp, #56]	@ 0x38
 8007902:	443b      	add	r3, r7
 8007904:	9309      	str	r3, [sp, #36]	@ 0x24
 8007906:	2300      	movs	r3, #0
 8007908:	930a      	str	r3, [sp, #40]	@ 0x28
 800790a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800790c:	2b09      	cmp	r3, #9
 800790e:	d866      	bhi.n	80079de <_dtoa_r+0x286>
 8007910:	2b05      	cmp	r3, #5
 8007912:	bfc4      	itt	gt
 8007914:	3b04      	subgt	r3, #4
 8007916:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007918:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800791a:	bfc8      	it	gt
 800791c:	2400      	movgt	r4, #0
 800791e:	f1a3 0302 	sub.w	r3, r3, #2
 8007922:	bfd8      	it	le
 8007924:	2401      	movle	r4, #1
 8007926:	2b03      	cmp	r3, #3
 8007928:	d864      	bhi.n	80079f4 <_dtoa_r+0x29c>
 800792a:	e8df f003 	tbb	[pc, r3]
 800792e:	382b      	.short	0x382b
 8007930:	5636      	.short	0x5636
 8007932:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007936:	441e      	add	r6, r3
 8007938:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800793c:	2b20      	cmp	r3, #32
 800793e:	bfc1      	itttt	gt
 8007940:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007944:	fa08 f803 	lslgt.w	r8, r8, r3
 8007948:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800794c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007950:	bfd6      	itet	le
 8007952:	f1c3 0320 	rsble	r3, r3, #32
 8007956:	ea48 0003 	orrgt.w	r0, r8, r3
 800795a:	fa04 f003 	lslle.w	r0, r4, r3
 800795e:	f7f8 fd41 	bl	80003e4 <__aeabi_ui2d>
 8007962:	2201      	movs	r2, #1
 8007964:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007968:	3e01      	subs	r6, #1
 800796a:	9212      	str	r2, [sp, #72]	@ 0x48
 800796c:	e775      	b.n	800785a <_dtoa_r+0x102>
 800796e:	2301      	movs	r3, #1
 8007970:	e7b6      	b.n	80078e0 <_dtoa_r+0x188>
 8007972:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007974:	e7b5      	b.n	80078e2 <_dtoa_r+0x18a>
 8007976:	427b      	negs	r3, r7
 8007978:	930a      	str	r3, [sp, #40]	@ 0x28
 800797a:	2300      	movs	r3, #0
 800797c:	eba8 0807 	sub.w	r8, r8, r7
 8007980:	930e      	str	r3, [sp, #56]	@ 0x38
 8007982:	e7c2      	b.n	800790a <_dtoa_r+0x1b2>
 8007984:	2300      	movs	r3, #0
 8007986:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007988:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800798a:	2b00      	cmp	r3, #0
 800798c:	dc35      	bgt.n	80079fa <_dtoa_r+0x2a2>
 800798e:	2301      	movs	r3, #1
 8007990:	461a      	mov	r2, r3
 8007992:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007996:	9221      	str	r2, [sp, #132]	@ 0x84
 8007998:	e00b      	b.n	80079b2 <_dtoa_r+0x25a>
 800799a:	2301      	movs	r3, #1
 800799c:	e7f3      	b.n	8007986 <_dtoa_r+0x22e>
 800799e:	2300      	movs	r3, #0
 80079a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079a4:	18fb      	adds	r3, r7, r3
 80079a6:	9308      	str	r3, [sp, #32]
 80079a8:	3301      	adds	r3, #1
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	9307      	str	r3, [sp, #28]
 80079ae:	bfb8      	it	lt
 80079b0:	2301      	movlt	r3, #1
 80079b2:	2100      	movs	r1, #0
 80079b4:	2204      	movs	r2, #4
 80079b6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80079ba:	f102 0514 	add.w	r5, r2, #20
 80079be:	429d      	cmp	r5, r3
 80079c0:	d91f      	bls.n	8007a02 <_dtoa_r+0x2aa>
 80079c2:	6041      	str	r1, [r0, #4]
 80079c4:	4658      	mov	r0, fp
 80079c6:	f001 f8d9 	bl	8008b7c <_Balloc>
 80079ca:	4682      	mov	sl, r0
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d139      	bne.n	8007a44 <_dtoa_r+0x2ec>
 80079d0:	4602      	mov	r2, r0
 80079d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80079d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007a40 <_dtoa_r+0x2e8>)
 80079d8:	e6d2      	b.n	8007780 <_dtoa_r+0x28>
 80079da:	2301      	movs	r3, #1
 80079dc:	e7e0      	b.n	80079a0 <_dtoa_r+0x248>
 80079de:	2401      	movs	r4, #1
 80079e0:	2300      	movs	r3, #0
 80079e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80079e6:	f04f 33ff 	mov.w	r3, #4294967295
 80079ea:	2200      	movs	r2, #0
 80079ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80079f0:	2312      	movs	r3, #18
 80079f2:	e7d0      	b.n	8007996 <_dtoa_r+0x23e>
 80079f4:	2301      	movs	r3, #1
 80079f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079f8:	e7f5      	b.n	80079e6 <_dtoa_r+0x28e>
 80079fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007a00:	e7d7      	b.n	80079b2 <_dtoa_r+0x25a>
 8007a02:	3101      	adds	r1, #1
 8007a04:	0052      	lsls	r2, r2, #1
 8007a06:	e7d8      	b.n	80079ba <_dtoa_r+0x262>
 8007a08:	636f4361 	.word	0x636f4361
 8007a0c:	3fd287a7 	.word	0x3fd287a7
 8007a10:	8b60c8b3 	.word	0x8b60c8b3
 8007a14:	3fc68a28 	.word	0x3fc68a28
 8007a18:	509f79fb 	.word	0x509f79fb
 8007a1c:	3fd34413 	.word	0x3fd34413
 8007a20:	0800aea1 	.word	0x0800aea1
 8007a24:	0800aeb8 	.word	0x0800aeb8
 8007a28:	7ff00000 	.word	0x7ff00000
 8007a2c:	0800ae9d 	.word	0x0800ae9d
 8007a30:	0800b100 	.word	0x0800b100
 8007a34:	0800b0ff 	.word	0x0800b0ff
 8007a38:	3ff80000 	.word	0x3ff80000
 8007a3c:	0800b010 	.word	0x0800b010
 8007a40:	0800af10 	.word	0x0800af10
 8007a44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a48:	6018      	str	r0, [r3, #0]
 8007a4a:	9b07      	ldr	r3, [sp, #28]
 8007a4c:	2b0e      	cmp	r3, #14
 8007a4e:	f200 80a4 	bhi.w	8007b9a <_dtoa_r+0x442>
 8007a52:	2c00      	cmp	r4, #0
 8007a54:	f000 80a1 	beq.w	8007b9a <_dtoa_r+0x442>
 8007a58:	2f00      	cmp	r7, #0
 8007a5a:	dd33      	ble.n	8007ac4 <_dtoa_r+0x36c>
 8007a5c:	4b86      	ldr	r3, [pc, #536]	@ (8007c78 <_dtoa_r+0x520>)
 8007a5e:	f007 020f 	and.w	r2, r7, #15
 8007a62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a66:	05f8      	lsls	r0, r7, #23
 8007a68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a6c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a70:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a74:	d516      	bpl.n	8007aa4 <_dtoa_r+0x34c>
 8007a76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a7a:	4b80      	ldr	r3, [pc, #512]	@ (8007c7c <_dtoa_r+0x524>)
 8007a7c:	2603      	movs	r6, #3
 8007a7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a82:	f7f8 fe53 	bl	800072c <__aeabi_ddiv>
 8007a86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a8a:	f004 040f 	and.w	r4, r4, #15
 8007a8e:	4d7b      	ldr	r5, [pc, #492]	@ (8007c7c <_dtoa_r+0x524>)
 8007a90:	b954      	cbnz	r4, 8007aa8 <_dtoa_r+0x350>
 8007a92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a9a:	f7f8 fe47 	bl	800072c <__aeabi_ddiv>
 8007a9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aa2:	e028      	b.n	8007af6 <_dtoa_r+0x39e>
 8007aa4:	2602      	movs	r6, #2
 8007aa6:	e7f2      	b.n	8007a8e <_dtoa_r+0x336>
 8007aa8:	07e1      	lsls	r1, r4, #31
 8007aaa:	d508      	bpl.n	8007abe <_dtoa_r+0x366>
 8007aac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ab0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ab4:	f7f8 fd10 	bl	80004d8 <__aeabi_dmul>
 8007ab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007abc:	3601      	adds	r6, #1
 8007abe:	1064      	asrs	r4, r4, #1
 8007ac0:	3508      	adds	r5, #8
 8007ac2:	e7e5      	b.n	8007a90 <_dtoa_r+0x338>
 8007ac4:	f000 80d2 	beq.w	8007c6c <_dtoa_r+0x514>
 8007ac8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007acc:	427c      	negs	r4, r7
 8007ace:	4b6a      	ldr	r3, [pc, #424]	@ (8007c78 <_dtoa_r+0x520>)
 8007ad0:	f004 020f 	and.w	r2, r4, #15
 8007ad4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	f7f8 fcfc 	bl	80004d8 <__aeabi_dmul>
 8007ae0:	2602      	movs	r6, #2
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ae8:	4d64      	ldr	r5, [pc, #400]	@ (8007c7c <_dtoa_r+0x524>)
 8007aea:	1124      	asrs	r4, r4, #4
 8007aec:	2c00      	cmp	r4, #0
 8007aee:	f040 80b2 	bne.w	8007c56 <_dtoa_r+0x4fe>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1d3      	bne.n	8007a9e <_dtoa_r+0x346>
 8007af6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007afa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 80b7 	beq.w	8007c70 <_dtoa_r+0x518>
 8007b02:	2200      	movs	r2, #0
 8007b04:	4620      	mov	r0, r4
 8007b06:	4629      	mov	r1, r5
 8007b08:	4b5d      	ldr	r3, [pc, #372]	@ (8007c80 <_dtoa_r+0x528>)
 8007b0a:	f7f8 ff57 	bl	80009bc <__aeabi_dcmplt>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	f000 80ae 	beq.w	8007c70 <_dtoa_r+0x518>
 8007b14:	9b07      	ldr	r3, [sp, #28]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 80aa 	beq.w	8007c70 <_dtoa_r+0x518>
 8007b1c:	9b08      	ldr	r3, [sp, #32]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	dd37      	ble.n	8007b92 <_dtoa_r+0x43a>
 8007b22:	1e7b      	subs	r3, r7, #1
 8007b24:	4620      	mov	r0, r4
 8007b26:	9304      	str	r3, [sp, #16]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	4b55      	ldr	r3, [pc, #340]	@ (8007c84 <_dtoa_r+0x52c>)
 8007b2e:	f7f8 fcd3 	bl	80004d8 <__aeabi_dmul>
 8007b32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b36:	9c08      	ldr	r4, [sp, #32]
 8007b38:	3601      	adds	r6, #1
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f7f8 fc62 	bl	8000404 <__aeabi_i2d>
 8007b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b44:	f7f8 fcc8 	bl	80004d8 <__aeabi_dmul>
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4b4f      	ldr	r3, [pc, #316]	@ (8007c88 <_dtoa_r+0x530>)
 8007b4c:	f7f8 fb0e 	bl	800016c <__adddf3>
 8007b50:	4605      	mov	r5, r0
 8007b52:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b56:	2c00      	cmp	r4, #0
 8007b58:	f040 809a 	bne.w	8007c90 <_dtoa_r+0x538>
 8007b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b60:	2200      	movs	r2, #0
 8007b62:	4b4a      	ldr	r3, [pc, #296]	@ (8007c8c <_dtoa_r+0x534>)
 8007b64:	f7f8 fb00 	bl	8000168 <__aeabi_dsub>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b70:	462a      	mov	r2, r5
 8007b72:	4633      	mov	r3, r6
 8007b74:	f7f8 ff40 	bl	80009f8 <__aeabi_dcmpgt>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	f040 828e 	bne.w	800809a <_dtoa_r+0x942>
 8007b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b82:	462a      	mov	r2, r5
 8007b84:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b88:	f7f8 ff18 	bl	80009bc <__aeabi_dcmplt>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	f040 8127 	bne.w	8007de0 <_dtoa_r+0x688>
 8007b92:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007b96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b9a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f2c0 8163 	blt.w	8007e68 <_dtoa_r+0x710>
 8007ba2:	2f0e      	cmp	r7, #14
 8007ba4:	f300 8160 	bgt.w	8007e68 <_dtoa_r+0x710>
 8007ba8:	4b33      	ldr	r3, [pc, #204]	@ (8007c78 <_dtoa_r+0x520>)
 8007baa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007bb2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007bb6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	da03      	bge.n	8007bc4 <_dtoa_r+0x46c>
 8007bbc:	9b07      	ldr	r3, [sp, #28]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f340 8100 	ble.w	8007dc4 <_dtoa_r+0x66c>
 8007bc4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007bc8:	4656      	mov	r6, sl
 8007bca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bce:	4620      	mov	r0, r4
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	f7f8 fdab 	bl	800072c <__aeabi_ddiv>
 8007bd6:	f7f8 ff2f 	bl	8000a38 <__aeabi_d2iz>
 8007bda:	4680      	mov	r8, r0
 8007bdc:	f7f8 fc12 	bl	8000404 <__aeabi_i2d>
 8007be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007be4:	f7f8 fc78 	bl	80004d8 <__aeabi_dmul>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4620      	mov	r0, r4
 8007bee:	4629      	mov	r1, r5
 8007bf0:	f7f8 faba 	bl	8000168 <__aeabi_dsub>
 8007bf4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007bf8:	9d07      	ldr	r5, [sp, #28]
 8007bfa:	f806 4b01 	strb.w	r4, [r6], #1
 8007bfe:	eba6 040a 	sub.w	r4, r6, sl
 8007c02:	42a5      	cmp	r5, r4
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	f040 8116 	bne.w	8007e38 <_dtoa_r+0x6e0>
 8007c0c:	f7f8 faae 	bl	800016c <__adddf3>
 8007c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c14:	4604      	mov	r4, r0
 8007c16:	460d      	mov	r5, r1
 8007c18:	f7f8 feee 	bl	80009f8 <__aeabi_dcmpgt>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	f040 80f8 	bne.w	8007e12 <_dtoa_r+0x6ba>
 8007c22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c26:	4620      	mov	r0, r4
 8007c28:	4629      	mov	r1, r5
 8007c2a:	f7f8 febd 	bl	80009a8 <__aeabi_dcmpeq>
 8007c2e:	b118      	cbz	r0, 8007c38 <_dtoa_r+0x4e0>
 8007c30:	f018 0f01 	tst.w	r8, #1
 8007c34:	f040 80ed 	bne.w	8007e12 <_dtoa_r+0x6ba>
 8007c38:	4649      	mov	r1, r9
 8007c3a:	4658      	mov	r0, fp
 8007c3c:	f000 ffde 	bl	8008bfc <_Bfree>
 8007c40:	2300      	movs	r3, #0
 8007c42:	7033      	strb	r3, [r6, #0]
 8007c44:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007c46:	3701      	adds	r7, #1
 8007c48:	601f      	str	r7, [r3, #0]
 8007c4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 8320 	beq.w	8008292 <_dtoa_r+0xb3a>
 8007c52:	601e      	str	r6, [r3, #0]
 8007c54:	e31d      	b.n	8008292 <_dtoa_r+0xb3a>
 8007c56:	07e2      	lsls	r2, r4, #31
 8007c58:	d505      	bpl.n	8007c66 <_dtoa_r+0x50e>
 8007c5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c5e:	f7f8 fc3b 	bl	80004d8 <__aeabi_dmul>
 8007c62:	2301      	movs	r3, #1
 8007c64:	3601      	adds	r6, #1
 8007c66:	1064      	asrs	r4, r4, #1
 8007c68:	3508      	adds	r5, #8
 8007c6a:	e73f      	b.n	8007aec <_dtoa_r+0x394>
 8007c6c:	2602      	movs	r6, #2
 8007c6e:	e742      	b.n	8007af6 <_dtoa_r+0x39e>
 8007c70:	9c07      	ldr	r4, [sp, #28]
 8007c72:	9704      	str	r7, [sp, #16]
 8007c74:	e761      	b.n	8007b3a <_dtoa_r+0x3e2>
 8007c76:	bf00      	nop
 8007c78:	0800b010 	.word	0x0800b010
 8007c7c:	0800afe8 	.word	0x0800afe8
 8007c80:	3ff00000 	.word	0x3ff00000
 8007c84:	40240000 	.word	0x40240000
 8007c88:	401c0000 	.word	0x401c0000
 8007c8c:	40140000 	.word	0x40140000
 8007c90:	4b70      	ldr	r3, [pc, #448]	@ (8007e54 <_dtoa_r+0x6fc>)
 8007c92:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c9c:	4454      	add	r4, sl
 8007c9e:	2900      	cmp	r1, #0
 8007ca0:	d045      	beq.n	8007d2e <_dtoa_r+0x5d6>
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	496c      	ldr	r1, [pc, #432]	@ (8007e58 <_dtoa_r+0x700>)
 8007ca6:	f7f8 fd41 	bl	800072c <__aeabi_ddiv>
 8007caa:	4633      	mov	r3, r6
 8007cac:	462a      	mov	r2, r5
 8007cae:	f7f8 fa5b 	bl	8000168 <__aeabi_dsub>
 8007cb2:	4656      	mov	r6, sl
 8007cb4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cbc:	f7f8 febc 	bl	8000a38 <__aeabi_d2iz>
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	f7f8 fb9f 	bl	8000404 <__aeabi_i2d>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cce:	f7f8 fa4b 	bl	8000168 <__aeabi_dsub>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	3530      	adds	r5, #48	@ 0x30
 8007cd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ce0:	f806 5b01 	strb.w	r5, [r6], #1
 8007ce4:	f7f8 fe6a 	bl	80009bc <__aeabi_dcmplt>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d163      	bne.n	8007db4 <_dtoa_r+0x65c>
 8007cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	495a      	ldr	r1, [pc, #360]	@ (8007e5c <_dtoa_r+0x704>)
 8007cf4:	f7f8 fa38 	bl	8000168 <__aeabi_dsub>
 8007cf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cfc:	f7f8 fe5e 	bl	80009bc <__aeabi_dcmplt>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	f040 8087 	bne.w	8007e14 <_dtoa_r+0x6bc>
 8007d06:	42a6      	cmp	r6, r4
 8007d08:	f43f af43 	beq.w	8007b92 <_dtoa_r+0x43a>
 8007d0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d10:	2200      	movs	r2, #0
 8007d12:	4b53      	ldr	r3, [pc, #332]	@ (8007e60 <_dtoa_r+0x708>)
 8007d14:	f7f8 fbe0 	bl	80004d8 <__aeabi_dmul>
 8007d18:	2200      	movs	r2, #0
 8007d1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d22:	4b4f      	ldr	r3, [pc, #316]	@ (8007e60 <_dtoa_r+0x708>)
 8007d24:	f7f8 fbd8 	bl	80004d8 <__aeabi_dmul>
 8007d28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d2c:	e7c4      	b.n	8007cb8 <_dtoa_r+0x560>
 8007d2e:	4631      	mov	r1, r6
 8007d30:	4628      	mov	r0, r5
 8007d32:	f7f8 fbd1 	bl	80004d8 <__aeabi_dmul>
 8007d36:	4656      	mov	r6, sl
 8007d38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d3c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d42:	f7f8 fe79 	bl	8000a38 <__aeabi_d2iz>
 8007d46:	4605      	mov	r5, r0
 8007d48:	f7f8 fb5c 	bl	8000404 <__aeabi_i2d>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d54:	f7f8 fa08 	bl	8000168 <__aeabi_dsub>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	3530      	adds	r5, #48	@ 0x30
 8007d5e:	f806 5b01 	strb.w	r5, [r6], #1
 8007d62:	42a6      	cmp	r6, r4
 8007d64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d68:	f04f 0200 	mov.w	r2, #0
 8007d6c:	d124      	bne.n	8007db8 <_dtoa_r+0x660>
 8007d6e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d72:	4b39      	ldr	r3, [pc, #228]	@ (8007e58 <_dtoa_r+0x700>)
 8007d74:	f7f8 f9fa 	bl	800016c <__adddf3>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d80:	f7f8 fe3a 	bl	80009f8 <__aeabi_dcmpgt>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d145      	bne.n	8007e14 <_dtoa_r+0x6bc>
 8007d88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	4932      	ldr	r1, [pc, #200]	@ (8007e58 <_dtoa_r+0x700>)
 8007d90:	f7f8 f9ea 	bl	8000168 <__aeabi_dsub>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d9c:	f7f8 fe0e 	bl	80009bc <__aeabi_dcmplt>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	f43f aef6 	beq.w	8007b92 <_dtoa_r+0x43a>
 8007da6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007da8:	1e73      	subs	r3, r6, #1
 8007daa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007dac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007db0:	2b30      	cmp	r3, #48	@ 0x30
 8007db2:	d0f8      	beq.n	8007da6 <_dtoa_r+0x64e>
 8007db4:	9f04      	ldr	r7, [sp, #16]
 8007db6:	e73f      	b.n	8007c38 <_dtoa_r+0x4e0>
 8007db8:	4b29      	ldr	r3, [pc, #164]	@ (8007e60 <_dtoa_r+0x708>)
 8007dba:	f7f8 fb8d 	bl	80004d8 <__aeabi_dmul>
 8007dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dc2:	e7bc      	b.n	8007d3e <_dtoa_r+0x5e6>
 8007dc4:	d10c      	bne.n	8007de0 <_dtoa_r+0x688>
 8007dc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	4b25      	ldr	r3, [pc, #148]	@ (8007e64 <_dtoa_r+0x70c>)
 8007dce:	f7f8 fb83 	bl	80004d8 <__aeabi_dmul>
 8007dd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dd6:	f7f8 fe05 	bl	80009e4 <__aeabi_dcmpge>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	f000 815b 	beq.w	8008096 <_dtoa_r+0x93e>
 8007de0:	2400      	movs	r4, #0
 8007de2:	4625      	mov	r5, r4
 8007de4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007de6:	4656      	mov	r6, sl
 8007de8:	43db      	mvns	r3, r3
 8007dea:	9304      	str	r3, [sp, #16]
 8007dec:	2700      	movs	r7, #0
 8007dee:	4621      	mov	r1, r4
 8007df0:	4658      	mov	r0, fp
 8007df2:	f000 ff03 	bl	8008bfc <_Bfree>
 8007df6:	2d00      	cmp	r5, #0
 8007df8:	d0dc      	beq.n	8007db4 <_dtoa_r+0x65c>
 8007dfa:	b12f      	cbz	r7, 8007e08 <_dtoa_r+0x6b0>
 8007dfc:	42af      	cmp	r7, r5
 8007dfe:	d003      	beq.n	8007e08 <_dtoa_r+0x6b0>
 8007e00:	4639      	mov	r1, r7
 8007e02:	4658      	mov	r0, fp
 8007e04:	f000 fefa 	bl	8008bfc <_Bfree>
 8007e08:	4629      	mov	r1, r5
 8007e0a:	4658      	mov	r0, fp
 8007e0c:	f000 fef6 	bl	8008bfc <_Bfree>
 8007e10:	e7d0      	b.n	8007db4 <_dtoa_r+0x65c>
 8007e12:	9704      	str	r7, [sp, #16]
 8007e14:	4633      	mov	r3, r6
 8007e16:	461e      	mov	r6, r3
 8007e18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e1c:	2a39      	cmp	r2, #57	@ 0x39
 8007e1e:	d107      	bne.n	8007e30 <_dtoa_r+0x6d8>
 8007e20:	459a      	cmp	sl, r3
 8007e22:	d1f8      	bne.n	8007e16 <_dtoa_r+0x6be>
 8007e24:	9a04      	ldr	r2, [sp, #16]
 8007e26:	3201      	adds	r2, #1
 8007e28:	9204      	str	r2, [sp, #16]
 8007e2a:	2230      	movs	r2, #48	@ 0x30
 8007e2c:	f88a 2000 	strb.w	r2, [sl]
 8007e30:	781a      	ldrb	r2, [r3, #0]
 8007e32:	3201      	adds	r2, #1
 8007e34:	701a      	strb	r2, [r3, #0]
 8007e36:	e7bd      	b.n	8007db4 <_dtoa_r+0x65c>
 8007e38:	2200      	movs	r2, #0
 8007e3a:	4b09      	ldr	r3, [pc, #36]	@ (8007e60 <_dtoa_r+0x708>)
 8007e3c:	f7f8 fb4c 	bl	80004d8 <__aeabi_dmul>
 8007e40:	2200      	movs	r2, #0
 8007e42:	2300      	movs	r3, #0
 8007e44:	4604      	mov	r4, r0
 8007e46:	460d      	mov	r5, r1
 8007e48:	f7f8 fdae 	bl	80009a8 <__aeabi_dcmpeq>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	f43f aebc 	beq.w	8007bca <_dtoa_r+0x472>
 8007e52:	e6f1      	b.n	8007c38 <_dtoa_r+0x4e0>
 8007e54:	0800b010 	.word	0x0800b010
 8007e58:	3fe00000 	.word	0x3fe00000
 8007e5c:	3ff00000 	.word	0x3ff00000
 8007e60:	40240000 	.word	0x40240000
 8007e64:	40140000 	.word	0x40140000
 8007e68:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e6a:	2a00      	cmp	r2, #0
 8007e6c:	f000 80db 	beq.w	8008026 <_dtoa_r+0x8ce>
 8007e70:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007e72:	2a01      	cmp	r2, #1
 8007e74:	f300 80bf 	bgt.w	8007ff6 <_dtoa_r+0x89e>
 8007e78:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	f000 80b7 	beq.w	8007fee <_dtoa_r+0x896>
 8007e80:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e84:	4646      	mov	r6, r8
 8007e86:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	441a      	add	r2, r3
 8007e8e:	4658      	mov	r0, fp
 8007e90:	4498      	add	r8, r3
 8007e92:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e94:	f000 ffb0 	bl	8008df8 <__i2b>
 8007e98:	4605      	mov	r5, r0
 8007e9a:	b15e      	cbz	r6, 8007eb4 <_dtoa_r+0x75c>
 8007e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	dd08      	ble.n	8007eb4 <_dtoa_r+0x75c>
 8007ea2:	42b3      	cmp	r3, r6
 8007ea4:	bfa8      	it	ge
 8007ea6:	4633      	movge	r3, r6
 8007ea8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eaa:	eba8 0803 	sub.w	r8, r8, r3
 8007eae:	1af6      	subs	r6, r6, r3
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eb6:	b1f3      	cbz	r3, 8007ef6 <_dtoa_r+0x79e>
 8007eb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 80b7 	beq.w	800802e <_dtoa_r+0x8d6>
 8007ec0:	b18c      	cbz	r4, 8007ee6 <_dtoa_r+0x78e>
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	4622      	mov	r2, r4
 8007ec6:	4658      	mov	r0, fp
 8007ec8:	f001 f854 	bl	8008f74 <__pow5mult>
 8007ecc:	464a      	mov	r2, r9
 8007ece:	4601      	mov	r1, r0
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	4658      	mov	r0, fp
 8007ed4:	f000 ffa6 	bl	8008e24 <__multiply>
 8007ed8:	4649      	mov	r1, r9
 8007eda:	9004      	str	r0, [sp, #16]
 8007edc:	4658      	mov	r0, fp
 8007ede:	f000 fe8d 	bl	8008bfc <_Bfree>
 8007ee2:	9b04      	ldr	r3, [sp, #16]
 8007ee4:	4699      	mov	r9, r3
 8007ee6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ee8:	1b1a      	subs	r2, r3, r4
 8007eea:	d004      	beq.n	8007ef6 <_dtoa_r+0x79e>
 8007eec:	4649      	mov	r1, r9
 8007eee:	4658      	mov	r0, fp
 8007ef0:	f001 f840 	bl	8008f74 <__pow5mult>
 8007ef4:	4681      	mov	r9, r0
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	4658      	mov	r0, fp
 8007efa:	f000 ff7d 	bl	8008df8 <__i2b>
 8007efe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f00:	4604      	mov	r4, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 81c9 	beq.w	800829a <_dtoa_r+0xb42>
 8007f08:	461a      	mov	r2, r3
 8007f0a:	4601      	mov	r1, r0
 8007f0c:	4658      	mov	r0, fp
 8007f0e:	f001 f831 	bl	8008f74 <__pow5mult>
 8007f12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f14:	4604      	mov	r4, r0
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	f300 808f 	bgt.w	800803a <_dtoa_r+0x8e2>
 8007f1c:	9b02      	ldr	r3, [sp, #8]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f040 8087 	bne.w	8008032 <_dtoa_r+0x8da>
 8007f24:	9b03      	ldr	r3, [sp, #12]
 8007f26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f040 8083 	bne.w	8008036 <_dtoa_r+0x8de>
 8007f30:	9b03      	ldr	r3, [sp, #12]
 8007f32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f36:	0d1b      	lsrs	r3, r3, #20
 8007f38:	051b      	lsls	r3, r3, #20
 8007f3a:	b12b      	cbz	r3, 8007f48 <_dtoa_r+0x7f0>
 8007f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f3e:	f108 0801 	add.w	r8, r8, #1
 8007f42:	3301      	adds	r3, #1
 8007f44:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f46:	2301      	movs	r3, #1
 8007f48:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 81aa 	beq.w	80082a6 <_dtoa_r+0xb4e>
 8007f52:	6923      	ldr	r3, [r4, #16]
 8007f54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f58:	6918      	ldr	r0, [r3, #16]
 8007f5a:	f000 ff01 	bl	8008d60 <__hi0bits>
 8007f5e:	f1c0 0020 	rsb	r0, r0, #32
 8007f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f64:	4418      	add	r0, r3
 8007f66:	f010 001f 	ands.w	r0, r0, #31
 8007f6a:	d071      	beq.n	8008050 <_dtoa_r+0x8f8>
 8007f6c:	f1c0 0320 	rsb	r3, r0, #32
 8007f70:	2b04      	cmp	r3, #4
 8007f72:	dd65      	ble.n	8008040 <_dtoa_r+0x8e8>
 8007f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f76:	f1c0 001c 	rsb	r0, r0, #28
 8007f7a:	4403      	add	r3, r0
 8007f7c:	4480      	add	r8, r0
 8007f7e:	4406      	add	r6, r0
 8007f80:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f82:	f1b8 0f00 	cmp.w	r8, #0
 8007f86:	dd05      	ble.n	8007f94 <_dtoa_r+0x83c>
 8007f88:	4649      	mov	r1, r9
 8007f8a:	4642      	mov	r2, r8
 8007f8c:	4658      	mov	r0, fp
 8007f8e:	f001 f84b 	bl	8009028 <__lshift>
 8007f92:	4681      	mov	r9, r0
 8007f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	dd05      	ble.n	8007fa6 <_dtoa_r+0x84e>
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	4658      	mov	r0, fp
 8007fa0:	f001 f842 	bl	8009028 <__lshift>
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d053      	beq.n	8008054 <_dtoa_r+0x8fc>
 8007fac:	4621      	mov	r1, r4
 8007fae:	4648      	mov	r0, r9
 8007fb0:	f001 f8a6 	bl	8009100 <__mcmp>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	da4d      	bge.n	8008054 <_dtoa_r+0x8fc>
 8007fb8:	1e7b      	subs	r3, r7, #1
 8007fba:	4649      	mov	r1, r9
 8007fbc:	9304      	str	r3, [sp, #16]
 8007fbe:	220a      	movs	r2, #10
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4658      	mov	r0, fp
 8007fc4:	f000 fe3c 	bl	8008c40 <__multadd>
 8007fc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fca:	4681      	mov	r9, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 816c 	beq.w	80082aa <_dtoa_r+0xb52>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	220a      	movs	r2, #10
 8007fd8:	4658      	mov	r0, fp
 8007fda:	f000 fe31 	bl	8008c40 <__multadd>
 8007fde:	9b08      	ldr	r3, [sp, #32]
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	dc61      	bgt.n	80080aa <_dtoa_r+0x952>
 8007fe6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	dc3b      	bgt.n	8008064 <_dtoa_r+0x90c>
 8007fec:	e05d      	b.n	80080aa <_dtoa_r+0x952>
 8007fee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ff0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ff4:	e746      	b.n	8007e84 <_dtoa_r+0x72c>
 8007ff6:	9b07      	ldr	r3, [sp, #28]
 8007ff8:	1e5c      	subs	r4, r3, #1
 8007ffa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ffc:	42a3      	cmp	r3, r4
 8007ffe:	bfbf      	itttt	lt
 8008000:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008002:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008004:	1ae3      	sublt	r3, r4, r3
 8008006:	18d2      	addlt	r2, r2, r3
 8008008:	bfa8      	it	ge
 800800a:	1b1c      	subge	r4, r3, r4
 800800c:	9b07      	ldr	r3, [sp, #28]
 800800e:	bfbe      	ittt	lt
 8008010:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008012:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008014:	2400      	movlt	r4, #0
 8008016:	2b00      	cmp	r3, #0
 8008018:	bfb5      	itete	lt
 800801a:	eba8 0603 	sublt.w	r6, r8, r3
 800801e:	4646      	movge	r6, r8
 8008020:	2300      	movlt	r3, #0
 8008022:	9b07      	ldrge	r3, [sp, #28]
 8008024:	e730      	b.n	8007e88 <_dtoa_r+0x730>
 8008026:	4646      	mov	r6, r8
 8008028:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800802a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800802c:	e735      	b.n	8007e9a <_dtoa_r+0x742>
 800802e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008030:	e75c      	b.n	8007eec <_dtoa_r+0x794>
 8008032:	2300      	movs	r3, #0
 8008034:	e788      	b.n	8007f48 <_dtoa_r+0x7f0>
 8008036:	9b02      	ldr	r3, [sp, #8]
 8008038:	e786      	b.n	8007f48 <_dtoa_r+0x7f0>
 800803a:	2300      	movs	r3, #0
 800803c:	930a      	str	r3, [sp, #40]	@ 0x28
 800803e:	e788      	b.n	8007f52 <_dtoa_r+0x7fa>
 8008040:	d09f      	beq.n	8007f82 <_dtoa_r+0x82a>
 8008042:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008044:	331c      	adds	r3, #28
 8008046:	441a      	add	r2, r3
 8008048:	4498      	add	r8, r3
 800804a:	441e      	add	r6, r3
 800804c:	9209      	str	r2, [sp, #36]	@ 0x24
 800804e:	e798      	b.n	8007f82 <_dtoa_r+0x82a>
 8008050:	4603      	mov	r3, r0
 8008052:	e7f6      	b.n	8008042 <_dtoa_r+0x8ea>
 8008054:	9b07      	ldr	r3, [sp, #28]
 8008056:	9704      	str	r7, [sp, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	dc20      	bgt.n	800809e <_dtoa_r+0x946>
 800805c:	9308      	str	r3, [sp, #32]
 800805e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008060:	2b02      	cmp	r3, #2
 8008062:	dd1e      	ble.n	80080a2 <_dtoa_r+0x94a>
 8008064:	9b08      	ldr	r3, [sp, #32]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f47f aebc 	bne.w	8007de4 <_dtoa_r+0x68c>
 800806c:	4621      	mov	r1, r4
 800806e:	2205      	movs	r2, #5
 8008070:	4658      	mov	r0, fp
 8008072:	f000 fde5 	bl	8008c40 <__multadd>
 8008076:	4601      	mov	r1, r0
 8008078:	4604      	mov	r4, r0
 800807a:	4648      	mov	r0, r9
 800807c:	f001 f840 	bl	8009100 <__mcmp>
 8008080:	2800      	cmp	r0, #0
 8008082:	f77f aeaf 	ble.w	8007de4 <_dtoa_r+0x68c>
 8008086:	2331      	movs	r3, #49	@ 0x31
 8008088:	4656      	mov	r6, sl
 800808a:	f806 3b01 	strb.w	r3, [r6], #1
 800808e:	9b04      	ldr	r3, [sp, #16]
 8008090:	3301      	adds	r3, #1
 8008092:	9304      	str	r3, [sp, #16]
 8008094:	e6aa      	b.n	8007dec <_dtoa_r+0x694>
 8008096:	9c07      	ldr	r4, [sp, #28]
 8008098:	9704      	str	r7, [sp, #16]
 800809a:	4625      	mov	r5, r4
 800809c:	e7f3      	b.n	8008086 <_dtoa_r+0x92e>
 800809e:	9b07      	ldr	r3, [sp, #28]
 80080a0:	9308      	str	r3, [sp, #32]
 80080a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f000 8104 	beq.w	80082b2 <_dtoa_r+0xb5a>
 80080aa:	2e00      	cmp	r6, #0
 80080ac:	dd05      	ble.n	80080ba <_dtoa_r+0x962>
 80080ae:	4629      	mov	r1, r5
 80080b0:	4632      	mov	r2, r6
 80080b2:	4658      	mov	r0, fp
 80080b4:	f000 ffb8 	bl	8009028 <__lshift>
 80080b8:	4605      	mov	r5, r0
 80080ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d05a      	beq.n	8008176 <_dtoa_r+0xa1e>
 80080c0:	4658      	mov	r0, fp
 80080c2:	6869      	ldr	r1, [r5, #4]
 80080c4:	f000 fd5a 	bl	8008b7c <_Balloc>
 80080c8:	4606      	mov	r6, r0
 80080ca:	b928      	cbnz	r0, 80080d8 <_dtoa_r+0x980>
 80080cc:	4602      	mov	r2, r0
 80080ce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080d2:	4b83      	ldr	r3, [pc, #524]	@ (80082e0 <_dtoa_r+0xb88>)
 80080d4:	f7ff bb54 	b.w	8007780 <_dtoa_r+0x28>
 80080d8:	692a      	ldr	r2, [r5, #16]
 80080da:	f105 010c 	add.w	r1, r5, #12
 80080de:	3202      	adds	r2, #2
 80080e0:	0092      	lsls	r2, r2, #2
 80080e2:	300c      	adds	r0, #12
 80080e4:	f7ff fa79 	bl	80075da <memcpy>
 80080e8:	2201      	movs	r2, #1
 80080ea:	4631      	mov	r1, r6
 80080ec:	4658      	mov	r0, fp
 80080ee:	f000 ff9b 	bl	8009028 <__lshift>
 80080f2:	462f      	mov	r7, r5
 80080f4:	4605      	mov	r5, r0
 80080f6:	f10a 0301 	add.w	r3, sl, #1
 80080fa:	9307      	str	r3, [sp, #28]
 80080fc:	9b08      	ldr	r3, [sp, #32]
 80080fe:	4453      	add	r3, sl
 8008100:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008102:	9b02      	ldr	r3, [sp, #8]
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	930a      	str	r3, [sp, #40]	@ 0x28
 800810a:	9b07      	ldr	r3, [sp, #28]
 800810c:	4621      	mov	r1, r4
 800810e:	3b01      	subs	r3, #1
 8008110:	4648      	mov	r0, r9
 8008112:	9302      	str	r3, [sp, #8]
 8008114:	f7ff fa98 	bl	8007648 <quorem>
 8008118:	4639      	mov	r1, r7
 800811a:	9008      	str	r0, [sp, #32]
 800811c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008120:	4648      	mov	r0, r9
 8008122:	f000 ffed 	bl	8009100 <__mcmp>
 8008126:	462a      	mov	r2, r5
 8008128:	9009      	str	r0, [sp, #36]	@ 0x24
 800812a:	4621      	mov	r1, r4
 800812c:	4658      	mov	r0, fp
 800812e:	f001 f803 	bl	8009138 <__mdiff>
 8008132:	68c2      	ldr	r2, [r0, #12]
 8008134:	4606      	mov	r6, r0
 8008136:	bb02      	cbnz	r2, 800817a <_dtoa_r+0xa22>
 8008138:	4601      	mov	r1, r0
 800813a:	4648      	mov	r0, r9
 800813c:	f000 ffe0 	bl	8009100 <__mcmp>
 8008140:	4602      	mov	r2, r0
 8008142:	4631      	mov	r1, r6
 8008144:	4658      	mov	r0, fp
 8008146:	920c      	str	r2, [sp, #48]	@ 0x30
 8008148:	f000 fd58 	bl	8008bfc <_Bfree>
 800814c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800814e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008150:	9e07      	ldr	r6, [sp, #28]
 8008152:	ea43 0102 	orr.w	r1, r3, r2
 8008156:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008158:	4319      	orrs	r1, r3
 800815a:	d110      	bne.n	800817e <_dtoa_r+0xa26>
 800815c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008160:	d029      	beq.n	80081b6 <_dtoa_r+0xa5e>
 8008162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008164:	2b00      	cmp	r3, #0
 8008166:	dd02      	ble.n	800816e <_dtoa_r+0xa16>
 8008168:	9b08      	ldr	r3, [sp, #32]
 800816a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800816e:	9b02      	ldr	r3, [sp, #8]
 8008170:	f883 8000 	strb.w	r8, [r3]
 8008174:	e63b      	b.n	8007dee <_dtoa_r+0x696>
 8008176:	4628      	mov	r0, r5
 8008178:	e7bb      	b.n	80080f2 <_dtoa_r+0x99a>
 800817a:	2201      	movs	r2, #1
 800817c:	e7e1      	b.n	8008142 <_dtoa_r+0x9ea>
 800817e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008180:	2b00      	cmp	r3, #0
 8008182:	db04      	blt.n	800818e <_dtoa_r+0xa36>
 8008184:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008186:	430b      	orrs	r3, r1
 8008188:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800818a:	430b      	orrs	r3, r1
 800818c:	d120      	bne.n	80081d0 <_dtoa_r+0xa78>
 800818e:	2a00      	cmp	r2, #0
 8008190:	dded      	ble.n	800816e <_dtoa_r+0xa16>
 8008192:	4649      	mov	r1, r9
 8008194:	2201      	movs	r2, #1
 8008196:	4658      	mov	r0, fp
 8008198:	f000 ff46 	bl	8009028 <__lshift>
 800819c:	4621      	mov	r1, r4
 800819e:	4681      	mov	r9, r0
 80081a0:	f000 ffae 	bl	8009100 <__mcmp>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	dc03      	bgt.n	80081b0 <_dtoa_r+0xa58>
 80081a8:	d1e1      	bne.n	800816e <_dtoa_r+0xa16>
 80081aa:	f018 0f01 	tst.w	r8, #1
 80081ae:	d0de      	beq.n	800816e <_dtoa_r+0xa16>
 80081b0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081b4:	d1d8      	bne.n	8008168 <_dtoa_r+0xa10>
 80081b6:	2339      	movs	r3, #57	@ 0x39
 80081b8:	9a02      	ldr	r2, [sp, #8]
 80081ba:	7013      	strb	r3, [r2, #0]
 80081bc:	4633      	mov	r3, r6
 80081be:	461e      	mov	r6, r3
 80081c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081c4:	3b01      	subs	r3, #1
 80081c6:	2a39      	cmp	r2, #57	@ 0x39
 80081c8:	d052      	beq.n	8008270 <_dtoa_r+0xb18>
 80081ca:	3201      	adds	r2, #1
 80081cc:	701a      	strb	r2, [r3, #0]
 80081ce:	e60e      	b.n	8007dee <_dtoa_r+0x696>
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	dd07      	ble.n	80081e4 <_dtoa_r+0xa8c>
 80081d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081d8:	d0ed      	beq.n	80081b6 <_dtoa_r+0xa5e>
 80081da:	9a02      	ldr	r2, [sp, #8]
 80081dc:	f108 0301 	add.w	r3, r8, #1
 80081e0:	7013      	strb	r3, [r2, #0]
 80081e2:	e604      	b.n	8007dee <_dtoa_r+0x696>
 80081e4:	9b07      	ldr	r3, [sp, #28]
 80081e6:	9a07      	ldr	r2, [sp, #28]
 80081e8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80081ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d028      	beq.n	8008244 <_dtoa_r+0xaec>
 80081f2:	4649      	mov	r1, r9
 80081f4:	2300      	movs	r3, #0
 80081f6:	220a      	movs	r2, #10
 80081f8:	4658      	mov	r0, fp
 80081fa:	f000 fd21 	bl	8008c40 <__multadd>
 80081fe:	42af      	cmp	r7, r5
 8008200:	4681      	mov	r9, r0
 8008202:	f04f 0300 	mov.w	r3, #0
 8008206:	f04f 020a 	mov.w	r2, #10
 800820a:	4639      	mov	r1, r7
 800820c:	4658      	mov	r0, fp
 800820e:	d107      	bne.n	8008220 <_dtoa_r+0xac8>
 8008210:	f000 fd16 	bl	8008c40 <__multadd>
 8008214:	4607      	mov	r7, r0
 8008216:	4605      	mov	r5, r0
 8008218:	9b07      	ldr	r3, [sp, #28]
 800821a:	3301      	adds	r3, #1
 800821c:	9307      	str	r3, [sp, #28]
 800821e:	e774      	b.n	800810a <_dtoa_r+0x9b2>
 8008220:	f000 fd0e 	bl	8008c40 <__multadd>
 8008224:	4629      	mov	r1, r5
 8008226:	4607      	mov	r7, r0
 8008228:	2300      	movs	r3, #0
 800822a:	220a      	movs	r2, #10
 800822c:	4658      	mov	r0, fp
 800822e:	f000 fd07 	bl	8008c40 <__multadd>
 8008232:	4605      	mov	r5, r0
 8008234:	e7f0      	b.n	8008218 <_dtoa_r+0xac0>
 8008236:	9b08      	ldr	r3, [sp, #32]
 8008238:	2700      	movs	r7, #0
 800823a:	2b00      	cmp	r3, #0
 800823c:	bfcc      	ite	gt
 800823e:	461e      	movgt	r6, r3
 8008240:	2601      	movle	r6, #1
 8008242:	4456      	add	r6, sl
 8008244:	4649      	mov	r1, r9
 8008246:	2201      	movs	r2, #1
 8008248:	4658      	mov	r0, fp
 800824a:	f000 feed 	bl	8009028 <__lshift>
 800824e:	4621      	mov	r1, r4
 8008250:	4681      	mov	r9, r0
 8008252:	f000 ff55 	bl	8009100 <__mcmp>
 8008256:	2800      	cmp	r0, #0
 8008258:	dcb0      	bgt.n	80081bc <_dtoa_r+0xa64>
 800825a:	d102      	bne.n	8008262 <_dtoa_r+0xb0a>
 800825c:	f018 0f01 	tst.w	r8, #1
 8008260:	d1ac      	bne.n	80081bc <_dtoa_r+0xa64>
 8008262:	4633      	mov	r3, r6
 8008264:	461e      	mov	r6, r3
 8008266:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800826a:	2a30      	cmp	r2, #48	@ 0x30
 800826c:	d0fa      	beq.n	8008264 <_dtoa_r+0xb0c>
 800826e:	e5be      	b.n	8007dee <_dtoa_r+0x696>
 8008270:	459a      	cmp	sl, r3
 8008272:	d1a4      	bne.n	80081be <_dtoa_r+0xa66>
 8008274:	9b04      	ldr	r3, [sp, #16]
 8008276:	3301      	adds	r3, #1
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	2331      	movs	r3, #49	@ 0x31
 800827c:	f88a 3000 	strb.w	r3, [sl]
 8008280:	e5b5      	b.n	8007dee <_dtoa_r+0x696>
 8008282:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008284:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80082e4 <_dtoa_r+0xb8c>
 8008288:	b11b      	cbz	r3, 8008292 <_dtoa_r+0xb3a>
 800828a:	f10a 0308 	add.w	r3, sl, #8
 800828e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008290:	6013      	str	r3, [r2, #0]
 8008292:	4650      	mov	r0, sl
 8008294:	b017      	add	sp, #92	@ 0x5c
 8008296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800829c:	2b01      	cmp	r3, #1
 800829e:	f77f ae3d 	ble.w	8007f1c <_dtoa_r+0x7c4>
 80082a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80082a6:	2001      	movs	r0, #1
 80082a8:	e65b      	b.n	8007f62 <_dtoa_r+0x80a>
 80082aa:	9b08      	ldr	r3, [sp, #32]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f77f aed6 	ble.w	800805e <_dtoa_r+0x906>
 80082b2:	4656      	mov	r6, sl
 80082b4:	4621      	mov	r1, r4
 80082b6:	4648      	mov	r0, r9
 80082b8:	f7ff f9c6 	bl	8007648 <quorem>
 80082bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082c0:	9b08      	ldr	r3, [sp, #32]
 80082c2:	f806 8b01 	strb.w	r8, [r6], #1
 80082c6:	eba6 020a 	sub.w	r2, r6, sl
 80082ca:	4293      	cmp	r3, r2
 80082cc:	ddb3      	ble.n	8008236 <_dtoa_r+0xade>
 80082ce:	4649      	mov	r1, r9
 80082d0:	2300      	movs	r3, #0
 80082d2:	220a      	movs	r2, #10
 80082d4:	4658      	mov	r0, fp
 80082d6:	f000 fcb3 	bl	8008c40 <__multadd>
 80082da:	4681      	mov	r9, r0
 80082dc:	e7ea      	b.n	80082b4 <_dtoa_r+0xb5c>
 80082de:	bf00      	nop
 80082e0:	0800af10 	.word	0x0800af10
 80082e4:	0800ae94 	.word	0x0800ae94

080082e8 <_free_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4605      	mov	r5, r0
 80082ec:	2900      	cmp	r1, #0
 80082ee:	d040      	beq.n	8008372 <_free_r+0x8a>
 80082f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082f4:	1f0c      	subs	r4, r1, #4
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	bfb8      	it	lt
 80082fa:	18e4      	addlt	r4, r4, r3
 80082fc:	f000 fc32 	bl	8008b64 <__malloc_lock>
 8008300:	4a1c      	ldr	r2, [pc, #112]	@ (8008374 <_free_r+0x8c>)
 8008302:	6813      	ldr	r3, [r2, #0]
 8008304:	b933      	cbnz	r3, 8008314 <_free_r+0x2c>
 8008306:	6063      	str	r3, [r4, #4]
 8008308:	6014      	str	r4, [r2, #0]
 800830a:	4628      	mov	r0, r5
 800830c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008310:	f000 bc2e 	b.w	8008b70 <__malloc_unlock>
 8008314:	42a3      	cmp	r3, r4
 8008316:	d908      	bls.n	800832a <_free_r+0x42>
 8008318:	6820      	ldr	r0, [r4, #0]
 800831a:	1821      	adds	r1, r4, r0
 800831c:	428b      	cmp	r3, r1
 800831e:	bf01      	itttt	eq
 8008320:	6819      	ldreq	r1, [r3, #0]
 8008322:	685b      	ldreq	r3, [r3, #4]
 8008324:	1809      	addeq	r1, r1, r0
 8008326:	6021      	streq	r1, [r4, #0]
 8008328:	e7ed      	b.n	8008306 <_free_r+0x1e>
 800832a:	461a      	mov	r2, r3
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	b10b      	cbz	r3, 8008334 <_free_r+0x4c>
 8008330:	42a3      	cmp	r3, r4
 8008332:	d9fa      	bls.n	800832a <_free_r+0x42>
 8008334:	6811      	ldr	r1, [r2, #0]
 8008336:	1850      	adds	r0, r2, r1
 8008338:	42a0      	cmp	r0, r4
 800833a:	d10b      	bne.n	8008354 <_free_r+0x6c>
 800833c:	6820      	ldr	r0, [r4, #0]
 800833e:	4401      	add	r1, r0
 8008340:	1850      	adds	r0, r2, r1
 8008342:	4283      	cmp	r3, r0
 8008344:	6011      	str	r1, [r2, #0]
 8008346:	d1e0      	bne.n	800830a <_free_r+0x22>
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	4408      	add	r0, r1
 800834e:	6010      	str	r0, [r2, #0]
 8008350:	6053      	str	r3, [r2, #4]
 8008352:	e7da      	b.n	800830a <_free_r+0x22>
 8008354:	d902      	bls.n	800835c <_free_r+0x74>
 8008356:	230c      	movs	r3, #12
 8008358:	602b      	str	r3, [r5, #0]
 800835a:	e7d6      	b.n	800830a <_free_r+0x22>
 800835c:	6820      	ldr	r0, [r4, #0]
 800835e:	1821      	adds	r1, r4, r0
 8008360:	428b      	cmp	r3, r1
 8008362:	bf01      	itttt	eq
 8008364:	6819      	ldreq	r1, [r3, #0]
 8008366:	685b      	ldreq	r3, [r3, #4]
 8008368:	1809      	addeq	r1, r1, r0
 800836a:	6021      	streq	r1, [r4, #0]
 800836c:	6063      	str	r3, [r4, #4]
 800836e:	6054      	str	r4, [r2, #4]
 8008370:	e7cb      	b.n	800830a <_free_r+0x22>
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	20000ba0 	.word	0x20000ba0

08008378 <rshift>:
 8008378:	6903      	ldr	r3, [r0, #16]
 800837a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800837e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008382:	f100 0414 	add.w	r4, r0, #20
 8008386:	ea4f 1261 	mov.w	r2, r1, asr #5
 800838a:	dd46      	ble.n	800841a <rshift+0xa2>
 800838c:	f011 011f 	ands.w	r1, r1, #31
 8008390:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008394:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008398:	d10c      	bne.n	80083b4 <rshift+0x3c>
 800839a:	4629      	mov	r1, r5
 800839c:	f100 0710 	add.w	r7, r0, #16
 80083a0:	42b1      	cmp	r1, r6
 80083a2:	d335      	bcc.n	8008410 <rshift+0x98>
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	1eea      	subs	r2, r5, #3
 80083aa:	4296      	cmp	r6, r2
 80083ac:	bf38      	it	cc
 80083ae:	2300      	movcc	r3, #0
 80083b0:	4423      	add	r3, r4
 80083b2:	e015      	b.n	80083e0 <rshift+0x68>
 80083b4:	46a1      	mov	r9, r4
 80083b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80083ba:	f1c1 0820 	rsb	r8, r1, #32
 80083be:	40cf      	lsrs	r7, r1
 80083c0:	f105 0e04 	add.w	lr, r5, #4
 80083c4:	4576      	cmp	r6, lr
 80083c6:	46f4      	mov	ip, lr
 80083c8:	d816      	bhi.n	80083f8 <rshift+0x80>
 80083ca:	1a9a      	subs	r2, r3, r2
 80083cc:	0092      	lsls	r2, r2, #2
 80083ce:	3a04      	subs	r2, #4
 80083d0:	3501      	adds	r5, #1
 80083d2:	42ae      	cmp	r6, r5
 80083d4:	bf38      	it	cc
 80083d6:	2200      	movcc	r2, #0
 80083d8:	18a3      	adds	r3, r4, r2
 80083da:	50a7      	str	r7, [r4, r2]
 80083dc:	b107      	cbz	r7, 80083e0 <rshift+0x68>
 80083de:	3304      	adds	r3, #4
 80083e0:	42a3      	cmp	r3, r4
 80083e2:	eba3 0204 	sub.w	r2, r3, r4
 80083e6:	bf08      	it	eq
 80083e8:	2300      	moveq	r3, #0
 80083ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80083ee:	6102      	str	r2, [r0, #16]
 80083f0:	bf08      	it	eq
 80083f2:	6143      	streq	r3, [r0, #20]
 80083f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083f8:	f8dc c000 	ldr.w	ip, [ip]
 80083fc:	fa0c fc08 	lsl.w	ip, ip, r8
 8008400:	ea4c 0707 	orr.w	r7, ip, r7
 8008404:	f849 7b04 	str.w	r7, [r9], #4
 8008408:	f85e 7b04 	ldr.w	r7, [lr], #4
 800840c:	40cf      	lsrs	r7, r1
 800840e:	e7d9      	b.n	80083c4 <rshift+0x4c>
 8008410:	f851 cb04 	ldr.w	ip, [r1], #4
 8008414:	f847 cf04 	str.w	ip, [r7, #4]!
 8008418:	e7c2      	b.n	80083a0 <rshift+0x28>
 800841a:	4623      	mov	r3, r4
 800841c:	e7e0      	b.n	80083e0 <rshift+0x68>

0800841e <__hexdig_fun>:
 800841e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008422:	2b09      	cmp	r3, #9
 8008424:	d802      	bhi.n	800842c <__hexdig_fun+0xe>
 8008426:	3820      	subs	r0, #32
 8008428:	b2c0      	uxtb	r0, r0
 800842a:	4770      	bx	lr
 800842c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008430:	2b05      	cmp	r3, #5
 8008432:	d801      	bhi.n	8008438 <__hexdig_fun+0x1a>
 8008434:	3847      	subs	r0, #71	@ 0x47
 8008436:	e7f7      	b.n	8008428 <__hexdig_fun+0xa>
 8008438:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800843c:	2b05      	cmp	r3, #5
 800843e:	d801      	bhi.n	8008444 <__hexdig_fun+0x26>
 8008440:	3827      	subs	r0, #39	@ 0x27
 8008442:	e7f1      	b.n	8008428 <__hexdig_fun+0xa>
 8008444:	2000      	movs	r0, #0
 8008446:	4770      	bx	lr

08008448 <__gethex>:
 8008448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844c:	468a      	mov	sl, r1
 800844e:	4690      	mov	r8, r2
 8008450:	b085      	sub	sp, #20
 8008452:	9302      	str	r3, [sp, #8]
 8008454:	680b      	ldr	r3, [r1, #0]
 8008456:	9001      	str	r0, [sp, #4]
 8008458:	1c9c      	adds	r4, r3, #2
 800845a:	46a1      	mov	r9, r4
 800845c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008460:	2830      	cmp	r0, #48	@ 0x30
 8008462:	d0fa      	beq.n	800845a <__gethex+0x12>
 8008464:	eba9 0303 	sub.w	r3, r9, r3
 8008468:	f1a3 0b02 	sub.w	fp, r3, #2
 800846c:	f7ff ffd7 	bl	800841e <__hexdig_fun>
 8008470:	4605      	mov	r5, r0
 8008472:	2800      	cmp	r0, #0
 8008474:	d168      	bne.n	8008548 <__gethex+0x100>
 8008476:	2201      	movs	r2, #1
 8008478:	4648      	mov	r0, r9
 800847a:	499f      	ldr	r1, [pc, #636]	@ (80086f8 <__gethex+0x2b0>)
 800847c:	f7fe ffec 	bl	8007458 <strncmp>
 8008480:	4607      	mov	r7, r0
 8008482:	2800      	cmp	r0, #0
 8008484:	d167      	bne.n	8008556 <__gethex+0x10e>
 8008486:	f899 0001 	ldrb.w	r0, [r9, #1]
 800848a:	4626      	mov	r6, r4
 800848c:	f7ff ffc7 	bl	800841e <__hexdig_fun>
 8008490:	2800      	cmp	r0, #0
 8008492:	d062      	beq.n	800855a <__gethex+0x112>
 8008494:	4623      	mov	r3, r4
 8008496:	7818      	ldrb	r0, [r3, #0]
 8008498:	4699      	mov	r9, r3
 800849a:	2830      	cmp	r0, #48	@ 0x30
 800849c:	f103 0301 	add.w	r3, r3, #1
 80084a0:	d0f9      	beq.n	8008496 <__gethex+0x4e>
 80084a2:	f7ff ffbc 	bl	800841e <__hexdig_fun>
 80084a6:	fab0 f580 	clz	r5, r0
 80084aa:	f04f 0b01 	mov.w	fp, #1
 80084ae:	096d      	lsrs	r5, r5, #5
 80084b0:	464a      	mov	r2, r9
 80084b2:	4616      	mov	r6, r2
 80084b4:	7830      	ldrb	r0, [r6, #0]
 80084b6:	3201      	adds	r2, #1
 80084b8:	f7ff ffb1 	bl	800841e <__hexdig_fun>
 80084bc:	2800      	cmp	r0, #0
 80084be:	d1f8      	bne.n	80084b2 <__gethex+0x6a>
 80084c0:	2201      	movs	r2, #1
 80084c2:	4630      	mov	r0, r6
 80084c4:	498c      	ldr	r1, [pc, #560]	@ (80086f8 <__gethex+0x2b0>)
 80084c6:	f7fe ffc7 	bl	8007458 <strncmp>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d13f      	bne.n	800854e <__gethex+0x106>
 80084ce:	b944      	cbnz	r4, 80084e2 <__gethex+0x9a>
 80084d0:	1c74      	adds	r4, r6, #1
 80084d2:	4622      	mov	r2, r4
 80084d4:	4616      	mov	r6, r2
 80084d6:	7830      	ldrb	r0, [r6, #0]
 80084d8:	3201      	adds	r2, #1
 80084da:	f7ff ffa0 	bl	800841e <__hexdig_fun>
 80084de:	2800      	cmp	r0, #0
 80084e0:	d1f8      	bne.n	80084d4 <__gethex+0x8c>
 80084e2:	1ba4      	subs	r4, r4, r6
 80084e4:	00a7      	lsls	r7, r4, #2
 80084e6:	7833      	ldrb	r3, [r6, #0]
 80084e8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80084ec:	2b50      	cmp	r3, #80	@ 0x50
 80084ee:	d13e      	bne.n	800856e <__gethex+0x126>
 80084f0:	7873      	ldrb	r3, [r6, #1]
 80084f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80084f4:	d033      	beq.n	800855e <__gethex+0x116>
 80084f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80084f8:	d034      	beq.n	8008564 <__gethex+0x11c>
 80084fa:	2400      	movs	r4, #0
 80084fc:	1c71      	adds	r1, r6, #1
 80084fe:	7808      	ldrb	r0, [r1, #0]
 8008500:	f7ff ff8d 	bl	800841e <__hexdig_fun>
 8008504:	1e43      	subs	r3, r0, #1
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b18      	cmp	r3, #24
 800850a:	d830      	bhi.n	800856e <__gethex+0x126>
 800850c:	f1a0 0210 	sub.w	r2, r0, #16
 8008510:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008514:	f7ff ff83 	bl	800841e <__hexdig_fun>
 8008518:	f100 3cff 	add.w	ip, r0, #4294967295
 800851c:	fa5f fc8c 	uxtb.w	ip, ip
 8008520:	f1bc 0f18 	cmp.w	ip, #24
 8008524:	f04f 030a 	mov.w	r3, #10
 8008528:	d91e      	bls.n	8008568 <__gethex+0x120>
 800852a:	b104      	cbz	r4, 800852e <__gethex+0xe6>
 800852c:	4252      	negs	r2, r2
 800852e:	4417      	add	r7, r2
 8008530:	f8ca 1000 	str.w	r1, [sl]
 8008534:	b1ed      	cbz	r5, 8008572 <__gethex+0x12a>
 8008536:	f1bb 0f00 	cmp.w	fp, #0
 800853a:	bf0c      	ite	eq
 800853c:	2506      	moveq	r5, #6
 800853e:	2500      	movne	r5, #0
 8008540:	4628      	mov	r0, r5
 8008542:	b005      	add	sp, #20
 8008544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008548:	2500      	movs	r5, #0
 800854a:	462c      	mov	r4, r5
 800854c:	e7b0      	b.n	80084b0 <__gethex+0x68>
 800854e:	2c00      	cmp	r4, #0
 8008550:	d1c7      	bne.n	80084e2 <__gethex+0x9a>
 8008552:	4627      	mov	r7, r4
 8008554:	e7c7      	b.n	80084e6 <__gethex+0x9e>
 8008556:	464e      	mov	r6, r9
 8008558:	462f      	mov	r7, r5
 800855a:	2501      	movs	r5, #1
 800855c:	e7c3      	b.n	80084e6 <__gethex+0x9e>
 800855e:	2400      	movs	r4, #0
 8008560:	1cb1      	adds	r1, r6, #2
 8008562:	e7cc      	b.n	80084fe <__gethex+0xb6>
 8008564:	2401      	movs	r4, #1
 8008566:	e7fb      	b.n	8008560 <__gethex+0x118>
 8008568:	fb03 0002 	mla	r0, r3, r2, r0
 800856c:	e7ce      	b.n	800850c <__gethex+0xc4>
 800856e:	4631      	mov	r1, r6
 8008570:	e7de      	b.n	8008530 <__gethex+0xe8>
 8008572:	4629      	mov	r1, r5
 8008574:	eba6 0309 	sub.w	r3, r6, r9
 8008578:	3b01      	subs	r3, #1
 800857a:	2b07      	cmp	r3, #7
 800857c:	dc0a      	bgt.n	8008594 <__gethex+0x14c>
 800857e:	9801      	ldr	r0, [sp, #4]
 8008580:	f000 fafc 	bl	8008b7c <_Balloc>
 8008584:	4604      	mov	r4, r0
 8008586:	b940      	cbnz	r0, 800859a <__gethex+0x152>
 8008588:	4602      	mov	r2, r0
 800858a:	21e4      	movs	r1, #228	@ 0xe4
 800858c:	4b5b      	ldr	r3, [pc, #364]	@ (80086fc <__gethex+0x2b4>)
 800858e:	485c      	ldr	r0, [pc, #368]	@ (8008700 <__gethex+0x2b8>)
 8008590:	f7ff f83c 	bl	800760c <__assert_func>
 8008594:	3101      	adds	r1, #1
 8008596:	105b      	asrs	r3, r3, #1
 8008598:	e7ef      	b.n	800857a <__gethex+0x132>
 800859a:	2300      	movs	r3, #0
 800859c:	f100 0a14 	add.w	sl, r0, #20
 80085a0:	4655      	mov	r5, sl
 80085a2:	469b      	mov	fp, r3
 80085a4:	45b1      	cmp	r9, r6
 80085a6:	d337      	bcc.n	8008618 <__gethex+0x1d0>
 80085a8:	f845 bb04 	str.w	fp, [r5], #4
 80085ac:	eba5 050a 	sub.w	r5, r5, sl
 80085b0:	10ad      	asrs	r5, r5, #2
 80085b2:	6125      	str	r5, [r4, #16]
 80085b4:	4658      	mov	r0, fp
 80085b6:	f000 fbd3 	bl	8008d60 <__hi0bits>
 80085ba:	016d      	lsls	r5, r5, #5
 80085bc:	f8d8 6000 	ldr.w	r6, [r8]
 80085c0:	1a2d      	subs	r5, r5, r0
 80085c2:	42b5      	cmp	r5, r6
 80085c4:	dd54      	ble.n	8008670 <__gethex+0x228>
 80085c6:	1bad      	subs	r5, r5, r6
 80085c8:	4629      	mov	r1, r5
 80085ca:	4620      	mov	r0, r4
 80085cc:	f000 ff5b 	bl	8009486 <__any_on>
 80085d0:	4681      	mov	r9, r0
 80085d2:	b178      	cbz	r0, 80085f4 <__gethex+0x1ac>
 80085d4:	f04f 0901 	mov.w	r9, #1
 80085d8:	1e6b      	subs	r3, r5, #1
 80085da:	1159      	asrs	r1, r3, #5
 80085dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80085e0:	f003 021f 	and.w	r2, r3, #31
 80085e4:	fa09 f202 	lsl.w	r2, r9, r2
 80085e8:	420a      	tst	r2, r1
 80085ea:	d003      	beq.n	80085f4 <__gethex+0x1ac>
 80085ec:	454b      	cmp	r3, r9
 80085ee:	dc36      	bgt.n	800865e <__gethex+0x216>
 80085f0:	f04f 0902 	mov.w	r9, #2
 80085f4:	4629      	mov	r1, r5
 80085f6:	4620      	mov	r0, r4
 80085f8:	f7ff febe 	bl	8008378 <rshift>
 80085fc:	442f      	add	r7, r5
 80085fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008602:	42bb      	cmp	r3, r7
 8008604:	da42      	bge.n	800868c <__gethex+0x244>
 8008606:	4621      	mov	r1, r4
 8008608:	9801      	ldr	r0, [sp, #4]
 800860a:	f000 faf7 	bl	8008bfc <_Bfree>
 800860e:	2300      	movs	r3, #0
 8008610:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008612:	25a3      	movs	r5, #163	@ 0xa3
 8008614:	6013      	str	r3, [r2, #0]
 8008616:	e793      	b.n	8008540 <__gethex+0xf8>
 8008618:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800861c:	2a2e      	cmp	r2, #46	@ 0x2e
 800861e:	d012      	beq.n	8008646 <__gethex+0x1fe>
 8008620:	2b20      	cmp	r3, #32
 8008622:	d104      	bne.n	800862e <__gethex+0x1e6>
 8008624:	f845 bb04 	str.w	fp, [r5], #4
 8008628:	f04f 0b00 	mov.w	fp, #0
 800862c:	465b      	mov	r3, fp
 800862e:	7830      	ldrb	r0, [r6, #0]
 8008630:	9303      	str	r3, [sp, #12]
 8008632:	f7ff fef4 	bl	800841e <__hexdig_fun>
 8008636:	9b03      	ldr	r3, [sp, #12]
 8008638:	f000 000f 	and.w	r0, r0, #15
 800863c:	4098      	lsls	r0, r3
 800863e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008642:	3304      	adds	r3, #4
 8008644:	e7ae      	b.n	80085a4 <__gethex+0x15c>
 8008646:	45b1      	cmp	r9, r6
 8008648:	d8ea      	bhi.n	8008620 <__gethex+0x1d8>
 800864a:	2201      	movs	r2, #1
 800864c:	4630      	mov	r0, r6
 800864e:	492a      	ldr	r1, [pc, #168]	@ (80086f8 <__gethex+0x2b0>)
 8008650:	9303      	str	r3, [sp, #12]
 8008652:	f7fe ff01 	bl	8007458 <strncmp>
 8008656:	9b03      	ldr	r3, [sp, #12]
 8008658:	2800      	cmp	r0, #0
 800865a:	d1e1      	bne.n	8008620 <__gethex+0x1d8>
 800865c:	e7a2      	b.n	80085a4 <__gethex+0x15c>
 800865e:	4620      	mov	r0, r4
 8008660:	1ea9      	subs	r1, r5, #2
 8008662:	f000 ff10 	bl	8009486 <__any_on>
 8008666:	2800      	cmp	r0, #0
 8008668:	d0c2      	beq.n	80085f0 <__gethex+0x1a8>
 800866a:	f04f 0903 	mov.w	r9, #3
 800866e:	e7c1      	b.n	80085f4 <__gethex+0x1ac>
 8008670:	da09      	bge.n	8008686 <__gethex+0x23e>
 8008672:	1b75      	subs	r5, r6, r5
 8008674:	4621      	mov	r1, r4
 8008676:	462a      	mov	r2, r5
 8008678:	9801      	ldr	r0, [sp, #4]
 800867a:	f000 fcd5 	bl	8009028 <__lshift>
 800867e:	4604      	mov	r4, r0
 8008680:	1b7f      	subs	r7, r7, r5
 8008682:	f100 0a14 	add.w	sl, r0, #20
 8008686:	f04f 0900 	mov.w	r9, #0
 800868a:	e7b8      	b.n	80085fe <__gethex+0x1b6>
 800868c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008690:	42bd      	cmp	r5, r7
 8008692:	dd6f      	ble.n	8008774 <__gethex+0x32c>
 8008694:	1bed      	subs	r5, r5, r7
 8008696:	42ae      	cmp	r6, r5
 8008698:	dc34      	bgt.n	8008704 <__gethex+0x2bc>
 800869a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d022      	beq.n	80086e8 <__gethex+0x2a0>
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d024      	beq.n	80086f0 <__gethex+0x2a8>
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d115      	bne.n	80086d6 <__gethex+0x28e>
 80086aa:	42ae      	cmp	r6, r5
 80086ac:	d113      	bne.n	80086d6 <__gethex+0x28e>
 80086ae:	2e01      	cmp	r6, #1
 80086b0:	d10b      	bne.n	80086ca <__gethex+0x282>
 80086b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80086b6:	9a02      	ldr	r2, [sp, #8]
 80086b8:	2562      	movs	r5, #98	@ 0x62
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	2301      	movs	r3, #1
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	f8ca 3000 	str.w	r3, [sl]
 80086c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086c6:	601c      	str	r4, [r3, #0]
 80086c8:	e73a      	b.n	8008540 <__gethex+0xf8>
 80086ca:	4620      	mov	r0, r4
 80086cc:	1e71      	subs	r1, r6, #1
 80086ce:	f000 feda 	bl	8009486 <__any_on>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d1ed      	bne.n	80086b2 <__gethex+0x26a>
 80086d6:	4621      	mov	r1, r4
 80086d8:	9801      	ldr	r0, [sp, #4]
 80086da:	f000 fa8f 	bl	8008bfc <_Bfree>
 80086de:	2300      	movs	r3, #0
 80086e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086e2:	2550      	movs	r5, #80	@ 0x50
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	e72b      	b.n	8008540 <__gethex+0xf8>
 80086e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1f3      	bne.n	80086d6 <__gethex+0x28e>
 80086ee:	e7e0      	b.n	80086b2 <__gethex+0x26a>
 80086f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1dd      	bne.n	80086b2 <__gethex+0x26a>
 80086f6:	e7ee      	b.n	80086d6 <__gethex+0x28e>
 80086f8:	0800acc6 	.word	0x0800acc6
 80086fc:	0800af10 	.word	0x0800af10
 8008700:	0800af21 	.word	0x0800af21
 8008704:	1e6f      	subs	r7, r5, #1
 8008706:	f1b9 0f00 	cmp.w	r9, #0
 800870a:	d130      	bne.n	800876e <__gethex+0x326>
 800870c:	b127      	cbz	r7, 8008718 <__gethex+0x2d0>
 800870e:	4639      	mov	r1, r7
 8008710:	4620      	mov	r0, r4
 8008712:	f000 feb8 	bl	8009486 <__any_on>
 8008716:	4681      	mov	r9, r0
 8008718:	2301      	movs	r3, #1
 800871a:	4629      	mov	r1, r5
 800871c:	1b76      	subs	r6, r6, r5
 800871e:	2502      	movs	r5, #2
 8008720:	117a      	asrs	r2, r7, #5
 8008722:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008726:	f007 071f 	and.w	r7, r7, #31
 800872a:	40bb      	lsls	r3, r7
 800872c:	4213      	tst	r3, r2
 800872e:	4620      	mov	r0, r4
 8008730:	bf18      	it	ne
 8008732:	f049 0902 	orrne.w	r9, r9, #2
 8008736:	f7ff fe1f 	bl	8008378 <rshift>
 800873a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800873e:	f1b9 0f00 	cmp.w	r9, #0
 8008742:	d047      	beq.n	80087d4 <__gethex+0x38c>
 8008744:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008748:	2b02      	cmp	r3, #2
 800874a:	d015      	beq.n	8008778 <__gethex+0x330>
 800874c:	2b03      	cmp	r3, #3
 800874e:	d017      	beq.n	8008780 <__gethex+0x338>
 8008750:	2b01      	cmp	r3, #1
 8008752:	d109      	bne.n	8008768 <__gethex+0x320>
 8008754:	f019 0f02 	tst.w	r9, #2
 8008758:	d006      	beq.n	8008768 <__gethex+0x320>
 800875a:	f8da 3000 	ldr.w	r3, [sl]
 800875e:	ea49 0903 	orr.w	r9, r9, r3
 8008762:	f019 0f01 	tst.w	r9, #1
 8008766:	d10e      	bne.n	8008786 <__gethex+0x33e>
 8008768:	f045 0510 	orr.w	r5, r5, #16
 800876c:	e032      	b.n	80087d4 <__gethex+0x38c>
 800876e:	f04f 0901 	mov.w	r9, #1
 8008772:	e7d1      	b.n	8008718 <__gethex+0x2d0>
 8008774:	2501      	movs	r5, #1
 8008776:	e7e2      	b.n	800873e <__gethex+0x2f6>
 8008778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800877a:	f1c3 0301 	rsb	r3, r3, #1
 800877e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0f0      	beq.n	8008768 <__gethex+0x320>
 8008786:	f04f 0c00 	mov.w	ip, #0
 800878a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800878e:	f104 0314 	add.w	r3, r4, #20
 8008792:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008796:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800879a:	4618      	mov	r0, r3
 800879c:	f853 2b04 	ldr.w	r2, [r3], #4
 80087a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80087a4:	d01b      	beq.n	80087de <__gethex+0x396>
 80087a6:	3201      	adds	r2, #1
 80087a8:	6002      	str	r2, [r0, #0]
 80087aa:	2d02      	cmp	r5, #2
 80087ac:	f104 0314 	add.w	r3, r4, #20
 80087b0:	d13c      	bne.n	800882c <__gethex+0x3e4>
 80087b2:	f8d8 2000 	ldr.w	r2, [r8]
 80087b6:	3a01      	subs	r2, #1
 80087b8:	42b2      	cmp	r2, r6
 80087ba:	d109      	bne.n	80087d0 <__gethex+0x388>
 80087bc:	2201      	movs	r2, #1
 80087be:	1171      	asrs	r1, r6, #5
 80087c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087c4:	f006 061f 	and.w	r6, r6, #31
 80087c8:	fa02 f606 	lsl.w	r6, r2, r6
 80087cc:	421e      	tst	r6, r3
 80087ce:	d13a      	bne.n	8008846 <__gethex+0x3fe>
 80087d0:	f045 0520 	orr.w	r5, r5, #32
 80087d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087d6:	601c      	str	r4, [r3, #0]
 80087d8:	9b02      	ldr	r3, [sp, #8]
 80087da:	601f      	str	r7, [r3, #0]
 80087dc:	e6b0      	b.n	8008540 <__gethex+0xf8>
 80087de:	4299      	cmp	r1, r3
 80087e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80087e4:	d8d9      	bhi.n	800879a <__gethex+0x352>
 80087e6:	68a3      	ldr	r3, [r4, #8]
 80087e8:	459b      	cmp	fp, r3
 80087ea:	db17      	blt.n	800881c <__gethex+0x3d4>
 80087ec:	6861      	ldr	r1, [r4, #4]
 80087ee:	9801      	ldr	r0, [sp, #4]
 80087f0:	3101      	adds	r1, #1
 80087f2:	f000 f9c3 	bl	8008b7c <_Balloc>
 80087f6:	4681      	mov	r9, r0
 80087f8:	b918      	cbnz	r0, 8008802 <__gethex+0x3ba>
 80087fa:	4602      	mov	r2, r0
 80087fc:	2184      	movs	r1, #132	@ 0x84
 80087fe:	4b19      	ldr	r3, [pc, #100]	@ (8008864 <__gethex+0x41c>)
 8008800:	e6c5      	b.n	800858e <__gethex+0x146>
 8008802:	6922      	ldr	r2, [r4, #16]
 8008804:	f104 010c 	add.w	r1, r4, #12
 8008808:	3202      	adds	r2, #2
 800880a:	0092      	lsls	r2, r2, #2
 800880c:	300c      	adds	r0, #12
 800880e:	f7fe fee4 	bl	80075da <memcpy>
 8008812:	4621      	mov	r1, r4
 8008814:	9801      	ldr	r0, [sp, #4]
 8008816:	f000 f9f1 	bl	8008bfc <_Bfree>
 800881a:	464c      	mov	r4, r9
 800881c:	6923      	ldr	r3, [r4, #16]
 800881e:	1c5a      	adds	r2, r3, #1
 8008820:	6122      	str	r2, [r4, #16]
 8008822:	2201      	movs	r2, #1
 8008824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008828:	615a      	str	r2, [r3, #20]
 800882a:	e7be      	b.n	80087aa <__gethex+0x362>
 800882c:	6922      	ldr	r2, [r4, #16]
 800882e:	455a      	cmp	r2, fp
 8008830:	dd0b      	ble.n	800884a <__gethex+0x402>
 8008832:	2101      	movs	r1, #1
 8008834:	4620      	mov	r0, r4
 8008836:	f7ff fd9f 	bl	8008378 <rshift>
 800883a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800883e:	3701      	adds	r7, #1
 8008840:	42bb      	cmp	r3, r7
 8008842:	f6ff aee0 	blt.w	8008606 <__gethex+0x1be>
 8008846:	2501      	movs	r5, #1
 8008848:	e7c2      	b.n	80087d0 <__gethex+0x388>
 800884a:	f016 061f 	ands.w	r6, r6, #31
 800884e:	d0fa      	beq.n	8008846 <__gethex+0x3fe>
 8008850:	4453      	add	r3, sl
 8008852:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008856:	f000 fa83 	bl	8008d60 <__hi0bits>
 800885a:	f1c6 0620 	rsb	r6, r6, #32
 800885e:	42b0      	cmp	r0, r6
 8008860:	dbe7      	blt.n	8008832 <__gethex+0x3ea>
 8008862:	e7f0      	b.n	8008846 <__gethex+0x3fe>
 8008864:	0800af10 	.word	0x0800af10

08008868 <L_shift>:
 8008868:	f1c2 0208 	rsb	r2, r2, #8
 800886c:	0092      	lsls	r2, r2, #2
 800886e:	b570      	push	{r4, r5, r6, lr}
 8008870:	f1c2 0620 	rsb	r6, r2, #32
 8008874:	6843      	ldr	r3, [r0, #4]
 8008876:	6804      	ldr	r4, [r0, #0]
 8008878:	fa03 f506 	lsl.w	r5, r3, r6
 800887c:	432c      	orrs	r4, r5
 800887e:	40d3      	lsrs	r3, r2
 8008880:	6004      	str	r4, [r0, #0]
 8008882:	f840 3f04 	str.w	r3, [r0, #4]!
 8008886:	4288      	cmp	r0, r1
 8008888:	d3f4      	bcc.n	8008874 <L_shift+0xc>
 800888a:	bd70      	pop	{r4, r5, r6, pc}

0800888c <__match>:
 800888c:	b530      	push	{r4, r5, lr}
 800888e:	6803      	ldr	r3, [r0, #0]
 8008890:	3301      	adds	r3, #1
 8008892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008896:	b914      	cbnz	r4, 800889e <__match+0x12>
 8008898:	6003      	str	r3, [r0, #0]
 800889a:	2001      	movs	r0, #1
 800889c:	bd30      	pop	{r4, r5, pc}
 800889e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088a2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80088a6:	2d19      	cmp	r5, #25
 80088a8:	bf98      	it	ls
 80088aa:	3220      	addls	r2, #32
 80088ac:	42a2      	cmp	r2, r4
 80088ae:	d0f0      	beq.n	8008892 <__match+0x6>
 80088b0:	2000      	movs	r0, #0
 80088b2:	e7f3      	b.n	800889c <__match+0x10>

080088b4 <__hexnan>:
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	2500      	movs	r5, #0
 80088ba:	680b      	ldr	r3, [r1, #0]
 80088bc:	4682      	mov	sl, r0
 80088be:	115e      	asrs	r6, r3, #5
 80088c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80088c4:	f013 031f 	ands.w	r3, r3, #31
 80088c8:	bf18      	it	ne
 80088ca:	3604      	addne	r6, #4
 80088cc:	1f37      	subs	r7, r6, #4
 80088ce:	4690      	mov	r8, r2
 80088d0:	46b9      	mov	r9, r7
 80088d2:	463c      	mov	r4, r7
 80088d4:	46ab      	mov	fp, r5
 80088d6:	b087      	sub	sp, #28
 80088d8:	6801      	ldr	r1, [r0, #0]
 80088da:	9301      	str	r3, [sp, #4]
 80088dc:	f846 5c04 	str.w	r5, [r6, #-4]
 80088e0:	9502      	str	r5, [sp, #8]
 80088e2:	784a      	ldrb	r2, [r1, #1]
 80088e4:	1c4b      	adds	r3, r1, #1
 80088e6:	9303      	str	r3, [sp, #12]
 80088e8:	b342      	cbz	r2, 800893c <__hexnan+0x88>
 80088ea:	4610      	mov	r0, r2
 80088ec:	9105      	str	r1, [sp, #20]
 80088ee:	9204      	str	r2, [sp, #16]
 80088f0:	f7ff fd95 	bl	800841e <__hexdig_fun>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d151      	bne.n	800899c <__hexnan+0xe8>
 80088f8:	9a04      	ldr	r2, [sp, #16]
 80088fa:	9905      	ldr	r1, [sp, #20]
 80088fc:	2a20      	cmp	r2, #32
 80088fe:	d818      	bhi.n	8008932 <__hexnan+0x7e>
 8008900:	9b02      	ldr	r3, [sp, #8]
 8008902:	459b      	cmp	fp, r3
 8008904:	dd13      	ble.n	800892e <__hexnan+0x7a>
 8008906:	454c      	cmp	r4, r9
 8008908:	d206      	bcs.n	8008918 <__hexnan+0x64>
 800890a:	2d07      	cmp	r5, #7
 800890c:	dc04      	bgt.n	8008918 <__hexnan+0x64>
 800890e:	462a      	mov	r2, r5
 8008910:	4649      	mov	r1, r9
 8008912:	4620      	mov	r0, r4
 8008914:	f7ff ffa8 	bl	8008868 <L_shift>
 8008918:	4544      	cmp	r4, r8
 800891a:	d952      	bls.n	80089c2 <__hexnan+0x10e>
 800891c:	2300      	movs	r3, #0
 800891e:	f1a4 0904 	sub.w	r9, r4, #4
 8008922:	f844 3c04 	str.w	r3, [r4, #-4]
 8008926:	461d      	mov	r5, r3
 8008928:	464c      	mov	r4, r9
 800892a:	f8cd b008 	str.w	fp, [sp, #8]
 800892e:	9903      	ldr	r1, [sp, #12]
 8008930:	e7d7      	b.n	80088e2 <__hexnan+0x2e>
 8008932:	2a29      	cmp	r2, #41	@ 0x29
 8008934:	d157      	bne.n	80089e6 <__hexnan+0x132>
 8008936:	3102      	adds	r1, #2
 8008938:	f8ca 1000 	str.w	r1, [sl]
 800893c:	f1bb 0f00 	cmp.w	fp, #0
 8008940:	d051      	beq.n	80089e6 <__hexnan+0x132>
 8008942:	454c      	cmp	r4, r9
 8008944:	d206      	bcs.n	8008954 <__hexnan+0xa0>
 8008946:	2d07      	cmp	r5, #7
 8008948:	dc04      	bgt.n	8008954 <__hexnan+0xa0>
 800894a:	462a      	mov	r2, r5
 800894c:	4649      	mov	r1, r9
 800894e:	4620      	mov	r0, r4
 8008950:	f7ff ff8a 	bl	8008868 <L_shift>
 8008954:	4544      	cmp	r4, r8
 8008956:	d936      	bls.n	80089c6 <__hexnan+0x112>
 8008958:	4623      	mov	r3, r4
 800895a:	f1a8 0204 	sub.w	r2, r8, #4
 800895e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008962:	429f      	cmp	r7, r3
 8008964:	f842 1f04 	str.w	r1, [r2, #4]!
 8008968:	d2f9      	bcs.n	800895e <__hexnan+0xaa>
 800896a:	1b3b      	subs	r3, r7, r4
 800896c:	f023 0303 	bic.w	r3, r3, #3
 8008970:	3304      	adds	r3, #4
 8008972:	3401      	adds	r4, #1
 8008974:	3e03      	subs	r6, #3
 8008976:	42b4      	cmp	r4, r6
 8008978:	bf88      	it	hi
 800897a:	2304      	movhi	r3, #4
 800897c:	2200      	movs	r2, #0
 800897e:	4443      	add	r3, r8
 8008980:	f843 2b04 	str.w	r2, [r3], #4
 8008984:	429f      	cmp	r7, r3
 8008986:	d2fb      	bcs.n	8008980 <__hexnan+0xcc>
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	b91b      	cbnz	r3, 8008994 <__hexnan+0xe0>
 800898c:	4547      	cmp	r7, r8
 800898e:	d128      	bne.n	80089e2 <__hexnan+0x12e>
 8008990:	2301      	movs	r3, #1
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	2005      	movs	r0, #5
 8008996:	b007      	add	sp, #28
 8008998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899c:	3501      	adds	r5, #1
 800899e:	2d08      	cmp	r5, #8
 80089a0:	f10b 0b01 	add.w	fp, fp, #1
 80089a4:	dd06      	ble.n	80089b4 <__hexnan+0x100>
 80089a6:	4544      	cmp	r4, r8
 80089a8:	d9c1      	bls.n	800892e <__hexnan+0x7a>
 80089aa:	2300      	movs	r3, #0
 80089ac:	2501      	movs	r5, #1
 80089ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80089b2:	3c04      	subs	r4, #4
 80089b4:	6822      	ldr	r2, [r4, #0]
 80089b6:	f000 000f 	and.w	r0, r0, #15
 80089ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80089be:	6020      	str	r0, [r4, #0]
 80089c0:	e7b5      	b.n	800892e <__hexnan+0x7a>
 80089c2:	2508      	movs	r5, #8
 80089c4:	e7b3      	b.n	800892e <__hexnan+0x7a>
 80089c6:	9b01      	ldr	r3, [sp, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d0dd      	beq.n	8008988 <__hexnan+0xd4>
 80089cc:	f04f 32ff 	mov.w	r2, #4294967295
 80089d0:	f1c3 0320 	rsb	r3, r3, #32
 80089d4:	40da      	lsrs	r2, r3
 80089d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80089da:	4013      	ands	r3, r2
 80089dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80089e0:	e7d2      	b.n	8008988 <__hexnan+0xd4>
 80089e2:	3f04      	subs	r7, #4
 80089e4:	e7d0      	b.n	8008988 <__hexnan+0xd4>
 80089e6:	2004      	movs	r0, #4
 80089e8:	e7d5      	b.n	8008996 <__hexnan+0xe2>
	...

080089ec <malloc>:
 80089ec:	4b02      	ldr	r3, [pc, #8]	@ (80089f8 <malloc+0xc>)
 80089ee:	4601      	mov	r1, r0
 80089f0:	6818      	ldr	r0, [r3, #0]
 80089f2:	f000 b825 	b.w	8008a40 <_malloc_r>
 80089f6:	bf00      	nop
 80089f8:	200002a8 	.word	0x200002a8

080089fc <sbrk_aligned>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	4e0f      	ldr	r6, [pc, #60]	@ (8008a3c <sbrk_aligned+0x40>)
 8008a00:	460c      	mov	r4, r1
 8008a02:	6831      	ldr	r1, [r6, #0]
 8008a04:	4605      	mov	r5, r0
 8008a06:	b911      	cbnz	r1, 8008a0e <sbrk_aligned+0x12>
 8008a08:	f001 fcf2 	bl	800a3f0 <_sbrk_r>
 8008a0c:	6030      	str	r0, [r6, #0]
 8008a0e:	4621      	mov	r1, r4
 8008a10:	4628      	mov	r0, r5
 8008a12:	f001 fced 	bl	800a3f0 <_sbrk_r>
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	d103      	bne.n	8008a22 <sbrk_aligned+0x26>
 8008a1a:	f04f 34ff 	mov.w	r4, #4294967295
 8008a1e:	4620      	mov	r0, r4
 8008a20:	bd70      	pop	{r4, r5, r6, pc}
 8008a22:	1cc4      	adds	r4, r0, #3
 8008a24:	f024 0403 	bic.w	r4, r4, #3
 8008a28:	42a0      	cmp	r0, r4
 8008a2a:	d0f8      	beq.n	8008a1e <sbrk_aligned+0x22>
 8008a2c:	1a21      	subs	r1, r4, r0
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f001 fcde 	bl	800a3f0 <_sbrk_r>
 8008a34:	3001      	adds	r0, #1
 8008a36:	d1f2      	bne.n	8008a1e <sbrk_aligned+0x22>
 8008a38:	e7ef      	b.n	8008a1a <sbrk_aligned+0x1e>
 8008a3a:	bf00      	nop
 8008a3c:	20000b9c 	.word	0x20000b9c

08008a40 <_malloc_r>:
 8008a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a44:	1ccd      	adds	r5, r1, #3
 8008a46:	f025 0503 	bic.w	r5, r5, #3
 8008a4a:	3508      	adds	r5, #8
 8008a4c:	2d0c      	cmp	r5, #12
 8008a4e:	bf38      	it	cc
 8008a50:	250c      	movcc	r5, #12
 8008a52:	2d00      	cmp	r5, #0
 8008a54:	4606      	mov	r6, r0
 8008a56:	db01      	blt.n	8008a5c <_malloc_r+0x1c>
 8008a58:	42a9      	cmp	r1, r5
 8008a5a:	d904      	bls.n	8008a66 <_malloc_r+0x26>
 8008a5c:	230c      	movs	r3, #12
 8008a5e:	6033      	str	r3, [r6, #0]
 8008a60:	2000      	movs	r0, #0
 8008a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b3c <_malloc_r+0xfc>
 8008a6a:	f000 f87b 	bl	8008b64 <__malloc_lock>
 8008a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a72:	461c      	mov	r4, r3
 8008a74:	bb44      	cbnz	r4, 8008ac8 <_malloc_r+0x88>
 8008a76:	4629      	mov	r1, r5
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f7ff ffbf 	bl	80089fc <sbrk_aligned>
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	4604      	mov	r4, r0
 8008a82:	d158      	bne.n	8008b36 <_malloc_r+0xf6>
 8008a84:	f8d8 4000 	ldr.w	r4, [r8]
 8008a88:	4627      	mov	r7, r4
 8008a8a:	2f00      	cmp	r7, #0
 8008a8c:	d143      	bne.n	8008b16 <_malloc_r+0xd6>
 8008a8e:	2c00      	cmp	r4, #0
 8008a90:	d04b      	beq.n	8008b2a <_malloc_r+0xea>
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	4639      	mov	r1, r7
 8008a96:	4630      	mov	r0, r6
 8008a98:	eb04 0903 	add.w	r9, r4, r3
 8008a9c:	f001 fca8 	bl	800a3f0 <_sbrk_r>
 8008aa0:	4581      	cmp	r9, r0
 8008aa2:	d142      	bne.n	8008b2a <_malloc_r+0xea>
 8008aa4:	6821      	ldr	r1, [r4, #0]
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	1a6d      	subs	r5, r5, r1
 8008aaa:	4629      	mov	r1, r5
 8008aac:	f7ff ffa6 	bl	80089fc <sbrk_aligned>
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d03a      	beq.n	8008b2a <_malloc_r+0xea>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	442b      	add	r3, r5
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	f8d8 3000 	ldr.w	r3, [r8]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	bb62      	cbnz	r2, 8008b1c <_malloc_r+0xdc>
 8008ac2:	f8c8 7000 	str.w	r7, [r8]
 8008ac6:	e00f      	b.n	8008ae8 <_malloc_r+0xa8>
 8008ac8:	6822      	ldr	r2, [r4, #0]
 8008aca:	1b52      	subs	r2, r2, r5
 8008acc:	d420      	bmi.n	8008b10 <_malloc_r+0xd0>
 8008ace:	2a0b      	cmp	r2, #11
 8008ad0:	d917      	bls.n	8008b02 <_malloc_r+0xc2>
 8008ad2:	1961      	adds	r1, r4, r5
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	6025      	str	r5, [r4, #0]
 8008ad8:	bf18      	it	ne
 8008ada:	6059      	strne	r1, [r3, #4]
 8008adc:	6863      	ldr	r3, [r4, #4]
 8008ade:	bf08      	it	eq
 8008ae0:	f8c8 1000 	streq.w	r1, [r8]
 8008ae4:	5162      	str	r2, [r4, r5]
 8008ae6:	604b      	str	r3, [r1, #4]
 8008ae8:	4630      	mov	r0, r6
 8008aea:	f000 f841 	bl	8008b70 <__malloc_unlock>
 8008aee:	f104 000b 	add.w	r0, r4, #11
 8008af2:	1d23      	adds	r3, r4, #4
 8008af4:	f020 0007 	bic.w	r0, r0, #7
 8008af8:	1ac2      	subs	r2, r0, r3
 8008afa:	bf1c      	itt	ne
 8008afc:	1a1b      	subne	r3, r3, r0
 8008afe:	50a3      	strne	r3, [r4, r2]
 8008b00:	e7af      	b.n	8008a62 <_malloc_r+0x22>
 8008b02:	6862      	ldr	r2, [r4, #4]
 8008b04:	42a3      	cmp	r3, r4
 8008b06:	bf0c      	ite	eq
 8008b08:	f8c8 2000 	streq.w	r2, [r8]
 8008b0c:	605a      	strne	r2, [r3, #4]
 8008b0e:	e7eb      	b.n	8008ae8 <_malloc_r+0xa8>
 8008b10:	4623      	mov	r3, r4
 8008b12:	6864      	ldr	r4, [r4, #4]
 8008b14:	e7ae      	b.n	8008a74 <_malloc_r+0x34>
 8008b16:	463c      	mov	r4, r7
 8008b18:	687f      	ldr	r7, [r7, #4]
 8008b1a:	e7b6      	b.n	8008a8a <_malloc_r+0x4a>
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	42a3      	cmp	r3, r4
 8008b22:	d1fb      	bne.n	8008b1c <_malloc_r+0xdc>
 8008b24:	2300      	movs	r3, #0
 8008b26:	6053      	str	r3, [r2, #4]
 8008b28:	e7de      	b.n	8008ae8 <_malloc_r+0xa8>
 8008b2a:	230c      	movs	r3, #12
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	6033      	str	r3, [r6, #0]
 8008b30:	f000 f81e 	bl	8008b70 <__malloc_unlock>
 8008b34:	e794      	b.n	8008a60 <_malloc_r+0x20>
 8008b36:	6005      	str	r5, [r0, #0]
 8008b38:	e7d6      	b.n	8008ae8 <_malloc_r+0xa8>
 8008b3a:	bf00      	nop
 8008b3c:	20000ba0 	.word	0x20000ba0

08008b40 <__ascii_mbtowc>:
 8008b40:	b082      	sub	sp, #8
 8008b42:	b901      	cbnz	r1, 8008b46 <__ascii_mbtowc+0x6>
 8008b44:	a901      	add	r1, sp, #4
 8008b46:	b142      	cbz	r2, 8008b5a <__ascii_mbtowc+0x1a>
 8008b48:	b14b      	cbz	r3, 8008b5e <__ascii_mbtowc+0x1e>
 8008b4a:	7813      	ldrb	r3, [r2, #0]
 8008b4c:	600b      	str	r3, [r1, #0]
 8008b4e:	7812      	ldrb	r2, [r2, #0]
 8008b50:	1e10      	subs	r0, r2, #0
 8008b52:	bf18      	it	ne
 8008b54:	2001      	movne	r0, #1
 8008b56:	b002      	add	sp, #8
 8008b58:	4770      	bx	lr
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	e7fb      	b.n	8008b56 <__ascii_mbtowc+0x16>
 8008b5e:	f06f 0001 	mvn.w	r0, #1
 8008b62:	e7f8      	b.n	8008b56 <__ascii_mbtowc+0x16>

08008b64 <__malloc_lock>:
 8008b64:	4801      	ldr	r0, [pc, #4]	@ (8008b6c <__malloc_lock+0x8>)
 8008b66:	f7fe bd28 	b.w	80075ba <__retarget_lock_acquire_recursive>
 8008b6a:	bf00      	nop
 8008b6c:	20000b98 	.word	0x20000b98

08008b70 <__malloc_unlock>:
 8008b70:	4801      	ldr	r0, [pc, #4]	@ (8008b78 <__malloc_unlock+0x8>)
 8008b72:	f7fe bd23 	b.w	80075bc <__retarget_lock_release_recursive>
 8008b76:	bf00      	nop
 8008b78:	20000b98 	.word	0x20000b98

08008b7c <_Balloc>:
 8008b7c:	b570      	push	{r4, r5, r6, lr}
 8008b7e:	69c6      	ldr	r6, [r0, #28]
 8008b80:	4604      	mov	r4, r0
 8008b82:	460d      	mov	r5, r1
 8008b84:	b976      	cbnz	r6, 8008ba4 <_Balloc+0x28>
 8008b86:	2010      	movs	r0, #16
 8008b88:	f7ff ff30 	bl	80089ec <malloc>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	61e0      	str	r0, [r4, #28]
 8008b90:	b920      	cbnz	r0, 8008b9c <_Balloc+0x20>
 8008b92:	216b      	movs	r1, #107	@ 0x6b
 8008b94:	4b17      	ldr	r3, [pc, #92]	@ (8008bf4 <_Balloc+0x78>)
 8008b96:	4818      	ldr	r0, [pc, #96]	@ (8008bf8 <_Balloc+0x7c>)
 8008b98:	f7fe fd38 	bl	800760c <__assert_func>
 8008b9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ba0:	6006      	str	r6, [r0, #0]
 8008ba2:	60c6      	str	r6, [r0, #12]
 8008ba4:	69e6      	ldr	r6, [r4, #28]
 8008ba6:	68f3      	ldr	r3, [r6, #12]
 8008ba8:	b183      	cbz	r3, 8008bcc <_Balloc+0x50>
 8008baa:	69e3      	ldr	r3, [r4, #28]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bb2:	b9b8      	cbnz	r0, 8008be4 <_Balloc+0x68>
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	fa01 f605 	lsl.w	r6, r1, r5
 8008bba:	1d72      	adds	r2, r6, #5
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	0092      	lsls	r2, r2, #2
 8008bc0:	f001 fc2d 	bl	800a41e <_calloc_r>
 8008bc4:	b160      	cbz	r0, 8008be0 <_Balloc+0x64>
 8008bc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bca:	e00e      	b.n	8008bea <_Balloc+0x6e>
 8008bcc:	2221      	movs	r2, #33	@ 0x21
 8008bce:	2104      	movs	r1, #4
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f001 fc24 	bl	800a41e <_calloc_r>
 8008bd6:	69e3      	ldr	r3, [r4, #28]
 8008bd8:	60f0      	str	r0, [r6, #12]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e4      	bne.n	8008baa <_Balloc+0x2e>
 8008be0:	2000      	movs	r0, #0
 8008be2:	bd70      	pop	{r4, r5, r6, pc}
 8008be4:	6802      	ldr	r2, [r0, #0]
 8008be6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bea:	2300      	movs	r3, #0
 8008bec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bf0:	e7f7      	b.n	8008be2 <_Balloc+0x66>
 8008bf2:	bf00      	nop
 8008bf4:	0800aea1 	.word	0x0800aea1
 8008bf8:	0800af81 	.word	0x0800af81

08008bfc <_Bfree>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	69c6      	ldr	r6, [r0, #28]
 8008c00:	4605      	mov	r5, r0
 8008c02:	460c      	mov	r4, r1
 8008c04:	b976      	cbnz	r6, 8008c24 <_Bfree+0x28>
 8008c06:	2010      	movs	r0, #16
 8008c08:	f7ff fef0 	bl	80089ec <malloc>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	61e8      	str	r0, [r5, #28]
 8008c10:	b920      	cbnz	r0, 8008c1c <_Bfree+0x20>
 8008c12:	218f      	movs	r1, #143	@ 0x8f
 8008c14:	4b08      	ldr	r3, [pc, #32]	@ (8008c38 <_Bfree+0x3c>)
 8008c16:	4809      	ldr	r0, [pc, #36]	@ (8008c3c <_Bfree+0x40>)
 8008c18:	f7fe fcf8 	bl	800760c <__assert_func>
 8008c1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c20:	6006      	str	r6, [r0, #0]
 8008c22:	60c6      	str	r6, [r0, #12]
 8008c24:	b13c      	cbz	r4, 8008c36 <_Bfree+0x3a>
 8008c26:	69eb      	ldr	r3, [r5, #28]
 8008c28:	6862      	ldr	r2, [r4, #4]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c30:	6021      	str	r1, [r4, #0]
 8008c32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
 8008c38:	0800aea1 	.word	0x0800aea1
 8008c3c:	0800af81 	.word	0x0800af81

08008c40 <__multadd>:
 8008c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c44:	4607      	mov	r7, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	461e      	mov	r6, r3
 8008c4a:	2000      	movs	r0, #0
 8008c4c:	690d      	ldr	r5, [r1, #16]
 8008c4e:	f101 0c14 	add.w	ip, r1, #20
 8008c52:	f8dc 3000 	ldr.w	r3, [ip]
 8008c56:	3001      	adds	r0, #1
 8008c58:	b299      	uxth	r1, r3
 8008c5a:	fb02 6101 	mla	r1, r2, r1, r6
 8008c5e:	0c1e      	lsrs	r6, r3, #16
 8008c60:	0c0b      	lsrs	r3, r1, #16
 8008c62:	fb02 3306 	mla	r3, r2, r6, r3
 8008c66:	b289      	uxth	r1, r1
 8008c68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c6c:	4285      	cmp	r5, r0
 8008c6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c72:	f84c 1b04 	str.w	r1, [ip], #4
 8008c76:	dcec      	bgt.n	8008c52 <__multadd+0x12>
 8008c78:	b30e      	cbz	r6, 8008cbe <__multadd+0x7e>
 8008c7a:	68a3      	ldr	r3, [r4, #8]
 8008c7c:	42ab      	cmp	r3, r5
 8008c7e:	dc19      	bgt.n	8008cb4 <__multadd+0x74>
 8008c80:	6861      	ldr	r1, [r4, #4]
 8008c82:	4638      	mov	r0, r7
 8008c84:	3101      	adds	r1, #1
 8008c86:	f7ff ff79 	bl	8008b7c <_Balloc>
 8008c8a:	4680      	mov	r8, r0
 8008c8c:	b928      	cbnz	r0, 8008c9a <__multadd+0x5a>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	21ba      	movs	r1, #186	@ 0xba
 8008c92:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc4 <__multadd+0x84>)
 8008c94:	480c      	ldr	r0, [pc, #48]	@ (8008cc8 <__multadd+0x88>)
 8008c96:	f7fe fcb9 	bl	800760c <__assert_func>
 8008c9a:	6922      	ldr	r2, [r4, #16]
 8008c9c:	f104 010c 	add.w	r1, r4, #12
 8008ca0:	3202      	adds	r2, #2
 8008ca2:	0092      	lsls	r2, r2, #2
 8008ca4:	300c      	adds	r0, #12
 8008ca6:	f7fe fc98 	bl	80075da <memcpy>
 8008caa:	4621      	mov	r1, r4
 8008cac:	4638      	mov	r0, r7
 8008cae:	f7ff ffa5 	bl	8008bfc <_Bfree>
 8008cb2:	4644      	mov	r4, r8
 8008cb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cb8:	3501      	adds	r5, #1
 8008cba:	615e      	str	r6, [r3, #20]
 8008cbc:	6125      	str	r5, [r4, #16]
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc4:	0800af10 	.word	0x0800af10
 8008cc8:	0800af81 	.word	0x0800af81

08008ccc <__s2b>:
 8008ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd0:	4615      	mov	r5, r2
 8008cd2:	2209      	movs	r2, #9
 8008cd4:	461f      	mov	r7, r3
 8008cd6:	3308      	adds	r3, #8
 8008cd8:	460c      	mov	r4, r1
 8008cda:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cde:	4606      	mov	r6, r0
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	db09      	blt.n	8008cfc <__s2b+0x30>
 8008ce8:	4630      	mov	r0, r6
 8008cea:	f7ff ff47 	bl	8008b7c <_Balloc>
 8008cee:	b940      	cbnz	r0, 8008d02 <__s2b+0x36>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	21d3      	movs	r1, #211	@ 0xd3
 8008cf4:	4b18      	ldr	r3, [pc, #96]	@ (8008d58 <__s2b+0x8c>)
 8008cf6:	4819      	ldr	r0, [pc, #100]	@ (8008d5c <__s2b+0x90>)
 8008cf8:	f7fe fc88 	bl	800760c <__assert_func>
 8008cfc:	0052      	lsls	r2, r2, #1
 8008cfe:	3101      	adds	r1, #1
 8008d00:	e7f0      	b.n	8008ce4 <__s2b+0x18>
 8008d02:	9b08      	ldr	r3, [sp, #32]
 8008d04:	2d09      	cmp	r5, #9
 8008d06:	6143      	str	r3, [r0, #20]
 8008d08:	f04f 0301 	mov.w	r3, #1
 8008d0c:	6103      	str	r3, [r0, #16]
 8008d0e:	dd16      	ble.n	8008d3e <__s2b+0x72>
 8008d10:	f104 0909 	add.w	r9, r4, #9
 8008d14:	46c8      	mov	r8, r9
 8008d16:	442c      	add	r4, r5
 8008d18:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d1c:	4601      	mov	r1, r0
 8008d1e:	220a      	movs	r2, #10
 8008d20:	4630      	mov	r0, r6
 8008d22:	3b30      	subs	r3, #48	@ 0x30
 8008d24:	f7ff ff8c 	bl	8008c40 <__multadd>
 8008d28:	45a0      	cmp	r8, r4
 8008d2a:	d1f5      	bne.n	8008d18 <__s2b+0x4c>
 8008d2c:	f1a5 0408 	sub.w	r4, r5, #8
 8008d30:	444c      	add	r4, r9
 8008d32:	1b2d      	subs	r5, r5, r4
 8008d34:	1963      	adds	r3, r4, r5
 8008d36:	42bb      	cmp	r3, r7
 8008d38:	db04      	blt.n	8008d44 <__s2b+0x78>
 8008d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d3e:	2509      	movs	r5, #9
 8008d40:	340a      	adds	r4, #10
 8008d42:	e7f6      	b.n	8008d32 <__s2b+0x66>
 8008d44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d48:	4601      	mov	r1, r0
 8008d4a:	220a      	movs	r2, #10
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	3b30      	subs	r3, #48	@ 0x30
 8008d50:	f7ff ff76 	bl	8008c40 <__multadd>
 8008d54:	e7ee      	b.n	8008d34 <__s2b+0x68>
 8008d56:	bf00      	nop
 8008d58:	0800af10 	.word	0x0800af10
 8008d5c:	0800af81 	.word	0x0800af81

08008d60 <__hi0bits>:
 8008d60:	4603      	mov	r3, r0
 8008d62:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d66:	bf3a      	itte	cc
 8008d68:	0403      	lslcc	r3, r0, #16
 8008d6a:	2010      	movcc	r0, #16
 8008d6c:	2000      	movcs	r0, #0
 8008d6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d72:	bf3c      	itt	cc
 8008d74:	021b      	lslcc	r3, r3, #8
 8008d76:	3008      	addcc	r0, #8
 8008d78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d7c:	bf3c      	itt	cc
 8008d7e:	011b      	lslcc	r3, r3, #4
 8008d80:	3004      	addcc	r0, #4
 8008d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d86:	bf3c      	itt	cc
 8008d88:	009b      	lslcc	r3, r3, #2
 8008d8a:	3002      	addcc	r0, #2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	db05      	blt.n	8008d9c <__hi0bits+0x3c>
 8008d90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d94:	f100 0001 	add.w	r0, r0, #1
 8008d98:	bf08      	it	eq
 8008d9a:	2020      	moveq	r0, #32
 8008d9c:	4770      	bx	lr

08008d9e <__lo0bits>:
 8008d9e:	6803      	ldr	r3, [r0, #0]
 8008da0:	4602      	mov	r2, r0
 8008da2:	f013 0007 	ands.w	r0, r3, #7
 8008da6:	d00b      	beq.n	8008dc0 <__lo0bits+0x22>
 8008da8:	07d9      	lsls	r1, r3, #31
 8008daa:	d421      	bmi.n	8008df0 <__lo0bits+0x52>
 8008dac:	0798      	lsls	r0, r3, #30
 8008dae:	bf49      	itett	mi
 8008db0:	085b      	lsrmi	r3, r3, #1
 8008db2:	089b      	lsrpl	r3, r3, #2
 8008db4:	2001      	movmi	r0, #1
 8008db6:	6013      	strmi	r3, [r2, #0]
 8008db8:	bf5c      	itt	pl
 8008dba:	2002      	movpl	r0, #2
 8008dbc:	6013      	strpl	r3, [r2, #0]
 8008dbe:	4770      	bx	lr
 8008dc0:	b299      	uxth	r1, r3
 8008dc2:	b909      	cbnz	r1, 8008dc8 <__lo0bits+0x2a>
 8008dc4:	2010      	movs	r0, #16
 8008dc6:	0c1b      	lsrs	r3, r3, #16
 8008dc8:	b2d9      	uxtb	r1, r3
 8008dca:	b909      	cbnz	r1, 8008dd0 <__lo0bits+0x32>
 8008dcc:	3008      	adds	r0, #8
 8008dce:	0a1b      	lsrs	r3, r3, #8
 8008dd0:	0719      	lsls	r1, r3, #28
 8008dd2:	bf04      	itt	eq
 8008dd4:	091b      	lsreq	r3, r3, #4
 8008dd6:	3004      	addeq	r0, #4
 8008dd8:	0799      	lsls	r1, r3, #30
 8008dda:	bf04      	itt	eq
 8008ddc:	089b      	lsreq	r3, r3, #2
 8008dde:	3002      	addeq	r0, #2
 8008de0:	07d9      	lsls	r1, r3, #31
 8008de2:	d403      	bmi.n	8008dec <__lo0bits+0x4e>
 8008de4:	085b      	lsrs	r3, r3, #1
 8008de6:	f100 0001 	add.w	r0, r0, #1
 8008dea:	d003      	beq.n	8008df4 <__lo0bits+0x56>
 8008dec:	6013      	str	r3, [r2, #0]
 8008dee:	4770      	bx	lr
 8008df0:	2000      	movs	r0, #0
 8008df2:	4770      	bx	lr
 8008df4:	2020      	movs	r0, #32
 8008df6:	4770      	bx	lr

08008df8 <__i2b>:
 8008df8:	b510      	push	{r4, lr}
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	f7ff febd 	bl	8008b7c <_Balloc>
 8008e02:	4602      	mov	r2, r0
 8008e04:	b928      	cbnz	r0, 8008e12 <__i2b+0x1a>
 8008e06:	f240 1145 	movw	r1, #325	@ 0x145
 8008e0a:	4b04      	ldr	r3, [pc, #16]	@ (8008e1c <__i2b+0x24>)
 8008e0c:	4804      	ldr	r0, [pc, #16]	@ (8008e20 <__i2b+0x28>)
 8008e0e:	f7fe fbfd 	bl	800760c <__assert_func>
 8008e12:	2301      	movs	r3, #1
 8008e14:	6144      	str	r4, [r0, #20]
 8008e16:	6103      	str	r3, [r0, #16]
 8008e18:	bd10      	pop	{r4, pc}
 8008e1a:	bf00      	nop
 8008e1c:	0800af10 	.word	0x0800af10
 8008e20:	0800af81 	.word	0x0800af81

08008e24 <__multiply>:
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	4614      	mov	r4, r2
 8008e2a:	690a      	ldr	r2, [r1, #16]
 8008e2c:	6923      	ldr	r3, [r4, #16]
 8008e2e:	460f      	mov	r7, r1
 8008e30:	429a      	cmp	r2, r3
 8008e32:	bfa2      	ittt	ge
 8008e34:	4623      	movge	r3, r4
 8008e36:	460c      	movge	r4, r1
 8008e38:	461f      	movge	r7, r3
 8008e3a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e3e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	6861      	ldr	r1, [r4, #4]
 8008e46:	eb0a 0609 	add.w	r6, sl, r9
 8008e4a:	42b3      	cmp	r3, r6
 8008e4c:	b085      	sub	sp, #20
 8008e4e:	bfb8      	it	lt
 8008e50:	3101      	addlt	r1, #1
 8008e52:	f7ff fe93 	bl	8008b7c <_Balloc>
 8008e56:	b930      	cbnz	r0, 8008e66 <__multiply+0x42>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e5e:	4b43      	ldr	r3, [pc, #268]	@ (8008f6c <__multiply+0x148>)
 8008e60:	4843      	ldr	r0, [pc, #268]	@ (8008f70 <__multiply+0x14c>)
 8008e62:	f7fe fbd3 	bl	800760c <__assert_func>
 8008e66:	f100 0514 	add.w	r5, r0, #20
 8008e6a:	462b      	mov	r3, r5
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e72:	4543      	cmp	r3, r8
 8008e74:	d321      	bcc.n	8008eba <__multiply+0x96>
 8008e76:	f107 0114 	add.w	r1, r7, #20
 8008e7a:	f104 0214 	add.w	r2, r4, #20
 8008e7e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008e82:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008e86:	9302      	str	r3, [sp, #8]
 8008e88:	1b13      	subs	r3, r2, r4
 8008e8a:	3b15      	subs	r3, #21
 8008e8c:	f023 0303 	bic.w	r3, r3, #3
 8008e90:	3304      	adds	r3, #4
 8008e92:	f104 0715 	add.w	r7, r4, #21
 8008e96:	42ba      	cmp	r2, r7
 8008e98:	bf38      	it	cc
 8008e9a:	2304      	movcc	r3, #4
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	9b02      	ldr	r3, [sp, #8]
 8008ea0:	9103      	str	r1, [sp, #12]
 8008ea2:	428b      	cmp	r3, r1
 8008ea4:	d80c      	bhi.n	8008ec0 <__multiply+0x9c>
 8008ea6:	2e00      	cmp	r6, #0
 8008ea8:	dd03      	ble.n	8008eb2 <__multiply+0x8e>
 8008eaa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d05a      	beq.n	8008f68 <__multiply+0x144>
 8008eb2:	6106      	str	r6, [r0, #16]
 8008eb4:	b005      	add	sp, #20
 8008eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eba:	f843 2b04 	str.w	r2, [r3], #4
 8008ebe:	e7d8      	b.n	8008e72 <__multiply+0x4e>
 8008ec0:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ec4:	f1ba 0f00 	cmp.w	sl, #0
 8008ec8:	d023      	beq.n	8008f12 <__multiply+0xee>
 8008eca:	46a9      	mov	r9, r5
 8008ecc:	f04f 0c00 	mov.w	ip, #0
 8008ed0:	f104 0e14 	add.w	lr, r4, #20
 8008ed4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ed8:	f8d9 3000 	ldr.w	r3, [r9]
 8008edc:	fa1f fb87 	uxth.w	fp, r7
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ee6:	4463      	add	r3, ip
 8008ee8:	f8d9 c000 	ldr.w	ip, [r9]
 8008eec:	0c3f      	lsrs	r7, r7, #16
 8008eee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008ef2:	fb0a c707 	mla	r7, sl, r7, ip
 8008ef6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f00:	4572      	cmp	r2, lr
 8008f02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f06:	f849 3b04 	str.w	r3, [r9], #4
 8008f0a:	d8e3      	bhi.n	8008ed4 <__multiply+0xb0>
 8008f0c:	9b01      	ldr	r3, [sp, #4]
 8008f0e:	f845 c003 	str.w	ip, [r5, r3]
 8008f12:	9b03      	ldr	r3, [sp, #12]
 8008f14:	3104      	adds	r1, #4
 8008f16:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f1a:	f1b9 0f00 	cmp.w	r9, #0
 8008f1e:	d021      	beq.n	8008f64 <__multiply+0x140>
 8008f20:	46ae      	mov	lr, r5
 8008f22:	f04f 0a00 	mov.w	sl, #0
 8008f26:	682b      	ldr	r3, [r5, #0]
 8008f28:	f104 0c14 	add.w	ip, r4, #20
 8008f2c:	f8bc b000 	ldrh.w	fp, [ip]
 8008f30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	fb09 770b 	mla	r7, r9, fp, r7
 8008f3a:	4457      	add	r7, sl
 8008f3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f40:	f84e 3b04 	str.w	r3, [lr], #4
 8008f44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f4c:	f8be 3000 	ldrh.w	r3, [lr]
 8008f50:	4562      	cmp	r2, ip
 8008f52:	fb09 330a 	mla	r3, r9, sl, r3
 8008f56:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008f5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f5e:	d8e5      	bhi.n	8008f2c <__multiply+0x108>
 8008f60:	9f01      	ldr	r7, [sp, #4]
 8008f62:	51eb      	str	r3, [r5, r7]
 8008f64:	3504      	adds	r5, #4
 8008f66:	e79a      	b.n	8008e9e <__multiply+0x7a>
 8008f68:	3e01      	subs	r6, #1
 8008f6a:	e79c      	b.n	8008ea6 <__multiply+0x82>
 8008f6c:	0800af10 	.word	0x0800af10
 8008f70:	0800af81 	.word	0x0800af81

08008f74 <__pow5mult>:
 8008f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f78:	4615      	mov	r5, r2
 8008f7a:	f012 0203 	ands.w	r2, r2, #3
 8008f7e:	4607      	mov	r7, r0
 8008f80:	460e      	mov	r6, r1
 8008f82:	d007      	beq.n	8008f94 <__pow5mult+0x20>
 8008f84:	4c25      	ldr	r4, [pc, #148]	@ (800901c <__pow5mult+0xa8>)
 8008f86:	3a01      	subs	r2, #1
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f8e:	f7ff fe57 	bl	8008c40 <__multadd>
 8008f92:	4606      	mov	r6, r0
 8008f94:	10ad      	asrs	r5, r5, #2
 8008f96:	d03d      	beq.n	8009014 <__pow5mult+0xa0>
 8008f98:	69fc      	ldr	r4, [r7, #28]
 8008f9a:	b97c      	cbnz	r4, 8008fbc <__pow5mult+0x48>
 8008f9c:	2010      	movs	r0, #16
 8008f9e:	f7ff fd25 	bl	80089ec <malloc>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	61f8      	str	r0, [r7, #28]
 8008fa6:	b928      	cbnz	r0, 8008fb4 <__pow5mult+0x40>
 8008fa8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008fac:	4b1c      	ldr	r3, [pc, #112]	@ (8009020 <__pow5mult+0xac>)
 8008fae:	481d      	ldr	r0, [pc, #116]	@ (8009024 <__pow5mult+0xb0>)
 8008fb0:	f7fe fb2c 	bl	800760c <__assert_func>
 8008fb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fb8:	6004      	str	r4, [r0, #0]
 8008fba:	60c4      	str	r4, [r0, #12]
 8008fbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008fc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fc4:	b94c      	cbnz	r4, 8008fda <__pow5mult+0x66>
 8008fc6:	f240 2171 	movw	r1, #625	@ 0x271
 8008fca:	4638      	mov	r0, r7
 8008fcc:	f7ff ff14 	bl	8008df8 <__i2b>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fd8:	6003      	str	r3, [r0, #0]
 8008fda:	f04f 0900 	mov.w	r9, #0
 8008fde:	07eb      	lsls	r3, r5, #31
 8008fe0:	d50a      	bpl.n	8008ff8 <__pow5mult+0x84>
 8008fe2:	4631      	mov	r1, r6
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	4638      	mov	r0, r7
 8008fe8:	f7ff ff1c 	bl	8008e24 <__multiply>
 8008fec:	4680      	mov	r8, r0
 8008fee:	4631      	mov	r1, r6
 8008ff0:	4638      	mov	r0, r7
 8008ff2:	f7ff fe03 	bl	8008bfc <_Bfree>
 8008ff6:	4646      	mov	r6, r8
 8008ff8:	106d      	asrs	r5, r5, #1
 8008ffa:	d00b      	beq.n	8009014 <__pow5mult+0xa0>
 8008ffc:	6820      	ldr	r0, [r4, #0]
 8008ffe:	b938      	cbnz	r0, 8009010 <__pow5mult+0x9c>
 8009000:	4622      	mov	r2, r4
 8009002:	4621      	mov	r1, r4
 8009004:	4638      	mov	r0, r7
 8009006:	f7ff ff0d 	bl	8008e24 <__multiply>
 800900a:	6020      	str	r0, [r4, #0]
 800900c:	f8c0 9000 	str.w	r9, [r0]
 8009010:	4604      	mov	r4, r0
 8009012:	e7e4      	b.n	8008fde <__pow5mult+0x6a>
 8009014:	4630      	mov	r0, r6
 8009016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800901a:	bf00      	nop
 800901c:	0800afdc 	.word	0x0800afdc
 8009020:	0800aea1 	.word	0x0800aea1
 8009024:	0800af81 	.word	0x0800af81

08009028 <__lshift>:
 8009028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800902c:	460c      	mov	r4, r1
 800902e:	4607      	mov	r7, r0
 8009030:	4691      	mov	r9, r2
 8009032:	6923      	ldr	r3, [r4, #16]
 8009034:	6849      	ldr	r1, [r1, #4]
 8009036:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800903a:	68a3      	ldr	r3, [r4, #8]
 800903c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009040:	f108 0601 	add.w	r6, r8, #1
 8009044:	42b3      	cmp	r3, r6
 8009046:	db0b      	blt.n	8009060 <__lshift+0x38>
 8009048:	4638      	mov	r0, r7
 800904a:	f7ff fd97 	bl	8008b7c <_Balloc>
 800904e:	4605      	mov	r5, r0
 8009050:	b948      	cbnz	r0, 8009066 <__lshift+0x3e>
 8009052:	4602      	mov	r2, r0
 8009054:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009058:	4b27      	ldr	r3, [pc, #156]	@ (80090f8 <__lshift+0xd0>)
 800905a:	4828      	ldr	r0, [pc, #160]	@ (80090fc <__lshift+0xd4>)
 800905c:	f7fe fad6 	bl	800760c <__assert_func>
 8009060:	3101      	adds	r1, #1
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	e7ee      	b.n	8009044 <__lshift+0x1c>
 8009066:	2300      	movs	r3, #0
 8009068:	f100 0114 	add.w	r1, r0, #20
 800906c:	f100 0210 	add.w	r2, r0, #16
 8009070:	4618      	mov	r0, r3
 8009072:	4553      	cmp	r3, sl
 8009074:	db33      	blt.n	80090de <__lshift+0xb6>
 8009076:	6920      	ldr	r0, [r4, #16]
 8009078:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800907c:	f104 0314 	add.w	r3, r4, #20
 8009080:	f019 091f 	ands.w	r9, r9, #31
 8009084:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009088:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800908c:	d02b      	beq.n	80090e6 <__lshift+0xbe>
 800908e:	468a      	mov	sl, r1
 8009090:	2200      	movs	r2, #0
 8009092:	f1c9 0e20 	rsb	lr, r9, #32
 8009096:	6818      	ldr	r0, [r3, #0]
 8009098:	fa00 f009 	lsl.w	r0, r0, r9
 800909c:	4310      	orrs	r0, r2
 800909e:	f84a 0b04 	str.w	r0, [sl], #4
 80090a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090a6:	459c      	cmp	ip, r3
 80090a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80090ac:	d8f3      	bhi.n	8009096 <__lshift+0x6e>
 80090ae:	ebac 0304 	sub.w	r3, ip, r4
 80090b2:	3b15      	subs	r3, #21
 80090b4:	f023 0303 	bic.w	r3, r3, #3
 80090b8:	3304      	adds	r3, #4
 80090ba:	f104 0015 	add.w	r0, r4, #21
 80090be:	4584      	cmp	ip, r0
 80090c0:	bf38      	it	cc
 80090c2:	2304      	movcc	r3, #4
 80090c4:	50ca      	str	r2, [r1, r3]
 80090c6:	b10a      	cbz	r2, 80090cc <__lshift+0xa4>
 80090c8:	f108 0602 	add.w	r6, r8, #2
 80090cc:	3e01      	subs	r6, #1
 80090ce:	4638      	mov	r0, r7
 80090d0:	4621      	mov	r1, r4
 80090d2:	612e      	str	r6, [r5, #16]
 80090d4:	f7ff fd92 	bl	8008bfc <_Bfree>
 80090d8:	4628      	mov	r0, r5
 80090da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090de:	f842 0f04 	str.w	r0, [r2, #4]!
 80090e2:	3301      	adds	r3, #1
 80090e4:	e7c5      	b.n	8009072 <__lshift+0x4a>
 80090e6:	3904      	subs	r1, #4
 80090e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090ec:	459c      	cmp	ip, r3
 80090ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80090f2:	d8f9      	bhi.n	80090e8 <__lshift+0xc0>
 80090f4:	e7ea      	b.n	80090cc <__lshift+0xa4>
 80090f6:	bf00      	nop
 80090f8:	0800af10 	.word	0x0800af10
 80090fc:	0800af81 	.word	0x0800af81

08009100 <__mcmp>:
 8009100:	4603      	mov	r3, r0
 8009102:	690a      	ldr	r2, [r1, #16]
 8009104:	6900      	ldr	r0, [r0, #16]
 8009106:	b530      	push	{r4, r5, lr}
 8009108:	1a80      	subs	r0, r0, r2
 800910a:	d10e      	bne.n	800912a <__mcmp+0x2a>
 800910c:	3314      	adds	r3, #20
 800910e:	3114      	adds	r1, #20
 8009110:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009114:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009118:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800911c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009120:	4295      	cmp	r5, r2
 8009122:	d003      	beq.n	800912c <__mcmp+0x2c>
 8009124:	d205      	bcs.n	8009132 <__mcmp+0x32>
 8009126:	f04f 30ff 	mov.w	r0, #4294967295
 800912a:	bd30      	pop	{r4, r5, pc}
 800912c:	42a3      	cmp	r3, r4
 800912e:	d3f3      	bcc.n	8009118 <__mcmp+0x18>
 8009130:	e7fb      	b.n	800912a <__mcmp+0x2a>
 8009132:	2001      	movs	r0, #1
 8009134:	e7f9      	b.n	800912a <__mcmp+0x2a>
	...

08009138 <__mdiff>:
 8009138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913c:	4689      	mov	r9, r1
 800913e:	4606      	mov	r6, r0
 8009140:	4611      	mov	r1, r2
 8009142:	4648      	mov	r0, r9
 8009144:	4614      	mov	r4, r2
 8009146:	f7ff ffdb 	bl	8009100 <__mcmp>
 800914a:	1e05      	subs	r5, r0, #0
 800914c:	d112      	bne.n	8009174 <__mdiff+0x3c>
 800914e:	4629      	mov	r1, r5
 8009150:	4630      	mov	r0, r6
 8009152:	f7ff fd13 	bl	8008b7c <_Balloc>
 8009156:	4602      	mov	r2, r0
 8009158:	b928      	cbnz	r0, 8009166 <__mdiff+0x2e>
 800915a:	f240 2137 	movw	r1, #567	@ 0x237
 800915e:	4b3e      	ldr	r3, [pc, #248]	@ (8009258 <__mdiff+0x120>)
 8009160:	483e      	ldr	r0, [pc, #248]	@ (800925c <__mdiff+0x124>)
 8009162:	f7fe fa53 	bl	800760c <__assert_func>
 8009166:	2301      	movs	r3, #1
 8009168:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800916c:	4610      	mov	r0, r2
 800916e:	b003      	add	sp, #12
 8009170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009174:	bfbc      	itt	lt
 8009176:	464b      	movlt	r3, r9
 8009178:	46a1      	movlt	r9, r4
 800917a:	4630      	mov	r0, r6
 800917c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009180:	bfba      	itte	lt
 8009182:	461c      	movlt	r4, r3
 8009184:	2501      	movlt	r5, #1
 8009186:	2500      	movge	r5, #0
 8009188:	f7ff fcf8 	bl	8008b7c <_Balloc>
 800918c:	4602      	mov	r2, r0
 800918e:	b918      	cbnz	r0, 8009198 <__mdiff+0x60>
 8009190:	f240 2145 	movw	r1, #581	@ 0x245
 8009194:	4b30      	ldr	r3, [pc, #192]	@ (8009258 <__mdiff+0x120>)
 8009196:	e7e3      	b.n	8009160 <__mdiff+0x28>
 8009198:	f100 0b14 	add.w	fp, r0, #20
 800919c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091a0:	f109 0310 	add.w	r3, r9, #16
 80091a4:	60c5      	str	r5, [r0, #12]
 80091a6:	f04f 0c00 	mov.w	ip, #0
 80091aa:	f109 0514 	add.w	r5, r9, #20
 80091ae:	46d9      	mov	r9, fp
 80091b0:	6926      	ldr	r6, [r4, #16]
 80091b2:	f104 0e14 	add.w	lr, r4, #20
 80091b6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091ba:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091be:	9301      	str	r3, [sp, #4]
 80091c0:	9b01      	ldr	r3, [sp, #4]
 80091c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80091c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091ca:	b281      	uxth	r1, r0
 80091cc:	9301      	str	r3, [sp, #4]
 80091ce:	fa1f f38a 	uxth.w	r3, sl
 80091d2:	1a5b      	subs	r3, r3, r1
 80091d4:	0c00      	lsrs	r0, r0, #16
 80091d6:	4463      	add	r3, ip
 80091d8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091dc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091e6:	4576      	cmp	r6, lr
 80091e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091ec:	f849 3b04 	str.w	r3, [r9], #4
 80091f0:	d8e6      	bhi.n	80091c0 <__mdiff+0x88>
 80091f2:	1b33      	subs	r3, r6, r4
 80091f4:	3b15      	subs	r3, #21
 80091f6:	f023 0303 	bic.w	r3, r3, #3
 80091fa:	3415      	adds	r4, #21
 80091fc:	3304      	adds	r3, #4
 80091fe:	42a6      	cmp	r6, r4
 8009200:	bf38      	it	cc
 8009202:	2304      	movcc	r3, #4
 8009204:	441d      	add	r5, r3
 8009206:	445b      	add	r3, fp
 8009208:	461e      	mov	r6, r3
 800920a:	462c      	mov	r4, r5
 800920c:	4544      	cmp	r4, r8
 800920e:	d30e      	bcc.n	800922e <__mdiff+0xf6>
 8009210:	f108 0103 	add.w	r1, r8, #3
 8009214:	1b49      	subs	r1, r1, r5
 8009216:	f021 0103 	bic.w	r1, r1, #3
 800921a:	3d03      	subs	r5, #3
 800921c:	45a8      	cmp	r8, r5
 800921e:	bf38      	it	cc
 8009220:	2100      	movcc	r1, #0
 8009222:	440b      	add	r3, r1
 8009224:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009228:	b199      	cbz	r1, 8009252 <__mdiff+0x11a>
 800922a:	6117      	str	r7, [r2, #16]
 800922c:	e79e      	b.n	800916c <__mdiff+0x34>
 800922e:	46e6      	mov	lr, ip
 8009230:	f854 1b04 	ldr.w	r1, [r4], #4
 8009234:	fa1f fc81 	uxth.w	ip, r1
 8009238:	44f4      	add	ip, lr
 800923a:	0c08      	lsrs	r0, r1, #16
 800923c:	4471      	add	r1, lr
 800923e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009242:	b289      	uxth	r1, r1
 8009244:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009248:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800924c:	f846 1b04 	str.w	r1, [r6], #4
 8009250:	e7dc      	b.n	800920c <__mdiff+0xd4>
 8009252:	3f01      	subs	r7, #1
 8009254:	e7e6      	b.n	8009224 <__mdiff+0xec>
 8009256:	bf00      	nop
 8009258:	0800af10 	.word	0x0800af10
 800925c:	0800af81 	.word	0x0800af81

08009260 <__ulp>:
 8009260:	4b0e      	ldr	r3, [pc, #56]	@ (800929c <__ulp+0x3c>)
 8009262:	400b      	ands	r3, r1
 8009264:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009268:	2b00      	cmp	r3, #0
 800926a:	dc08      	bgt.n	800927e <__ulp+0x1e>
 800926c:	425b      	negs	r3, r3
 800926e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009272:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009276:	da04      	bge.n	8009282 <__ulp+0x22>
 8009278:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800927c:	4113      	asrs	r3, r2
 800927e:	2200      	movs	r2, #0
 8009280:	e008      	b.n	8009294 <__ulp+0x34>
 8009282:	f1a2 0314 	sub.w	r3, r2, #20
 8009286:	2b1e      	cmp	r3, #30
 8009288:	bfd6      	itet	le
 800928a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800928e:	2201      	movgt	r2, #1
 8009290:	40da      	lsrle	r2, r3
 8009292:	2300      	movs	r3, #0
 8009294:	4619      	mov	r1, r3
 8009296:	4610      	mov	r0, r2
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	7ff00000 	.word	0x7ff00000

080092a0 <__b2d>:
 80092a0:	6902      	ldr	r2, [r0, #16]
 80092a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a4:	f100 0614 	add.w	r6, r0, #20
 80092a8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80092ac:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80092b0:	4f1e      	ldr	r7, [pc, #120]	@ (800932c <__b2d+0x8c>)
 80092b2:	4620      	mov	r0, r4
 80092b4:	f7ff fd54 	bl	8008d60 <__hi0bits>
 80092b8:	4603      	mov	r3, r0
 80092ba:	f1c0 0020 	rsb	r0, r0, #32
 80092be:	2b0a      	cmp	r3, #10
 80092c0:	f1a2 0504 	sub.w	r5, r2, #4
 80092c4:	6008      	str	r0, [r1, #0]
 80092c6:	dc12      	bgt.n	80092ee <__b2d+0x4e>
 80092c8:	42ae      	cmp	r6, r5
 80092ca:	bf2c      	ite	cs
 80092cc:	2200      	movcs	r2, #0
 80092ce:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80092d2:	f1c3 0c0b 	rsb	ip, r3, #11
 80092d6:	3315      	adds	r3, #21
 80092d8:	fa24 fe0c 	lsr.w	lr, r4, ip
 80092dc:	fa04 f303 	lsl.w	r3, r4, r3
 80092e0:	fa22 f20c 	lsr.w	r2, r2, ip
 80092e4:	ea4e 0107 	orr.w	r1, lr, r7
 80092e8:	431a      	orrs	r2, r3
 80092ea:	4610      	mov	r0, r2
 80092ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092ee:	42ae      	cmp	r6, r5
 80092f0:	bf36      	itet	cc
 80092f2:	f1a2 0508 	subcc.w	r5, r2, #8
 80092f6:	2200      	movcs	r2, #0
 80092f8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80092fc:	3b0b      	subs	r3, #11
 80092fe:	d012      	beq.n	8009326 <__b2d+0x86>
 8009300:	f1c3 0720 	rsb	r7, r3, #32
 8009304:	fa22 f107 	lsr.w	r1, r2, r7
 8009308:	409c      	lsls	r4, r3
 800930a:	430c      	orrs	r4, r1
 800930c:	42b5      	cmp	r5, r6
 800930e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009312:	bf94      	ite	ls
 8009314:	2400      	movls	r4, #0
 8009316:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800931a:	409a      	lsls	r2, r3
 800931c:	40fc      	lsrs	r4, r7
 800931e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009322:	4322      	orrs	r2, r4
 8009324:	e7e1      	b.n	80092ea <__b2d+0x4a>
 8009326:	ea44 0107 	orr.w	r1, r4, r7
 800932a:	e7de      	b.n	80092ea <__b2d+0x4a>
 800932c:	3ff00000 	.word	0x3ff00000

08009330 <__d2b>:
 8009330:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009334:	2101      	movs	r1, #1
 8009336:	4690      	mov	r8, r2
 8009338:	4699      	mov	r9, r3
 800933a:	9e08      	ldr	r6, [sp, #32]
 800933c:	f7ff fc1e 	bl	8008b7c <_Balloc>
 8009340:	4604      	mov	r4, r0
 8009342:	b930      	cbnz	r0, 8009352 <__d2b+0x22>
 8009344:	4602      	mov	r2, r0
 8009346:	f240 310f 	movw	r1, #783	@ 0x30f
 800934a:	4b23      	ldr	r3, [pc, #140]	@ (80093d8 <__d2b+0xa8>)
 800934c:	4823      	ldr	r0, [pc, #140]	@ (80093dc <__d2b+0xac>)
 800934e:	f7fe f95d 	bl	800760c <__assert_func>
 8009352:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009356:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800935a:	b10d      	cbz	r5, 8009360 <__d2b+0x30>
 800935c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	f1b8 0300 	subs.w	r3, r8, #0
 8009366:	d024      	beq.n	80093b2 <__d2b+0x82>
 8009368:	4668      	mov	r0, sp
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	f7ff fd17 	bl	8008d9e <__lo0bits>
 8009370:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009374:	b1d8      	cbz	r0, 80093ae <__d2b+0x7e>
 8009376:	f1c0 0320 	rsb	r3, r0, #32
 800937a:	fa02 f303 	lsl.w	r3, r2, r3
 800937e:	430b      	orrs	r3, r1
 8009380:	40c2      	lsrs	r2, r0
 8009382:	6163      	str	r3, [r4, #20]
 8009384:	9201      	str	r2, [sp, #4]
 8009386:	9b01      	ldr	r3, [sp, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	bf0c      	ite	eq
 800938c:	2201      	moveq	r2, #1
 800938e:	2202      	movne	r2, #2
 8009390:	61a3      	str	r3, [r4, #24]
 8009392:	6122      	str	r2, [r4, #16]
 8009394:	b1ad      	cbz	r5, 80093c2 <__d2b+0x92>
 8009396:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800939a:	4405      	add	r5, r0
 800939c:	6035      	str	r5, [r6, #0]
 800939e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093a4:	6018      	str	r0, [r3, #0]
 80093a6:	4620      	mov	r0, r4
 80093a8:	b002      	add	sp, #8
 80093aa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80093ae:	6161      	str	r1, [r4, #20]
 80093b0:	e7e9      	b.n	8009386 <__d2b+0x56>
 80093b2:	a801      	add	r0, sp, #4
 80093b4:	f7ff fcf3 	bl	8008d9e <__lo0bits>
 80093b8:	9b01      	ldr	r3, [sp, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	6163      	str	r3, [r4, #20]
 80093be:	3020      	adds	r0, #32
 80093c0:	e7e7      	b.n	8009392 <__d2b+0x62>
 80093c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80093c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093ca:	6030      	str	r0, [r6, #0]
 80093cc:	6918      	ldr	r0, [r3, #16]
 80093ce:	f7ff fcc7 	bl	8008d60 <__hi0bits>
 80093d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093d6:	e7e4      	b.n	80093a2 <__d2b+0x72>
 80093d8:	0800af10 	.word	0x0800af10
 80093dc:	0800af81 	.word	0x0800af81

080093e0 <__ratio>:
 80093e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	b085      	sub	sp, #20
 80093e6:	e9cd 1000 	strd	r1, r0, [sp]
 80093ea:	a902      	add	r1, sp, #8
 80093ec:	f7ff ff58 	bl	80092a0 <__b2d>
 80093f0:	468b      	mov	fp, r1
 80093f2:	4606      	mov	r6, r0
 80093f4:	460f      	mov	r7, r1
 80093f6:	9800      	ldr	r0, [sp, #0]
 80093f8:	a903      	add	r1, sp, #12
 80093fa:	f7ff ff51 	bl	80092a0 <__b2d>
 80093fe:	460d      	mov	r5, r1
 8009400:	9b01      	ldr	r3, [sp, #4]
 8009402:	4689      	mov	r9, r1
 8009404:	6919      	ldr	r1, [r3, #16]
 8009406:	9b00      	ldr	r3, [sp, #0]
 8009408:	4604      	mov	r4, r0
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	4630      	mov	r0, r6
 800940e:	1ac9      	subs	r1, r1, r3
 8009410:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009414:	1a9b      	subs	r3, r3, r2
 8009416:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800941a:	2b00      	cmp	r3, #0
 800941c:	bfcd      	iteet	gt
 800941e:	463a      	movgt	r2, r7
 8009420:	462a      	movle	r2, r5
 8009422:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009426:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800942a:	bfd8      	it	le
 800942c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009430:	464b      	mov	r3, r9
 8009432:	4622      	mov	r2, r4
 8009434:	4659      	mov	r1, fp
 8009436:	f7f7 f979 	bl	800072c <__aeabi_ddiv>
 800943a:	b005      	add	sp, #20
 800943c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009440 <__copybits>:
 8009440:	3901      	subs	r1, #1
 8009442:	b570      	push	{r4, r5, r6, lr}
 8009444:	1149      	asrs	r1, r1, #5
 8009446:	6914      	ldr	r4, [r2, #16]
 8009448:	3101      	adds	r1, #1
 800944a:	f102 0314 	add.w	r3, r2, #20
 800944e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009452:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009456:	1f05      	subs	r5, r0, #4
 8009458:	42a3      	cmp	r3, r4
 800945a:	d30c      	bcc.n	8009476 <__copybits+0x36>
 800945c:	1aa3      	subs	r3, r4, r2
 800945e:	3b11      	subs	r3, #17
 8009460:	f023 0303 	bic.w	r3, r3, #3
 8009464:	3211      	adds	r2, #17
 8009466:	42a2      	cmp	r2, r4
 8009468:	bf88      	it	hi
 800946a:	2300      	movhi	r3, #0
 800946c:	4418      	add	r0, r3
 800946e:	2300      	movs	r3, #0
 8009470:	4288      	cmp	r0, r1
 8009472:	d305      	bcc.n	8009480 <__copybits+0x40>
 8009474:	bd70      	pop	{r4, r5, r6, pc}
 8009476:	f853 6b04 	ldr.w	r6, [r3], #4
 800947a:	f845 6f04 	str.w	r6, [r5, #4]!
 800947e:	e7eb      	b.n	8009458 <__copybits+0x18>
 8009480:	f840 3b04 	str.w	r3, [r0], #4
 8009484:	e7f4      	b.n	8009470 <__copybits+0x30>

08009486 <__any_on>:
 8009486:	f100 0214 	add.w	r2, r0, #20
 800948a:	6900      	ldr	r0, [r0, #16]
 800948c:	114b      	asrs	r3, r1, #5
 800948e:	4298      	cmp	r0, r3
 8009490:	b510      	push	{r4, lr}
 8009492:	db11      	blt.n	80094b8 <__any_on+0x32>
 8009494:	dd0a      	ble.n	80094ac <__any_on+0x26>
 8009496:	f011 011f 	ands.w	r1, r1, #31
 800949a:	d007      	beq.n	80094ac <__any_on+0x26>
 800949c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094a0:	fa24 f001 	lsr.w	r0, r4, r1
 80094a4:	fa00 f101 	lsl.w	r1, r0, r1
 80094a8:	428c      	cmp	r4, r1
 80094aa:	d10b      	bne.n	80094c4 <__any_on+0x3e>
 80094ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d803      	bhi.n	80094bc <__any_on+0x36>
 80094b4:	2000      	movs	r0, #0
 80094b6:	bd10      	pop	{r4, pc}
 80094b8:	4603      	mov	r3, r0
 80094ba:	e7f7      	b.n	80094ac <__any_on+0x26>
 80094bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094c0:	2900      	cmp	r1, #0
 80094c2:	d0f5      	beq.n	80094b0 <__any_on+0x2a>
 80094c4:	2001      	movs	r0, #1
 80094c6:	e7f6      	b.n	80094b6 <__any_on+0x30>

080094c8 <__ascii_wctomb>:
 80094c8:	4603      	mov	r3, r0
 80094ca:	4608      	mov	r0, r1
 80094cc:	b141      	cbz	r1, 80094e0 <__ascii_wctomb+0x18>
 80094ce:	2aff      	cmp	r2, #255	@ 0xff
 80094d0:	d904      	bls.n	80094dc <__ascii_wctomb+0x14>
 80094d2:	228a      	movs	r2, #138	@ 0x8a
 80094d4:	f04f 30ff 	mov.w	r0, #4294967295
 80094d8:	601a      	str	r2, [r3, #0]
 80094da:	4770      	bx	lr
 80094dc:	2001      	movs	r0, #1
 80094de:	700a      	strb	r2, [r1, #0]
 80094e0:	4770      	bx	lr

080094e2 <__ssputs_r>:
 80094e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e6:	461f      	mov	r7, r3
 80094e8:	688e      	ldr	r6, [r1, #8]
 80094ea:	4682      	mov	sl, r0
 80094ec:	42be      	cmp	r6, r7
 80094ee:	460c      	mov	r4, r1
 80094f0:	4690      	mov	r8, r2
 80094f2:	680b      	ldr	r3, [r1, #0]
 80094f4:	d82d      	bhi.n	8009552 <__ssputs_r+0x70>
 80094f6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094fa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80094fe:	d026      	beq.n	800954e <__ssputs_r+0x6c>
 8009500:	6965      	ldr	r5, [r4, #20]
 8009502:	6909      	ldr	r1, [r1, #16]
 8009504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009508:	eba3 0901 	sub.w	r9, r3, r1
 800950c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009510:	1c7b      	adds	r3, r7, #1
 8009512:	444b      	add	r3, r9
 8009514:	106d      	asrs	r5, r5, #1
 8009516:	429d      	cmp	r5, r3
 8009518:	bf38      	it	cc
 800951a:	461d      	movcc	r5, r3
 800951c:	0553      	lsls	r3, r2, #21
 800951e:	d527      	bpl.n	8009570 <__ssputs_r+0x8e>
 8009520:	4629      	mov	r1, r5
 8009522:	f7ff fa8d 	bl	8008a40 <_malloc_r>
 8009526:	4606      	mov	r6, r0
 8009528:	b360      	cbz	r0, 8009584 <__ssputs_r+0xa2>
 800952a:	464a      	mov	r2, r9
 800952c:	6921      	ldr	r1, [r4, #16]
 800952e:	f7fe f854 	bl	80075da <memcpy>
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800953c:	81a3      	strh	r3, [r4, #12]
 800953e:	6126      	str	r6, [r4, #16]
 8009540:	444e      	add	r6, r9
 8009542:	6026      	str	r6, [r4, #0]
 8009544:	463e      	mov	r6, r7
 8009546:	6165      	str	r5, [r4, #20]
 8009548:	eba5 0509 	sub.w	r5, r5, r9
 800954c:	60a5      	str	r5, [r4, #8]
 800954e:	42be      	cmp	r6, r7
 8009550:	d900      	bls.n	8009554 <__ssputs_r+0x72>
 8009552:	463e      	mov	r6, r7
 8009554:	4632      	mov	r2, r6
 8009556:	4641      	mov	r1, r8
 8009558:	6820      	ldr	r0, [r4, #0]
 800955a:	f000 ff2f 	bl	800a3bc <memmove>
 800955e:	2000      	movs	r0, #0
 8009560:	68a3      	ldr	r3, [r4, #8]
 8009562:	1b9b      	subs	r3, r3, r6
 8009564:	60a3      	str	r3, [r4, #8]
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	4433      	add	r3, r6
 800956a:	6023      	str	r3, [r4, #0]
 800956c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009570:	462a      	mov	r2, r5
 8009572:	f000 ff68 	bl	800a446 <_realloc_r>
 8009576:	4606      	mov	r6, r0
 8009578:	2800      	cmp	r0, #0
 800957a:	d1e0      	bne.n	800953e <__ssputs_r+0x5c>
 800957c:	4650      	mov	r0, sl
 800957e:	6921      	ldr	r1, [r4, #16]
 8009580:	f7fe feb2 	bl	80082e8 <_free_r>
 8009584:	230c      	movs	r3, #12
 8009586:	f8ca 3000 	str.w	r3, [sl]
 800958a:	89a3      	ldrh	r3, [r4, #12]
 800958c:	f04f 30ff 	mov.w	r0, #4294967295
 8009590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009594:	81a3      	strh	r3, [r4, #12]
 8009596:	e7e9      	b.n	800956c <__ssputs_r+0x8a>

08009598 <_svfiprintf_r>:
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	4698      	mov	r8, r3
 800959e:	898b      	ldrh	r3, [r1, #12]
 80095a0:	4607      	mov	r7, r0
 80095a2:	061b      	lsls	r3, r3, #24
 80095a4:	460d      	mov	r5, r1
 80095a6:	4614      	mov	r4, r2
 80095a8:	b09d      	sub	sp, #116	@ 0x74
 80095aa:	d510      	bpl.n	80095ce <_svfiprintf_r+0x36>
 80095ac:	690b      	ldr	r3, [r1, #16]
 80095ae:	b973      	cbnz	r3, 80095ce <_svfiprintf_r+0x36>
 80095b0:	2140      	movs	r1, #64	@ 0x40
 80095b2:	f7ff fa45 	bl	8008a40 <_malloc_r>
 80095b6:	6028      	str	r0, [r5, #0]
 80095b8:	6128      	str	r0, [r5, #16]
 80095ba:	b930      	cbnz	r0, 80095ca <_svfiprintf_r+0x32>
 80095bc:	230c      	movs	r3, #12
 80095be:	603b      	str	r3, [r7, #0]
 80095c0:	f04f 30ff 	mov.w	r0, #4294967295
 80095c4:	b01d      	add	sp, #116	@ 0x74
 80095c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ca:	2340      	movs	r3, #64	@ 0x40
 80095cc:	616b      	str	r3, [r5, #20]
 80095ce:	2300      	movs	r3, #0
 80095d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80095d2:	2320      	movs	r3, #32
 80095d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095d8:	2330      	movs	r3, #48	@ 0x30
 80095da:	f04f 0901 	mov.w	r9, #1
 80095de:	f8cd 800c 	str.w	r8, [sp, #12]
 80095e2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800977c <_svfiprintf_r+0x1e4>
 80095e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095ea:	4623      	mov	r3, r4
 80095ec:	469a      	mov	sl, r3
 80095ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095f2:	b10a      	cbz	r2, 80095f8 <_svfiprintf_r+0x60>
 80095f4:	2a25      	cmp	r2, #37	@ 0x25
 80095f6:	d1f9      	bne.n	80095ec <_svfiprintf_r+0x54>
 80095f8:	ebba 0b04 	subs.w	fp, sl, r4
 80095fc:	d00b      	beq.n	8009616 <_svfiprintf_r+0x7e>
 80095fe:	465b      	mov	r3, fp
 8009600:	4622      	mov	r2, r4
 8009602:	4629      	mov	r1, r5
 8009604:	4638      	mov	r0, r7
 8009606:	f7ff ff6c 	bl	80094e2 <__ssputs_r>
 800960a:	3001      	adds	r0, #1
 800960c:	f000 80a7 	beq.w	800975e <_svfiprintf_r+0x1c6>
 8009610:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009612:	445a      	add	r2, fp
 8009614:	9209      	str	r2, [sp, #36]	@ 0x24
 8009616:	f89a 3000 	ldrb.w	r3, [sl]
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 809f 	beq.w	800975e <_svfiprintf_r+0x1c6>
 8009620:	2300      	movs	r3, #0
 8009622:	f04f 32ff 	mov.w	r2, #4294967295
 8009626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800962a:	f10a 0a01 	add.w	sl, sl, #1
 800962e:	9304      	str	r3, [sp, #16]
 8009630:	9307      	str	r3, [sp, #28]
 8009632:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009636:	931a      	str	r3, [sp, #104]	@ 0x68
 8009638:	4654      	mov	r4, sl
 800963a:	2205      	movs	r2, #5
 800963c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009640:	484e      	ldr	r0, [pc, #312]	@ (800977c <_svfiprintf_r+0x1e4>)
 8009642:	f7fd ffbc 	bl	80075be <memchr>
 8009646:	9a04      	ldr	r2, [sp, #16]
 8009648:	b9d8      	cbnz	r0, 8009682 <_svfiprintf_r+0xea>
 800964a:	06d0      	lsls	r0, r2, #27
 800964c:	bf44      	itt	mi
 800964e:	2320      	movmi	r3, #32
 8009650:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009654:	0711      	lsls	r1, r2, #28
 8009656:	bf44      	itt	mi
 8009658:	232b      	movmi	r3, #43	@ 0x2b
 800965a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800965e:	f89a 3000 	ldrb.w	r3, [sl]
 8009662:	2b2a      	cmp	r3, #42	@ 0x2a
 8009664:	d015      	beq.n	8009692 <_svfiprintf_r+0xfa>
 8009666:	4654      	mov	r4, sl
 8009668:	2000      	movs	r0, #0
 800966a:	f04f 0c0a 	mov.w	ip, #10
 800966e:	9a07      	ldr	r2, [sp, #28]
 8009670:	4621      	mov	r1, r4
 8009672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009676:	3b30      	subs	r3, #48	@ 0x30
 8009678:	2b09      	cmp	r3, #9
 800967a:	d94b      	bls.n	8009714 <_svfiprintf_r+0x17c>
 800967c:	b1b0      	cbz	r0, 80096ac <_svfiprintf_r+0x114>
 800967e:	9207      	str	r2, [sp, #28]
 8009680:	e014      	b.n	80096ac <_svfiprintf_r+0x114>
 8009682:	eba0 0308 	sub.w	r3, r0, r8
 8009686:	fa09 f303 	lsl.w	r3, r9, r3
 800968a:	4313      	orrs	r3, r2
 800968c:	46a2      	mov	sl, r4
 800968e:	9304      	str	r3, [sp, #16]
 8009690:	e7d2      	b.n	8009638 <_svfiprintf_r+0xa0>
 8009692:	9b03      	ldr	r3, [sp, #12]
 8009694:	1d19      	adds	r1, r3, #4
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	9103      	str	r1, [sp, #12]
 800969a:	2b00      	cmp	r3, #0
 800969c:	bfbb      	ittet	lt
 800969e:	425b      	neglt	r3, r3
 80096a0:	f042 0202 	orrlt.w	r2, r2, #2
 80096a4:	9307      	strge	r3, [sp, #28]
 80096a6:	9307      	strlt	r3, [sp, #28]
 80096a8:	bfb8      	it	lt
 80096aa:	9204      	strlt	r2, [sp, #16]
 80096ac:	7823      	ldrb	r3, [r4, #0]
 80096ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80096b0:	d10a      	bne.n	80096c8 <_svfiprintf_r+0x130>
 80096b2:	7863      	ldrb	r3, [r4, #1]
 80096b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80096b6:	d132      	bne.n	800971e <_svfiprintf_r+0x186>
 80096b8:	9b03      	ldr	r3, [sp, #12]
 80096ba:	3402      	adds	r4, #2
 80096bc:	1d1a      	adds	r2, r3, #4
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	9203      	str	r2, [sp, #12]
 80096c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096c6:	9305      	str	r3, [sp, #20]
 80096c8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009780 <_svfiprintf_r+0x1e8>
 80096cc:	2203      	movs	r2, #3
 80096ce:	4650      	mov	r0, sl
 80096d0:	7821      	ldrb	r1, [r4, #0]
 80096d2:	f7fd ff74 	bl	80075be <memchr>
 80096d6:	b138      	cbz	r0, 80096e8 <_svfiprintf_r+0x150>
 80096d8:	2240      	movs	r2, #64	@ 0x40
 80096da:	9b04      	ldr	r3, [sp, #16]
 80096dc:	eba0 000a 	sub.w	r0, r0, sl
 80096e0:	4082      	lsls	r2, r0
 80096e2:	4313      	orrs	r3, r2
 80096e4:	3401      	adds	r4, #1
 80096e6:	9304      	str	r3, [sp, #16]
 80096e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ec:	2206      	movs	r2, #6
 80096ee:	4825      	ldr	r0, [pc, #148]	@ (8009784 <_svfiprintf_r+0x1ec>)
 80096f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096f4:	f7fd ff63 	bl	80075be <memchr>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d036      	beq.n	800976a <_svfiprintf_r+0x1d2>
 80096fc:	4b22      	ldr	r3, [pc, #136]	@ (8009788 <_svfiprintf_r+0x1f0>)
 80096fe:	bb1b      	cbnz	r3, 8009748 <_svfiprintf_r+0x1b0>
 8009700:	9b03      	ldr	r3, [sp, #12]
 8009702:	3307      	adds	r3, #7
 8009704:	f023 0307 	bic.w	r3, r3, #7
 8009708:	3308      	adds	r3, #8
 800970a:	9303      	str	r3, [sp, #12]
 800970c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800970e:	4433      	add	r3, r6
 8009710:	9309      	str	r3, [sp, #36]	@ 0x24
 8009712:	e76a      	b.n	80095ea <_svfiprintf_r+0x52>
 8009714:	460c      	mov	r4, r1
 8009716:	2001      	movs	r0, #1
 8009718:	fb0c 3202 	mla	r2, ip, r2, r3
 800971c:	e7a8      	b.n	8009670 <_svfiprintf_r+0xd8>
 800971e:	2300      	movs	r3, #0
 8009720:	f04f 0c0a 	mov.w	ip, #10
 8009724:	4619      	mov	r1, r3
 8009726:	3401      	adds	r4, #1
 8009728:	9305      	str	r3, [sp, #20]
 800972a:	4620      	mov	r0, r4
 800972c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009730:	3a30      	subs	r2, #48	@ 0x30
 8009732:	2a09      	cmp	r2, #9
 8009734:	d903      	bls.n	800973e <_svfiprintf_r+0x1a6>
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0c6      	beq.n	80096c8 <_svfiprintf_r+0x130>
 800973a:	9105      	str	r1, [sp, #20]
 800973c:	e7c4      	b.n	80096c8 <_svfiprintf_r+0x130>
 800973e:	4604      	mov	r4, r0
 8009740:	2301      	movs	r3, #1
 8009742:	fb0c 2101 	mla	r1, ip, r1, r2
 8009746:	e7f0      	b.n	800972a <_svfiprintf_r+0x192>
 8009748:	ab03      	add	r3, sp, #12
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	462a      	mov	r2, r5
 800974e:	4638      	mov	r0, r7
 8009750:	4b0e      	ldr	r3, [pc, #56]	@ (800978c <_svfiprintf_r+0x1f4>)
 8009752:	a904      	add	r1, sp, #16
 8009754:	f7fc ff06 	bl	8006564 <_printf_float>
 8009758:	1c42      	adds	r2, r0, #1
 800975a:	4606      	mov	r6, r0
 800975c:	d1d6      	bne.n	800970c <_svfiprintf_r+0x174>
 800975e:	89ab      	ldrh	r3, [r5, #12]
 8009760:	065b      	lsls	r3, r3, #25
 8009762:	f53f af2d 	bmi.w	80095c0 <_svfiprintf_r+0x28>
 8009766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009768:	e72c      	b.n	80095c4 <_svfiprintf_r+0x2c>
 800976a:	ab03      	add	r3, sp, #12
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	462a      	mov	r2, r5
 8009770:	4638      	mov	r0, r7
 8009772:	4b06      	ldr	r3, [pc, #24]	@ (800978c <_svfiprintf_r+0x1f4>)
 8009774:	a904      	add	r1, sp, #16
 8009776:	f7fd f993 	bl	8006aa0 <_printf_i>
 800977a:	e7ed      	b.n	8009758 <_svfiprintf_r+0x1c0>
 800977c:	0800b0d8 	.word	0x0800b0d8
 8009780:	0800b0de 	.word	0x0800b0de
 8009784:	0800b0e2 	.word	0x0800b0e2
 8009788:	08006565 	.word	0x08006565
 800978c:	080094e3 	.word	0x080094e3

08009790 <_sungetc_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	1c4b      	adds	r3, r1, #1
 8009794:	4614      	mov	r4, r2
 8009796:	d103      	bne.n	80097a0 <_sungetc_r+0x10>
 8009798:	f04f 35ff 	mov.w	r5, #4294967295
 800979c:	4628      	mov	r0, r5
 800979e:	bd38      	pop	{r3, r4, r5, pc}
 80097a0:	8993      	ldrh	r3, [r2, #12]
 80097a2:	b2cd      	uxtb	r5, r1
 80097a4:	f023 0320 	bic.w	r3, r3, #32
 80097a8:	8193      	strh	r3, [r2, #12]
 80097aa:	6853      	ldr	r3, [r2, #4]
 80097ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80097ae:	b18a      	cbz	r2, 80097d4 <_sungetc_r+0x44>
 80097b0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80097b2:	429a      	cmp	r2, r3
 80097b4:	dd08      	ble.n	80097c8 <_sungetc_r+0x38>
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	1e5a      	subs	r2, r3, #1
 80097ba:	6022      	str	r2, [r4, #0]
 80097bc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80097c0:	6863      	ldr	r3, [r4, #4]
 80097c2:	3301      	adds	r3, #1
 80097c4:	6063      	str	r3, [r4, #4]
 80097c6:	e7e9      	b.n	800979c <_sungetc_r+0xc>
 80097c8:	4621      	mov	r1, r4
 80097ca:	f000 fd2a 	bl	800a222 <__submore>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	d0f1      	beq.n	80097b6 <_sungetc_r+0x26>
 80097d2:	e7e1      	b.n	8009798 <_sungetc_r+0x8>
 80097d4:	6921      	ldr	r1, [r4, #16]
 80097d6:	6822      	ldr	r2, [r4, #0]
 80097d8:	b141      	cbz	r1, 80097ec <_sungetc_r+0x5c>
 80097da:	4291      	cmp	r1, r2
 80097dc:	d206      	bcs.n	80097ec <_sungetc_r+0x5c>
 80097de:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80097e2:	42a9      	cmp	r1, r5
 80097e4:	d102      	bne.n	80097ec <_sungetc_r+0x5c>
 80097e6:	3a01      	subs	r2, #1
 80097e8:	6022      	str	r2, [r4, #0]
 80097ea:	e7ea      	b.n	80097c2 <_sungetc_r+0x32>
 80097ec:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80097f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80097f6:	2303      	movs	r3, #3
 80097f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80097fa:	4623      	mov	r3, r4
 80097fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	2301      	movs	r3, #1
 8009804:	e7de      	b.n	80097c4 <_sungetc_r+0x34>

08009806 <__ssrefill_r>:
 8009806:	b510      	push	{r4, lr}
 8009808:	460c      	mov	r4, r1
 800980a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800980c:	b169      	cbz	r1, 800982a <__ssrefill_r+0x24>
 800980e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009812:	4299      	cmp	r1, r3
 8009814:	d001      	beq.n	800981a <__ssrefill_r+0x14>
 8009816:	f7fe fd67 	bl	80082e8 <_free_r>
 800981a:	2000      	movs	r0, #0
 800981c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800981e:	6360      	str	r0, [r4, #52]	@ 0x34
 8009820:	6063      	str	r3, [r4, #4]
 8009822:	b113      	cbz	r3, 800982a <__ssrefill_r+0x24>
 8009824:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009826:	6023      	str	r3, [r4, #0]
 8009828:	bd10      	pop	{r4, pc}
 800982a:	6923      	ldr	r3, [r4, #16]
 800982c:	f04f 30ff 	mov.w	r0, #4294967295
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	2300      	movs	r3, #0
 8009834:	6063      	str	r3, [r4, #4]
 8009836:	89a3      	ldrh	r3, [r4, #12]
 8009838:	f043 0320 	orr.w	r3, r3, #32
 800983c:	81a3      	strh	r3, [r4, #12]
 800983e:	e7f3      	b.n	8009828 <__ssrefill_r+0x22>

08009840 <__ssvfiscanf_r>:
 8009840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009844:	460c      	mov	r4, r1
 8009846:	2100      	movs	r1, #0
 8009848:	4606      	mov	r6, r0
 800984a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800984e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009852:	49aa      	ldr	r1, [pc, #680]	@ (8009afc <__ssvfiscanf_r+0x2bc>)
 8009854:	f10d 0804 	add.w	r8, sp, #4
 8009858:	91a0      	str	r1, [sp, #640]	@ 0x280
 800985a:	49a9      	ldr	r1, [pc, #676]	@ (8009b00 <__ssvfiscanf_r+0x2c0>)
 800985c:	4fa9      	ldr	r7, [pc, #676]	@ (8009b04 <__ssvfiscanf_r+0x2c4>)
 800985e:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009862:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	7813      	ldrb	r3, [r2, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 8159 	beq.w	8009b20 <__ssvfiscanf_r+0x2e0>
 800986e:	5cf9      	ldrb	r1, [r7, r3]
 8009870:	1c55      	adds	r5, r2, #1
 8009872:	f011 0108 	ands.w	r1, r1, #8
 8009876:	d019      	beq.n	80098ac <__ssvfiscanf_r+0x6c>
 8009878:	6863      	ldr	r3, [r4, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	dd0f      	ble.n	800989e <__ssvfiscanf_r+0x5e>
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	781a      	ldrb	r2, [r3, #0]
 8009882:	5cba      	ldrb	r2, [r7, r2]
 8009884:	0712      	lsls	r2, r2, #28
 8009886:	d401      	bmi.n	800988c <__ssvfiscanf_r+0x4c>
 8009888:	462a      	mov	r2, r5
 800988a:	e7ec      	b.n	8009866 <__ssvfiscanf_r+0x26>
 800988c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800988e:	3301      	adds	r3, #1
 8009890:	3201      	adds	r2, #1
 8009892:	9245      	str	r2, [sp, #276]	@ 0x114
 8009894:	6862      	ldr	r2, [r4, #4]
 8009896:	6023      	str	r3, [r4, #0]
 8009898:	3a01      	subs	r2, #1
 800989a:	6062      	str	r2, [r4, #4]
 800989c:	e7ec      	b.n	8009878 <__ssvfiscanf_r+0x38>
 800989e:	4621      	mov	r1, r4
 80098a0:	4630      	mov	r0, r6
 80098a2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80098a4:	4798      	blx	r3
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d0e9      	beq.n	800987e <__ssvfiscanf_r+0x3e>
 80098aa:	e7ed      	b.n	8009888 <__ssvfiscanf_r+0x48>
 80098ac:	2b25      	cmp	r3, #37	@ 0x25
 80098ae:	d012      	beq.n	80098d6 <__ssvfiscanf_r+0x96>
 80098b0:	4699      	mov	r9, r3
 80098b2:	6863      	ldr	r3, [r4, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f340 8094 	ble.w	80099e2 <__ssvfiscanf_r+0x1a2>
 80098ba:	6822      	ldr	r2, [r4, #0]
 80098bc:	7813      	ldrb	r3, [r2, #0]
 80098be:	454b      	cmp	r3, r9
 80098c0:	f040 812e 	bne.w	8009b20 <__ssvfiscanf_r+0x2e0>
 80098c4:	6863      	ldr	r3, [r4, #4]
 80098c6:	3201      	adds	r2, #1
 80098c8:	3b01      	subs	r3, #1
 80098ca:	6063      	str	r3, [r4, #4]
 80098cc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80098ce:	6022      	str	r2, [r4, #0]
 80098d0:	3301      	adds	r3, #1
 80098d2:	9345      	str	r3, [sp, #276]	@ 0x114
 80098d4:	e7d8      	b.n	8009888 <__ssvfiscanf_r+0x48>
 80098d6:	9141      	str	r1, [sp, #260]	@ 0x104
 80098d8:	9143      	str	r1, [sp, #268]	@ 0x10c
 80098da:	7853      	ldrb	r3, [r2, #1]
 80098dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80098de:	bf04      	itt	eq
 80098e0:	2310      	moveq	r3, #16
 80098e2:	1c95      	addeq	r5, r2, #2
 80098e4:	f04f 020a 	mov.w	r2, #10
 80098e8:	bf08      	it	eq
 80098ea:	9341      	streq	r3, [sp, #260]	@ 0x104
 80098ec:	46a9      	mov	r9, r5
 80098ee:	f819 1b01 	ldrb.w	r1, [r9], #1
 80098f2:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80098f6:	2b09      	cmp	r3, #9
 80098f8:	d91e      	bls.n	8009938 <__ssvfiscanf_r+0xf8>
 80098fa:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8009b08 <__ssvfiscanf_r+0x2c8>
 80098fe:	2203      	movs	r2, #3
 8009900:	4650      	mov	r0, sl
 8009902:	f7fd fe5c 	bl	80075be <memchr>
 8009906:	b138      	cbz	r0, 8009918 <__ssvfiscanf_r+0xd8>
 8009908:	2301      	movs	r3, #1
 800990a:	464d      	mov	r5, r9
 800990c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800990e:	eba0 000a 	sub.w	r0, r0, sl
 8009912:	4083      	lsls	r3, r0
 8009914:	4313      	orrs	r3, r2
 8009916:	9341      	str	r3, [sp, #260]	@ 0x104
 8009918:	f815 3b01 	ldrb.w	r3, [r5], #1
 800991c:	2b78      	cmp	r3, #120	@ 0x78
 800991e:	d806      	bhi.n	800992e <__ssvfiscanf_r+0xee>
 8009920:	2b57      	cmp	r3, #87	@ 0x57
 8009922:	d810      	bhi.n	8009946 <__ssvfiscanf_r+0x106>
 8009924:	2b25      	cmp	r3, #37	@ 0x25
 8009926:	d0c3      	beq.n	80098b0 <__ssvfiscanf_r+0x70>
 8009928:	d856      	bhi.n	80099d8 <__ssvfiscanf_r+0x198>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d064      	beq.n	80099f8 <__ssvfiscanf_r+0x1b8>
 800992e:	2303      	movs	r3, #3
 8009930:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009932:	230a      	movs	r3, #10
 8009934:	9342      	str	r3, [sp, #264]	@ 0x108
 8009936:	e077      	b.n	8009a28 <__ssvfiscanf_r+0x1e8>
 8009938:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800993a:	464d      	mov	r5, r9
 800993c:	fb02 1103 	mla	r1, r2, r3, r1
 8009940:	3930      	subs	r1, #48	@ 0x30
 8009942:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009944:	e7d2      	b.n	80098ec <__ssvfiscanf_r+0xac>
 8009946:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800994a:	2a20      	cmp	r2, #32
 800994c:	d8ef      	bhi.n	800992e <__ssvfiscanf_r+0xee>
 800994e:	a101      	add	r1, pc, #4	@ (adr r1, 8009954 <__ssvfiscanf_r+0x114>)
 8009950:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009954:	08009a07 	.word	0x08009a07
 8009958:	0800992f 	.word	0x0800992f
 800995c:	0800992f 	.word	0x0800992f
 8009960:	08009a61 	.word	0x08009a61
 8009964:	0800992f 	.word	0x0800992f
 8009968:	0800992f 	.word	0x0800992f
 800996c:	0800992f 	.word	0x0800992f
 8009970:	0800992f 	.word	0x0800992f
 8009974:	0800992f 	.word	0x0800992f
 8009978:	0800992f 	.word	0x0800992f
 800997c:	0800992f 	.word	0x0800992f
 8009980:	08009a77 	.word	0x08009a77
 8009984:	08009a5d 	.word	0x08009a5d
 8009988:	080099df 	.word	0x080099df
 800998c:	080099df 	.word	0x080099df
 8009990:	080099df 	.word	0x080099df
 8009994:	0800992f 	.word	0x0800992f
 8009998:	08009a19 	.word	0x08009a19
 800999c:	0800992f 	.word	0x0800992f
 80099a0:	0800992f 	.word	0x0800992f
 80099a4:	0800992f 	.word	0x0800992f
 80099a8:	0800992f 	.word	0x0800992f
 80099ac:	08009a87 	.word	0x08009a87
 80099b0:	08009a21 	.word	0x08009a21
 80099b4:	080099ff 	.word	0x080099ff
 80099b8:	0800992f 	.word	0x0800992f
 80099bc:	0800992f 	.word	0x0800992f
 80099c0:	08009a83 	.word	0x08009a83
 80099c4:	0800992f 	.word	0x0800992f
 80099c8:	08009a5d 	.word	0x08009a5d
 80099cc:	0800992f 	.word	0x0800992f
 80099d0:	0800992f 	.word	0x0800992f
 80099d4:	08009a07 	.word	0x08009a07
 80099d8:	3b45      	subs	r3, #69	@ 0x45
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d8a7      	bhi.n	800992e <__ssvfiscanf_r+0xee>
 80099de:	2305      	movs	r3, #5
 80099e0:	e021      	b.n	8009a26 <__ssvfiscanf_r+0x1e6>
 80099e2:	4621      	mov	r1, r4
 80099e4:	4630      	mov	r0, r6
 80099e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80099e8:	4798      	blx	r3
 80099ea:	2800      	cmp	r0, #0
 80099ec:	f43f af65 	beq.w	80098ba <__ssvfiscanf_r+0x7a>
 80099f0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80099f2:	2800      	cmp	r0, #0
 80099f4:	f040 808c 	bne.w	8009b10 <__ssvfiscanf_r+0x2d0>
 80099f8:	f04f 30ff 	mov.w	r0, #4294967295
 80099fc:	e08c      	b.n	8009b18 <__ssvfiscanf_r+0x2d8>
 80099fe:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009a00:	f042 0220 	orr.w	r2, r2, #32
 8009a04:	9241      	str	r2, [sp, #260]	@ 0x104
 8009a06:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009a08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a0c:	9241      	str	r2, [sp, #260]	@ 0x104
 8009a0e:	2210      	movs	r2, #16
 8009a10:	2b6e      	cmp	r3, #110	@ 0x6e
 8009a12:	9242      	str	r2, [sp, #264]	@ 0x108
 8009a14:	d902      	bls.n	8009a1c <__ssvfiscanf_r+0x1dc>
 8009a16:	e005      	b.n	8009a24 <__ssvfiscanf_r+0x1e4>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	9342      	str	r3, [sp, #264]	@ 0x108
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e002      	b.n	8009a26 <__ssvfiscanf_r+0x1e6>
 8009a20:	2308      	movs	r3, #8
 8009a22:	9342      	str	r3, [sp, #264]	@ 0x108
 8009a24:	2304      	movs	r3, #4
 8009a26:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009a28:	6863      	ldr	r3, [r4, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	dd39      	ble.n	8009aa2 <__ssvfiscanf_r+0x262>
 8009a2e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009a30:	0659      	lsls	r1, r3, #25
 8009a32:	d404      	bmi.n	8009a3e <__ssvfiscanf_r+0x1fe>
 8009a34:	6823      	ldr	r3, [r4, #0]
 8009a36:	781a      	ldrb	r2, [r3, #0]
 8009a38:	5cba      	ldrb	r2, [r7, r2]
 8009a3a:	0712      	lsls	r2, r2, #28
 8009a3c:	d438      	bmi.n	8009ab0 <__ssvfiscanf_r+0x270>
 8009a3e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	dc47      	bgt.n	8009ad4 <__ssvfiscanf_r+0x294>
 8009a44:	466b      	mov	r3, sp
 8009a46:	4622      	mov	r2, r4
 8009a48:	4630      	mov	r0, r6
 8009a4a:	a941      	add	r1, sp, #260	@ 0x104
 8009a4c:	f000 f9aa 	bl	8009da4 <_scanf_chars>
 8009a50:	2801      	cmp	r0, #1
 8009a52:	d065      	beq.n	8009b20 <__ssvfiscanf_r+0x2e0>
 8009a54:	2802      	cmp	r0, #2
 8009a56:	f47f af17 	bne.w	8009888 <__ssvfiscanf_r+0x48>
 8009a5a:	e7c9      	b.n	80099f0 <__ssvfiscanf_r+0x1b0>
 8009a5c:	220a      	movs	r2, #10
 8009a5e:	e7d7      	b.n	8009a10 <__ssvfiscanf_r+0x1d0>
 8009a60:	4629      	mov	r1, r5
 8009a62:	4640      	mov	r0, r8
 8009a64:	f000 fba4 	bl	800a1b0 <__sccl>
 8009a68:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a70:	9341      	str	r3, [sp, #260]	@ 0x104
 8009a72:	2301      	movs	r3, #1
 8009a74:	e7d7      	b.n	8009a26 <__ssvfiscanf_r+0x1e6>
 8009a76:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009a78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a7c:	9341      	str	r3, [sp, #260]	@ 0x104
 8009a7e:	2300      	movs	r3, #0
 8009a80:	e7d1      	b.n	8009a26 <__ssvfiscanf_r+0x1e6>
 8009a82:	2302      	movs	r3, #2
 8009a84:	e7cf      	b.n	8009a26 <__ssvfiscanf_r+0x1e6>
 8009a86:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009a88:	06c3      	lsls	r3, r0, #27
 8009a8a:	f53f aefd 	bmi.w	8009888 <__ssvfiscanf_r+0x48>
 8009a8e:	9b00      	ldr	r3, [sp, #0]
 8009a90:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009a92:	1d19      	adds	r1, r3, #4
 8009a94:	9100      	str	r1, [sp, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	07c0      	lsls	r0, r0, #31
 8009a9a:	bf4c      	ite	mi
 8009a9c:	801a      	strhmi	r2, [r3, #0]
 8009a9e:	601a      	strpl	r2, [r3, #0]
 8009aa0:	e6f2      	b.n	8009888 <__ssvfiscanf_r+0x48>
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009aa8:	4798      	blx	r3
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	d0bf      	beq.n	8009a2e <__ssvfiscanf_r+0x1ee>
 8009aae:	e79f      	b.n	80099f0 <__ssvfiscanf_r+0x1b0>
 8009ab0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009ab2:	3201      	adds	r2, #1
 8009ab4:	9245      	str	r2, [sp, #276]	@ 0x114
 8009ab6:	6862      	ldr	r2, [r4, #4]
 8009ab8:	3a01      	subs	r2, #1
 8009aba:	2a00      	cmp	r2, #0
 8009abc:	6062      	str	r2, [r4, #4]
 8009abe:	dd02      	ble.n	8009ac6 <__ssvfiscanf_r+0x286>
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	6023      	str	r3, [r4, #0]
 8009ac4:	e7b6      	b.n	8009a34 <__ssvfiscanf_r+0x1f4>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4630      	mov	r0, r6
 8009aca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009acc:	4798      	blx	r3
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d0b0      	beq.n	8009a34 <__ssvfiscanf_r+0x1f4>
 8009ad2:	e78d      	b.n	80099f0 <__ssvfiscanf_r+0x1b0>
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	dc06      	bgt.n	8009ae6 <__ssvfiscanf_r+0x2a6>
 8009ad8:	466b      	mov	r3, sp
 8009ada:	4622      	mov	r2, r4
 8009adc:	4630      	mov	r0, r6
 8009ade:	a941      	add	r1, sp, #260	@ 0x104
 8009ae0:	f000 f9ba 	bl	8009e58 <_scanf_i>
 8009ae4:	e7b4      	b.n	8009a50 <__ssvfiscanf_r+0x210>
 8009ae6:	4b09      	ldr	r3, [pc, #36]	@ (8009b0c <__ssvfiscanf_r+0x2cc>)
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f43f aecd 	beq.w	8009888 <__ssvfiscanf_r+0x48>
 8009aee:	466b      	mov	r3, sp
 8009af0:	4622      	mov	r2, r4
 8009af2:	4630      	mov	r0, r6
 8009af4:	a941      	add	r1, sp, #260	@ 0x104
 8009af6:	f7fd f8f3 	bl	8006ce0 <_scanf_float>
 8009afa:	e7a9      	b.n	8009a50 <__ssvfiscanf_r+0x210>
 8009afc:	08009791 	.word	0x08009791
 8009b00:	08009807 	.word	0x08009807
 8009b04:	0800ad19 	.word	0x0800ad19
 8009b08:	0800b0de 	.word	0x0800b0de
 8009b0c:	08006ce1 	.word	0x08006ce1
 8009b10:	89a3      	ldrh	r3, [r4, #12]
 8009b12:	065b      	lsls	r3, r3, #25
 8009b14:	f53f af70 	bmi.w	80099f8 <__ssvfiscanf_r+0x1b8>
 8009b18:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8009b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b20:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009b22:	e7f9      	b.n	8009b18 <__ssvfiscanf_r+0x2d8>

08009b24 <__sfputc_r>:
 8009b24:	6893      	ldr	r3, [r2, #8]
 8009b26:	b410      	push	{r4}
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	6093      	str	r3, [r2, #8]
 8009b2e:	da07      	bge.n	8009b40 <__sfputc_r+0x1c>
 8009b30:	6994      	ldr	r4, [r2, #24]
 8009b32:	42a3      	cmp	r3, r4
 8009b34:	db01      	blt.n	8009b3a <__sfputc_r+0x16>
 8009b36:	290a      	cmp	r1, #10
 8009b38:	d102      	bne.n	8009b40 <__sfputc_r+0x1c>
 8009b3a:	bc10      	pop	{r4}
 8009b3c:	f000 bba9 	b.w	800a292 <__swbuf_r>
 8009b40:	6813      	ldr	r3, [r2, #0]
 8009b42:	1c58      	adds	r0, r3, #1
 8009b44:	6010      	str	r0, [r2, #0]
 8009b46:	7019      	strb	r1, [r3, #0]
 8009b48:	4608      	mov	r0, r1
 8009b4a:	bc10      	pop	{r4}
 8009b4c:	4770      	bx	lr

08009b4e <__sfputs_r>:
 8009b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b50:	4606      	mov	r6, r0
 8009b52:	460f      	mov	r7, r1
 8009b54:	4614      	mov	r4, r2
 8009b56:	18d5      	adds	r5, r2, r3
 8009b58:	42ac      	cmp	r4, r5
 8009b5a:	d101      	bne.n	8009b60 <__sfputs_r+0x12>
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	e007      	b.n	8009b70 <__sfputs_r+0x22>
 8009b60:	463a      	mov	r2, r7
 8009b62:	4630      	mov	r0, r6
 8009b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b68:	f7ff ffdc 	bl	8009b24 <__sfputc_r>
 8009b6c:	1c43      	adds	r3, r0, #1
 8009b6e:	d1f3      	bne.n	8009b58 <__sfputs_r+0xa>
 8009b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b74 <_vfiprintf_r>:
 8009b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b78:	460d      	mov	r5, r1
 8009b7a:	4614      	mov	r4, r2
 8009b7c:	4698      	mov	r8, r3
 8009b7e:	4606      	mov	r6, r0
 8009b80:	b09d      	sub	sp, #116	@ 0x74
 8009b82:	b118      	cbz	r0, 8009b8c <_vfiprintf_r+0x18>
 8009b84:	6a03      	ldr	r3, [r0, #32]
 8009b86:	b90b      	cbnz	r3, 8009b8c <_vfiprintf_r+0x18>
 8009b88:	f7fd fb46 	bl	8007218 <__sinit>
 8009b8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b8e:	07d9      	lsls	r1, r3, #31
 8009b90:	d405      	bmi.n	8009b9e <_vfiprintf_r+0x2a>
 8009b92:	89ab      	ldrh	r3, [r5, #12]
 8009b94:	059a      	lsls	r2, r3, #22
 8009b96:	d402      	bmi.n	8009b9e <_vfiprintf_r+0x2a>
 8009b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b9a:	f7fd fd0e 	bl	80075ba <__retarget_lock_acquire_recursive>
 8009b9e:	89ab      	ldrh	r3, [r5, #12]
 8009ba0:	071b      	lsls	r3, r3, #28
 8009ba2:	d501      	bpl.n	8009ba8 <_vfiprintf_r+0x34>
 8009ba4:	692b      	ldr	r3, [r5, #16]
 8009ba6:	b99b      	cbnz	r3, 8009bd0 <_vfiprintf_r+0x5c>
 8009ba8:	4629      	mov	r1, r5
 8009baa:	4630      	mov	r0, r6
 8009bac:	f000 fbb0 	bl	800a310 <__swsetup_r>
 8009bb0:	b170      	cbz	r0, 8009bd0 <_vfiprintf_r+0x5c>
 8009bb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bb4:	07dc      	lsls	r4, r3, #31
 8009bb6:	d504      	bpl.n	8009bc2 <_vfiprintf_r+0x4e>
 8009bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bbc:	b01d      	add	sp, #116	@ 0x74
 8009bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc2:	89ab      	ldrh	r3, [r5, #12]
 8009bc4:	0598      	lsls	r0, r3, #22
 8009bc6:	d4f7      	bmi.n	8009bb8 <_vfiprintf_r+0x44>
 8009bc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009bca:	f7fd fcf7 	bl	80075bc <__retarget_lock_release_recursive>
 8009bce:	e7f3      	b.n	8009bb8 <_vfiprintf_r+0x44>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bd4:	2320      	movs	r3, #32
 8009bd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009bda:	2330      	movs	r3, #48	@ 0x30
 8009bdc:	f04f 0901 	mov.w	r9, #1
 8009be0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009be4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009d90 <_vfiprintf_r+0x21c>
 8009be8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bec:	4623      	mov	r3, r4
 8009bee:	469a      	mov	sl, r3
 8009bf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bf4:	b10a      	cbz	r2, 8009bfa <_vfiprintf_r+0x86>
 8009bf6:	2a25      	cmp	r2, #37	@ 0x25
 8009bf8:	d1f9      	bne.n	8009bee <_vfiprintf_r+0x7a>
 8009bfa:	ebba 0b04 	subs.w	fp, sl, r4
 8009bfe:	d00b      	beq.n	8009c18 <_vfiprintf_r+0xa4>
 8009c00:	465b      	mov	r3, fp
 8009c02:	4622      	mov	r2, r4
 8009c04:	4629      	mov	r1, r5
 8009c06:	4630      	mov	r0, r6
 8009c08:	f7ff ffa1 	bl	8009b4e <__sfputs_r>
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	f000 80a7 	beq.w	8009d60 <_vfiprintf_r+0x1ec>
 8009c12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c14:	445a      	add	r2, fp
 8009c16:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c18:	f89a 3000 	ldrb.w	r3, [sl]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f000 809f 	beq.w	8009d60 <_vfiprintf_r+0x1ec>
 8009c22:	2300      	movs	r3, #0
 8009c24:	f04f 32ff 	mov.w	r2, #4294967295
 8009c28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c2c:	f10a 0a01 	add.w	sl, sl, #1
 8009c30:	9304      	str	r3, [sp, #16]
 8009c32:	9307      	str	r3, [sp, #28]
 8009c34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c38:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c3a:	4654      	mov	r4, sl
 8009c3c:	2205      	movs	r2, #5
 8009c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c42:	4853      	ldr	r0, [pc, #332]	@ (8009d90 <_vfiprintf_r+0x21c>)
 8009c44:	f7fd fcbb 	bl	80075be <memchr>
 8009c48:	9a04      	ldr	r2, [sp, #16]
 8009c4a:	b9d8      	cbnz	r0, 8009c84 <_vfiprintf_r+0x110>
 8009c4c:	06d1      	lsls	r1, r2, #27
 8009c4e:	bf44      	itt	mi
 8009c50:	2320      	movmi	r3, #32
 8009c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c56:	0713      	lsls	r3, r2, #28
 8009c58:	bf44      	itt	mi
 8009c5a:	232b      	movmi	r3, #43	@ 0x2b
 8009c5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c60:	f89a 3000 	ldrb.w	r3, [sl]
 8009c64:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c66:	d015      	beq.n	8009c94 <_vfiprintf_r+0x120>
 8009c68:	4654      	mov	r4, sl
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	f04f 0c0a 	mov.w	ip, #10
 8009c70:	9a07      	ldr	r2, [sp, #28]
 8009c72:	4621      	mov	r1, r4
 8009c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c78:	3b30      	subs	r3, #48	@ 0x30
 8009c7a:	2b09      	cmp	r3, #9
 8009c7c:	d94b      	bls.n	8009d16 <_vfiprintf_r+0x1a2>
 8009c7e:	b1b0      	cbz	r0, 8009cae <_vfiprintf_r+0x13a>
 8009c80:	9207      	str	r2, [sp, #28]
 8009c82:	e014      	b.n	8009cae <_vfiprintf_r+0x13a>
 8009c84:	eba0 0308 	sub.w	r3, r0, r8
 8009c88:	fa09 f303 	lsl.w	r3, r9, r3
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	46a2      	mov	sl, r4
 8009c90:	9304      	str	r3, [sp, #16]
 8009c92:	e7d2      	b.n	8009c3a <_vfiprintf_r+0xc6>
 8009c94:	9b03      	ldr	r3, [sp, #12]
 8009c96:	1d19      	adds	r1, r3, #4
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	9103      	str	r1, [sp, #12]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	bfbb      	ittet	lt
 8009ca0:	425b      	neglt	r3, r3
 8009ca2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ca6:	9307      	strge	r3, [sp, #28]
 8009ca8:	9307      	strlt	r3, [sp, #28]
 8009caa:	bfb8      	it	lt
 8009cac:	9204      	strlt	r2, [sp, #16]
 8009cae:	7823      	ldrb	r3, [r4, #0]
 8009cb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cb2:	d10a      	bne.n	8009cca <_vfiprintf_r+0x156>
 8009cb4:	7863      	ldrb	r3, [r4, #1]
 8009cb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cb8:	d132      	bne.n	8009d20 <_vfiprintf_r+0x1ac>
 8009cba:	9b03      	ldr	r3, [sp, #12]
 8009cbc:	3402      	adds	r4, #2
 8009cbe:	1d1a      	adds	r2, r3, #4
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	9203      	str	r2, [sp, #12]
 8009cc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009cc8:	9305      	str	r3, [sp, #20]
 8009cca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009d94 <_vfiprintf_r+0x220>
 8009cce:	2203      	movs	r2, #3
 8009cd0:	4650      	mov	r0, sl
 8009cd2:	7821      	ldrb	r1, [r4, #0]
 8009cd4:	f7fd fc73 	bl	80075be <memchr>
 8009cd8:	b138      	cbz	r0, 8009cea <_vfiprintf_r+0x176>
 8009cda:	2240      	movs	r2, #64	@ 0x40
 8009cdc:	9b04      	ldr	r3, [sp, #16]
 8009cde:	eba0 000a 	sub.w	r0, r0, sl
 8009ce2:	4082      	lsls	r2, r0
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	3401      	adds	r4, #1
 8009ce8:	9304      	str	r3, [sp, #16]
 8009cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cee:	2206      	movs	r2, #6
 8009cf0:	4829      	ldr	r0, [pc, #164]	@ (8009d98 <_vfiprintf_r+0x224>)
 8009cf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cf6:	f7fd fc62 	bl	80075be <memchr>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d03f      	beq.n	8009d7e <_vfiprintf_r+0x20a>
 8009cfe:	4b27      	ldr	r3, [pc, #156]	@ (8009d9c <_vfiprintf_r+0x228>)
 8009d00:	bb1b      	cbnz	r3, 8009d4a <_vfiprintf_r+0x1d6>
 8009d02:	9b03      	ldr	r3, [sp, #12]
 8009d04:	3307      	adds	r3, #7
 8009d06:	f023 0307 	bic.w	r3, r3, #7
 8009d0a:	3308      	adds	r3, #8
 8009d0c:	9303      	str	r3, [sp, #12]
 8009d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d10:	443b      	add	r3, r7
 8009d12:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d14:	e76a      	b.n	8009bec <_vfiprintf_r+0x78>
 8009d16:	460c      	mov	r4, r1
 8009d18:	2001      	movs	r0, #1
 8009d1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d1e:	e7a8      	b.n	8009c72 <_vfiprintf_r+0xfe>
 8009d20:	2300      	movs	r3, #0
 8009d22:	f04f 0c0a 	mov.w	ip, #10
 8009d26:	4619      	mov	r1, r3
 8009d28:	3401      	adds	r4, #1
 8009d2a:	9305      	str	r3, [sp, #20]
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d32:	3a30      	subs	r2, #48	@ 0x30
 8009d34:	2a09      	cmp	r2, #9
 8009d36:	d903      	bls.n	8009d40 <_vfiprintf_r+0x1cc>
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0c6      	beq.n	8009cca <_vfiprintf_r+0x156>
 8009d3c:	9105      	str	r1, [sp, #20]
 8009d3e:	e7c4      	b.n	8009cca <_vfiprintf_r+0x156>
 8009d40:	4604      	mov	r4, r0
 8009d42:	2301      	movs	r3, #1
 8009d44:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d48:	e7f0      	b.n	8009d2c <_vfiprintf_r+0x1b8>
 8009d4a:	ab03      	add	r3, sp, #12
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	462a      	mov	r2, r5
 8009d50:	4630      	mov	r0, r6
 8009d52:	4b13      	ldr	r3, [pc, #76]	@ (8009da0 <_vfiprintf_r+0x22c>)
 8009d54:	a904      	add	r1, sp, #16
 8009d56:	f7fc fc05 	bl	8006564 <_printf_float>
 8009d5a:	4607      	mov	r7, r0
 8009d5c:	1c78      	adds	r0, r7, #1
 8009d5e:	d1d6      	bne.n	8009d0e <_vfiprintf_r+0x19a>
 8009d60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d62:	07d9      	lsls	r1, r3, #31
 8009d64:	d405      	bmi.n	8009d72 <_vfiprintf_r+0x1fe>
 8009d66:	89ab      	ldrh	r3, [r5, #12]
 8009d68:	059a      	lsls	r2, r3, #22
 8009d6a:	d402      	bmi.n	8009d72 <_vfiprintf_r+0x1fe>
 8009d6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d6e:	f7fd fc25 	bl	80075bc <__retarget_lock_release_recursive>
 8009d72:	89ab      	ldrh	r3, [r5, #12]
 8009d74:	065b      	lsls	r3, r3, #25
 8009d76:	f53f af1f 	bmi.w	8009bb8 <_vfiprintf_r+0x44>
 8009d7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d7c:	e71e      	b.n	8009bbc <_vfiprintf_r+0x48>
 8009d7e:	ab03      	add	r3, sp, #12
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	462a      	mov	r2, r5
 8009d84:	4630      	mov	r0, r6
 8009d86:	4b06      	ldr	r3, [pc, #24]	@ (8009da0 <_vfiprintf_r+0x22c>)
 8009d88:	a904      	add	r1, sp, #16
 8009d8a:	f7fc fe89 	bl	8006aa0 <_printf_i>
 8009d8e:	e7e4      	b.n	8009d5a <_vfiprintf_r+0x1e6>
 8009d90:	0800b0d8 	.word	0x0800b0d8
 8009d94:	0800b0de 	.word	0x0800b0de
 8009d98:	0800b0e2 	.word	0x0800b0e2
 8009d9c:	08006565 	.word	0x08006565
 8009da0:	08009b4f 	.word	0x08009b4f

08009da4 <_scanf_chars>:
 8009da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009da8:	4615      	mov	r5, r2
 8009daa:	688a      	ldr	r2, [r1, #8]
 8009dac:	4680      	mov	r8, r0
 8009dae:	460c      	mov	r4, r1
 8009db0:	b932      	cbnz	r2, 8009dc0 <_scanf_chars+0x1c>
 8009db2:	698a      	ldr	r2, [r1, #24]
 8009db4:	2a00      	cmp	r2, #0
 8009db6:	bf14      	ite	ne
 8009db8:	f04f 32ff 	movne.w	r2, #4294967295
 8009dbc:	2201      	moveq	r2, #1
 8009dbe:	608a      	str	r2, [r1, #8]
 8009dc0:	2700      	movs	r7, #0
 8009dc2:	6822      	ldr	r2, [r4, #0]
 8009dc4:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8009e54 <_scanf_chars+0xb0>
 8009dc8:	06d1      	lsls	r1, r2, #27
 8009dca:	bf5f      	itttt	pl
 8009dcc:	681a      	ldrpl	r2, [r3, #0]
 8009dce:	1d11      	addpl	r1, r2, #4
 8009dd0:	6019      	strpl	r1, [r3, #0]
 8009dd2:	6816      	ldrpl	r6, [r2, #0]
 8009dd4:	69a0      	ldr	r0, [r4, #24]
 8009dd6:	b188      	cbz	r0, 8009dfc <_scanf_chars+0x58>
 8009dd8:	2801      	cmp	r0, #1
 8009dda:	d107      	bne.n	8009dec <_scanf_chars+0x48>
 8009ddc:	682b      	ldr	r3, [r5, #0]
 8009dde:	781a      	ldrb	r2, [r3, #0]
 8009de0:	6963      	ldr	r3, [r4, #20]
 8009de2:	5c9b      	ldrb	r3, [r3, r2]
 8009de4:	b953      	cbnz	r3, 8009dfc <_scanf_chars+0x58>
 8009de6:	2f00      	cmp	r7, #0
 8009de8:	d031      	beq.n	8009e4e <_scanf_chars+0xaa>
 8009dea:	e022      	b.n	8009e32 <_scanf_chars+0x8e>
 8009dec:	2802      	cmp	r0, #2
 8009dee:	d120      	bne.n	8009e32 <_scanf_chars+0x8e>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009df8:	071b      	lsls	r3, r3, #28
 8009dfa:	d41a      	bmi.n	8009e32 <_scanf_chars+0x8e>
 8009dfc:	6823      	ldr	r3, [r4, #0]
 8009dfe:	3701      	adds	r7, #1
 8009e00:	06da      	lsls	r2, r3, #27
 8009e02:	bf5e      	ittt	pl
 8009e04:	682b      	ldrpl	r3, [r5, #0]
 8009e06:	781b      	ldrbpl	r3, [r3, #0]
 8009e08:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009e0c:	682a      	ldr	r2, [r5, #0]
 8009e0e:	686b      	ldr	r3, [r5, #4]
 8009e10:	3201      	adds	r2, #1
 8009e12:	602a      	str	r2, [r5, #0]
 8009e14:	68a2      	ldr	r2, [r4, #8]
 8009e16:	3b01      	subs	r3, #1
 8009e18:	3a01      	subs	r2, #1
 8009e1a:	606b      	str	r3, [r5, #4]
 8009e1c:	60a2      	str	r2, [r4, #8]
 8009e1e:	b142      	cbz	r2, 8009e32 <_scanf_chars+0x8e>
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	dcd7      	bgt.n	8009dd4 <_scanf_chars+0x30>
 8009e24:	4629      	mov	r1, r5
 8009e26:	4640      	mov	r0, r8
 8009e28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009e2c:	4798      	blx	r3
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d0d0      	beq.n	8009dd4 <_scanf_chars+0x30>
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	f013 0310 	ands.w	r3, r3, #16
 8009e38:	d105      	bne.n	8009e46 <_scanf_chars+0xa2>
 8009e3a:	68e2      	ldr	r2, [r4, #12]
 8009e3c:	3201      	adds	r2, #1
 8009e3e:	60e2      	str	r2, [r4, #12]
 8009e40:	69a2      	ldr	r2, [r4, #24]
 8009e42:	b102      	cbz	r2, 8009e46 <_scanf_chars+0xa2>
 8009e44:	7033      	strb	r3, [r6, #0]
 8009e46:	2000      	movs	r0, #0
 8009e48:	6923      	ldr	r3, [r4, #16]
 8009e4a:	443b      	add	r3, r7
 8009e4c:	6123      	str	r3, [r4, #16]
 8009e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e52:	bf00      	nop
 8009e54:	0800ad19 	.word	0x0800ad19

08009e58 <_scanf_i>:
 8009e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	4698      	mov	r8, r3
 8009e60:	4b72      	ldr	r3, [pc, #456]	@ (800a02c <_scanf_i+0x1d4>)
 8009e62:	b087      	sub	sp, #28
 8009e64:	4682      	mov	sl, r0
 8009e66:	4616      	mov	r6, r2
 8009e68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e6c:	ab03      	add	r3, sp, #12
 8009e6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009e72:	4b6f      	ldr	r3, [pc, #444]	@ (800a030 <_scanf_i+0x1d8>)
 8009e74:	69a1      	ldr	r1, [r4, #24]
 8009e76:	4a6f      	ldr	r2, [pc, #444]	@ (800a034 <_scanf_i+0x1dc>)
 8009e78:	4627      	mov	r7, r4
 8009e7a:	2903      	cmp	r1, #3
 8009e7c:	bf08      	it	eq
 8009e7e:	461a      	moveq	r2, r3
 8009e80:	68a3      	ldr	r3, [r4, #8]
 8009e82:	9201      	str	r2, [sp, #4]
 8009e84:	1e5a      	subs	r2, r3, #1
 8009e86:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009e8a:	bf81      	itttt	hi
 8009e8c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009e90:	eb03 0905 	addhi.w	r9, r3, r5
 8009e94:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009e98:	60a3      	strhi	r3, [r4, #8]
 8009e9a:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009e9e:	bf98      	it	ls
 8009ea0:	f04f 0900 	movls.w	r9, #0
 8009ea4:	463d      	mov	r5, r7
 8009ea6:	f04f 0b00 	mov.w	fp, #0
 8009eaa:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009eae:	6023      	str	r3, [r4, #0]
 8009eb0:	6831      	ldr	r1, [r6, #0]
 8009eb2:	ab03      	add	r3, sp, #12
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	7809      	ldrb	r1, [r1, #0]
 8009eb8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009ebc:	f7fd fb7f 	bl	80075be <memchr>
 8009ec0:	b328      	cbz	r0, 8009f0e <_scanf_i+0xb6>
 8009ec2:	f1bb 0f01 	cmp.w	fp, #1
 8009ec6:	d159      	bne.n	8009f7c <_scanf_i+0x124>
 8009ec8:	6862      	ldr	r2, [r4, #4]
 8009eca:	b92a      	cbnz	r2, 8009ed8 <_scanf_i+0x80>
 8009ecc:	2108      	movs	r1, #8
 8009ece:	6822      	ldr	r2, [r4, #0]
 8009ed0:	6061      	str	r1, [r4, #4]
 8009ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ed6:	6022      	str	r2, [r4, #0]
 8009ed8:	6822      	ldr	r2, [r4, #0]
 8009eda:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009ede:	6022      	str	r2, [r4, #0]
 8009ee0:	68a2      	ldr	r2, [r4, #8]
 8009ee2:	1e51      	subs	r1, r2, #1
 8009ee4:	60a1      	str	r1, [r4, #8]
 8009ee6:	b192      	cbz	r2, 8009f0e <_scanf_i+0xb6>
 8009ee8:	6832      	ldr	r2, [r6, #0]
 8009eea:	1c51      	adds	r1, r2, #1
 8009eec:	6031      	str	r1, [r6, #0]
 8009eee:	7812      	ldrb	r2, [r2, #0]
 8009ef0:	f805 2b01 	strb.w	r2, [r5], #1
 8009ef4:	6872      	ldr	r2, [r6, #4]
 8009ef6:	3a01      	subs	r2, #1
 8009ef8:	2a00      	cmp	r2, #0
 8009efa:	6072      	str	r2, [r6, #4]
 8009efc:	dc07      	bgt.n	8009f0e <_scanf_i+0xb6>
 8009efe:	4631      	mov	r1, r6
 8009f00:	4650      	mov	r0, sl
 8009f02:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009f06:	4790      	blx	r2
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	f040 8085 	bne.w	800a018 <_scanf_i+0x1c0>
 8009f0e:	f10b 0b01 	add.w	fp, fp, #1
 8009f12:	f1bb 0f03 	cmp.w	fp, #3
 8009f16:	d1cb      	bne.n	8009eb0 <_scanf_i+0x58>
 8009f18:	6863      	ldr	r3, [r4, #4]
 8009f1a:	b90b      	cbnz	r3, 8009f20 <_scanf_i+0xc8>
 8009f1c:	230a      	movs	r3, #10
 8009f1e:	6063      	str	r3, [r4, #4]
 8009f20:	6863      	ldr	r3, [r4, #4]
 8009f22:	4945      	ldr	r1, [pc, #276]	@ (800a038 <_scanf_i+0x1e0>)
 8009f24:	6960      	ldr	r0, [r4, #20]
 8009f26:	1ac9      	subs	r1, r1, r3
 8009f28:	f000 f942 	bl	800a1b0 <__sccl>
 8009f2c:	f04f 0b00 	mov.w	fp, #0
 8009f30:	68a3      	ldr	r3, [r4, #8]
 8009f32:	6822      	ldr	r2, [r4, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d03d      	beq.n	8009fb4 <_scanf_i+0x15c>
 8009f38:	6831      	ldr	r1, [r6, #0]
 8009f3a:	6960      	ldr	r0, [r4, #20]
 8009f3c:	f891 c000 	ldrb.w	ip, [r1]
 8009f40:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009f44:	2800      	cmp	r0, #0
 8009f46:	d035      	beq.n	8009fb4 <_scanf_i+0x15c>
 8009f48:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009f4c:	d124      	bne.n	8009f98 <_scanf_i+0x140>
 8009f4e:	0510      	lsls	r0, r2, #20
 8009f50:	d522      	bpl.n	8009f98 <_scanf_i+0x140>
 8009f52:	f10b 0b01 	add.w	fp, fp, #1
 8009f56:	f1b9 0f00 	cmp.w	r9, #0
 8009f5a:	d003      	beq.n	8009f64 <_scanf_i+0x10c>
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009f62:	60a3      	str	r3, [r4, #8]
 8009f64:	6873      	ldr	r3, [r6, #4]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	6073      	str	r3, [r6, #4]
 8009f6c:	dd1b      	ble.n	8009fa6 <_scanf_i+0x14e>
 8009f6e:	6833      	ldr	r3, [r6, #0]
 8009f70:	3301      	adds	r3, #1
 8009f72:	6033      	str	r3, [r6, #0]
 8009f74:	68a3      	ldr	r3, [r4, #8]
 8009f76:	3b01      	subs	r3, #1
 8009f78:	60a3      	str	r3, [r4, #8]
 8009f7a:	e7d9      	b.n	8009f30 <_scanf_i+0xd8>
 8009f7c:	f1bb 0f02 	cmp.w	fp, #2
 8009f80:	d1ae      	bne.n	8009ee0 <_scanf_i+0x88>
 8009f82:	6822      	ldr	r2, [r4, #0]
 8009f84:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009f88:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009f8c:	d1bf      	bne.n	8009f0e <_scanf_i+0xb6>
 8009f8e:	2110      	movs	r1, #16
 8009f90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009f94:	6061      	str	r1, [r4, #4]
 8009f96:	e7a2      	b.n	8009ede <_scanf_i+0x86>
 8009f98:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009f9c:	6022      	str	r2, [r4, #0]
 8009f9e:	780b      	ldrb	r3, [r1, #0]
 8009fa0:	f805 3b01 	strb.w	r3, [r5], #1
 8009fa4:	e7de      	b.n	8009f64 <_scanf_i+0x10c>
 8009fa6:	4631      	mov	r1, r6
 8009fa8:	4650      	mov	r0, sl
 8009faa:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009fae:	4798      	blx	r3
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d0df      	beq.n	8009f74 <_scanf_i+0x11c>
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	05d9      	lsls	r1, r3, #23
 8009fb8:	d50d      	bpl.n	8009fd6 <_scanf_i+0x17e>
 8009fba:	42bd      	cmp	r5, r7
 8009fbc:	d909      	bls.n	8009fd2 <_scanf_i+0x17a>
 8009fbe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009fc2:	4632      	mov	r2, r6
 8009fc4:	4650      	mov	r0, sl
 8009fc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009fca:	f105 39ff 	add.w	r9, r5, #4294967295
 8009fce:	4798      	blx	r3
 8009fd0:	464d      	mov	r5, r9
 8009fd2:	42bd      	cmp	r5, r7
 8009fd4:	d028      	beq.n	800a028 <_scanf_i+0x1d0>
 8009fd6:	6822      	ldr	r2, [r4, #0]
 8009fd8:	f012 0210 	ands.w	r2, r2, #16
 8009fdc:	d113      	bne.n	800a006 <_scanf_i+0x1ae>
 8009fde:	702a      	strb	r2, [r5, #0]
 8009fe0:	4639      	mov	r1, r7
 8009fe2:	6863      	ldr	r3, [r4, #4]
 8009fe4:	4650      	mov	r0, sl
 8009fe6:	9e01      	ldr	r6, [sp, #4]
 8009fe8:	47b0      	blx	r6
 8009fea:	f8d8 3000 	ldr.w	r3, [r8]
 8009fee:	6821      	ldr	r1, [r4, #0]
 8009ff0:	1d1a      	adds	r2, r3, #4
 8009ff2:	f8c8 2000 	str.w	r2, [r8]
 8009ff6:	f011 0f20 	tst.w	r1, #32
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	d00f      	beq.n	800a01e <_scanf_i+0x1c6>
 8009ffe:	6018      	str	r0, [r3, #0]
 800a000:	68e3      	ldr	r3, [r4, #12]
 800a002:	3301      	adds	r3, #1
 800a004:	60e3      	str	r3, [r4, #12]
 800a006:	2000      	movs	r0, #0
 800a008:	6923      	ldr	r3, [r4, #16]
 800a00a:	1bed      	subs	r5, r5, r7
 800a00c:	445d      	add	r5, fp
 800a00e:	442b      	add	r3, r5
 800a010:	6123      	str	r3, [r4, #16]
 800a012:	b007      	add	sp, #28
 800a014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a018:	f04f 0b00 	mov.w	fp, #0
 800a01c:	e7ca      	b.n	8009fb4 <_scanf_i+0x15c>
 800a01e:	07ca      	lsls	r2, r1, #31
 800a020:	bf4c      	ite	mi
 800a022:	8018      	strhmi	r0, [r3, #0]
 800a024:	6018      	strpl	r0, [r3, #0]
 800a026:	e7eb      	b.n	800a000 <_scanf_i+0x1a8>
 800a028:	2001      	movs	r0, #1
 800a02a:	e7f2      	b.n	800a012 <_scanf_i+0x1ba>
 800a02c:	0800ac7c 	.word	0x0800ac7c
 800a030:	08006411 	.word	0x08006411
 800a034:	0800a581 	.word	0x0800a581
 800a038:	0800b0f9 	.word	0x0800b0f9

0800a03c <__sflush_r>:
 800a03c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a042:	0716      	lsls	r6, r2, #28
 800a044:	4605      	mov	r5, r0
 800a046:	460c      	mov	r4, r1
 800a048:	d454      	bmi.n	800a0f4 <__sflush_r+0xb8>
 800a04a:	684b      	ldr	r3, [r1, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	dc02      	bgt.n	800a056 <__sflush_r+0x1a>
 800a050:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a052:	2b00      	cmp	r3, #0
 800a054:	dd48      	ble.n	800a0e8 <__sflush_r+0xac>
 800a056:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a058:	2e00      	cmp	r6, #0
 800a05a:	d045      	beq.n	800a0e8 <__sflush_r+0xac>
 800a05c:	2300      	movs	r3, #0
 800a05e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a062:	682f      	ldr	r7, [r5, #0]
 800a064:	6a21      	ldr	r1, [r4, #32]
 800a066:	602b      	str	r3, [r5, #0]
 800a068:	d030      	beq.n	800a0cc <__sflush_r+0x90>
 800a06a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	0759      	lsls	r1, r3, #29
 800a070:	d505      	bpl.n	800a07e <__sflush_r+0x42>
 800a072:	6863      	ldr	r3, [r4, #4]
 800a074:	1ad2      	subs	r2, r2, r3
 800a076:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a078:	b10b      	cbz	r3, 800a07e <__sflush_r+0x42>
 800a07a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a07c:	1ad2      	subs	r2, r2, r3
 800a07e:	2300      	movs	r3, #0
 800a080:	4628      	mov	r0, r5
 800a082:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a084:	6a21      	ldr	r1, [r4, #32]
 800a086:	47b0      	blx	r6
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	89a3      	ldrh	r3, [r4, #12]
 800a08c:	d106      	bne.n	800a09c <__sflush_r+0x60>
 800a08e:	6829      	ldr	r1, [r5, #0]
 800a090:	291d      	cmp	r1, #29
 800a092:	d82b      	bhi.n	800a0ec <__sflush_r+0xb0>
 800a094:	4a28      	ldr	r2, [pc, #160]	@ (800a138 <__sflush_r+0xfc>)
 800a096:	410a      	asrs	r2, r1
 800a098:	07d6      	lsls	r6, r2, #31
 800a09a:	d427      	bmi.n	800a0ec <__sflush_r+0xb0>
 800a09c:	2200      	movs	r2, #0
 800a09e:	6062      	str	r2, [r4, #4]
 800a0a0:	6922      	ldr	r2, [r4, #16]
 800a0a2:	04d9      	lsls	r1, r3, #19
 800a0a4:	6022      	str	r2, [r4, #0]
 800a0a6:	d504      	bpl.n	800a0b2 <__sflush_r+0x76>
 800a0a8:	1c42      	adds	r2, r0, #1
 800a0aa:	d101      	bne.n	800a0b0 <__sflush_r+0x74>
 800a0ac:	682b      	ldr	r3, [r5, #0]
 800a0ae:	b903      	cbnz	r3, 800a0b2 <__sflush_r+0x76>
 800a0b0:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0b4:	602f      	str	r7, [r5, #0]
 800a0b6:	b1b9      	cbz	r1, 800a0e8 <__sflush_r+0xac>
 800a0b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0bc:	4299      	cmp	r1, r3
 800a0be:	d002      	beq.n	800a0c6 <__sflush_r+0x8a>
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	f7fe f911 	bl	80082e8 <_free_r>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0ca:	e00d      	b.n	800a0e8 <__sflush_r+0xac>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	47b0      	blx	r6
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	1c50      	adds	r0, r2, #1
 800a0d6:	d1c9      	bne.n	800a06c <__sflush_r+0x30>
 800a0d8:	682b      	ldr	r3, [r5, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d0c6      	beq.n	800a06c <__sflush_r+0x30>
 800a0de:	2b1d      	cmp	r3, #29
 800a0e0:	d001      	beq.n	800a0e6 <__sflush_r+0xaa>
 800a0e2:	2b16      	cmp	r3, #22
 800a0e4:	d11d      	bne.n	800a122 <__sflush_r+0xe6>
 800a0e6:	602f      	str	r7, [r5, #0]
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	e021      	b.n	800a130 <__sflush_r+0xf4>
 800a0ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0f0:	b21b      	sxth	r3, r3
 800a0f2:	e01a      	b.n	800a12a <__sflush_r+0xee>
 800a0f4:	690f      	ldr	r7, [r1, #16]
 800a0f6:	2f00      	cmp	r7, #0
 800a0f8:	d0f6      	beq.n	800a0e8 <__sflush_r+0xac>
 800a0fa:	0793      	lsls	r3, r2, #30
 800a0fc:	bf18      	it	ne
 800a0fe:	2300      	movne	r3, #0
 800a100:	680e      	ldr	r6, [r1, #0]
 800a102:	bf08      	it	eq
 800a104:	694b      	ldreq	r3, [r1, #20]
 800a106:	1bf6      	subs	r6, r6, r7
 800a108:	600f      	str	r7, [r1, #0]
 800a10a:	608b      	str	r3, [r1, #8]
 800a10c:	2e00      	cmp	r6, #0
 800a10e:	ddeb      	ble.n	800a0e8 <__sflush_r+0xac>
 800a110:	4633      	mov	r3, r6
 800a112:	463a      	mov	r2, r7
 800a114:	4628      	mov	r0, r5
 800a116:	6a21      	ldr	r1, [r4, #32]
 800a118:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a11c:	47e0      	blx	ip
 800a11e:	2800      	cmp	r0, #0
 800a120:	dc07      	bgt.n	800a132 <__sflush_r+0xf6>
 800a122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a12a:	f04f 30ff 	mov.w	r0, #4294967295
 800a12e:	81a3      	strh	r3, [r4, #12]
 800a130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a132:	4407      	add	r7, r0
 800a134:	1a36      	subs	r6, r6, r0
 800a136:	e7e9      	b.n	800a10c <__sflush_r+0xd0>
 800a138:	dfbffffe 	.word	0xdfbffffe

0800a13c <_fflush_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	690b      	ldr	r3, [r1, #16]
 800a140:	4605      	mov	r5, r0
 800a142:	460c      	mov	r4, r1
 800a144:	b913      	cbnz	r3, 800a14c <_fflush_r+0x10>
 800a146:	2500      	movs	r5, #0
 800a148:	4628      	mov	r0, r5
 800a14a:	bd38      	pop	{r3, r4, r5, pc}
 800a14c:	b118      	cbz	r0, 800a156 <_fflush_r+0x1a>
 800a14e:	6a03      	ldr	r3, [r0, #32]
 800a150:	b90b      	cbnz	r3, 800a156 <_fflush_r+0x1a>
 800a152:	f7fd f861 	bl	8007218 <__sinit>
 800a156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0f3      	beq.n	800a146 <_fflush_r+0xa>
 800a15e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a160:	07d0      	lsls	r0, r2, #31
 800a162:	d404      	bmi.n	800a16e <_fflush_r+0x32>
 800a164:	0599      	lsls	r1, r3, #22
 800a166:	d402      	bmi.n	800a16e <_fflush_r+0x32>
 800a168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a16a:	f7fd fa26 	bl	80075ba <__retarget_lock_acquire_recursive>
 800a16e:	4628      	mov	r0, r5
 800a170:	4621      	mov	r1, r4
 800a172:	f7ff ff63 	bl	800a03c <__sflush_r>
 800a176:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a178:	4605      	mov	r5, r0
 800a17a:	07da      	lsls	r2, r3, #31
 800a17c:	d4e4      	bmi.n	800a148 <_fflush_r+0xc>
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	059b      	lsls	r3, r3, #22
 800a182:	d4e1      	bmi.n	800a148 <_fflush_r+0xc>
 800a184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a186:	f7fd fa19 	bl	80075bc <__retarget_lock_release_recursive>
 800a18a:	e7dd      	b.n	800a148 <_fflush_r+0xc>

0800a18c <fiprintf>:
 800a18c:	b40e      	push	{r1, r2, r3}
 800a18e:	b503      	push	{r0, r1, lr}
 800a190:	4601      	mov	r1, r0
 800a192:	ab03      	add	r3, sp, #12
 800a194:	4805      	ldr	r0, [pc, #20]	@ (800a1ac <fiprintf+0x20>)
 800a196:	f853 2b04 	ldr.w	r2, [r3], #4
 800a19a:	6800      	ldr	r0, [r0, #0]
 800a19c:	9301      	str	r3, [sp, #4]
 800a19e:	f7ff fce9 	bl	8009b74 <_vfiprintf_r>
 800a1a2:	b002      	add	sp, #8
 800a1a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1a8:	b003      	add	sp, #12
 800a1aa:	4770      	bx	lr
 800a1ac:	200002a8 	.word	0x200002a8

0800a1b0 <__sccl>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	780b      	ldrb	r3, [r1, #0]
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	2b5e      	cmp	r3, #94	@ 0x5e
 800a1b8:	bf0b      	itete	eq
 800a1ba:	784b      	ldrbeq	r3, [r1, #1]
 800a1bc:	1c4a      	addne	r2, r1, #1
 800a1be:	1c8a      	addeq	r2, r1, #2
 800a1c0:	2100      	movne	r1, #0
 800a1c2:	bf08      	it	eq
 800a1c4:	2101      	moveq	r1, #1
 800a1c6:	3801      	subs	r0, #1
 800a1c8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a1cc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a1d0:	42a8      	cmp	r0, r5
 800a1d2:	d1fb      	bne.n	800a1cc <__sccl+0x1c>
 800a1d4:	b90b      	cbnz	r3, 800a1da <__sccl+0x2a>
 800a1d6:	1e50      	subs	r0, r2, #1
 800a1d8:	bd70      	pop	{r4, r5, r6, pc}
 800a1da:	f081 0101 	eor.w	r1, r1, #1
 800a1de:	4610      	mov	r0, r2
 800a1e0:	54e1      	strb	r1, [r4, r3]
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a1e8:	2d2d      	cmp	r5, #45	@ 0x2d
 800a1ea:	d005      	beq.n	800a1f8 <__sccl+0x48>
 800a1ec:	2d5d      	cmp	r5, #93	@ 0x5d
 800a1ee:	d016      	beq.n	800a21e <__sccl+0x6e>
 800a1f0:	2d00      	cmp	r5, #0
 800a1f2:	d0f1      	beq.n	800a1d8 <__sccl+0x28>
 800a1f4:	462b      	mov	r3, r5
 800a1f6:	e7f2      	b.n	800a1de <__sccl+0x2e>
 800a1f8:	7846      	ldrb	r6, [r0, #1]
 800a1fa:	2e5d      	cmp	r6, #93	@ 0x5d
 800a1fc:	d0fa      	beq.n	800a1f4 <__sccl+0x44>
 800a1fe:	42b3      	cmp	r3, r6
 800a200:	dcf8      	bgt.n	800a1f4 <__sccl+0x44>
 800a202:	461a      	mov	r2, r3
 800a204:	3002      	adds	r0, #2
 800a206:	3201      	adds	r2, #1
 800a208:	4296      	cmp	r6, r2
 800a20a:	54a1      	strb	r1, [r4, r2]
 800a20c:	dcfb      	bgt.n	800a206 <__sccl+0x56>
 800a20e:	1af2      	subs	r2, r6, r3
 800a210:	3a01      	subs	r2, #1
 800a212:	42b3      	cmp	r3, r6
 800a214:	bfa8      	it	ge
 800a216:	2200      	movge	r2, #0
 800a218:	1c5d      	adds	r5, r3, #1
 800a21a:	18ab      	adds	r3, r5, r2
 800a21c:	e7e1      	b.n	800a1e2 <__sccl+0x32>
 800a21e:	4610      	mov	r0, r2
 800a220:	e7da      	b.n	800a1d8 <__sccl+0x28>

0800a222 <__submore>:
 800a222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a226:	460c      	mov	r4, r1
 800a228:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a22a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a22e:	4299      	cmp	r1, r3
 800a230:	d11b      	bne.n	800a26a <__submore+0x48>
 800a232:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a236:	f7fe fc03 	bl	8008a40 <_malloc_r>
 800a23a:	b918      	cbnz	r0, 800a244 <__submore+0x22>
 800a23c:	f04f 30ff 	mov.w	r0, #4294967295
 800a240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a244:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a248:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a24a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a24e:	6360      	str	r0, [r4, #52]	@ 0x34
 800a250:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a254:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a258:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a25c:	7043      	strb	r3, [r0, #1]
 800a25e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a262:	7003      	strb	r3, [r0, #0]
 800a264:	6020      	str	r0, [r4, #0]
 800a266:	2000      	movs	r0, #0
 800a268:	e7ea      	b.n	800a240 <__submore+0x1e>
 800a26a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a26c:	0077      	lsls	r7, r6, #1
 800a26e:	463a      	mov	r2, r7
 800a270:	f000 f8e9 	bl	800a446 <_realloc_r>
 800a274:	4605      	mov	r5, r0
 800a276:	2800      	cmp	r0, #0
 800a278:	d0e0      	beq.n	800a23c <__submore+0x1a>
 800a27a:	eb00 0806 	add.w	r8, r0, r6
 800a27e:	4601      	mov	r1, r0
 800a280:	4632      	mov	r2, r6
 800a282:	4640      	mov	r0, r8
 800a284:	f7fd f9a9 	bl	80075da <memcpy>
 800a288:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a28c:	f8c4 8000 	str.w	r8, [r4]
 800a290:	e7e9      	b.n	800a266 <__submore+0x44>

0800a292 <__swbuf_r>:
 800a292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a294:	460e      	mov	r6, r1
 800a296:	4614      	mov	r4, r2
 800a298:	4605      	mov	r5, r0
 800a29a:	b118      	cbz	r0, 800a2a4 <__swbuf_r+0x12>
 800a29c:	6a03      	ldr	r3, [r0, #32]
 800a29e:	b90b      	cbnz	r3, 800a2a4 <__swbuf_r+0x12>
 800a2a0:	f7fc ffba 	bl	8007218 <__sinit>
 800a2a4:	69a3      	ldr	r3, [r4, #24]
 800a2a6:	60a3      	str	r3, [r4, #8]
 800a2a8:	89a3      	ldrh	r3, [r4, #12]
 800a2aa:	071a      	lsls	r2, r3, #28
 800a2ac:	d501      	bpl.n	800a2b2 <__swbuf_r+0x20>
 800a2ae:	6923      	ldr	r3, [r4, #16]
 800a2b0:	b943      	cbnz	r3, 800a2c4 <__swbuf_r+0x32>
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	f000 f82b 	bl	800a310 <__swsetup_r>
 800a2ba:	b118      	cbz	r0, 800a2c4 <__swbuf_r+0x32>
 800a2bc:	f04f 37ff 	mov.w	r7, #4294967295
 800a2c0:	4638      	mov	r0, r7
 800a2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	6922      	ldr	r2, [r4, #16]
 800a2c8:	b2f6      	uxtb	r6, r6
 800a2ca:	1a98      	subs	r0, r3, r2
 800a2cc:	6963      	ldr	r3, [r4, #20]
 800a2ce:	4637      	mov	r7, r6
 800a2d0:	4283      	cmp	r3, r0
 800a2d2:	dc05      	bgt.n	800a2e0 <__swbuf_r+0x4e>
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	f7ff ff30 	bl	800a13c <_fflush_r>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d1ed      	bne.n	800a2bc <__swbuf_r+0x2a>
 800a2e0:	68a3      	ldr	r3, [r4, #8]
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	60a3      	str	r3, [r4, #8]
 800a2e6:	6823      	ldr	r3, [r4, #0]
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	6022      	str	r2, [r4, #0]
 800a2ec:	701e      	strb	r6, [r3, #0]
 800a2ee:	6962      	ldr	r2, [r4, #20]
 800a2f0:	1c43      	adds	r3, r0, #1
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d004      	beq.n	800a300 <__swbuf_r+0x6e>
 800a2f6:	89a3      	ldrh	r3, [r4, #12]
 800a2f8:	07db      	lsls	r3, r3, #31
 800a2fa:	d5e1      	bpl.n	800a2c0 <__swbuf_r+0x2e>
 800a2fc:	2e0a      	cmp	r6, #10
 800a2fe:	d1df      	bne.n	800a2c0 <__swbuf_r+0x2e>
 800a300:	4621      	mov	r1, r4
 800a302:	4628      	mov	r0, r5
 800a304:	f7ff ff1a 	bl	800a13c <_fflush_r>
 800a308:	2800      	cmp	r0, #0
 800a30a:	d0d9      	beq.n	800a2c0 <__swbuf_r+0x2e>
 800a30c:	e7d6      	b.n	800a2bc <__swbuf_r+0x2a>
	...

0800a310 <__swsetup_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4b29      	ldr	r3, [pc, #164]	@ (800a3b8 <__swsetup_r+0xa8>)
 800a314:	4605      	mov	r5, r0
 800a316:	6818      	ldr	r0, [r3, #0]
 800a318:	460c      	mov	r4, r1
 800a31a:	b118      	cbz	r0, 800a324 <__swsetup_r+0x14>
 800a31c:	6a03      	ldr	r3, [r0, #32]
 800a31e:	b90b      	cbnz	r3, 800a324 <__swsetup_r+0x14>
 800a320:	f7fc ff7a 	bl	8007218 <__sinit>
 800a324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a328:	0719      	lsls	r1, r3, #28
 800a32a:	d422      	bmi.n	800a372 <__swsetup_r+0x62>
 800a32c:	06da      	lsls	r2, r3, #27
 800a32e:	d407      	bmi.n	800a340 <__swsetup_r+0x30>
 800a330:	2209      	movs	r2, #9
 800a332:	602a      	str	r2, [r5, #0]
 800a334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a338:	f04f 30ff 	mov.w	r0, #4294967295
 800a33c:	81a3      	strh	r3, [r4, #12]
 800a33e:	e033      	b.n	800a3a8 <__swsetup_r+0x98>
 800a340:	0758      	lsls	r0, r3, #29
 800a342:	d512      	bpl.n	800a36a <__swsetup_r+0x5a>
 800a344:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a346:	b141      	cbz	r1, 800a35a <__swsetup_r+0x4a>
 800a348:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a34c:	4299      	cmp	r1, r3
 800a34e:	d002      	beq.n	800a356 <__swsetup_r+0x46>
 800a350:	4628      	mov	r0, r5
 800a352:	f7fd ffc9 	bl	80082e8 <_free_r>
 800a356:	2300      	movs	r3, #0
 800a358:	6363      	str	r3, [r4, #52]	@ 0x34
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a360:	81a3      	strh	r3, [r4, #12]
 800a362:	2300      	movs	r3, #0
 800a364:	6063      	str	r3, [r4, #4]
 800a366:	6923      	ldr	r3, [r4, #16]
 800a368:	6023      	str	r3, [r4, #0]
 800a36a:	89a3      	ldrh	r3, [r4, #12]
 800a36c:	f043 0308 	orr.w	r3, r3, #8
 800a370:	81a3      	strh	r3, [r4, #12]
 800a372:	6923      	ldr	r3, [r4, #16]
 800a374:	b94b      	cbnz	r3, 800a38a <__swsetup_r+0x7a>
 800a376:	89a3      	ldrh	r3, [r4, #12]
 800a378:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a37c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a380:	d003      	beq.n	800a38a <__swsetup_r+0x7a>
 800a382:	4621      	mov	r1, r4
 800a384:	4628      	mov	r0, r5
 800a386:	f000 f922 	bl	800a5ce <__smakebuf_r>
 800a38a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a38e:	f013 0201 	ands.w	r2, r3, #1
 800a392:	d00a      	beq.n	800a3aa <__swsetup_r+0x9a>
 800a394:	2200      	movs	r2, #0
 800a396:	60a2      	str	r2, [r4, #8]
 800a398:	6962      	ldr	r2, [r4, #20]
 800a39a:	4252      	negs	r2, r2
 800a39c:	61a2      	str	r2, [r4, #24]
 800a39e:	6922      	ldr	r2, [r4, #16]
 800a3a0:	b942      	cbnz	r2, 800a3b4 <__swsetup_r+0xa4>
 800a3a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a3a6:	d1c5      	bne.n	800a334 <__swsetup_r+0x24>
 800a3a8:	bd38      	pop	{r3, r4, r5, pc}
 800a3aa:	0799      	lsls	r1, r3, #30
 800a3ac:	bf58      	it	pl
 800a3ae:	6962      	ldrpl	r2, [r4, #20]
 800a3b0:	60a2      	str	r2, [r4, #8]
 800a3b2:	e7f4      	b.n	800a39e <__swsetup_r+0x8e>
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	e7f7      	b.n	800a3a8 <__swsetup_r+0x98>
 800a3b8:	200002a8 	.word	0x200002a8

0800a3bc <memmove>:
 800a3bc:	4288      	cmp	r0, r1
 800a3be:	b510      	push	{r4, lr}
 800a3c0:	eb01 0402 	add.w	r4, r1, r2
 800a3c4:	d902      	bls.n	800a3cc <memmove+0x10>
 800a3c6:	4284      	cmp	r4, r0
 800a3c8:	4623      	mov	r3, r4
 800a3ca:	d807      	bhi.n	800a3dc <memmove+0x20>
 800a3cc:	1e43      	subs	r3, r0, #1
 800a3ce:	42a1      	cmp	r1, r4
 800a3d0:	d008      	beq.n	800a3e4 <memmove+0x28>
 800a3d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3da:	e7f8      	b.n	800a3ce <memmove+0x12>
 800a3dc:	4601      	mov	r1, r0
 800a3de:	4402      	add	r2, r0
 800a3e0:	428a      	cmp	r2, r1
 800a3e2:	d100      	bne.n	800a3e6 <memmove+0x2a>
 800a3e4:	bd10      	pop	{r4, pc}
 800a3e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3ee:	e7f7      	b.n	800a3e0 <memmove+0x24>

0800a3f0 <_sbrk_r>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	4d05      	ldr	r5, [pc, #20]	@ (800a40c <_sbrk_r+0x1c>)
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	4608      	mov	r0, r1
 800a3fa:	602b      	str	r3, [r5, #0]
 800a3fc:	f7f8 fb8c 	bl	8002b18 <_sbrk>
 800a400:	1c43      	adds	r3, r0, #1
 800a402:	d102      	bne.n	800a40a <_sbrk_r+0x1a>
 800a404:	682b      	ldr	r3, [r5, #0]
 800a406:	b103      	cbz	r3, 800a40a <_sbrk_r+0x1a>
 800a408:	6023      	str	r3, [r4, #0]
 800a40a:	bd38      	pop	{r3, r4, r5, pc}
 800a40c:	20000b94 	.word	0x20000b94

0800a410 <abort>:
 800a410:	2006      	movs	r0, #6
 800a412:	b508      	push	{r3, lr}
 800a414:	f000 f940 	bl	800a698 <raise>
 800a418:	2001      	movs	r0, #1
 800a41a:	f7f8 fb08 	bl	8002a2e <_exit>

0800a41e <_calloc_r>:
 800a41e:	b570      	push	{r4, r5, r6, lr}
 800a420:	fba1 5402 	umull	r5, r4, r1, r2
 800a424:	b93c      	cbnz	r4, 800a436 <_calloc_r+0x18>
 800a426:	4629      	mov	r1, r5
 800a428:	f7fe fb0a 	bl	8008a40 <_malloc_r>
 800a42c:	4606      	mov	r6, r0
 800a42e:	b928      	cbnz	r0, 800a43c <_calloc_r+0x1e>
 800a430:	2600      	movs	r6, #0
 800a432:	4630      	mov	r0, r6
 800a434:	bd70      	pop	{r4, r5, r6, pc}
 800a436:	220c      	movs	r2, #12
 800a438:	6002      	str	r2, [r0, #0]
 800a43a:	e7f9      	b.n	800a430 <_calloc_r+0x12>
 800a43c:	462a      	mov	r2, r5
 800a43e:	4621      	mov	r1, r4
 800a440:	f7fc fff5 	bl	800742e <memset>
 800a444:	e7f5      	b.n	800a432 <_calloc_r+0x14>

0800a446 <_realloc_r>:
 800a446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44a:	4680      	mov	r8, r0
 800a44c:	4615      	mov	r5, r2
 800a44e:	460c      	mov	r4, r1
 800a450:	b921      	cbnz	r1, 800a45c <_realloc_r+0x16>
 800a452:	4611      	mov	r1, r2
 800a454:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a458:	f7fe baf2 	b.w	8008a40 <_malloc_r>
 800a45c:	b92a      	cbnz	r2, 800a46a <_realloc_r+0x24>
 800a45e:	f7fd ff43 	bl	80082e8 <_free_r>
 800a462:	2400      	movs	r4, #0
 800a464:	4620      	mov	r0, r4
 800a466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a46a:	f000 f953 	bl	800a714 <_malloc_usable_size_r>
 800a46e:	4285      	cmp	r5, r0
 800a470:	4606      	mov	r6, r0
 800a472:	d802      	bhi.n	800a47a <_realloc_r+0x34>
 800a474:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a478:	d8f4      	bhi.n	800a464 <_realloc_r+0x1e>
 800a47a:	4629      	mov	r1, r5
 800a47c:	4640      	mov	r0, r8
 800a47e:	f7fe fadf 	bl	8008a40 <_malloc_r>
 800a482:	4607      	mov	r7, r0
 800a484:	2800      	cmp	r0, #0
 800a486:	d0ec      	beq.n	800a462 <_realloc_r+0x1c>
 800a488:	42b5      	cmp	r5, r6
 800a48a:	462a      	mov	r2, r5
 800a48c:	4621      	mov	r1, r4
 800a48e:	bf28      	it	cs
 800a490:	4632      	movcs	r2, r6
 800a492:	f7fd f8a2 	bl	80075da <memcpy>
 800a496:	4621      	mov	r1, r4
 800a498:	4640      	mov	r0, r8
 800a49a:	f7fd ff25 	bl	80082e8 <_free_r>
 800a49e:	463c      	mov	r4, r7
 800a4a0:	e7e0      	b.n	800a464 <_realloc_r+0x1e>
	...

0800a4a4 <_strtoul_l.constprop.0>:
 800a4a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4a8:	4686      	mov	lr, r0
 800a4aa:	460d      	mov	r5, r1
 800a4ac:	4e33      	ldr	r6, [pc, #204]	@ (800a57c <_strtoul_l.constprop.0+0xd8>)
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4b4:	5d37      	ldrb	r7, [r6, r4]
 800a4b6:	f017 0708 	ands.w	r7, r7, #8
 800a4ba:	d1f8      	bne.n	800a4ae <_strtoul_l.constprop.0+0xa>
 800a4bc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a4be:	d12f      	bne.n	800a520 <_strtoul_l.constprop.0+0x7c>
 800a4c0:	2701      	movs	r7, #1
 800a4c2:	782c      	ldrb	r4, [r5, #0]
 800a4c4:	1c85      	adds	r5, r0, #2
 800a4c6:	f033 0010 	bics.w	r0, r3, #16
 800a4ca:	d109      	bne.n	800a4e0 <_strtoul_l.constprop.0+0x3c>
 800a4cc:	2c30      	cmp	r4, #48	@ 0x30
 800a4ce:	d12c      	bne.n	800a52a <_strtoul_l.constprop.0+0x86>
 800a4d0:	7828      	ldrb	r0, [r5, #0]
 800a4d2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a4d6:	2858      	cmp	r0, #88	@ 0x58
 800a4d8:	d127      	bne.n	800a52a <_strtoul_l.constprop.0+0x86>
 800a4da:	2310      	movs	r3, #16
 800a4dc:	786c      	ldrb	r4, [r5, #1]
 800a4de:	3502      	adds	r5, #2
 800a4e0:	f04f 38ff 	mov.w	r8, #4294967295
 800a4e4:	fbb8 f8f3 	udiv	r8, r8, r3
 800a4e8:	2600      	movs	r6, #0
 800a4ea:	fb03 f908 	mul.w	r9, r3, r8
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	ea6f 0909 	mvn.w	r9, r9
 800a4f4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a4f8:	f1bc 0f09 	cmp.w	ip, #9
 800a4fc:	d81c      	bhi.n	800a538 <_strtoul_l.constprop.0+0x94>
 800a4fe:	4664      	mov	r4, ip
 800a500:	42a3      	cmp	r3, r4
 800a502:	dd2a      	ble.n	800a55a <_strtoul_l.constprop.0+0xb6>
 800a504:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a508:	d007      	beq.n	800a51a <_strtoul_l.constprop.0+0x76>
 800a50a:	4580      	cmp	r8, r0
 800a50c:	d322      	bcc.n	800a554 <_strtoul_l.constprop.0+0xb0>
 800a50e:	d101      	bne.n	800a514 <_strtoul_l.constprop.0+0x70>
 800a510:	45a1      	cmp	r9, r4
 800a512:	db1f      	blt.n	800a554 <_strtoul_l.constprop.0+0xb0>
 800a514:	2601      	movs	r6, #1
 800a516:	fb00 4003 	mla	r0, r0, r3, r4
 800a51a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a51e:	e7e9      	b.n	800a4f4 <_strtoul_l.constprop.0+0x50>
 800a520:	2c2b      	cmp	r4, #43	@ 0x2b
 800a522:	bf04      	itt	eq
 800a524:	782c      	ldrbeq	r4, [r5, #0]
 800a526:	1c85      	addeq	r5, r0, #2
 800a528:	e7cd      	b.n	800a4c6 <_strtoul_l.constprop.0+0x22>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1d8      	bne.n	800a4e0 <_strtoul_l.constprop.0+0x3c>
 800a52e:	2c30      	cmp	r4, #48	@ 0x30
 800a530:	bf0c      	ite	eq
 800a532:	2308      	moveq	r3, #8
 800a534:	230a      	movne	r3, #10
 800a536:	e7d3      	b.n	800a4e0 <_strtoul_l.constprop.0+0x3c>
 800a538:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a53c:	f1bc 0f19 	cmp.w	ip, #25
 800a540:	d801      	bhi.n	800a546 <_strtoul_l.constprop.0+0xa2>
 800a542:	3c37      	subs	r4, #55	@ 0x37
 800a544:	e7dc      	b.n	800a500 <_strtoul_l.constprop.0+0x5c>
 800a546:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a54a:	f1bc 0f19 	cmp.w	ip, #25
 800a54e:	d804      	bhi.n	800a55a <_strtoul_l.constprop.0+0xb6>
 800a550:	3c57      	subs	r4, #87	@ 0x57
 800a552:	e7d5      	b.n	800a500 <_strtoul_l.constprop.0+0x5c>
 800a554:	f04f 36ff 	mov.w	r6, #4294967295
 800a558:	e7df      	b.n	800a51a <_strtoul_l.constprop.0+0x76>
 800a55a:	1c73      	adds	r3, r6, #1
 800a55c:	d106      	bne.n	800a56c <_strtoul_l.constprop.0+0xc8>
 800a55e:	2322      	movs	r3, #34	@ 0x22
 800a560:	4630      	mov	r0, r6
 800a562:	f8ce 3000 	str.w	r3, [lr]
 800a566:	b932      	cbnz	r2, 800a576 <_strtoul_l.constprop.0+0xd2>
 800a568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a56c:	b107      	cbz	r7, 800a570 <_strtoul_l.constprop.0+0xcc>
 800a56e:	4240      	negs	r0, r0
 800a570:	2a00      	cmp	r2, #0
 800a572:	d0f9      	beq.n	800a568 <_strtoul_l.constprop.0+0xc4>
 800a574:	b106      	cbz	r6, 800a578 <_strtoul_l.constprop.0+0xd4>
 800a576:	1e69      	subs	r1, r5, #1
 800a578:	6011      	str	r1, [r2, #0]
 800a57a:	e7f5      	b.n	800a568 <_strtoul_l.constprop.0+0xc4>
 800a57c:	0800ad19 	.word	0x0800ad19

0800a580 <_strtoul_r>:
 800a580:	f7ff bf90 	b.w	800a4a4 <_strtoul_l.constprop.0>

0800a584 <__swhatbuf_r>:
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	460c      	mov	r4, r1
 800a588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a58c:	4615      	mov	r5, r2
 800a58e:	2900      	cmp	r1, #0
 800a590:	461e      	mov	r6, r3
 800a592:	b096      	sub	sp, #88	@ 0x58
 800a594:	da0c      	bge.n	800a5b0 <__swhatbuf_r+0x2c>
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	2100      	movs	r1, #0
 800a59a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a59e:	bf14      	ite	ne
 800a5a0:	2340      	movne	r3, #64	@ 0x40
 800a5a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	6031      	str	r1, [r6, #0]
 800a5aa:	602b      	str	r3, [r5, #0]
 800a5ac:	b016      	add	sp, #88	@ 0x58
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}
 800a5b0:	466a      	mov	r2, sp
 800a5b2:	f000 f879 	bl	800a6a8 <_fstat_r>
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	dbed      	blt.n	800a596 <__swhatbuf_r+0x12>
 800a5ba:	9901      	ldr	r1, [sp, #4]
 800a5bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a5c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a5c4:	4259      	negs	r1, r3
 800a5c6:	4159      	adcs	r1, r3
 800a5c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5cc:	e7eb      	b.n	800a5a6 <__swhatbuf_r+0x22>

0800a5ce <__smakebuf_r>:
 800a5ce:	898b      	ldrh	r3, [r1, #12]
 800a5d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5d2:	079d      	lsls	r5, r3, #30
 800a5d4:	4606      	mov	r6, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	d507      	bpl.n	800a5ea <__smakebuf_r+0x1c>
 800a5da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a5de:	6023      	str	r3, [r4, #0]
 800a5e0:	6123      	str	r3, [r4, #16]
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	6163      	str	r3, [r4, #20]
 800a5e6:	b003      	add	sp, #12
 800a5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ea:	466a      	mov	r2, sp
 800a5ec:	ab01      	add	r3, sp, #4
 800a5ee:	f7ff ffc9 	bl	800a584 <__swhatbuf_r>
 800a5f2:	9f00      	ldr	r7, [sp, #0]
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	4639      	mov	r1, r7
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f7fe fa21 	bl	8008a40 <_malloc_r>
 800a5fe:	b948      	cbnz	r0, 800a614 <__smakebuf_r+0x46>
 800a600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a604:	059a      	lsls	r2, r3, #22
 800a606:	d4ee      	bmi.n	800a5e6 <__smakebuf_r+0x18>
 800a608:	f023 0303 	bic.w	r3, r3, #3
 800a60c:	f043 0302 	orr.w	r3, r3, #2
 800a610:	81a3      	strh	r3, [r4, #12]
 800a612:	e7e2      	b.n	800a5da <__smakebuf_r+0xc>
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a61a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a61e:	81a3      	strh	r3, [r4, #12]
 800a620:	9b01      	ldr	r3, [sp, #4]
 800a622:	6020      	str	r0, [r4, #0]
 800a624:	b15b      	cbz	r3, 800a63e <__smakebuf_r+0x70>
 800a626:	4630      	mov	r0, r6
 800a628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a62c:	f000 f84e 	bl	800a6cc <_isatty_r>
 800a630:	b128      	cbz	r0, 800a63e <__smakebuf_r+0x70>
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	f023 0303 	bic.w	r3, r3, #3
 800a638:	f043 0301 	orr.w	r3, r3, #1
 800a63c:	81a3      	strh	r3, [r4, #12]
 800a63e:	89a3      	ldrh	r3, [r4, #12]
 800a640:	431d      	orrs	r5, r3
 800a642:	81a5      	strh	r5, [r4, #12]
 800a644:	e7cf      	b.n	800a5e6 <__smakebuf_r+0x18>

0800a646 <_raise_r>:
 800a646:	291f      	cmp	r1, #31
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4605      	mov	r5, r0
 800a64c:	460c      	mov	r4, r1
 800a64e:	d904      	bls.n	800a65a <_raise_r+0x14>
 800a650:	2316      	movs	r3, #22
 800a652:	6003      	str	r3, [r0, #0]
 800a654:	f04f 30ff 	mov.w	r0, #4294967295
 800a658:	bd38      	pop	{r3, r4, r5, pc}
 800a65a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a65c:	b112      	cbz	r2, 800a664 <_raise_r+0x1e>
 800a65e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a662:	b94b      	cbnz	r3, 800a678 <_raise_r+0x32>
 800a664:	4628      	mov	r0, r5
 800a666:	f000 f853 	bl	800a710 <_getpid_r>
 800a66a:	4622      	mov	r2, r4
 800a66c:	4601      	mov	r1, r0
 800a66e:	4628      	mov	r0, r5
 800a670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a674:	f000 b83a 	b.w	800a6ec <_kill_r>
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d00a      	beq.n	800a692 <_raise_r+0x4c>
 800a67c:	1c59      	adds	r1, r3, #1
 800a67e:	d103      	bne.n	800a688 <_raise_r+0x42>
 800a680:	2316      	movs	r3, #22
 800a682:	6003      	str	r3, [r0, #0]
 800a684:	2001      	movs	r0, #1
 800a686:	e7e7      	b.n	800a658 <_raise_r+0x12>
 800a688:	2100      	movs	r1, #0
 800a68a:	4620      	mov	r0, r4
 800a68c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a690:	4798      	blx	r3
 800a692:	2000      	movs	r0, #0
 800a694:	e7e0      	b.n	800a658 <_raise_r+0x12>
	...

0800a698 <raise>:
 800a698:	4b02      	ldr	r3, [pc, #8]	@ (800a6a4 <raise+0xc>)
 800a69a:	4601      	mov	r1, r0
 800a69c:	6818      	ldr	r0, [r3, #0]
 800a69e:	f7ff bfd2 	b.w	800a646 <_raise_r>
 800a6a2:	bf00      	nop
 800a6a4:	200002a8 	.word	0x200002a8

0800a6a8 <_fstat_r>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	4d06      	ldr	r5, [pc, #24]	@ (800a6c8 <_fstat_r+0x20>)
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	4608      	mov	r0, r1
 800a6b2:	4611      	mov	r1, r2
 800a6b4:	602b      	str	r3, [r5, #0]
 800a6b6:	f7f8 fa09 	bl	8002acc <_fstat>
 800a6ba:	1c43      	adds	r3, r0, #1
 800a6bc:	d102      	bne.n	800a6c4 <_fstat_r+0x1c>
 800a6be:	682b      	ldr	r3, [r5, #0]
 800a6c0:	b103      	cbz	r3, 800a6c4 <_fstat_r+0x1c>
 800a6c2:	6023      	str	r3, [r4, #0]
 800a6c4:	bd38      	pop	{r3, r4, r5, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000b94 	.word	0x20000b94

0800a6cc <_isatty_r>:
 800a6cc:	b538      	push	{r3, r4, r5, lr}
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	4d05      	ldr	r5, [pc, #20]	@ (800a6e8 <_isatty_r+0x1c>)
 800a6d2:	4604      	mov	r4, r0
 800a6d4:	4608      	mov	r0, r1
 800a6d6:	602b      	str	r3, [r5, #0]
 800a6d8:	f7f8 fa07 	bl	8002aea <_isatty>
 800a6dc:	1c43      	adds	r3, r0, #1
 800a6de:	d102      	bne.n	800a6e6 <_isatty_r+0x1a>
 800a6e0:	682b      	ldr	r3, [r5, #0]
 800a6e2:	b103      	cbz	r3, 800a6e6 <_isatty_r+0x1a>
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	bd38      	pop	{r3, r4, r5, pc}
 800a6e8:	20000b94 	.word	0x20000b94

0800a6ec <_kill_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	4d06      	ldr	r5, [pc, #24]	@ (800a70c <_kill_r+0x20>)
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	4608      	mov	r0, r1
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	602b      	str	r3, [r5, #0]
 800a6fa:	f7f8 f988 	bl	8002a0e <_kill>
 800a6fe:	1c43      	adds	r3, r0, #1
 800a700:	d102      	bne.n	800a708 <_kill_r+0x1c>
 800a702:	682b      	ldr	r3, [r5, #0]
 800a704:	b103      	cbz	r3, 800a708 <_kill_r+0x1c>
 800a706:	6023      	str	r3, [r4, #0]
 800a708:	bd38      	pop	{r3, r4, r5, pc}
 800a70a:	bf00      	nop
 800a70c:	20000b94 	.word	0x20000b94

0800a710 <_getpid_r>:
 800a710:	f7f8 b976 	b.w	8002a00 <_getpid>

0800a714 <_malloc_usable_size_r>:
 800a714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a718:	1f18      	subs	r0, r3, #4
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bfbc      	itt	lt
 800a71e:	580b      	ldrlt	r3, [r1, r0]
 800a720:	18c0      	addlt	r0, r0, r3
 800a722:	4770      	bx	lr

0800a724 <_init>:
 800a724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a726:	bf00      	nop
 800a728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a72a:	bc08      	pop	{r3}
 800a72c:	469e      	mov	lr, r3
 800a72e:	4770      	bx	lr

0800a730 <_fini>:
 800a730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a732:	bf00      	nop
 800a734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a736:	bc08      	pop	{r3}
 800a738:	469e      	mov	lr, r3
 800a73a:	4770      	bx	lr
